
rfio_transceiver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d79c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c00  0800d85c  0800d85c  0000e85c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e45c  0800e45c  00010100  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800e45c  0800e45c  0000f45c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e464  0800e464  00010100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e464  0800e464  0000f464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e468  0800e468  0000f468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000100  20000000  0800e46c  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012ec  20000100  0800e56c  00010100  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  200013ec  0800e56c  000103ec  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00010100  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d22b  00000000  00000000  00010128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005aaa  00000000  00000000  0002d353  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001928  00000000  00000000  00032e00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001332  00000000  00000000  00034728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c646  00000000  00000000  00035a5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026e01  00000000  00000000  000520a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d0a4  00000000  00000000  00078ea1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00105f45  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006770  00000000  00000000  00105f88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  0010c6f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000100 	.word	0x20000100
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800d844 	.word	0x0800d844

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000104 	.word	0x20000104
 8000104:	0800d844 	.word	0x0800d844

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <strlen>:
 800011c:	2300      	movs	r3, #0
 800011e:	5cc2      	ldrb	r2, [r0, r3]
 8000120:	3301      	adds	r3, #1
 8000122:	2a00      	cmp	r2, #0
 8000124:	d1fb      	bne.n	800011e <strlen+0x2>
 8000126:	1e58      	subs	r0, r3, #1
 8000128:	4770      	bx	lr
	...

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	@ 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	@ 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_ldivmod>:
 800042c:	2b00      	cmp	r3, #0
 800042e:	d115      	bne.n	800045c <__aeabi_ldivmod+0x30>
 8000430:	2a00      	cmp	r2, #0
 8000432:	d113      	bne.n	800045c <__aeabi_ldivmod+0x30>
 8000434:	2900      	cmp	r1, #0
 8000436:	db06      	blt.n	8000446 <__aeabi_ldivmod+0x1a>
 8000438:	dc01      	bgt.n	800043e <__aeabi_ldivmod+0x12>
 800043a:	2800      	cmp	r0, #0
 800043c:	d006      	beq.n	800044c <__aeabi_ldivmod+0x20>
 800043e:	2000      	movs	r0, #0
 8000440:	43c0      	mvns	r0, r0
 8000442:	0841      	lsrs	r1, r0, #1
 8000444:	e002      	b.n	800044c <__aeabi_ldivmod+0x20>
 8000446:	2180      	movs	r1, #128	@ 0x80
 8000448:	0609      	lsls	r1, r1, #24
 800044a:	2000      	movs	r0, #0
 800044c:	b407      	push	{r0, r1, r2}
 800044e:	4802      	ldr	r0, [pc, #8]	@ (8000458 <__aeabi_ldivmod+0x2c>)
 8000450:	a101      	add	r1, pc, #4	@ (adr r1, 8000458 <__aeabi_ldivmod+0x2c>)
 8000452:	1840      	adds	r0, r0, r1
 8000454:	9002      	str	r0, [sp, #8]
 8000456:	bd03      	pop	{r0, r1, pc}
 8000458:	ffffffd1 	.word	0xffffffd1
 800045c:	b403      	push	{r0, r1}
 800045e:	4668      	mov	r0, sp
 8000460:	b501      	push	{r0, lr}
 8000462:	9802      	ldr	r0, [sp, #8]
 8000464:	f000 f938 	bl	80006d8 <__gnu_ldivmod_helper>
 8000468:	9b01      	ldr	r3, [sp, #4]
 800046a:	469e      	mov	lr, r3
 800046c:	b002      	add	sp, #8
 800046e:	bc0c      	pop	{r2, r3}
 8000470:	4770      	bx	lr
 8000472:	46c0      	nop			@ (mov r8, r8)

08000474 <__aeabi_uldivmod>:
 8000474:	2b00      	cmp	r3, #0
 8000476:	d111      	bne.n	800049c <__aeabi_uldivmod+0x28>
 8000478:	2a00      	cmp	r2, #0
 800047a:	d10f      	bne.n	800049c <__aeabi_uldivmod+0x28>
 800047c:	2900      	cmp	r1, #0
 800047e:	d100      	bne.n	8000482 <__aeabi_uldivmod+0xe>
 8000480:	2800      	cmp	r0, #0
 8000482:	d002      	beq.n	800048a <__aeabi_uldivmod+0x16>
 8000484:	2100      	movs	r1, #0
 8000486:	43c9      	mvns	r1, r1
 8000488:	0008      	movs	r0, r1
 800048a:	b407      	push	{r0, r1, r2}
 800048c:	4802      	ldr	r0, [pc, #8]	@ (8000498 <__aeabi_uldivmod+0x24>)
 800048e:	a102      	add	r1, pc, #8	@ (adr r1, 8000498 <__aeabi_uldivmod+0x24>)
 8000490:	1840      	adds	r0, r0, r1
 8000492:	9002      	str	r0, [sp, #8]
 8000494:	bd03      	pop	{r0, r1, pc}
 8000496:	46c0      	nop			@ (mov r8, r8)
 8000498:	ffffff91 	.word	0xffffff91
 800049c:	b403      	push	{r0, r1}
 800049e:	4668      	mov	r0, sp
 80004a0:	b501      	push	{r0, lr}
 80004a2:	9802      	ldr	r0, [sp, #8]
 80004a4:	f000 f84c 	bl	8000540 <__udivmoddi4>
 80004a8:	9b01      	ldr	r3, [sp, #4]
 80004aa:	469e      	mov	lr, r3
 80004ac:	b002      	add	sp, #8
 80004ae:	bc0c      	pop	{r2, r3}
 80004b0:	4770      	bx	lr
 80004b2:	46c0      	nop			@ (mov r8, r8)

080004b4 <__aeabi_lmul>:
 80004b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004b6:	46ce      	mov	lr, r9
 80004b8:	4699      	mov	r9, r3
 80004ba:	0c03      	lsrs	r3, r0, #16
 80004bc:	469c      	mov	ip, r3
 80004be:	0413      	lsls	r3, r2, #16
 80004c0:	4647      	mov	r7, r8
 80004c2:	0c1b      	lsrs	r3, r3, #16
 80004c4:	001d      	movs	r5, r3
 80004c6:	000e      	movs	r6, r1
 80004c8:	4661      	mov	r1, ip
 80004ca:	0404      	lsls	r4, r0, #16
 80004cc:	0c24      	lsrs	r4, r4, #16
 80004ce:	b580      	push	{r7, lr}
 80004d0:	0007      	movs	r7, r0
 80004d2:	0c10      	lsrs	r0, r2, #16
 80004d4:	434b      	muls	r3, r1
 80004d6:	4365      	muls	r5, r4
 80004d8:	4341      	muls	r1, r0
 80004da:	4360      	muls	r0, r4
 80004dc:	0c2c      	lsrs	r4, r5, #16
 80004de:	18c0      	adds	r0, r0, r3
 80004e0:	1824      	adds	r4, r4, r0
 80004e2:	468c      	mov	ip, r1
 80004e4:	42a3      	cmp	r3, r4
 80004e6:	d903      	bls.n	80004f0 <__aeabi_lmul+0x3c>
 80004e8:	2380      	movs	r3, #128	@ 0x80
 80004ea:	025b      	lsls	r3, r3, #9
 80004ec:	4698      	mov	r8, r3
 80004ee:	44c4      	add	ip, r8
 80004f0:	4649      	mov	r1, r9
 80004f2:	4379      	muls	r1, r7
 80004f4:	4356      	muls	r6, r2
 80004f6:	0c23      	lsrs	r3, r4, #16
 80004f8:	042d      	lsls	r5, r5, #16
 80004fa:	0c2d      	lsrs	r5, r5, #16
 80004fc:	1989      	adds	r1, r1, r6
 80004fe:	4463      	add	r3, ip
 8000500:	0424      	lsls	r4, r4, #16
 8000502:	1960      	adds	r0, r4, r5
 8000504:	18c9      	adds	r1, r1, r3
 8000506:	bcc0      	pop	{r6, r7}
 8000508:	46b9      	mov	r9, r7
 800050a:	46b0      	mov	r8, r6
 800050c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800050e:	46c0      	nop			@ (mov r8, r8)

08000510 <__aeabi_f2uiz>:
 8000510:	219e      	movs	r1, #158	@ 0x9e
 8000512:	b510      	push	{r4, lr}
 8000514:	05c9      	lsls	r1, r1, #23
 8000516:	1c04      	adds	r4, r0, #0
 8000518:	f000 fe66 	bl	80011e8 <__aeabi_fcmpge>
 800051c:	2800      	cmp	r0, #0
 800051e:	d103      	bne.n	8000528 <__aeabi_f2uiz+0x18>
 8000520:	1c20      	adds	r0, r4, #0
 8000522:	f000 fdcb 	bl	80010bc <__aeabi_f2iz>
 8000526:	bd10      	pop	{r4, pc}
 8000528:	219e      	movs	r1, #158	@ 0x9e
 800052a:	1c20      	adds	r0, r4, #0
 800052c:	05c9      	lsls	r1, r1, #23
 800052e:	f000 fb61 	bl	8000bf4 <__aeabi_fsub>
 8000532:	f000 fdc3 	bl	80010bc <__aeabi_f2iz>
 8000536:	2380      	movs	r3, #128	@ 0x80
 8000538:	061b      	lsls	r3, r3, #24
 800053a:	469c      	mov	ip, r3
 800053c:	4460      	add	r0, ip
 800053e:	e7f2      	b.n	8000526 <__aeabi_f2uiz+0x16>

08000540 <__udivmoddi4>:
 8000540:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000542:	4657      	mov	r7, sl
 8000544:	464e      	mov	r6, r9
 8000546:	4645      	mov	r5, r8
 8000548:	46de      	mov	lr, fp
 800054a:	b5e0      	push	{r5, r6, r7, lr}
 800054c:	0004      	movs	r4, r0
 800054e:	000d      	movs	r5, r1
 8000550:	4692      	mov	sl, r2
 8000552:	4699      	mov	r9, r3
 8000554:	b083      	sub	sp, #12
 8000556:	428b      	cmp	r3, r1
 8000558:	d830      	bhi.n	80005bc <__udivmoddi4+0x7c>
 800055a:	d02d      	beq.n	80005b8 <__udivmoddi4+0x78>
 800055c:	4649      	mov	r1, r9
 800055e:	4650      	mov	r0, sl
 8000560:	f000 fe6a 	bl	8001238 <__clzdi2>
 8000564:	0029      	movs	r1, r5
 8000566:	0006      	movs	r6, r0
 8000568:	0020      	movs	r0, r4
 800056a:	f000 fe65 	bl	8001238 <__clzdi2>
 800056e:	1a33      	subs	r3, r6, r0
 8000570:	4698      	mov	r8, r3
 8000572:	3b20      	subs	r3, #32
 8000574:	d434      	bmi.n	80005e0 <__udivmoddi4+0xa0>
 8000576:	469b      	mov	fp, r3
 8000578:	4653      	mov	r3, sl
 800057a:	465a      	mov	r2, fp
 800057c:	4093      	lsls	r3, r2
 800057e:	4642      	mov	r2, r8
 8000580:	001f      	movs	r7, r3
 8000582:	4653      	mov	r3, sl
 8000584:	4093      	lsls	r3, r2
 8000586:	001e      	movs	r6, r3
 8000588:	42af      	cmp	r7, r5
 800058a:	d83b      	bhi.n	8000604 <__udivmoddi4+0xc4>
 800058c:	42af      	cmp	r7, r5
 800058e:	d100      	bne.n	8000592 <__udivmoddi4+0x52>
 8000590:	e079      	b.n	8000686 <__udivmoddi4+0x146>
 8000592:	465b      	mov	r3, fp
 8000594:	1ba4      	subs	r4, r4, r6
 8000596:	41bd      	sbcs	r5, r7
 8000598:	2b00      	cmp	r3, #0
 800059a:	da00      	bge.n	800059e <__udivmoddi4+0x5e>
 800059c:	e076      	b.n	800068c <__udivmoddi4+0x14c>
 800059e:	2200      	movs	r2, #0
 80005a0:	2300      	movs	r3, #0
 80005a2:	9200      	str	r2, [sp, #0]
 80005a4:	9301      	str	r3, [sp, #4]
 80005a6:	2301      	movs	r3, #1
 80005a8:	465a      	mov	r2, fp
 80005aa:	4093      	lsls	r3, r2
 80005ac:	9301      	str	r3, [sp, #4]
 80005ae:	2301      	movs	r3, #1
 80005b0:	4642      	mov	r2, r8
 80005b2:	4093      	lsls	r3, r2
 80005b4:	9300      	str	r3, [sp, #0]
 80005b6:	e029      	b.n	800060c <__udivmoddi4+0xcc>
 80005b8:	4282      	cmp	r2, r0
 80005ba:	d9cf      	bls.n	800055c <__udivmoddi4+0x1c>
 80005bc:	2200      	movs	r2, #0
 80005be:	2300      	movs	r3, #0
 80005c0:	9200      	str	r2, [sp, #0]
 80005c2:	9301      	str	r3, [sp, #4]
 80005c4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <__udivmoddi4+0x8e>
 80005ca:	601c      	str	r4, [r3, #0]
 80005cc:	605d      	str	r5, [r3, #4]
 80005ce:	9800      	ldr	r0, [sp, #0]
 80005d0:	9901      	ldr	r1, [sp, #4]
 80005d2:	b003      	add	sp, #12
 80005d4:	bcf0      	pop	{r4, r5, r6, r7}
 80005d6:	46bb      	mov	fp, r7
 80005d8:	46b2      	mov	sl, r6
 80005da:	46a9      	mov	r9, r5
 80005dc:	46a0      	mov	r8, r4
 80005de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005e0:	4642      	mov	r2, r8
 80005e2:	469b      	mov	fp, r3
 80005e4:	2320      	movs	r3, #32
 80005e6:	1a9b      	subs	r3, r3, r2
 80005e8:	4652      	mov	r2, sl
 80005ea:	40da      	lsrs	r2, r3
 80005ec:	4641      	mov	r1, r8
 80005ee:	0013      	movs	r3, r2
 80005f0:	464a      	mov	r2, r9
 80005f2:	408a      	lsls	r2, r1
 80005f4:	0017      	movs	r7, r2
 80005f6:	4642      	mov	r2, r8
 80005f8:	431f      	orrs	r7, r3
 80005fa:	4653      	mov	r3, sl
 80005fc:	4093      	lsls	r3, r2
 80005fe:	001e      	movs	r6, r3
 8000600:	42af      	cmp	r7, r5
 8000602:	d9c3      	bls.n	800058c <__udivmoddi4+0x4c>
 8000604:	2200      	movs	r2, #0
 8000606:	2300      	movs	r3, #0
 8000608:	9200      	str	r2, [sp, #0]
 800060a:	9301      	str	r3, [sp, #4]
 800060c:	4643      	mov	r3, r8
 800060e:	2b00      	cmp	r3, #0
 8000610:	d0d8      	beq.n	80005c4 <__udivmoddi4+0x84>
 8000612:	07fb      	lsls	r3, r7, #31
 8000614:	0872      	lsrs	r2, r6, #1
 8000616:	431a      	orrs	r2, r3
 8000618:	4646      	mov	r6, r8
 800061a:	087b      	lsrs	r3, r7, #1
 800061c:	e00e      	b.n	800063c <__udivmoddi4+0xfc>
 800061e:	42ab      	cmp	r3, r5
 8000620:	d101      	bne.n	8000626 <__udivmoddi4+0xe6>
 8000622:	42a2      	cmp	r2, r4
 8000624:	d80c      	bhi.n	8000640 <__udivmoddi4+0x100>
 8000626:	1aa4      	subs	r4, r4, r2
 8000628:	419d      	sbcs	r5, r3
 800062a:	2001      	movs	r0, #1
 800062c:	1924      	adds	r4, r4, r4
 800062e:	416d      	adcs	r5, r5
 8000630:	2100      	movs	r1, #0
 8000632:	3e01      	subs	r6, #1
 8000634:	1824      	adds	r4, r4, r0
 8000636:	414d      	adcs	r5, r1
 8000638:	2e00      	cmp	r6, #0
 800063a:	d006      	beq.n	800064a <__udivmoddi4+0x10a>
 800063c:	42ab      	cmp	r3, r5
 800063e:	d9ee      	bls.n	800061e <__udivmoddi4+0xde>
 8000640:	3e01      	subs	r6, #1
 8000642:	1924      	adds	r4, r4, r4
 8000644:	416d      	adcs	r5, r5
 8000646:	2e00      	cmp	r6, #0
 8000648:	d1f8      	bne.n	800063c <__udivmoddi4+0xfc>
 800064a:	9800      	ldr	r0, [sp, #0]
 800064c:	9901      	ldr	r1, [sp, #4]
 800064e:	465b      	mov	r3, fp
 8000650:	1900      	adds	r0, r0, r4
 8000652:	4169      	adcs	r1, r5
 8000654:	2b00      	cmp	r3, #0
 8000656:	db24      	blt.n	80006a2 <__udivmoddi4+0x162>
 8000658:	002b      	movs	r3, r5
 800065a:	465a      	mov	r2, fp
 800065c:	4644      	mov	r4, r8
 800065e:	40d3      	lsrs	r3, r2
 8000660:	002a      	movs	r2, r5
 8000662:	40e2      	lsrs	r2, r4
 8000664:	001c      	movs	r4, r3
 8000666:	465b      	mov	r3, fp
 8000668:	0015      	movs	r5, r2
 800066a:	2b00      	cmp	r3, #0
 800066c:	db2a      	blt.n	80006c4 <__udivmoddi4+0x184>
 800066e:	0026      	movs	r6, r4
 8000670:	409e      	lsls	r6, r3
 8000672:	0033      	movs	r3, r6
 8000674:	0026      	movs	r6, r4
 8000676:	4647      	mov	r7, r8
 8000678:	40be      	lsls	r6, r7
 800067a:	0032      	movs	r2, r6
 800067c:	1a80      	subs	r0, r0, r2
 800067e:	4199      	sbcs	r1, r3
 8000680:	9000      	str	r0, [sp, #0]
 8000682:	9101      	str	r1, [sp, #4]
 8000684:	e79e      	b.n	80005c4 <__udivmoddi4+0x84>
 8000686:	42a3      	cmp	r3, r4
 8000688:	d8bc      	bhi.n	8000604 <__udivmoddi4+0xc4>
 800068a:	e782      	b.n	8000592 <__udivmoddi4+0x52>
 800068c:	4642      	mov	r2, r8
 800068e:	2320      	movs	r3, #32
 8000690:	2100      	movs	r1, #0
 8000692:	1a9b      	subs	r3, r3, r2
 8000694:	2200      	movs	r2, #0
 8000696:	9100      	str	r1, [sp, #0]
 8000698:	9201      	str	r2, [sp, #4]
 800069a:	2201      	movs	r2, #1
 800069c:	40da      	lsrs	r2, r3
 800069e:	9201      	str	r2, [sp, #4]
 80006a0:	e785      	b.n	80005ae <__udivmoddi4+0x6e>
 80006a2:	4642      	mov	r2, r8
 80006a4:	2320      	movs	r3, #32
 80006a6:	1a9b      	subs	r3, r3, r2
 80006a8:	002a      	movs	r2, r5
 80006aa:	4646      	mov	r6, r8
 80006ac:	409a      	lsls	r2, r3
 80006ae:	0023      	movs	r3, r4
 80006b0:	40f3      	lsrs	r3, r6
 80006b2:	4644      	mov	r4, r8
 80006b4:	4313      	orrs	r3, r2
 80006b6:	002a      	movs	r2, r5
 80006b8:	40e2      	lsrs	r2, r4
 80006ba:	001c      	movs	r4, r3
 80006bc:	465b      	mov	r3, fp
 80006be:	0015      	movs	r5, r2
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	dad4      	bge.n	800066e <__udivmoddi4+0x12e>
 80006c4:	4642      	mov	r2, r8
 80006c6:	002f      	movs	r7, r5
 80006c8:	2320      	movs	r3, #32
 80006ca:	0026      	movs	r6, r4
 80006cc:	4097      	lsls	r7, r2
 80006ce:	1a9b      	subs	r3, r3, r2
 80006d0:	40de      	lsrs	r6, r3
 80006d2:	003b      	movs	r3, r7
 80006d4:	4333      	orrs	r3, r6
 80006d6:	e7cd      	b.n	8000674 <__udivmoddi4+0x134>

080006d8 <__gnu_ldivmod_helper>:
 80006d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006da:	46ce      	mov	lr, r9
 80006dc:	4647      	mov	r7, r8
 80006de:	b580      	push	{r7, lr}
 80006e0:	4691      	mov	r9, r2
 80006e2:	4698      	mov	r8, r3
 80006e4:	0004      	movs	r4, r0
 80006e6:	000d      	movs	r5, r1
 80006e8:	f000 fdb2 	bl	8001250 <__divdi3>
 80006ec:	0007      	movs	r7, r0
 80006ee:	000e      	movs	r6, r1
 80006f0:	0002      	movs	r2, r0
 80006f2:	000b      	movs	r3, r1
 80006f4:	4648      	mov	r0, r9
 80006f6:	4641      	mov	r1, r8
 80006f8:	f7ff fedc 	bl	80004b4 <__aeabi_lmul>
 80006fc:	1a24      	subs	r4, r4, r0
 80006fe:	418d      	sbcs	r5, r1
 8000700:	9b08      	ldr	r3, [sp, #32]
 8000702:	0038      	movs	r0, r7
 8000704:	0031      	movs	r1, r6
 8000706:	601c      	str	r4, [r3, #0]
 8000708:	605d      	str	r5, [r3, #4]
 800070a:	bcc0      	pop	{r6, r7}
 800070c:	46b9      	mov	r9, r7
 800070e:	46b0      	mov	r8, r6
 8000710:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000712:	46c0      	nop			@ (mov r8, r8)

08000714 <__aeabi_fdiv>:
 8000714:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000716:	4646      	mov	r6, r8
 8000718:	464f      	mov	r7, r9
 800071a:	46d6      	mov	lr, sl
 800071c:	0245      	lsls	r5, r0, #9
 800071e:	b5c0      	push	{r6, r7, lr}
 8000720:	0fc3      	lsrs	r3, r0, #31
 8000722:	0047      	lsls	r7, r0, #1
 8000724:	4698      	mov	r8, r3
 8000726:	1c0e      	adds	r6, r1, #0
 8000728:	0a6d      	lsrs	r5, r5, #9
 800072a:	0e3f      	lsrs	r7, r7, #24
 800072c:	d05b      	beq.n	80007e6 <__aeabi_fdiv+0xd2>
 800072e:	2fff      	cmp	r7, #255	@ 0xff
 8000730:	d021      	beq.n	8000776 <__aeabi_fdiv+0x62>
 8000732:	2380      	movs	r3, #128	@ 0x80
 8000734:	00ed      	lsls	r5, r5, #3
 8000736:	04db      	lsls	r3, r3, #19
 8000738:	431d      	orrs	r5, r3
 800073a:	2300      	movs	r3, #0
 800073c:	4699      	mov	r9, r3
 800073e:	469a      	mov	sl, r3
 8000740:	3f7f      	subs	r7, #127	@ 0x7f
 8000742:	0274      	lsls	r4, r6, #9
 8000744:	0073      	lsls	r3, r6, #1
 8000746:	0a64      	lsrs	r4, r4, #9
 8000748:	0e1b      	lsrs	r3, r3, #24
 800074a:	0ff6      	lsrs	r6, r6, #31
 800074c:	2b00      	cmp	r3, #0
 800074e:	d020      	beq.n	8000792 <__aeabi_fdiv+0x7e>
 8000750:	2bff      	cmp	r3, #255	@ 0xff
 8000752:	d043      	beq.n	80007dc <__aeabi_fdiv+0xc8>
 8000754:	2280      	movs	r2, #128	@ 0x80
 8000756:	2000      	movs	r0, #0
 8000758:	00e4      	lsls	r4, r4, #3
 800075a:	04d2      	lsls	r2, r2, #19
 800075c:	4314      	orrs	r4, r2
 800075e:	3b7f      	subs	r3, #127	@ 0x7f
 8000760:	4642      	mov	r2, r8
 8000762:	1aff      	subs	r7, r7, r3
 8000764:	464b      	mov	r3, r9
 8000766:	4072      	eors	r2, r6
 8000768:	2b0f      	cmp	r3, #15
 800076a:	d900      	bls.n	800076e <__aeabi_fdiv+0x5a>
 800076c:	e09d      	b.n	80008aa <__aeabi_fdiv+0x196>
 800076e:	4971      	ldr	r1, [pc, #452]	@ (8000934 <__aeabi_fdiv+0x220>)
 8000770:	009b      	lsls	r3, r3, #2
 8000772:	58cb      	ldr	r3, [r1, r3]
 8000774:	469f      	mov	pc, r3
 8000776:	2d00      	cmp	r5, #0
 8000778:	d15a      	bne.n	8000830 <__aeabi_fdiv+0x11c>
 800077a:	2308      	movs	r3, #8
 800077c:	4699      	mov	r9, r3
 800077e:	3b06      	subs	r3, #6
 8000780:	0274      	lsls	r4, r6, #9
 8000782:	469a      	mov	sl, r3
 8000784:	0073      	lsls	r3, r6, #1
 8000786:	27ff      	movs	r7, #255	@ 0xff
 8000788:	0a64      	lsrs	r4, r4, #9
 800078a:	0e1b      	lsrs	r3, r3, #24
 800078c:	0ff6      	lsrs	r6, r6, #31
 800078e:	2b00      	cmp	r3, #0
 8000790:	d1de      	bne.n	8000750 <__aeabi_fdiv+0x3c>
 8000792:	2c00      	cmp	r4, #0
 8000794:	d13b      	bne.n	800080e <__aeabi_fdiv+0xfa>
 8000796:	2301      	movs	r3, #1
 8000798:	4642      	mov	r2, r8
 800079a:	4649      	mov	r1, r9
 800079c:	4072      	eors	r2, r6
 800079e:	4319      	orrs	r1, r3
 80007a0:	290e      	cmp	r1, #14
 80007a2:	d818      	bhi.n	80007d6 <__aeabi_fdiv+0xc2>
 80007a4:	4864      	ldr	r0, [pc, #400]	@ (8000938 <__aeabi_fdiv+0x224>)
 80007a6:	0089      	lsls	r1, r1, #2
 80007a8:	5841      	ldr	r1, [r0, r1]
 80007aa:	468f      	mov	pc, r1
 80007ac:	4653      	mov	r3, sl
 80007ae:	2b02      	cmp	r3, #2
 80007b0:	d100      	bne.n	80007b4 <__aeabi_fdiv+0xa0>
 80007b2:	e0b8      	b.n	8000926 <__aeabi_fdiv+0x212>
 80007b4:	2b03      	cmp	r3, #3
 80007b6:	d06e      	beq.n	8000896 <__aeabi_fdiv+0x182>
 80007b8:	4642      	mov	r2, r8
 80007ba:	002c      	movs	r4, r5
 80007bc:	2b01      	cmp	r3, #1
 80007be:	d140      	bne.n	8000842 <__aeabi_fdiv+0x12e>
 80007c0:	2000      	movs	r0, #0
 80007c2:	2400      	movs	r4, #0
 80007c4:	05c0      	lsls	r0, r0, #23
 80007c6:	4320      	orrs	r0, r4
 80007c8:	07d2      	lsls	r2, r2, #31
 80007ca:	4310      	orrs	r0, r2
 80007cc:	bce0      	pop	{r5, r6, r7}
 80007ce:	46ba      	mov	sl, r7
 80007d0:	46b1      	mov	r9, r6
 80007d2:	46a8      	mov	r8, r5
 80007d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007d6:	20ff      	movs	r0, #255	@ 0xff
 80007d8:	2400      	movs	r4, #0
 80007da:	e7f3      	b.n	80007c4 <__aeabi_fdiv+0xb0>
 80007dc:	2c00      	cmp	r4, #0
 80007de:	d120      	bne.n	8000822 <__aeabi_fdiv+0x10e>
 80007e0:	2302      	movs	r3, #2
 80007e2:	3fff      	subs	r7, #255	@ 0xff
 80007e4:	e7d8      	b.n	8000798 <__aeabi_fdiv+0x84>
 80007e6:	2d00      	cmp	r5, #0
 80007e8:	d105      	bne.n	80007f6 <__aeabi_fdiv+0xe2>
 80007ea:	2304      	movs	r3, #4
 80007ec:	4699      	mov	r9, r3
 80007ee:	3b03      	subs	r3, #3
 80007f0:	2700      	movs	r7, #0
 80007f2:	469a      	mov	sl, r3
 80007f4:	e7a5      	b.n	8000742 <__aeabi_fdiv+0x2e>
 80007f6:	0028      	movs	r0, r5
 80007f8:	f000 fd00 	bl	80011fc <__clzsi2>
 80007fc:	2776      	movs	r7, #118	@ 0x76
 80007fe:	1f43      	subs	r3, r0, #5
 8000800:	409d      	lsls	r5, r3
 8000802:	2300      	movs	r3, #0
 8000804:	427f      	negs	r7, r7
 8000806:	4699      	mov	r9, r3
 8000808:	469a      	mov	sl, r3
 800080a:	1a3f      	subs	r7, r7, r0
 800080c:	e799      	b.n	8000742 <__aeabi_fdiv+0x2e>
 800080e:	0020      	movs	r0, r4
 8000810:	f000 fcf4 	bl	80011fc <__clzsi2>
 8000814:	1f43      	subs	r3, r0, #5
 8000816:	409c      	lsls	r4, r3
 8000818:	2376      	movs	r3, #118	@ 0x76
 800081a:	425b      	negs	r3, r3
 800081c:	1a1b      	subs	r3, r3, r0
 800081e:	2000      	movs	r0, #0
 8000820:	e79e      	b.n	8000760 <__aeabi_fdiv+0x4c>
 8000822:	2303      	movs	r3, #3
 8000824:	464a      	mov	r2, r9
 8000826:	431a      	orrs	r2, r3
 8000828:	4691      	mov	r9, r2
 800082a:	2003      	movs	r0, #3
 800082c:	33fc      	adds	r3, #252	@ 0xfc
 800082e:	e797      	b.n	8000760 <__aeabi_fdiv+0x4c>
 8000830:	230c      	movs	r3, #12
 8000832:	4699      	mov	r9, r3
 8000834:	3b09      	subs	r3, #9
 8000836:	27ff      	movs	r7, #255	@ 0xff
 8000838:	469a      	mov	sl, r3
 800083a:	e782      	b.n	8000742 <__aeabi_fdiv+0x2e>
 800083c:	2803      	cmp	r0, #3
 800083e:	d02c      	beq.n	800089a <__aeabi_fdiv+0x186>
 8000840:	0032      	movs	r2, r6
 8000842:	0038      	movs	r0, r7
 8000844:	307f      	adds	r0, #127	@ 0x7f
 8000846:	2800      	cmp	r0, #0
 8000848:	dd47      	ble.n	80008da <__aeabi_fdiv+0x1c6>
 800084a:	0763      	lsls	r3, r4, #29
 800084c:	d004      	beq.n	8000858 <__aeabi_fdiv+0x144>
 800084e:	230f      	movs	r3, #15
 8000850:	4023      	ands	r3, r4
 8000852:	2b04      	cmp	r3, #4
 8000854:	d000      	beq.n	8000858 <__aeabi_fdiv+0x144>
 8000856:	3404      	adds	r4, #4
 8000858:	0123      	lsls	r3, r4, #4
 800085a:	d503      	bpl.n	8000864 <__aeabi_fdiv+0x150>
 800085c:	0038      	movs	r0, r7
 800085e:	4b37      	ldr	r3, [pc, #220]	@ (800093c <__aeabi_fdiv+0x228>)
 8000860:	3080      	adds	r0, #128	@ 0x80
 8000862:	401c      	ands	r4, r3
 8000864:	28fe      	cmp	r0, #254	@ 0xfe
 8000866:	dcb6      	bgt.n	80007d6 <__aeabi_fdiv+0xc2>
 8000868:	01a4      	lsls	r4, r4, #6
 800086a:	0a64      	lsrs	r4, r4, #9
 800086c:	b2c0      	uxtb	r0, r0
 800086e:	e7a9      	b.n	80007c4 <__aeabi_fdiv+0xb0>
 8000870:	2480      	movs	r4, #128	@ 0x80
 8000872:	2200      	movs	r2, #0
 8000874:	20ff      	movs	r0, #255	@ 0xff
 8000876:	03e4      	lsls	r4, r4, #15
 8000878:	e7a4      	b.n	80007c4 <__aeabi_fdiv+0xb0>
 800087a:	2380      	movs	r3, #128	@ 0x80
 800087c:	03db      	lsls	r3, r3, #15
 800087e:	421d      	tst	r5, r3
 8000880:	d001      	beq.n	8000886 <__aeabi_fdiv+0x172>
 8000882:	421c      	tst	r4, r3
 8000884:	d00b      	beq.n	800089e <__aeabi_fdiv+0x18a>
 8000886:	2480      	movs	r4, #128	@ 0x80
 8000888:	03e4      	lsls	r4, r4, #15
 800088a:	432c      	orrs	r4, r5
 800088c:	0264      	lsls	r4, r4, #9
 800088e:	4642      	mov	r2, r8
 8000890:	20ff      	movs	r0, #255	@ 0xff
 8000892:	0a64      	lsrs	r4, r4, #9
 8000894:	e796      	b.n	80007c4 <__aeabi_fdiv+0xb0>
 8000896:	4646      	mov	r6, r8
 8000898:	002c      	movs	r4, r5
 800089a:	2380      	movs	r3, #128	@ 0x80
 800089c:	03db      	lsls	r3, r3, #15
 800089e:	431c      	orrs	r4, r3
 80008a0:	0264      	lsls	r4, r4, #9
 80008a2:	0032      	movs	r2, r6
 80008a4:	20ff      	movs	r0, #255	@ 0xff
 80008a6:	0a64      	lsrs	r4, r4, #9
 80008a8:	e78c      	b.n	80007c4 <__aeabi_fdiv+0xb0>
 80008aa:	016d      	lsls	r5, r5, #5
 80008ac:	0160      	lsls	r0, r4, #5
 80008ae:	4285      	cmp	r5, r0
 80008b0:	d22d      	bcs.n	800090e <__aeabi_fdiv+0x1fa>
 80008b2:	231b      	movs	r3, #27
 80008b4:	2400      	movs	r4, #0
 80008b6:	3f01      	subs	r7, #1
 80008b8:	2601      	movs	r6, #1
 80008ba:	0029      	movs	r1, r5
 80008bc:	0064      	lsls	r4, r4, #1
 80008be:	006d      	lsls	r5, r5, #1
 80008c0:	2900      	cmp	r1, #0
 80008c2:	db01      	blt.n	80008c8 <__aeabi_fdiv+0x1b4>
 80008c4:	4285      	cmp	r5, r0
 80008c6:	d301      	bcc.n	80008cc <__aeabi_fdiv+0x1b8>
 80008c8:	1a2d      	subs	r5, r5, r0
 80008ca:	4334      	orrs	r4, r6
 80008cc:	3b01      	subs	r3, #1
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d1f3      	bne.n	80008ba <__aeabi_fdiv+0x1a6>
 80008d2:	1e6b      	subs	r3, r5, #1
 80008d4:	419d      	sbcs	r5, r3
 80008d6:	432c      	orrs	r4, r5
 80008d8:	e7b3      	b.n	8000842 <__aeabi_fdiv+0x12e>
 80008da:	2301      	movs	r3, #1
 80008dc:	1a1b      	subs	r3, r3, r0
 80008de:	2b1b      	cmp	r3, #27
 80008e0:	dd00      	ble.n	80008e4 <__aeabi_fdiv+0x1d0>
 80008e2:	e76d      	b.n	80007c0 <__aeabi_fdiv+0xac>
 80008e4:	0021      	movs	r1, r4
 80008e6:	379e      	adds	r7, #158	@ 0x9e
 80008e8:	40d9      	lsrs	r1, r3
 80008ea:	40bc      	lsls	r4, r7
 80008ec:	000b      	movs	r3, r1
 80008ee:	1e61      	subs	r1, r4, #1
 80008f0:	418c      	sbcs	r4, r1
 80008f2:	4323      	orrs	r3, r4
 80008f4:	0759      	lsls	r1, r3, #29
 80008f6:	d004      	beq.n	8000902 <__aeabi_fdiv+0x1ee>
 80008f8:	210f      	movs	r1, #15
 80008fa:	4019      	ands	r1, r3
 80008fc:	2904      	cmp	r1, #4
 80008fe:	d000      	beq.n	8000902 <__aeabi_fdiv+0x1ee>
 8000900:	3304      	adds	r3, #4
 8000902:	0159      	lsls	r1, r3, #5
 8000904:	d413      	bmi.n	800092e <__aeabi_fdiv+0x21a>
 8000906:	019b      	lsls	r3, r3, #6
 8000908:	2000      	movs	r0, #0
 800090a:	0a5c      	lsrs	r4, r3, #9
 800090c:	e75a      	b.n	80007c4 <__aeabi_fdiv+0xb0>
 800090e:	231a      	movs	r3, #26
 8000910:	2401      	movs	r4, #1
 8000912:	1a2d      	subs	r5, r5, r0
 8000914:	e7d0      	b.n	80008b8 <__aeabi_fdiv+0x1a4>
 8000916:	1e98      	subs	r0, r3, #2
 8000918:	4243      	negs	r3, r0
 800091a:	4158      	adcs	r0, r3
 800091c:	4240      	negs	r0, r0
 800091e:	0032      	movs	r2, r6
 8000920:	2400      	movs	r4, #0
 8000922:	b2c0      	uxtb	r0, r0
 8000924:	e74e      	b.n	80007c4 <__aeabi_fdiv+0xb0>
 8000926:	4642      	mov	r2, r8
 8000928:	20ff      	movs	r0, #255	@ 0xff
 800092a:	2400      	movs	r4, #0
 800092c:	e74a      	b.n	80007c4 <__aeabi_fdiv+0xb0>
 800092e:	2001      	movs	r0, #1
 8000930:	2400      	movs	r4, #0
 8000932:	e747      	b.n	80007c4 <__aeabi_fdiv+0xb0>
 8000934:	0800e098 	.word	0x0800e098
 8000938:	0800e0d8 	.word	0x0800e0d8
 800093c:	f7ffffff 	.word	0xf7ffffff

08000940 <__aeabi_fmul>:
 8000940:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000942:	464f      	mov	r7, r9
 8000944:	4646      	mov	r6, r8
 8000946:	46d6      	mov	lr, sl
 8000948:	0044      	lsls	r4, r0, #1
 800094a:	b5c0      	push	{r6, r7, lr}
 800094c:	0246      	lsls	r6, r0, #9
 800094e:	1c0f      	adds	r7, r1, #0
 8000950:	0a76      	lsrs	r6, r6, #9
 8000952:	0e24      	lsrs	r4, r4, #24
 8000954:	0fc5      	lsrs	r5, r0, #31
 8000956:	2c00      	cmp	r4, #0
 8000958:	d100      	bne.n	800095c <__aeabi_fmul+0x1c>
 800095a:	e0da      	b.n	8000b12 <__aeabi_fmul+0x1d2>
 800095c:	2cff      	cmp	r4, #255	@ 0xff
 800095e:	d074      	beq.n	8000a4a <__aeabi_fmul+0x10a>
 8000960:	2380      	movs	r3, #128	@ 0x80
 8000962:	00f6      	lsls	r6, r6, #3
 8000964:	04db      	lsls	r3, r3, #19
 8000966:	431e      	orrs	r6, r3
 8000968:	2300      	movs	r3, #0
 800096a:	4699      	mov	r9, r3
 800096c:	469a      	mov	sl, r3
 800096e:	3c7f      	subs	r4, #127	@ 0x7f
 8000970:	027b      	lsls	r3, r7, #9
 8000972:	0a5b      	lsrs	r3, r3, #9
 8000974:	4698      	mov	r8, r3
 8000976:	007b      	lsls	r3, r7, #1
 8000978:	0e1b      	lsrs	r3, r3, #24
 800097a:	0fff      	lsrs	r7, r7, #31
 800097c:	2b00      	cmp	r3, #0
 800097e:	d074      	beq.n	8000a6a <__aeabi_fmul+0x12a>
 8000980:	2bff      	cmp	r3, #255	@ 0xff
 8000982:	d100      	bne.n	8000986 <__aeabi_fmul+0x46>
 8000984:	e08e      	b.n	8000aa4 <__aeabi_fmul+0x164>
 8000986:	4642      	mov	r2, r8
 8000988:	2180      	movs	r1, #128	@ 0x80
 800098a:	00d2      	lsls	r2, r2, #3
 800098c:	04c9      	lsls	r1, r1, #19
 800098e:	4311      	orrs	r1, r2
 8000990:	3b7f      	subs	r3, #127	@ 0x7f
 8000992:	002a      	movs	r2, r5
 8000994:	18e4      	adds	r4, r4, r3
 8000996:	464b      	mov	r3, r9
 8000998:	407a      	eors	r2, r7
 800099a:	4688      	mov	r8, r1
 800099c:	b2d2      	uxtb	r2, r2
 800099e:	2b0a      	cmp	r3, #10
 80009a0:	dc75      	bgt.n	8000a8e <__aeabi_fmul+0x14e>
 80009a2:	464b      	mov	r3, r9
 80009a4:	2000      	movs	r0, #0
 80009a6:	2b02      	cmp	r3, #2
 80009a8:	dd0f      	ble.n	80009ca <__aeabi_fmul+0x8a>
 80009aa:	4649      	mov	r1, r9
 80009ac:	2301      	movs	r3, #1
 80009ae:	408b      	lsls	r3, r1
 80009b0:	21a6      	movs	r1, #166	@ 0xa6
 80009b2:	00c9      	lsls	r1, r1, #3
 80009b4:	420b      	tst	r3, r1
 80009b6:	d169      	bne.n	8000a8c <__aeabi_fmul+0x14c>
 80009b8:	2190      	movs	r1, #144	@ 0x90
 80009ba:	0089      	lsls	r1, r1, #2
 80009bc:	420b      	tst	r3, r1
 80009be:	d000      	beq.n	80009c2 <__aeabi_fmul+0x82>
 80009c0:	e100      	b.n	8000bc4 <__aeabi_fmul+0x284>
 80009c2:	2188      	movs	r1, #136	@ 0x88
 80009c4:	4219      	tst	r1, r3
 80009c6:	d000      	beq.n	80009ca <__aeabi_fmul+0x8a>
 80009c8:	e0f5      	b.n	8000bb6 <__aeabi_fmul+0x276>
 80009ca:	4641      	mov	r1, r8
 80009cc:	0409      	lsls	r1, r1, #16
 80009ce:	0c09      	lsrs	r1, r1, #16
 80009d0:	4643      	mov	r3, r8
 80009d2:	0008      	movs	r0, r1
 80009d4:	0c35      	lsrs	r5, r6, #16
 80009d6:	0436      	lsls	r6, r6, #16
 80009d8:	0c1b      	lsrs	r3, r3, #16
 80009da:	0c36      	lsrs	r6, r6, #16
 80009dc:	4370      	muls	r0, r6
 80009de:	4369      	muls	r1, r5
 80009e0:	435e      	muls	r6, r3
 80009e2:	435d      	muls	r5, r3
 80009e4:	1876      	adds	r6, r6, r1
 80009e6:	0c03      	lsrs	r3, r0, #16
 80009e8:	199b      	adds	r3, r3, r6
 80009ea:	4299      	cmp	r1, r3
 80009ec:	d903      	bls.n	80009f6 <__aeabi_fmul+0xb6>
 80009ee:	2180      	movs	r1, #128	@ 0x80
 80009f0:	0249      	lsls	r1, r1, #9
 80009f2:	468c      	mov	ip, r1
 80009f4:	4465      	add	r5, ip
 80009f6:	0400      	lsls	r0, r0, #16
 80009f8:	0419      	lsls	r1, r3, #16
 80009fa:	0c00      	lsrs	r0, r0, #16
 80009fc:	1809      	adds	r1, r1, r0
 80009fe:	018e      	lsls	r6, r1, #6
 8000a00:	1e70      	subs	r0, r6, #1
 8000a02:	4186      	sbcs	r6, r0
 8000a04:	0c1b      	lsrs	r3, r3, #16
 8000a06:	0e89      	lsrs	r1, r1, #26
 8000a08:	195b      	adds	r3, r3, r5
 8000a0a:	430e      	orrs	r6, r1
 8000a0c:	019b      	lsls	r3, r3, #6
 8000a0e:	431e      	orrs	r6, r3
 8000a10:	011b      	lsls	r3, r3, #4
 8000a12:	d46c      	bmi.n	8000aee <__aeabi_fmul+0x1ae>
 8000a14:	0023      	movs	r3, r4
 8000a16:	337f      	adds	r3, #127	@ 0x7f
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	dc00      	bgt.n	8000a1e <__aeabi_fmul+0xde>
 8000a1c:	e0b1      	b.n	8000b82 <__aeabi_fmul+0x242>
 8000a1e:	0015      	movs	r5, r2
 8000a20:	0771      	lsls	r1, r6, #29
 8000a22:	d00b      	beq.n	8000a3c <__aeabi_fmul+0xfc>
 8000a24:	200f      	movs	r0, #15
 8000a26:	0021      	movs	r1, r4
 8000a28:	4030      	ands	r0, r6
 8000a2a:	2804      	cmp	r0, #4
 8000a2c:	d006      	beq.n	8000a3c <__aeabi_fmul+0xfc>
 8000a2e:	3604      	adds	r6, #4
 8000a30:	0132      	lsls	r2, r6, #4
 8000a32:	d503      	bpl.n	8000a3c <__aeabi_fmul+0xfc>
 8000a34:	4b6e      	ldr	r3, [pc, #440]	@ (8000bf0 <__aeabi_fmul+0x2b0>)
 8000a36:	401e      	ands	r6, r3
 8000a38:	000b      	movs	r3, r1
 8000a3a:	3380      	adds	r3, #128	@ 0x80
 8000a3c:	2bfe      	cmp	r3, #254	@ 0xfe
 8000a3e:	dd00      	ble.n	8000a42 <__aeabi_fmul+0x102>
 8000a40:	e0bd      	b.n	8000bbe <__aeabi_fmul+0x27e>
 8000a42:	01b2      	lsls	r2, r6, #6
 8000a44:	0a52      	lsrs	r2, r2, #9
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	e048      	b.n	8000adc <__aeabi_fmul+0x19c>
 8000a4a:	2e00      	cmp	r6, #0
 8000a4c:	d000      	beq.n	8000a50 <__aeabi_fmul+0x110>
 8000a4e:	e092      	b.n	8000b76 <__aeabi_fmul+0x236>
 8000a50:	2308      	movs	r3, #8
 8000a52:	4699      	mov	r9, r3
 8000a54:	3b06      	subs	r3, #6
 8000a56:	469a      	mov	sl, r3
 8000a58:	027b      	lsls	r3, r7, #9
 8000a5a:	0a5b      	lsrs	r3, r3, #9
 8000a5c:	4698      	mov	r8, r3
 8000a5e:	007b      	lsls	r3, r7, #1
 8000a60:	24ff      	movs	r4, #255	@ 0xff
 8000a62:	0e1b      	lsrs	r3, r3, #24
 8000a64:	0fff      	lsrs	r7, r7, #31
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d18a      	bne.n	8000980 <__aeabi_fmul+0x40>
 8000a6a:	4642      	mov	r2, r8
 8000a6c:	2a00      	cmp	r2, #0
 8000a6e:	d164      	bne.n	8000b3a <__aeabi_fmul+0x1fa>
 8000a70:	4649      	mov	r1, r9
 8000a72:	3201      	adds	r2, #1
 8000a74:	4311      	orrs	r1, r2
 8000a76:	4689      	mov	r9, r1
 8000a78:	290a      	cmp	r1, #10
 8000a7a:	dc08      	bgt.n	8000a8e <__aeabi_fmul+0x14e>
 8000a7c:	407d      	eors	r5, r7
 8000a7e:	2001      	movs	r0, #1
 8000a80:	b2ea      	uxtb	r2, r5
 8000a82:	2902      	cmp	r1, #2
 8000a84:	dc91      	bgt.n	80009aa <__aeabi_fmul+0x6a>
 8000a86:	0015      	movs	r5, r2
 8000a88:	2200      	movs	r2, #0
 8000a8a:	e027      	b.n	8000adc <__aeabi_fmul+0x19c>
 8000a8c:	0015      	movs	r5, r2
 8000a8e:	4653      	mov	r3, sl
 8000a90:	2b02      	cmp	r3, #2
 8000a92:	d100      	bne.n	8000a96 <__aeabi_fmul+0x156>
 8000a94:	e093      	b.n	8000bbe <__aeabi_fmul+0x27e>
 8000a96:	2b03      	cmp	r3, #3
 8000a98:	d01a      	beq.n	8000ad0 <__aeabi_fmul+0x190>
 8000a9a:	2b01      	cmp	r3, #1
 8000a9c:	d12c      	bne.n	8000af8 <__aeabi_fmul+0x1b8>
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	e01b      	b.n	8000adc <__aeabi_fmul+0x19c>
 8000aa4:	4643      	mov	r3, r8
 8000aa6:	34ff      	adds	r4, #255	@ 0xff
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d055      	beq.n	8000b58 <__aeabi_fmul+0x218>
 8000aac:	2103      	movs	r1, #3
 8000aae:	464b      	mov	r3, r9
 8000ab0:	430b      	orrs	r3, r1
 8000ab2:	0019      	movs	r1, r3
 8000ab4:	2b0a      	cmp	r3, #10
 8000ab6:	dc00      	bgt.n	8000aba <__aeabi_fmul+0x17a>
 8000ab8:	e092      	b.n	8000be0 <__aeabi_fmul+0x2a0>
 8000aba:	2b0f      	cmp	r3, #15
 8000abc:	d000      	beq.n	8000ac0 <__aeabi_fmul+0x180>
 8000abe:	e08c      	b.n	8000bda <__aeabi_fmul+0x29a>
 8000ac0:	2280      	movs	r2, #128	@ 0x80
 8000ac2:	03d2      	lsls	r2, r2, #15
 8000ac4:	4216      	tst	r6, r2
 8000ac6:	d003      	beq.n	8000ad0 <__aeabi_fmul+0x190>
 8000ac8:	4643      	mov	r3, r8
 8000aca:	4213      	tst	r3, r2
 8000acc:	d100      	bne.n	8000ad0 <__aeabi_fmul+0x190>
 8000ace:	e07d      	b.n	8000bcc <__aeabi_fmul+0x28c>
 8000ad0:	2280      	movs	r2, #128	@ 0x80
 8000ad2:	03d2      	lsls	r2, r2, #15
 8000ad4:	4332      	orrs	r2, r6
 8000ad6:	0252      	lsls	r2, r2, #9
 8000ad8:	0a52      	lsrs	r2, r2, #9
 8000ada:	23ff      	movs	r3, #255	@ 0xff
 8000adc:	05d8      	lsls	r0, r3, #23
 8000ade:	07ed      	lsls	r5, r5, #31
 8000ae0:	4310      	orrs	r0, r2
 8000ae2:	4328      	orrs	r0, r5
 8000ae4:	bce0      	pop	{r5, r6, r7}
 8000ae6:	46ba      	mov	sl, r7
 8000ae8:	46b1      	mov	r9, r6
 8000aea:	46a8      	mov	r8, r5
 8000aec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000aee:	2301      	movs	r3, #1
 8000af0:	0015      	movs	r5, r2
 8000af2:	0871      	lsrs	r1, r6, #1
 8000af4:	401e      	ands	r6, r3
 8000af6:	430e      	orrs	r6, r1
 8000af8:	0023      	movs	r3, r4
 8000afa:	3380      	adds	r3, #128	@ 0x80
 8000afc:	1c61      	adds	r1, r4, #1
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	dd41      	ble.n	8000b86 <__aeabi_fmul+0x246>
 8000b02:	0772      	lsls	r2, r6, #29
 8000b04:	d094      	beq.n	8000a30 <__aeabi_fmul+0xf0>
 8000b06:	220f      	movs	r2, #15
 8000b08:	4032      	ands	r2, r6
 8000b0a:	2a04      	cmp	r2, #4
 8000b0c:	d000      	beq.n	8000b10 <__aeabi_fmul+0x1d0>
 8000b0e:	e78e      	b.n	8000a2e <__aeabi_fmul+0xee>
 8000b10:	e78e      	b.n	8000a30 <__aeabi_fmul+0xf0>
 8000b12:	2e00      	cmp	r6, #0
 8000b14:	d105      	bne.n	8000b22 <__aeabi_fmul+0x1e2>
 8000b16:	2304      	movs	r3, #4
 8000b18:	4699      	mov	r9, r3
 8000b1a:	3b03      	subs	r3, #3
 8000b1c:	2400      	movs	r4, #0
 8000b1e:	469a      	mov	sl, r3
 8000b20:	e726      	b.n	8000970 <__aeabi_fmul+0x30>
 8000b22:	0030      	movs	r0, r6
 8000b24:	f000 fb6a 	bl	80011fc <__clzsi2>
 8000b28:	2476      	movs	r4, #118	@ 0x76
 8000b2a:	1f43      	subs	r3, r0, #5
 8000b2c:	409e      	lsls	r6, r3
 8000b2e:	2300      	movs	r3, #0
 8000b30:	4264      	negs	r4, r4
 8000b32:	4699      	mov	r9, r3
 8000b34:	469a      	mov	sl, r3
 8000b36:	1a24      	subs	r4, r4, r0
 8000b38:	e71a      	b.n	8000970 <__aeabi_fmul+0x30>
 8000b3a:	4640      	mov	r0, r8
 8000b3c:	f000 fb5e 	bl	80011fc <__clzsi2>
 8000b40:	464b      	mov	r3, r9
 8000b42:	1a24      	subs	r4, r4, r0
 8000b44:	3c76      	subs	r4, #118	@ 0x76
 8000b46:	2b0a      	cmp	r3, #10
 8000b48:	dca1      	bgt.n	8000a8e <__aeabi_fmul+0x14e>
 8000b4a:	4643      	mov	r3, r8
 8000b4c:	3805      	subs	r0, #5
 8000b4e:	4083      	lsls	r3, r0
 8000b50:	407d      	eors	r5, r7
 8000b52:	4698      	mov	r8, r3
 8000b54:	b2ea      	uxtb	r2, r5
 8000b56:	e724      	b.n	80009a2 <__aeabi_fmul+0x62>
 8000b58:	464a      	mov	r2, r9
 8000b5a:	3302      	adds	r3, #2
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	002a      	movs	r2, r5
 8000b60:	407a      	eors	r2, r7
 8000b62:	b2d2      	uxtb	r2, r2
 8000b64:	2b0a      	cmp	r3, #10
 8000b66:	dc92      	bgt.n	8000a8e <__aeabi_fmul+0x14e>
 8000b68:	4649      	mov	r1, r9
 8000b6a:	0015      	movs	r5, r2
 8000b6c:	2900      	cmp	r1, #0
 8000b6e:	d026      	beq.n	8000bbe <__aeabi_fmul+0x27e>
 8000b70:	4699      	mov	r9, r3
 8000b72:	2002      	movs	r0, #2
 8000b74:	e719      	b.n	80009aa <__aeabi_fmul+0x6a>
 8000b76:	230c      	movs	r3, #12
 8000b78:	4699      	mov	r9, r3
 8000b7a:	3b09      	subs	r3, #9
 8000b7c:	24ff      	movs	r4, #255	@ 0xff
 8000b7e:	469a      	mov	sl, r3
 8000b80:	e6f6      	b.n	8000970 <__aeabi_fmul+0x30>
 8000b82:	0015      	movs	r5, r2
 8000b84:	0021      	movs	r1, r4
 8000b86:	2201      	movs	r2, #1
 8000b88:	1ad3      	subs	r3, r2, r3
 8000b8a:	2b1b      	cmp	r3, #27
 8000b8c:	dd00      	ble.n	8000b90 <__aeabi_fmul+0x250>
 8000b8e:	e786      	b.n	8000a9e <__aeabi_fmul+0x15e>
 8000b90:	319e      	adds	r1, #158	@ 0x9e
 8000b92:	0032      	movs	r2, r6
 8000b94:	408e      	lsls	r6, r1
 8000b96:	40da      	lsrs	r2, r3
 8000b98:	1e73      	subs	r3, r6, #1
 8000b9a:	419e      	sbcs	r6, r3
 8000b9c:	4332      	orrs	r2, r6
 8000b9e:	0753      	lsls	r3, r2, #29
 8000ba0:	d004      	beq.n	8000bac <__aeabi_fmul+0x26c>
 8000ba2:	230f      	movs	r3, #15
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	2b04      	cmp	r3, #4
 8000ba8:	d000      	beq.n	8000bac <__aeabi_fmul+0x26c>
 8000baa:	3204      	adds	r2, #4
 8000bac:	0153      	lsls	r3, r2, #5
 8000bae:	d510      	bpl.n	8000bd2 <__aeabi_fmul+0x292>
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	e792      	b.n	8000adc <__aeabi_fmul+0x19c>
 8000bb6:	003d      	movs	r5, r7
 8000bb8:	4646      	mov	r6, r8
 8000bba:	4682      	mov	sl, r0
 8000bbc:	e767      	b.n	8000a8e <__aeabi_fmul+0x14e>
 8000bbe:	23ff      	movs	r3, #255	@ 0xff
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	e78b      	b.n	8000adc <__aeabi_fmul+0x19c>
 8000bc4:	2280      	movs	r2, #128	@ 0x80
 8000bc6:	2500      	movs	r5, #0
 8000bc8:	03d2      	lsls	r2, r2, #15
 8000bca:	e786      	b.n	8000ada <__aeabi_fmul+0x19a>
 8000bcc:	003d      	movs	r5, r7
 8000bce:	431a      	orrs	r2, r3
 8000bd0:	e783      	b.n	8000ada <__aeabi_fmul+0x19a>
 8000bd2:	0192      	lsls	r2, r2, #6
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	0a52      	lsrs	r2, r2, #9
 8000bd8:	e780      	b.n	8000adc <__aeabi_fmul+0x19c>
 8000bda:	003d      	movs	r5, r7
 8000bdc:	4646      	mov	r6, r8
 8000bde:	e777      	b.n	8000ad0 <__aeabi_fmul+0x190>
 8000be0:	002a      	movs	r2, r5
 8000be2:	2301      	movs	r3, #1
 8000be4:	407a      	eors	r2, r7
 8000be6:	408b      	lsls	r3, r1
 8000be8:	2003      	movs	r0, #3
 8000bea:	b2d2      	uxtb	r2, r2
 8000bec:	e6e9      	b.n	80009c2 <__aeabi_fmul+0x82>
 8000bee:	46c0      	nop			@ (mov r8, r8)
 8000bf0:	f7ffffff 	.word	0xf7ffffff

08000bf4 <__aeabi_fsub>:
 8000bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bf6:	4647      	mov	r7, r8
 8000bf8:	46ce      	mov	lr, r9
 8000bfa:	0243      	lsls	r3, r0, #9
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	0a5f      	lsrs	r7, r3, #9
 8000c00:	099b      	lsrs	r3, r3, #6
 8000c02:	0045      	lsls	r5, r0, #1
 8000c04:	004a      	lsls	r2, r1, #1
 8000c06:	469c      	mov	ip, r3
 8000c08:	024b      	lsls	r3, r1, #9
 8000c0a:	0fc4      	lsrs	r4, r0, #31
 8000c0c:	0fce      	lsrs	r6, r1, #31
 8000c0e:	0e2d      	lsrs	r5, r5, #24
 8000c10:	0a58      	lsrs	r0, r3, #9
 8000c12:	0e12      	lsrs	r2, r2, #24
 8000c14:	0999      	lsrs	r1, r3, #6
 8000c16:	2aff      	cmp	r2, #255	@ 0xff
 8000c18:	d06b      	beq.n	8000cf2 <__aeabi_fsub+0xfe>
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	405e      	eors	r6, r3
 8000c1e:	1aab      	subs	r3, r5, r2
 8000c20:	42b4      	cmp	r4, r6
 8000c22:	d04b      	beq.n	8000cbc <__aeabi_fsub+0xc8>
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	dc00      	bgt.n	8000c2a <__aeabi_fsub+0x36>
 8000c28:	e0ff      	b.n	8000e2a <__aeabi_fsub+0x236>
 8000c2a:	2a00      	cmp	r2, #0
 8000c2c:	d100      	bne.n	8000c30 <__aeabi_fsub+0x3c>
 8000c2e:	e088      	b.n	8000d42 <__aeabi_fsub+0x14e>
 8000c30:	2dff      	cmp	r5, #255	@ 0xff
 8000c32:	d100      	bne.n	8000c36 <__aeabi_fsub+0x42>
 8000c34:	e0ef      	b.n	8000e16 <__aeabi_fsub+0x222>
 8000c36:	2280      	movs	r2, #128	@ 0x80
 8000c38:	04d2      	lsls	r2, r2, #19
 8000c3a:	4311      	orrs	r1, r2
 8000c3c:	2001      	movs	r0, #1
 8000c3e:	2b1b      	cmp	r3, #27
 8000c40:	dc08      	bgt.n	8000c54 <__aeabi_fsub+0x60>
 8000c42:	0008      	movs	r0, r1
 8000c44:	2220      	movs	r2, #32
 8000c46:	40d8      	lsrs	r0, r3
 8000c48:	1ad3      	subs	r3, r2, r3
 8000c4a:	4099      	lsls	r1, r3
 8000c4c:	000b      	movs	r3, r1
 8000c4e:	1e5a      	subs	r2, r3, #1
 8000c50:	4193      	sbcs	r3, r2
 8000c52:	4318      	orrs	r0, r3
 8000c54:	4663      	mov	r3, ip
 8000c56:	1a1b      	subs	r3, r3, r0
 8000c58:	469c      	mov	ip, r3
 8000c5a:	4663      	mov	r3, ip
 8000c5c:	015b      	lsls	r3, r3, #5
 8000c5e:	d400      	bmi.n	8000c62 <__aeabi_fsub+0x6e>
 8000c60:	e0cd      	b.n	8000dfe <__aeabi_fsub+0x20a>
 8000c62:	4663      	mov	r3, ip
 8000c64:	019f      	lsls	r7, r3, #6
 8000c66:	09bf      	lsrs	r7, r7, #6
 8000c68:	0038      	movs	r0, r7
 8000c6a:	f000 fac7 	bl	80011fc <__clzsi2>
 8000c6e:	003b      	movs	r3, r7
 8000c70:	3805      	subs	r0, #5
 8000c72:	4083      	lsls	r3, r0
 8000c74:	4285      	cmp	r5, r0
 8000c76:	dc00      	bgt.n	8000c7a <__aeabi_fsub+0x86>
 8000c78:	e0a2      	b.n	8000dc0 <__aeabi_fsub+0x1cc>
 8000c7a:	4ab7      	ldr	r2, [pc, #732]	@ (8000f58 <__aeabi_fsub+0x364>)
 8000c7c:	1a2d      	subs	r5, r5, r0
 8000c7e:	401a      	ands	r2, r3
 8000c80:	4694      	mov	ip, r2
 8000c82:	075a      	lsls	r2, r3, #29
 8000c84:	d100      	bne.n	8000c88 <__aeabi_fsub+0x94>
 8000c86:	e0c3      	b.n	8000e10 <__aeabi_fsub+0x21c>
 8000c88:	220f      	movs	r2, #15
 8000c8a:	4013      	ands	r3, r2
 8000c8c:	2b04      	cmp	r3, #4
 8000c8e:	d100      	bne.n	8000c92 <__aeabi_fsub+0x9e>
 8000c90:	e0be      	b.n	8000e10 <__aeabi_fsub+0x21c>
 8000c92:	2304      	movs	r3, #4
 8000c94:	4698      	mov	r8, r3
 8000c96:	44c4      	add	ip, r8
 8000c98:	4663      	mov	r3, ip
 8000c9a:	015b      	lsls	r3, r3, #5
 8000c9c:	d400      	bmi.n	8000ca0 <__aeabi_fsub+0xac>
 8000c9e:	e0b7      	b.n	8000e10 <__aeabi_fsub+0x21c>
 8000ca0:	1c68      	adds	r0, r5, #1
 8000ca2:	2dfe      	cmp	r5, #254	@ 0xfe
 8000ca4:	d000      	beq.n	8000ca8 <__aeabi_fsub+0xb4>
 8000ca6:	e0a5      	b.n	8000df4 <__aeabi_fsub+0x200>
 8000ca8:	20ff      	movs	r0, #255	@ 0xff
 8000caa:	2200      	movs	r2, #0
 8000cac:	05c0      	lsls	r0, r0, #23
 8000cae:	4310      	orrs	r0, r2
 8000cb0:	07e4      	lsls	r4, r4, #31
 8000cb2:	4320      	orrs	r0, r4
 8000cb4:	bcc0      	pop	{r6, r7}
 8000cb6:	46b9      	mov	r9, r7
 8000cb8:	46b0      	mov	r8, r6
 8000cba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	dc00      	bgt.n	8000cc2 <__aeabi_fsub+0xce>
 8000cc0:	e1eb      	b.n	800109a <__aeabi_fsub+0x4a6>
 8000cc2:	2a00      	cmp	r2, #0
 8000cc4:	d046      	beq.n	8000d54 <__aeabi_fsub+0x160>
 8000cc6:	2dff      	cmp	r5, #255	@ 0xff
 8000cc8:	d100      	bne.n	8000ccc <__aeabi_fsub+0xd8>
 8000cca:	e0a4      	b.n	8000e16 <__aeabi_fsub+0x222>
 8000ccc:	2280      	movs	r2, #128	@ 0x80
 8000cce:	04d2      	lsls	r2, r2, #19
 8000cd0:	4311      	orrs	r1, r2
 8000cd2:	2b1b      	cmp	r3, #27
 8000cd4:	dc00      	bgt.n	8000cd8 <__aeabi_fsub+0xe4>
 8000cd6:	e0fb      	b.n	8000ed0 <__aeabi_fsub+0x2dc>
 8000cd8:	2305      	movs	r3, #5
 8000cda:	4698      	mov	r8, r3
 8000cdc:	002b      	movs	r3, r5
 8000cde:	44c4      	add	ip, r8
 8000ce0:	4662      	mov	r2, ip
 8000ce2:	08d7      	lsrs	r7, r2, #3
 8000ce4:	2bff      	cmp	r3, #255	@ 0xff
 8000ce6:	d100      	bne.n	8000cea <__aeabi_fsub+0xf6>
 8000ce8:	e095      	b.n	8000e16 <__aeabi_fsub+0x222>
 8000cea:	027a      	lsls	r2, r7, #9
 8000cec:	0a52      	lsrs	r2, r2, #9
 8000cee:	b2d8      	uxtb	r0, r3
 8000cf0:	e7dc      	b.n	8000cac <__aeabi_fsub+0xb8>
 8000cf2:	002b      	movs	r3, r5
 8000cf4:	3bff      	subs	r3, #255	@ 0xff
 8000cf6:	4699      	mov	r9, r3
 8000cf8:	2900      	cmp	r1, #0
 8000cfa:	d118      	bne.n	8000d2e <__aeabi_fsub+0x13a>
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	405e      	eors	r6, r3
 8000d00:	42b4      	cmp	r4, r6
 8000d02:	d100      	bne.n	8000d06 <__aeabi_fsub+0x112>
 8000d04:	e0ca      	b.n	8000e9c <__aeabi_fsub+0x2a8>
 8000d06:	464b      	mov	r3, r9
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d02d      	beq.n	8000d68 <__aeabi_fsub+0x174>
 8000d0c:	2d00      	cmp	r5, #0
 8000d0e:	d000      	beq.n	8000d12 <__aeabi_fsub+0x11e>
 8000d10:	e13c      	b.n	8000f8c <__aeabi_fsub+0x398>
 8000d12:	23ff      	movs	r3, #255	@ 0xff
 8000d14:	4664      	mov	r4, ip
 8000d16:	2c00      	cmp	r4, #0
 8000d18:	d100      	bne.n	8000d1c <__aeabi_fsub+0x128>
 8000d1a:	e15f      	b.n	8000fdc <__aeabi_fsub+0x3e8>
 8000d1c:	1e5d      	subs	r5, r3, #1
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d100      	bne.n	8000d24 <__aeabi_fsub+0x130>
 8000d22:	e174      	b.n	800100e <__aeabi_fsub+0x41a>
 8000d24:	0034      	movs	r4, r6
 8000d26:	2bff      	cmp	r3, #255	@ 0xff
 8000d28:	d074      	beq.n	8000e14 <__aeabi_fsub+0x220>
 8000d2a:	002b      	movs	r3, r5
 8000d2c:	e103      	b.n	8000f36 <__aeabi_fsub+0x342>
 8000d2e:	42b4      	cmp	r4, r6
 8000d30:	d100      	bne.n	8000d34 <__aeabi_fsub+0x140>
 8000d32:	e09c      	b.n	8000e6e <__aeabi_fsub+0x27a>
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d017      	beq.n	8000d68 <__aeabi_fsub+0x174>
 8000d38:	2d00      	cmp	r5, #0
 8000d3a:	d0ea      	beq.n	8000d12 <__aeabi_fsub+0x11e>
 8000d3c:	0007      	movs	r7, r0
 8000d3e:	0034      	movs	r4, r6
 8000d40:	e06c      	b.n	8000e1c <__aeabi_fsub+0x228>
 8000d42:	2900      	cmp	r1, #0
 8000d44:	d0cc      	beq.n	8000ce0 <__aeabi_fsub+0xec>
 8000d46:	1e5a      	subs	r2, r3, #1
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d02b      	beq.n	8000da4 <__aeabi_fsub+0x1b0>
 8000d4c:	2bff      	cmp	r3, #255	@ 0xff
 8000d4e:	d062      	beq.n	8000e16 <__aeabi_fsub+0x222>
 8000d50:	0013      	movs	r3, r2
 8000d52:	e773      	b.n	8000c3c <__aeabi_fsub+0x48>
 8000d54:	2900      	cmp	r1, #0
 8000d56:	d0c3      	beq.n	8000ce0 <__aeabi_fsub+0xec>
 8000d58:	1e5a      	subs	r2, r3, #1
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	d100      	bne.n	8000d60 <__aeabi_fsub+0x16c>
 8000d5e:	e11e      	b.n	8000f9e <__aeabi_fsub+0x3aa>
 8000d60:	2bff      	cmp	r3, #255	@ 0xff
 8000d62:	d058      	beq.n	8000e16 <__aeabi_fsub+0x222>
 8000d64:	0013      	movs	r3, r2
 8000d66:	e7b4      	b.n	8000cd2 <__aeabi_fsub+0xde>
 8000d68:	22fe      	movs	r2, #254	@ 0xfe
 8000d6a:	1c6b      	adds	r3, r5, #1
 8000d6c:	421a      	tst	r2, r3
 8000d6e:	d10d      	bne.n	8000d8c <__aeabi_fsub+0x198>
 8000d70:	2d00      	cmp	r5, #0
 8000d72:	d060      	beq.n	8000e36 <__aeabi_fsub+0x242>
 8000d74:	4663      	mov	r3, ip
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d000      	beq.n	8000d7c <__aeabi_fsub+0x188>
 8000d7a:	e120      	b.n	8000fbe <__aeabi_fsub+0x3ca>
 8000d7c:	2900      	cmp	r1, #0
 8000d7e:	d000      	beq.n	8000d82 <__aeabi_fsub+0x18e>
 8000d80:	e128      	b.n	8000fd4 <__aeabi_fsub+0x3e0>
 8000d82:	2280      	movs	r2, #128	@ 0x80
 8000d84:	2400      	movs	r4, #0
 8000d86:	20ff      	movs	r0, #255	@ 0xff
 8000d88:	03d2      	lsls	r2, r2, #15
 8000d8a:	e78f      	b.n	8000cac <__aeabi_fsub+0xb8>
 8000d8c:	4663      	mov	r3, ip
 8000d8e:	1a5f      	subs	r7, r3, r1
 8000d90:	017b      	lsls	r3, r7, #5
 8000d92:	d500      	bpl.n	8000d96 <__aeabi_fsub+0x1a2>
 8000d94:	e0fe      	b.n	8000f94 <__aeabi_fsub+0x3a0>
 8000d96:	2f00      	cmp	r7, #0
 8000d98:	d000      	beq.n	8000d9c <__aeabi_fsub+0x1a8>
 8000d9a:	e765      	b.n	8000c68 <__aeabi_fsub+0x74>
 8000d9c:	2400      	movs	r4, #0
 8000d9e:	2000      	movs	r0, #0
 8000da0:	2200      	movs	r2, #0
 8000da2:	e783      	b.n	8000cac <__aeabi_fsub+0xb8>
 8000da4:	4663      	mov	r3, ip
 8000da6:	1a59      	subs	r1, r3, r1
 8000da8:	014b      	lsls	r3, r1, #5
 8000daa:	d400      	bmi.n	8000dae <__aeabi_fsub+0x1ba>
 8000dac:	e119      	b.n	8000fe2 <__aeabi_fsub+0x3ee>
 8000dae:	018f      	lsls	r7, r1, #6
 8000db0:	09bf      	lsrs	r7, r7, #6
 8000db2:	0038      	movs	r0, r7
 8000db4:	f000 fa22 	bl	80011fc <__clzsi2>
 8000db8:	003b      	movs	r3, r7
 8000dba:	3805      	subs	r0, #5
 8000dbc:	4083      	lsls	r3, r0
 8000dbe:	2501      	movs	r5, #1
 8000dc0:	2220      	movs	r2, #32
 8000dc2:	1b40      	subs	r0, r0, r5
 8000dc4:	3001      	adds	r0, #1
 8000dc6:	1a12      	subs	r2, r2, r0
 8000dc8:	0019      	movs	r1, r3
 8000dca:	4093      	lsls	r3, r2
 8000dcc:	40c1      	lsrs	r1, r0
 8000dce:	1e5a      	subs	r2, r3, #1
 8000dd0:	4193      	sbcs	r3, r2
 8000dd2:	4319      	orrs	r1, r3
 8000dd4:	468c      	mov	ip, r1
 8000dd6:	1e0b      	subs	r3, r1, #0
 8000dd8:	d0e1      	beq.n	8000d9e <__aeabi_fsub+0x1aa>
 8000dda:	075b      	lsls	r3, r3, #29
 8000ddc:	d100      	bne.n	8000de0 <__aeabi_fsub+0x1ec>
 8000dde:	e152      	b.n	8001086 <__aeabi_fsub+0x492>
 8000de0:	230f      	movs	r3, #15
 8000de2:	2500      	movs	r5, #0
 8000de4:	400b      	ands	r3, r1
 8000de6:	2b04      	cmp	r3, #4
 8000de8:	d000      	beq.n	8000dec <__aeabi_fsub+0x1f8>
 8000dea:	e752      	b.n	8000c92 <__aeabi_fsub+0x9e>
 8000dec:	2001      	movs	r0, #1
 8000dee:	014a      	lsls	r2, r1, #5
 8000df0:	d400      	bmi.n	8000df4 <__aeabi_fsub+0x200>
 8000df2:	e092      	b.n	8000f1a <__aeabi_fsub+0x326>
 8000df4:	b2c0      	uxtb	r0, r0
 8000df6:	4663      	mov	r3, ip
 8000df8:	019a      	lsls	r2, r3, #6
 8000dfa:	0a52      	lsrs	r2, r2, #9
 8000dfc:	e756      	b.n	8000cac <__aeabi_fsub+0xb8>
 8000dfe:	4663      	mov	r3, ip
 8000e00:	075b      	lsls	r3, r3, #29
 8000e02:	d005      	beq.n	8000e10 <__aeabi_fsub+0x21c>
 8000e04:	230f      	movs	r3, #15
 8000e06:	4662      	mov	r2, ip
 8000e08:	4013      	ands	r3, r2
 8000e0a:	2b04      	cmp	r3, #4
 8000e0c:	d000      	beq.n	8000e10 <__aeabi_fsub+0x21c>
 8000e0e:	e740      	b.n	8000c92 <__aeabi_fsub+0x9e>
 8000e10:	002b      	movs	r3, r5
 8000e12:	e765      	b.n	8000ce0 <__aeabi_fsub+0xec>
 8000e14:	0007      	movs	r7, r0
 8000e16:	2f00      	cmp	r7, #0
 8000e18:	d100      	bne.n	8000e1c <__aeabi_fsub+0x228>
 8000e1a:	e745      	b.n	8000ca8 <__aeabi_fsub+0xb4>
 8000e1c:	2280      	movs	r2, #128	@ 0x80
 8000e1e:	03d2      	lsls	r2, r2, #15
 8000e20:	433a      	orrs	r2, r7
 8000e22:	0252      	lsls	r2, r2, #9
 8000e24:	20ff      	movs	r0, #255	@ 0xff
 8000e26:	0a52      	lsrs	r2, r2, #9
 8000e28:	e740      	b.n	8000cac <__aeabi_fsub+0xb8>
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d179      	bne.n	8000f22 <__aeabi_fsub+0x32e>
 8000e2e:	22fe      	movs	r2, #254	@ 0xfe
 8000e30:	1c6b      	adds	r3, r5, #1
 8000e32:	421a      	tst	r2, r3
 8000e34:	d1aa      	bne.n	8000d8c <__aeabi_fsub+0x198>
 8000e36:	4663      	mov	r3, ip
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d100      	bne.n	8000e3e <__aeabi_fsub+0x24a>
 8000e3c:	e0f5      	b.n	800102a <__aeabi_fsub+0x436>
 8000e3e:	2900      	cmp	r1, #0
 8000e40:	d100      	bne.n	8000e44 <__aeabi_fsub+0x250>
 8000e42:	e0d1      	b.n	8000fe8 <__aeabi_fsub+0x3f4>
 8000e44:	1a5f      	subs	r7, r3, r1
 8000e46:	2380      	movs	r3, #128	@ 0x80
 8000e48:	04db      	lsls	r3, r3, #19
 8000e4a:	421f      	tst	r7, r3
 8000e4c:	d100      	bne.n	8000e50 <__aeabi_fsub+0x25c>
 8000e4e:	e10e      	b.n	800106e <__aeabi_fsub+0x47a>
 8000e50:	4662      	mov	r2, ip
 8000e52:	2401      	movs	r4, #1
 8000e54:	1a8a      	subs	r2, r1, r2
 8000e56:	4694      	mov	ip, r2
 8000e58:	2000      	movs	r0, #0
 8000e5a:	4034      	ands	r4, r6
 8000e5c:	2a00      	cmp	r2, #0
 8000e5e:	d100      	bne.n	8000e62 <__aeabi_fsub+0x26e>
 8000e60:	e724      	b.n	8000cac <__aeabi_fsub+0xb8>
 8000e62:	2001      	movs	r0, #1
 8000e64:	421a      	tst	r2, r3
 8000e66:	d1c6      	bne.n	8000df6 <__aeabi_fsub+0x202>
 8000e68:	2300      	movs	r3, #0
 8000e6a:	08d7      	lsrs	r7, r2, #3
 8000e6c:	e73d      	b.n	8000cea <__aeabi_fsub+0xf6>
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d017      	beq.n	8000ea2 <__aeabi_fsub+0x2ae>
 8000e72:	2d00      	cmp	r5, #0
 8000e74:	d000      	beq.n	8000e78 <__aeabi_fsub+0x284>
 8000e76:	e0af      	b.n	8000fd8 <__aeabi_fsub+0x3e4>
 8000e78:	23ff      	movs	r3, #255	@ 0xff
 8000e7a:	4665      	mov	r5, ip
 8000e7c:	2d00      	cmp	r5, #0
 8000e7e:	d100      	bne.n	8000e82 <__aeabi_fsub+0x28e>
 8000e80:	e0ad      	b.n	8000fde <__aeabi_fsub+0x3ea>
 8000e82:	1e5e      	subs	r6, r3, #1
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	d100      	bne.n	8000e8a <__aeabi_fsub+0x296>
 8000e88:	e089      	b.n	8000f9e <__aeabi_fsub+0x3aa>
 8000e8a:	2bff      	cmp	r3, #255	@ 0xff
 8000e8c:	d0c2      	beq.n	8000e14 <__aeabi_fsub+0x220>
 8000e8e:	2e1b      	cmp	r6, #27
 8000e90:	dc00      	bgt.n	8000e94 <__aeabi_fsub+0x2a0>
 8000e92:	e0ab      	b.n	8000fec <__aeabi_fsub+0x3f8>
 8000e94:	1d4b      	adds	r3, r1, #5
 8000e96:	469c      	mov	ip, r3
 8000e98:	0013      	movs	r3, r2
 8000e9a:	e721      	b.n	8000ce0 <__aeabi_fsub+0xec>
 8000e9c:	464b      	mov	r3, r9
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d170      	bne.n	8000f84 <__aeabi_fsub+0x390>
 8000ea2:	22fe      	movs	r2, #254	@ 0xfe
 8000ea4:	1c6b      	adds	r3, r5, #1
 8000ea6:	421a      	tst	r2, r3
 8000ea8:	d15e      	bne.n	8000f68 <__aeabi_fsub+0x374>
 8000eaa:	2d00      	cmp	r5, #0
 8000eac:	d000      	beq.n	8000eb0 <__aeabi_fsub+0x2bc>
 8000eae:	e0c3      	b.n	8001038 <__aeabi_fsub+0x444>
 8000eb0:	4663      	mov	r3, ip
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d100      	bne.n	8000eb8 <__aeabi_fsub+0x2c4>
 8000eb6:	e0d0      	b.n	800105a <__aeabi_fsub+0x466>
 8000eb8:	2900      	cmp	r1, #0
 8000eba:	d100      	bne.n	8000ebe <__aeabi_fsub+0x2ca>
 8000ebc:	e094      	b.n	8000fe8 <__aeabi_fsub+0x3f4>
 8000ebe:	000a      	movs	r2, r1
 8000ec0:	4462      	add	r2, ip
 8000ec2:	0153      	lsls	r3, r2, #5
 8000ec4:	d400      	bmi.n	8000ec8 <__aeabi_fsub+0x2d4>
 8000ec6:	e0d8      	b.n	800107a <__aeabi_fsub+0x486>
 8000ec8:	0192      	lsls	r2, r2, #6
 8000eca:	2001      	movs	r0, #1
 8000ecc:	0a52      	lsrs	r2, r2, #9
 8000ece:	e6ed      	b.n	8000cac <__aeabi_fsub+0xb8>
 8000ed0:	0008      	movs	r0, r1
 8000ed2:	2220      	movs	r2, #32
 8000ed4:	40d8      	lsrs	r0, r3
 8000ed6:	1ad3      	subs	r3, r2, r3
 8000ed8:	4099      	lsls	r1, r3
 8000eda:	000b      	movs	r3, r1
 8000edc:	1e5a      	subs	r2, r3, #1
 8000ede:	4193      	sbcs	r3, r2
 8000ee0:	4303      	orrs	r3, r0
 8000ee2:	449c      	add	ip, r3
 8000ee4:	4663      	mov	r3, ip
 8000ee6:	015b      	lsls	r3, r3, #5
 8000ee8:	d589      	bpl.n	8000dfe <__aeabi_fsub+0x20a>
 8000eea:	3501      	adds	r5, #1
 8000eec:	2dff      	cmp	r5, #255	@ 0xff
 8000eee:	d100      	bne.n	8000ef2 <__aeabi_fsub+0x2fe>
 8000ef0:	e6da      	b.n	8000ca8 <__aeabi_fsub+0xb4>
 8000ef2:	4662      	mov	r2, ip
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	4919      	ldr	r1, [pc, #100]	@ (8000f5c <__aeabi_fsub+0x368>)
 8000ef8:	4013      	ands	r3, r2
 8000efa:	0852      	lsrs	r2, r2, #1
 8000efc:	400a      	ands	r2, r1
 8000efe:	431a      	orrs	r2, r3
 8000f00:	0013      	movs	r3, r2
 8000f02:	4694      	mov	ip, r2
 8000f04:	075b      	lsls	r3, r3, #29
 8000f06:	d004      	beq.n	8000f12 <__aeabi_fsub+0x31e>
 8000f08:	230f      	movs	r3, #15
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	2b04      	cmp	r3, #4
 8000f0e:	d000      	beq.n	8000f12 <__aeabi_fsub+0x31e>
 8000f10:	e6bf      	b.n	8000c92 <__aeabi_fsub+0x9e>
 8000f12:	4663      	mov	r3, ip
 8000f14:	015b      	lsls	r3, r3, #5
 8000f16:	d500      	bpl.n	8000f1a <__aeabi_fsub+0x326>
 8000f18:	e6c2      	b.n	8000ca0 <__aeabi_fsub+0xac>
 8000f1a:	4663      	mov	r3, ip
 8000f1c:	08df      	lsrs	r7, r3, #3
 8000f1e:	002b      	movs	r3, r5
 8000f20:	e6e3      	b.n	8000cea <__aeabi_fsub+0xf6>
 8000f22:	1b53      	subs	r3, r2, r5
 8000f24:	2d00      	cmp	r5, #0
 8000f26:	d100      	bne.n	8000f2a <__aeabi_fsub+0x336>
 8000f28:	e6f4      	b.n	8000d14 <__aeabi_fsub+0x120>
 8000f2a:	2080      	movs	r0, #128	@ 0x80
 8000f2c:	4664      	mov	r4, ip
 8000f2e:	04c0      	lsls	r0, r0, #19
 8000f30:	4304      	orrs	r4, r0
 8000f32:	46a4      	mov	ip, r4
 8000f34:	0034      	movs	r4, r6
 8000f36:	2001      	movs	r0, #1
 8000f38:	2b1b      	cmp	r3, #27
 8000f3a:	dc09      	bgt.n	8000f50 <__aeabi_fsub+0x35c>
 8000f3c:	2520      	movs	r5, #32
 8000f3e:	4660      	mov	r0, ip
 8000f40:	40d8      	lsrs	r0, r3
 8000f42:	1aeb      	subs	r3, r5, r3
 8000f44:	4665      	mov	r5, ip
 8000f46:	409d      	lsls	r5, r3
 8000f48:	002b      	movs	r3, r5
 8000f4a:	1e5d      	subs	r5, r3, #1
 8000f4c:	41ab      	sbcs	r3, r5
 8000f4e:	4318      	orrs	r0, r3
 8000f50:	1a0b      	subs	r3, r1, r0
 8000f52:	469c      	mov	ip, r3
 8000f54:	0015      	movs	r5, r2
 8000f56:	e680      	b.n	8000c5a <__aeabi_fsub+0x66>
 8000f58:	fbffffff 	.word	0xfbffffff
 8000f5c:	7dffffff 	.word	0x7dffffff
 8000f60:	22fe      	movs	r2, #254	@ 0xfe
 8000f62:	1c6b      	adds	r3, r5, #1
 8000f64:	4213      	tst	r3, r2
 8000f66:	d0a3      	beq.n	8000eb0 <__aeabi_fsub+0x2bc>
 8000f68:	2bff      	cmp	r3, #255	@ 0xff
 8000f6a:	d100      	bne.n	8000f6e <__aeabi_fsub+0x37a>
 8000f6c:	e69c      	b.n	8000ca8 <__aeabi_fsub+0xb4>
 8000f6e:	4461      	add	r1, ip
 8000f70:	0849      	lsrs	r1, r1, #1
 8000f72:	074a      	lsls	r2, r1, #29
 8000f74:	d049      	beq.n	800100a <__aeabi_fsub+0x416>
 8000f76:	220f      	movs	r2, #15
 8000f78:	400a      	ands	r2, r1
 8000f7a:	2a04      	cmp	r2, #4
 8000f7c:	d045      	beq.n	800100a <__aeabi_fsub+0x416>
 8000f7e:	1d0a      	adds	r2, r1, #4
 8000f80:	4694      	mov	ip, r2
 8000f82:	e6ad      	b.n	8000ce0 <__aeabi_fsub+0xec>
 8000f84:	2d00      	cmp	r5, #0
 8000f86:	d100      	bne.n	8000f8a <__aeabi_fsub+0x396>
 8000f88:	e776      	b.n	8000e78 <__aeabi_fsub+0x284>
 8000f8a:	e68d      	b.n	8000ca8 <__aeabi_fsub+0xb4>
 8000f8c:	0034      	movs	r4, r6
 8000f8e:	20ff      	movs	r0, #255	@ 0xff
 8000f90:	2200      	movs	r2, #0
 8000f92:	e68b      	b.n	8000cac <__aeabi_fsub+0xb8>
 8000f94:	4663      	mov	r3, ip
 8000f96:	2401      	movs	r4, #1
 8000f98:	1acf      	subs	r7, r1, r3
 8000f9a:	4034      	ands	r4, r6
 8000f9c:	e664      	b.n	8000c68 <__aeabi_fsub+0x74>
 8000f9e:	4461      	add	r1, ip
 8000fa0:	014b      	lsls	r3, r1, #5
 8000fa2:	d56d      	bpl.n	8001080 <__aeabi_fsub+0x48c>
 8000fa4:	0848      	lsrs	r0, r1, #1
 8000fa6:	4944      	ldr	r1, [pc, #272]	@ (80010b8 <__aeabi_fsub+0x4c4>)
 8000fa8:	4001      	ands	r1, r0
 8000faa:	0743      	lsls	r3, r0, #29
 8000fac:	d02c      	beq.n	8001008 <__aeabi_fsub+0x414>
 8000fae:	230f      	movs	r3, #15
 8000fb0:	4003      	ands	r3, r0
 8000fb2:	2b04      	cmp	r3, #4
 8000fb4:	d028      	beq.n	8001008 <__aeabi_fsub+0x414>
 8000fb6:	1d0b      	adds	r3, r1, #4
 8000fb8:	469c      	mov	ip, r3
 8000fba:	2302      	movs	r3, #2
 8000fbc:	e690      	b.n	8000ce0 <__aeabi_fsub+0xec>
 8000fbe:	2900      	cmp	r1, #0
 8000fc0:	d100      	bne.n	8000fc4 <__aeabi_fsub+0x3d0>
 8000fc2:	e72b      	b.n	8000e1c <__aeabi_fsub+0x228>
 8000fc4:	2380      	movs	r3, #128	@ 0x80
 8000fc6:	03db      	lsls	r3, r3, #15
 8000fc8:	429f      	cmp	r7, r3
 8000fca:	d200      	bcs.n	8000fce <__aeabi_fsub+0x3da>
 8000fcc:	e726      	b.n	8000e1c <__aeabi_fsub+0x228>
 8000fce:	4298      	cmp	r0, r3
 8000fd0:	d300      	bcc.n	8000fd4 <__aeabi_fsub+0x3e0>
 8000fd2:	e723      	b.n	8000e1c <__aeabi_fsub+0x228>
 8000fd4:	2401      	movs	r4, #1
 8000fd6:	4034      	ands	r4, r6
 8000fd8:	0007      	movs	r7, r0
 8000fda:	e71f      	b.n	8000e1c <__aeabi_fsub+0x228>
 8000fdc:	0034      	movs	r4, r6
 8000fde:	468c      	mov	ip, r1
 8000fe0:	e67e      	b.n	8000ce0 <__aeabi_fsub+0xec>
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	08cf      	lsrs	r7, r1, #3
 8000fe6:	e680      	b.n	8000cea <__aeabi_fsub+0xf6>
 8000fe8:	2300      	movs	r3, #0
 8000fea:	e67e      	b.n	8000cea <__aeabi_fsub+0xf6>
 8000fec:	2020      	movs	r0, #32
 8000fee:	4665      	mov	r5, ip
 8000ff0:	1b80      	subs	r0, r0, r6
 8000ff2:	4085      	lsls	r5, r0
 8000ff4:	4663      	mov	r3, ip
 8000ff6:	0028      	movs	r0, r5
 8000ff8:	40f3      	lsrs	r3, r6
 8000ffa:	1e45      	subs	r5, r0, #1
 8000ffc:	41a8      	sbcs	r0, r5
 8000ffe:	4303      	orrs	r3, r0
 8001000:	469c      	mov	ip, r3
 8001002:	0015      	movs	r5, r2
 8001004:	448c      	add	ip, r1
 8001006:	e76d      	b.n	8000ee4 <__aeabi_fsub+0x2f0>
 8001008:	2302      	movs	r3, #2
 800100a:	08cf      	lsrs	r7, r1, #3
 800100c:	e66d      	b.n	8000cea <__aeabi_fsub+0xf6>
 800100e:	1b0f      	subs	r7, r1, r4
 8001010:	017b      	lsls	r3, r7, #5
 8001012:	d528      	bpl.n	8001066 <__aeabi_fsub+0x472>
 8001014:	01bf      	lsls	r7, r7, #6
 8001016:	09bf      	lsrs	r7, r7, #6
 8001018:	0038      	movs	r0, r7
 800101a:	f000 f8ef 	bl	80011fc <__clzsi2>
 800101e:	003b      	movs	r3, r7
 8001020:	3805      	subs	r0, #5
 8001022:	4083      	lsls	r3, r0
 8001024:	0034      	movs	r4, r6
 8001026:	2501      	movs	r5, #1
 8001028:	e6ca      	b.n	8000dc0 <__aeabi_fsub+0x1cc>
 800102a:	2900      	cmp	r1, #0
 800102c:	d100      	bne.n	8001030 <__aeabi_fsub+0x43c>
 800102e:	e6b5      	b.n	8000d9c <__aeabi_fsub+0x1a8>
 8001030:	2401      	movs	r4, #1
 8001032:	0007      	movs	r7, r0
 8001034:	4034      	ands	r4, r6
 8001036:	e658      	b.n	8000cea <__aeabi_fsub+0xf6>
 8001038:	4663      	mov	r3, ip
 800103a:	2b00      	cmp	r3, #0
 800103c:	d100      	bne.n	8001040 <__aeabi_fsub+0x44c>
 800103e:	e6e9      	b.n	8000e14 <__aeabi_fsub+0x220>
 8001040:	2900      	cmp	r1, #0
 8001042:	d100      	bne.n	8001046 <__aeabi_fsub+0x452>
 8001044:	e6ea      	b.n	8000e1c <__aeabi_fsub+0x228>
 8001046:	2380      	movs	r3, #128	@ 0x80
 8001048:	03db      	lsls	r3, r3, #15
 800104a:	429f      	cmp	r7, r3
 800104c:	d200      	bcs.n	8001050 <__aeabi_fsub+0x45c>
 800104e:	e6e5      	b.n	8000e1c <__aeabi_fsub+0x228>
 8001050:	4298      	cmp	r0, r3
 8001052:	d300      	bcc.n	8001056 <__aeabi_fsub+0x462>
 8001054:	e6e2      	b.n	8000e1c <__aeabi_fsub+0x228>
 8001056:	0007      	movs	r7, r0
 8001058:	e6e0      	b.n	8000e1c <__aeabi_fsub+0x228>
 800105a:	2900      	cmp	r1, #0
 800105c:	d100      	bne.n	8001060 <__aeabi_fsub+0x46c>
 800105e:	e69e      	b.n	8000d9e <__aeabi_fsub+0x1aa>
 8001060:	2300      	movs	r3, #0
 8001062:	08cf      	lsrs	r7, r1, #3
 8001064:	e641      	b.n	8000cea <__aeabi_fsub+0xf6>
 8001066:	0034      	movs	r4, r6
 8001068:	2301      	movs	r3, #1
 800106a:	08ff      	lsrs	r7, r7, #3
 800106c:	e63d      	b.n	8000cea <__aeabi_fsub+0xf6>
 800106e:	2f00      	cmp	r7, #0
 8001070:	d100      	bne.n	8001074 <__aeabi_fsub+0x480>
 8001072:	e693      	b.n	8000d9c <__aeabi_fsub+0x1a8>
 8001074:	2300      	movs	r3, #0
 8001076:	08ff      	lsrs	r7, r7, #3
 8001078:	e637      	b.n	8000cea <__aeabi_fsub+0xf6>
 800107a:	2300      	movs	r3, #0
 800107c:	08d7      	lsrs	r7, r2, #3
 800107e:	e634      	b.n	8000cea <__aeabi_fsub+0xf6>
 8001080:	2301      	movs	r3, #1
 8001082:	08cf      	lsrs	r7, r1, #3
 8001084:	e631      	b.n	8000cea <__aeabi_fsub+0xf6>
 8001086:	2280      	movs	r2, #128	@ 0x80
 8001088:	000b      	movs	r3, r1
 800108a:	04d2      	lsls	r2, r2, #19
 800108c:	2001      	movs	r0, #1
 800108e:	4013      	ands	r3, r2
 8001090:	4211      	tst	r1, r2
 8001092:	d000      	beq.n	8001096 <__aeabi_fsub+0x4a2>
 8001094:	e6ae      	b.n	8000df4 <__aeabi_fsub+0x200>
 8001096:	08cf      	lsrs	r7, r1, #3
 8001098:	e627      	b.n	8000cea <__aeabi_fsub+0xf6>
 800109a:	2b00      	cmp	r3, #0
 800109c:	d100      	bne.n	80010a0 <__aeabi_fsub+0x4ac>
 800109e:	e75f      	b.n	8000f60 <__aeabi_fsub+0x36c>
 80010a0:	1b56      	subs	r6, r2, r5
 80010a2:	2d00      	cmp	r5, #0
 80010a4:	d101      	bne.n	80010aa <__aeabi_fsub+0x4b6>
 80010a6:	0033      	movs	r3, r6
 80010a8:	e6e7      	b.n	8000e7a <__aeabi_fsub+0x286>
 80010aa:	2380      	movs	r3, #128	@ 0x80
 80010ac:	4660      	mov	r0, ip
 80010ae:	04db      	lsls	r3, r3, #19
 80010b0:	4318      	orrs	r0, r3
 80010b2:	4684      	mov	ip, r0
 80010b4:	e6eb      	b.n	8000e8e <__aeabi_fsub+0x29a>
 80010b6:	46c0      	nop			@ (mov r8, r8)
 80010b8:	7dffffff 	.word	0x7dffffff

080010bc <__aeabi_f2iz>:
 80010bc:	0241      	lsls	r1, r0, #9
 80010be:	0042      	lsls	r2, r0, #1
 80010c0:	0fc3      	lsrs	r3, r0, #31
 80010c2:	0a49      	lsrs	r1, r1, #9
 80010c4:	2000      	movs	r0, #0
 80010c6:	0e12      	lsrs	r2, r2, #24
 80010c8:	2a7e      	cmp	r2, #126	@ 0x7e
 80010ca:	dd03      	ble.n	80010d4 <__aeabi_f2iz+0x18>
 80010cc:	2a9d      	cmp	r2, #157	@ 0x9d
 80010ce:	dd02      	ble.n	80010d6 <__aeabi_f2iz+0x1a>
 80010d0:	4a09      	ldr	r2, [pc, #36]	@ (80010f8 <__aeabi_f2iz+0x3c>)
 80010d2:	1898      	adds	r0, r3, r2
 80010d4:	4770      	bx	lr
 80010d6:	2080      	movs	r0, #128	@ 0x80
 80010d8:	0400      	lsls	r0, r0, #16
 80010da:	4301      	orrs	r1, r0
 80010dc:	2a95      	cmp	r2, #149	@ 0x95
 80010de:	dc07      	bgt.n	80010f0 <__aeabi_f2iz+0x34>
 80010e0:	2096      	movs	r0, #150	@ 0x96
 80010e2:	1a82      	subs	r2, r0, r2
 80010e4:	40d1      	lsrs	r1, r2
 80010e6:	4248      	negs	r0, r1
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d1f3      	bne.n	80010d4 <__aeabi_f2iz+0x18>
 80010ec:	0008      	movs	r0, r1
 80010ee:	e7f1      	b.n	80010d4 <__aeabi_f2iz+0x18>
 80010f0:	3a96      	subs	r2, #150	@ 0x96
 80010f2:	4091      	lsls	r1, r2
 80010f4:	e7f7      	b.n	80010e6 <__aeabi_f2iz+0x2a>
 80010f6:	46c0      	nop			@ (mov r8, r8)
 80010f8:	7fffffff 	.word	0x7fffffff

080010fc <__aeabi_ui2f>:
 80010fc:	b510      	push	{r4, lr}
 80010fe:	1e04      	subs	r4, r0, #0
 8001100:	d00d      	beq.n	800111e <__aeabi_ui2f+0x22>
 8001102:	f000 f87b 	bl	80011fc <__clzsi2>
 8001106:	239e      	movs	r3, #158	@ 0x9e
 8001108:	1a1b      	subs	r3, r3, r0
 800110a:	2b96      	cmp	r3, #150	@ 0x96
 800110c:	dc0c      	bgt.n	8001128 <__aeabi_ui2f+0x2c>
 800110e:	2808      	cmp	r0, #8
 8001110:	d034      	beq.n	800117c <__aeabi_ui2f+0x80>
 8001112:	3808      	subs	r0, #8
 8001114:	4084      	lsls	r4, r0
 8001116:	0264      	lsls	r4, r4, #9
 8001118:	0a64      	lsrs	r4, r4, #9
 800111a:	b2d8      	uxtb	r0, r3
 800111c:	e001      	b.n	8001122 <__aeabi_ui2f+0x26>
 800111e:	2000      	movs	r0, #0
 8001120:	2400      	movs	r4, #0
 8001122:	05c0      	lsls	r0, r0, #23
 8001124:	4320      	orrs	r0, r4
 8001126:	bd10      	pop	{r4, pc}
 8001128:	2b99      	cmp	r3, #153	@ 0x99
 800112a:	dc13      	bgt.n	8001154 <__aeabi_ui2f+0x58>
 800112c:	1f42      	subs	r2, r0, #5
 800112e:	4094      	lsls	r4, r2
 8001130:	4a14      	ldr	r2, [pc, #80]	@ (8001184 <__aeabi_ui2f+0x88>)
 8001132:	4022      	ands	r2, r4
 8001134:	0761      	lsls	r1, r4, #29
 8001136:	d01c      	beq.n	8001172 <__aeabi_ui2f+0x76>
 8001138:	210f      	movs	r1, #15
 800113a:	4021      	ands	r1, r4
 800113c:	2904      	cmp	r1, #4
 800113e:	d018      	beq.n	8001172 <__aeabi_ui2f+0x76>
 8001140:	3204      	adds	r2, #4
 8001142:	08d4      	lsrs	r4, r2, #3
 8001144:	0152      	lsls	r2, r2, #5
 8001146:	d515      	bpl.n	8001174 <__aeabi_ui2f+0x78>
 8001148:	239f      	movs	r3, #159	@ 0x9f
 800114a:	0264      	lsls	r4, r4, #9
 800114c:	1a18      	subs	r0, r3, r0
 800114e:	0a64      	lsrs	r4, r4, #9
 8001150:	b2c0      	uxtb	r0, r0
 8001152:	e7e6      	b.n	8001122 <__aeabi_ui2f+0x26>
 8001154:	0002      	movs	r2, r0
 8001156:	0021      	movs	r1, r4
 8001158:	321b      	adds	r2, #27
 800115a:	4091      	lsls	r1, r2
 800115c:	000a      	movs	r2, r1
 800115e:	1e51      	subs	r1, r2, #1
 8001160:	418a      	sbcs	r2, r1
 8001162:	2105      	movs	r1, #5
 8001164:	1a09      	subs	r1, r1, r0
 8001166:	40cc      	lsrs	r4, r1
 8001168:	4314      	orrs	r4, r2
 800116a:	4a06      	ldr	r2, [pc, #24]	@ (8001184 <__aeabi_ui2f+0x88>)
 800116c:	4022      	ands	r2, r4
 800116e:	0761      	lsls	r1, r4, #29
 8001170:	d1e2      	bne.n	8001138 <__aeabi_ui2f+0x3c>
 8001172:	08d4      	lsrs	r4, r2, #3
 8001174:	0264      	lsls	r4, r4, #9
 8001176:	0a64      	lsrs	r4, r4, #9
 8001178:	b2d8      	uxtb	r0, r3
 800117a:	e7d2      	b.n	8001122 <__aeabi_ui2f+0x26>
 800117c:	0264      	lsls	r4, r4, #9
 800117e:	0a64      	lsrs	r4, r4, #9
 8001180:	308e      	adds	r0, #142	@ 0x8e
 8001182:	e7ce      	b.n	8001122 <__aeabi_ui2f+0x26>
 8001184:	fbffffff 	.word	0xfbffffff

08001188 <__aeabi_cfrcmple>:
 8001188:	4684      	mov	ip, r0
 800118a:	0008      	movs	r0, r1
 800118c:	4661      	mov	r1, ip
 800118e:	e7ff      	b.n	8001190 <__aeabi_cfcmpeq>

08001190 <__aeabi_cfcmpeq>:
 8001190:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001192:	f000 f9b9 	bl	8001508 <__lesf2>
 8001196:	2800      	cmp	r0, #0
 8001198:	d401      	bmi.n	800119e <__aeabi_cfcmpeq+0xe>
 800119a:	2100      	movs	r1, #0
 800119c:	42c8      	cmn	r0, r1
 800119e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080011a0 <__aeabi_fcmpeq>:
 80011a0:	b510      	push	{r4, lr}
 80011a2:	f000 f941 	bl	8001428 <__eqsf2>
 80011a6:	4240      	negs	r0, r0
 80011a8:	3001      	adds	r0, #1
 80011aa:	bd10      	pop	{r4, pc}

080011ac <__aeabi_fcmplt>:
 80011ac:	b510      	push	{r4, lr}
 80011ae:	f000 f9ab 	bl	8001508 <__lesf2>
 80011b2:	2800      	cmp	r0, #0
 80011b4:	db01      	blt.n	80011ba <__aeabi_fcmplt+0xe>
 80011b6:	2000      	movs	r0, #0
 80011b8:	bd10      	pop	{r4, pc}
 80011ba:	2001      	movs	r0, #1
 80011bc:	bd10      	pop	{r4, pc}
 80011be:	46c0      	nop			@ (mov r8, r8)

080011c0 <__aeabi_fcmple>:
 80011c0:	b510      	push	{r4, lr}
 80011c2:	f000 f9a1 	bl	8001508 <__lesf2>
 80011c6:	2800      	cmp	r0, #0
 80011c8:	dd01      	ble.n	80011ce <__aeabi_fcmple+0xe>
 80011ca:	2000      	movs	r0, #0
 80011cc:	bd10      	pop	{r4, pc}
 80011ce:	2001      	movs	r0, #1
 80011d0:	bd10      	pop	{r4, pc}
 80011d2:	46c0      	nop			@ (mov r8, r8)

080011d4 <__aeabi_fcmpgt>:
 80011d4:	b510      	push	{r4, lr}
 80011d6:	f000 f94f 	bl	8001478 <__gesf2>
 80011da:	2800      	cmp	r0, #0
 80011dc:	dc01      	bgt.n	80011e2 <__aeabi_fcmpgt+0xe>
 80011de:	2000      	movs	r0, #0
 80011e0:	bd10      	pop	{r4, pc}
 80011e2:	2001      	movs	r0, #1
 80011e4:	bd10      	pop	{r4, pc}
 80011e6:	46c0      	nop			@ (mov r8, r8)

080011e8 <__aeabi_fcmpge>:
 80011e8:	b510      	push	{r4, lr}
 80011ea:	f000 f945 	bl	8001478 <__gesf2>
 80011ee:	2800      	cmp	r0, #0
 80011f0:	da01      	bge.n	80011f6 <__aeabi_fcmpge+0xe>
 80011f2:	2000      	movs	r0, #0
 80011f4:	bd10      	pop	{r4, pc}
 80011f6:	2001      	movs	r0, #1
 80011f8:	bd10      	pop	{r4, pc}
 80011fa:	46c0      	nop			@ (mov r8, r8)

080011fc <__clzsi2>:
 80011fc:	211c      	movs	r1, #28
 80011fe:	2301      	movs	r3, #1
 8001200:	041b      	lsls	r3, r3, #16
 8001202:	4298      	cmp	r0, r3
 8001204:	d301      	bcc.n	800120a <__clzsi2+0xe>
 8001206:	0c00      	lsrs	r0, r0, #16
 8001208:	3910      	subs	r1, #16
 800120a:	0a1b      	lsrs	r3, r3, #8
 800120c:	4298      	cmp	r0, r3
 800120e:	d301      	bcc.n	8001214 <__clzsi2+0x18>
 8001210:	0a00      	lsrs	r0, r0, #8
 8001212:	3908      	subs	r1, #8
 8001214:	091b      	lsrs	r3, r3, #4
 8001216:	4298      	cmp	r0, r3
 8001218:	d301      	bcc.n	800121e <__clzsi2+0x22>
 800121a:	0900      	lsrs	r0, r0, #4
 800121c:	3904      	subs	r1, #4
 800121e:	a202      	add	r2, pc, #8	@ (adr r2, 8001228 <__clzsi2+0x2c>)
 8001220:	5c10      	ldrb	r0, [r2, r0]
 8001222:	1840      	adds	r0, r0, r1
 8001224:	4770      	bx	lr
 8001226:	46c0      	nop			@ (mov r8, r8)
 8001228:	02020304 	.word	0x02020304
 800122c:	01010101 	.word	0x01010101
	...

08001238 <__clzdi2>:
 8001238:	b510      	push	{r4, lr}
 800123a:	2900      	cmp	r1, #0
 800123c:	d103      	bne.n	8001246 <__clzdi2+0xe>
 800123e:	f7ff ffdd 	bl	80011fc <__clzsi2>
 8001242:	3020      	adds	r0, #32
 8001244:	e002      	b.n	800124c <__clzdi2+0x14>
 8001246:	0008      	movs	r0, r1
 8001248:	f7ff ffd8 	bl	80011fc <__clzsi2>
 800124c:	bd10      	pop	{r4, pc}
 800124e:	46c0      	nop			@ (mov r8, r8)

08001250 <__divdi3>:
 8001250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001252:	464f      	mov	r7, r9
 8001254:	4646      	mov	r6, r8
 8001256:	46d6      	mov	lr, sl
 8001258:	b5c0      	push	{r6, r7, lr}
 800125a:	0006      	movs	r6, r0
 800125c:	000f      	movs	r7, r1
 800125e:	0010      	movs	r0, r2
 8001260:	0019      	movs	r1, r3
 8001262:	b082      	sub	sp, #8
 8001264:	2f00      	cmp	r7, #0
 8001266:	db5d      	blt.n	8001324 <__divdi3+0xd4>
 8001268:	0034      	movs	r4, r6
 800126a:	003d      	movs	r5, r7
 800126c:	2b00      	cmp	r3, #0
 800126e:	db0b      	blt.n	8001288 <__divdi3+0x38>
 8001270:	0016      	movs	r6, r2
 8001272:	001f      	movs	r7, r3
 8001274:	42ab      	cmp	r3, r5
 8001276:	d917      	bls.n	80012a8 <__divdi3+0x58>
 8001278:	2000      	movs	r0, #0
 800127a:	2100      	movs	r1, #0
 800127c:	b002      	add	sp, #8
 800127e:	bce0      	pop	{r5, r6, r7}
 8001280:	46ba      	mov	sl, r7
 8001282:	46b1      	mov	r9, r6
 8001284:	46a8      	mov	r8, r5
 8001286:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001288:	2700      	movs	r7, #0
 800128a:	4246      	negs	r6, r0
 800128c:	418f      	sbcs	r7, r1
 800128e:	42af      	cmp	r7, r5
 8001290:	d8f2      	bhi.n	8001278 <__divdi3+0x28>
 8001292:	d100      	bne.n	8001296 <__divdi3+0x46>
 8001294:	e0a0      	b.n	80013d8 <__divdi3+0x188>
 8001296:	2301      	movs	r3, #1
 8001298:	425b      	negs	r3, r3
 800129a:	4699      	mov	r9, r3
 800129c:	e009      	b.n	80012b2 <__divdi3+0x62>
 800129e:	2700      	movs	r7, #0
 80012a0:	4246      	negs	r6, r0
 80012a2:	418f      	sbcs	r7, r1
 80012a4:	42af      	cmp	r7, r5
 80012a6:	d8e7      	bhi.n	8001278 <__divdi3+0x28>
 80012a8:	42af      	cmp	r7, r5
 80012aa:	d100      	bne.n	80012ae <__divdi3+0x5e>
 80012ac:	e090      	b.n	80013d0 <__divdi3+0x180>
 80012ae:	2300      	movs	r3, #0
 80012b0:	4699      	mov	r9, r3
 80012b2:	0039      	movs	r1, r7
 80012b4:	0030      	movs	r0, r6
 80012b6:	f7ff ffbf 	bl	8001238 <__clzdi2>
 80012ba:	4680      	mov	r8, r0
 80012bc:	0029      	movs	r1, r5
 80012be:	0020      	movs	r0, r4
 80012c0:	f7ff ffba 	bl	8001238 <__clzdi2>
 80012c4:	4643      	mov	r3, r8
 80012c6:	1a1b      	subs	r3, r3, r0
 80012c8:	4698      	mov	r8, r3
 80012ca:	3b20      	subs	r3, #32
 80012cc:	d475      	bmi.n	80013ba <__divdi3+0x16a>
 80012ce:	0031      	movs	r1, r6
 80012d0:	4099      	lsls	r1, r3
 80012d2:	469a      	mov	sl, r3
 80012d4:	000b      	movs	r3, r1
 80012d6:	0031      	movs	r1, r6
 80012d8:	4640      	mov	r0, r8
 80012da:	4081      	lsls	r1, r0
 80012dc:	000a      	movs	r2, r1
 80012de:	42ab      	cmp	r3, r5
 80012e0:	d82e      	bhi.n	8001340 <__divdi3+0xf0>
 80012e2:	d02b      	beq.n	800133c <__divdi3+0xec>
 80012e4:	4651      	mov	r1, sl
 80012e6:	1aa4      	subs	r4, r4, r2
 80012e8:	419d      	sbcs	r5, r3
 80012ea:	2900      	cmp	r1, #0
 80012ec:	da00      	bge.n	80012f0 <__divdi3+0xa0>
 80012ee:	e090      	b.n	8001412 <__divdi3+0x1c2>
 80012f0:	2100      	movs	r1, #0
 80012f2:	2000      	movs	r0, #0
 80012f4:	2601      	movs	r6, #1
 80012f6:	9000      	str	r0, [sp, #0]
 80012f8:	9101      	str	r1, [sp, #4]
 80012fa:	4651      	mov	r1, sl
 80012fc:	408e      	lsls	r6, r1
 80012fe:	9601      	str	r6, [sp, #4]
 8001300:	4641      	mov	r1, r8
 8001302:	2601      	movs	r6, #1
 8001304:	408e      	lsls	r6, r1
 8001306:	4641      	mov	r1, r8
 8001308:	9600      	str	r6, [sp, #0]
 800130a:	2900      	cmp	r1, #0
 800130c:	d11f      	bne.n	800134e <__divdi3+0xfe>
 800130e:	9800      	ldr	r0, [sp, #0]
 8001310:	9901      	ldr	r1, [sp, #4]
 8001312:	464b      	mov	r3, r9
 8001314:	2b00      	cmp	r3, #0
 8001316:	d0b1      	beq.n	800127c <__divdi3+0x2c>
 8001318:	0003      	movs	r3, r0
 800131a:	000c      	movs	r4, r1
 800131c:	2100      	movs	r1, #0
 800131e:	4258      	negs	r0, r3
 8001320:	41a1      	sbcs	r1, r4
 8001322:	e7ab      	b.n	800127c <__divdi3+0x2c>
 8001324:	2500      	movs	r5, #0
 8001326:	4274      	negs	r4, r6
 8001328:	41bd      	sbcs	r5, r7
 800132a:	2b00      	cmp	r3, #0
 800132c:	dbb7      	blt.n	800129e <__divdi3+0x4e>
 800132e:	0016      	movs	r6, r2
 8001330:	001f      	movs	r7, r3
 8001332:	42ab      	cmp	r3, r5
 8001334:	d8a0      	bhi.n	8001278 <__divdi3+0x28>
 8001336:	42af      	cmp	r7, r5
 8001338:	d1ad      	bne.n	8001296 <__divdi3+0x46>
 800133a:	e04d      	b.n	80013d8 <__divdi3+0x188>
 800133c:	42a1      	cmp	r1, r4
 800133e:	d9d1      	bls.n	80012e4 <__divdi3+0x94>
 8001340:	2100      	movs	r1, #0
 8001342:	2000      	movs	r0, #0
 8001344:	9000      	str	r0, [sp, #0]
 8001346:	9101      	str	r1, [sp, #4]
 8001348:	4641      	mov	r1, r8
 800134a:	2900      	cmp	r1, #0
 800134c:	d0df      	beq.n	800130e <__divdi3+0xbe>
 800134e:	07d9      	lsls	r1, r3, #31
 8001350:	0856      	lsrs	r6, r2, #1
 8001352:	085f      	lsrs	r7, r3, #1
 8001354:	430e      	orrs	r6, r1
 8001356:	4643      	mov	r3, r8
 8001358:	e00e      	b.n	8001378 <__divdi3+0x128>
 800135a:	42af      	cmp	r7, r5
 800135c:	d101      	bne.n	8001362 <__divdi3+0x112>
 800135e:	42a6      	cmp	r6, r4
 8001360:	d80c      	bhi.n	800137c <__divdi3+0x12c>
 8001362:	1ba4      	subs	r4, r4, r6
 8001364:	41bd      	sbcs	r5, r7
 8001366:	2101      	movs	r1, #1
 8001368:	1924      	adds	r4, r4, r4
 800136a:	416d      	adcs	r5, r5
 800136c:	2200      	movs	r2, #0
 800136e:	3b01      	subs	r3, #1
 8001370:	1864      	adds	r4, r4, r1
 8001372:	4155      	adcs	r5, r2
 8001374:	2b00      	cmp	r3, #0
 8001376:	d006      	beq.n	8001386 <__divdi3+0x136>
 8001378:	42af      	cmp	r7, r5
 800137a:	d9ee      	bls.n	800135a <__divdi3+0x10a>
 800137c:	3b01      	subs	r3, #1
 800137e:	1924      	adds	r4, r4, r4
 8001380:	416d      	adcs	r5, r5
 8001382:	2b00      	cmp	r3, #0
 8001384:	d1f8      	bne.n	8001378 <__divdi3+0x128>
 8001386:	9a00      	ldr	r2, [sp, #0]
 8001388:	9b01      	ldr	r3, [sp, #4]
 800138a:	4651      	mov	r1, sl
 800138c:	1912      	adds	r2, r2, r4
 800138e:	416b      	adcs	r3, r5
 8001390:	2900      	cmp	r1, #0
 8001392:	db25      	blt.n	80013e0 <__divdi3+0x190>
 8001394:	002e      	movs	r6, r5
 8001396:	002c      	movs	r4, r5
 8001398:	40ce      	lsrs	r6, r1
 800139a:	4641      	mov	r1, r8
 800139c:	40cc      	lsrs	r4, r1
 800139e:	4651      	mov	r1, sl
 80013a0:	2900      	cmp	r1, #0
 80013a2:	db2d      	blt.n	8001400 <__divdi3+0x1b0>
 80013a4:	0034      	movs	r4, r6
 80013a6:	408c      	lsls	r4, r1
 80013a8:	0021      	movs	r1, r4
 80013aa:	4644      	mov	r4, r8
 80013ac:	40a6      	lsls	r6, r4
 80013ae:	0030      	movs	r0, r6
 80013b0:	1a12      	subs	r2, r2, r0
 80013b2:	418b      	sbcs	r3, r1
 80013b4:	9200      	str	r2, [sp, #0]
 80013b6:	9301      	str	r3, [sp, #4]
 80013b8:	e7a9      	b.n	800130e <__divdi3+0xbe>
 80013ba:	4642      	mov	r2, r8
 80013bc:	0038      	movs	r0, r7
 80013be:	469a      	mov	sl, r3
 80013c0:	2320      	movs	r3, #32
 80013c2:	0031      	movs	r1, r6
 80013c4:	4090      	lsls	r0, r2
 80013c6:	1a9b      	subs	r3, r3, r2
 80013c8:	40d9      	lsrs	r1, r3
 80013ca:	0003      	movs	r3, r0
 80013cc:	430b      	orrs	r3, r1
 80013ce:	e782      	b.n	80012d6 <__divdi3+0x86>
 80013d0:	42a6      	cmp	r6, r4
 80013d2:	d900      	bls.n	80013d6 <__divdi3+0x186>
 80013d4:	e750      	b.n	8001278 <__divdi3+0x28>
 80013d6:	e76a      	b.n	80012ae <__divdi3+0x5e>
 80013d8:	42a6      	cmp	r6, r4
 80013da:	d800      	bhi.n	80013de <__divdi3+0x18e>
 80013dc:	e75b      	b.n	8001296 <__divdi3+0x46>
 80013de:	e74b      	b.n	8001278 <__divdi3+0x28>
 80013e0:	4640      	mov	r0, r8
 80013e2:	2120      	movs	r1, #32
 80013e4:	1a09      	subs	r1, r1, r0
 80013e6:	0028      	movs	r0, r5
 80013e8:	4088      	lsls	r0, r1
 80013ea:	0026      	movs	r6, r4
 80013ec:	0001      	movs	r1, r0
 80013ee:	4640      	mov	r0, r8
 80013f0:	40c6      	lsrs	r6, r0
 80013f2:	002c      	movs	r4, r5
 80013f4:	430e      	orrs	r6, r1
 80013f6:	4641      	mov	r1, r8
 80013f8:	40cc      	lsrs	r4, r1
 80013fa:	4651      	mov	r1, sl
 80013fc:	2900      	cmp	r1, #0
 80013fe:	dad1      	bge.n	80013a4 <__divdi3+0x154>
 8001400:	4640      	mov	r0, r8
 8001402:	2120      	movs	r1, #32
 8001404:	0035      	movs	r5, r6
 8001406:	4084      	lsls	r4, r0
 8001408:	1a09      	subs	r1, r1, r0
 800140a:	40cd      	lsrs	r5, r1
 800140c:	0021      	movs	r1, r4
 800140e:	4329      	orrs	r1, r5
 8001410:	e7cb      	b.n	80013aa <__divdi3+0x15a>
 8001412:	4641      	mov	r1, r8
 8001414:	2620      	movs	r6, #32
 8001416:	2701      	movs	r7, #1
 8001418:	1a76      	subs	r6, r6, r1
 800141a:	2000      	movs	r0, #0
 800141c:	2100      	movs	r1, #0
 800141e:	40f7      	lsrs	r7, r6
 8001420:	9000      	str	r0, [sp, #0]
 8001422:	9101      	str	r1, [sp, #4]
 8001424:	9701      	str	r7, [sp, #4]
 8001426:	e76b      	b.n	8001300 <__divdi3+0xb0>

08001428 <__eqsf2>:
 8001428:	b570      	push	{r4, r5, r6, lr}
 800142a:	0042      	lsls	r2, r0, #1
 800142c:	024e      	lsls	r6, r1, #9
 800142e:	004c      	lsls	r4, r1, #1
 8001430:	0245      	lsls	r5, r0, #9
 8001432:	0a6d      	lsrs	r5, r5, #9
 8001434:	0e12      	lsrs	r2, r2, #24
 8001436:	0fc3      	lsrs	r3, r0, #31
 8001438:	0a76      	lsrs	r6, r6, #9
 800143a:	0e24      	lsrs	r4, r4, #24
 800143c:	0fc9      	lsrs	r1, r1, #31
 800143e:	2aff      	cmp	r2, #255	@ 0xff
 8001440:	d010      	beq.n	8001464 <__eqsf2+0x3c>
 8001442:	2cff      	cmp	r4, #255	@ 0xff
 8001444:	d00c      	beq.n	8001460 <__eqsf2+0x38>
 8001446:	2001      	movs	r0, #1
 8001448:	42a2      	cmp	r2, r4
 800144a:	d10a      	bne.n	8001462 <__eqsf2+0x3a>
 800144c:	42b5      	cmp	r5, r6
 800144e:	d108      	bne.n	8001462 <__eqsf2+0x3a>
 8001450:	428b      	cmp	r3, r1
 8001452:	d00f      	beq.n	8001474 <__eqsf2+0x4c>
 8001454:	2a00      	cmp	r2, #0
 8001456:	d104      	bne.n	8001462 <__eqsf2+0x3a>
 8001458:	0028      	movs	r0, r5
 800145a:	1e43      	subs	r3, r0, #1
 800145c:	4198      	sbcs	r0, r3
 800145e:	e000      	b.n	8001462 <__eqsf2+0x3a>
 8001460:	2001      	movs	r0, #1
 8001462:	bd70      	pop	{r4, r5, r6, pc}
 8001464:	2001      	movs	r0, #1
 8001466:	2cff      	cmp	r4, #255	@ 0xff
 8001468:	d1fb      	bne.n	8001462 <__eqsf2+0x3a>
 800146a:	4335      	orrs	r5, r6
 800146c:	d1f9      	bne.n	8001462 <__eqsf2+0x3a>
 800146e:	404b      	eors	r3, r1
 8001470:	0018      	movs	r0, r3
 8001472:	e7f6      	b.n	8001462 <__eqsf2+0x3a>
 8001474:	2000      	movs	r0, #0
 8001476:	e7f4      	b.n	8001462 <__eqsf2+0x3a>

08001478 <__gesf2>:
 8001478:	b530      	push	{r4, r5, lr}
 800147a:	0042      	lsls	r2, r0, #1
 800147c:	0244      	lsls	r4, r0, #9
 800147e:	024d      	lsls	r5, r1, #9
 8001480:	0fc3      	lsrs	r3, r0, #31
 8001482:	0048      	lsls	r0, r1, #1
 8001484:	0a64      	lsrs	r4, r4, #9
 8001486:	0e12      	lsrs	r2, r2, #24
 8001488:	0a6d      	lsrs	r5, r5, #9
 800148a:	0e00      	lsrs	r0, r0, #24
 800148c:	0fc9      	lsrs	r1, r1, #31
 800148e:	2aff      	cmp	r2, #255	@ 0xff
 8001490:	d018      	beq.n	80014c4 <__gesf2+0x4c>
 8001492:	28ff      	cmp	r0, #255	@ 0xff
 8001494:	d00a      	beq.n	80014ac <__gesf2+0x34>
 8001496:	2a00      	cmp	r2, #0
 8001498:	d11e      	bne.n	80014d8 <__gesf2+0x60>
 800149a:	2800      	cmp	r0, #0
 800149c:	d10a      	bne.n	80014b4 <__gesf2+0x3c>
 800149e:	2d00      	cmp	r5, #0
 80014a0:	d029      	beq.n	80014f6 <__gesf2+0x7e>
 80014a2:	2c00      	cmp	r4, #0
 80014a4:	d12d      	bne.n	8001502 <__gesf2+0x8a>
 80014a6:	0048      	lsls	r0, r1, #1
 80014a8:	3801      	subs	r0, #1
 80014aa:	bd30      	pop	{r4, r5, pc}
 80014ac:	2d00      	cmp	r5, #0
 80014ae:	d125      	bne.n	80014fc <__gesf2+0x84>
 80014b0:	2a00      	cmp	r2, #0
 80014b2:	d101      	bne.n	80014b8 <__gesf2+0x40>
 80014b4:	2c00      	cmp	r4, #0
 80014b6:	d0f6      	beq.n	80014a6 <__gesf2+0x2e>
 80014b8:	428b      	cmp	r3, r1
 80014ba:	d019      	beq.n	80014f0 <__gesf2+0x78>
 80014bc:	2001      	movs	r0, #1
 80014be:	425b      	negs	r3, r3
 80014c0:	4318      	orrs	r0, r3
 80014c2:	e7f2      	b.n	80014aa <__gesf2+0x32>
 80014c4:	2c00      	cmp	r4, #0
 80014c6:	d119      	bne.n	80014fc <__gesf2+0x84>
 80014c8:	28ff      	cmp	r0, #255	@ 0xff
 80014ca:	d1f7      	bne.n	80014bc <__gesf2+0x44>
 80014cc:	2d00      	cmp	r5, #0
 80014ce:	d115      	bne.n	80014fc <__gesf2+0x84>
 80014d0:	2000      	movs	r0, #0
 80014d2:	428b      	cmp	r3, r1
 80014d4:	d1f2      	bne.n	80014bc <__gesf2+0x44>
 80014d6:	e7e8      	b.n	80014aa <__gesf2+0x32>
 80014d8:	2800      	cmp	r0, #0
 80014da:	d0ef      	beq.n	80014bc <__gesf2+0x44>
 80014dc:	428b      	cmp	r3, r1
 80014de:	d1ed      	bne.n	80014bc <__gesf2+0x44>
 80014e0:	4282      	cmp	r2, r0
 80014e2:	dceb      	bgt.n	80014bc <__gesf2+0x44>
 80014e4:	db04      	blt.n	80014f0 <__gesf2+0x78>
 80014e6:	42ac      	cmp	r4, r5
 80014e8:	d8e8      	bhi.n	80014bc <__gesf2+0x44>
 80014ea:	2000      	movs	r0, #0
 80014ec:	42ac      	cmp	r4, r5
 80014ee:	d2dc      	bcs.n	80014aa <__gesf2+0x32>
 80014f0:	0058      	lsls	r0, r3, #1
 80014f2:	3801      	subs	r0, #1
 80014f4:	e7d9      	b.n	80014aa <__gesf2+0x32>
 80014f6:	2c00      	cmp	r4, #0
 80014f8:	d0d7      	beq.n	80014aa <__gesf2+0x32>
 80014fa:	e7df      	b.n	80014bc <__gesf2+0x44>
 80014fc:	2002      	movs	r0, #2
 80014fe:	4240      	negs	r0, r0
 8001500:	e7d3      	b.n	80014aa <__gesf2+0x32>
 8001502:	428b      	cmp	r3, r1
 8001504:	d1da      	bne.n	80014bc <__gesf2+0x44>
 8001506:	e7ee      	b.n	80014e6 <__gesf2+0x6e>

08001508 <__lesf2>:
 8001508:	b530      	push	{r4, r5, lr}
 800150a:	0042      	lsls	r2, r0, #1
 800150c:	0244      	lsls	r4, r0, #9
 800150e:	024d      	lsls	r5, r1, #9
 8001510:	0fc3      	lsrs	r3, r0, #31
 8001512:	0048      	lsls	r0, r1, #1
 8001514:	0a64      	lsrs	r4, r4, #9
 8001516:	0e12      	lsrs	r2, r2, #24
 8001518:	0a6d      	lsrs	r5, r5, #9
 800151a:	0e00      	lsrs	r0, r0, #24
 800151c:	0fc9      	lsrs	r1, r1, #31
 800151e:	2aff      	cmp	r2, #255	@ 0xff
 8001520:	d017      	beq.n	8001552 <__lesf2+0x4a>
 8001522:	28ff      	cmp	r0, #255	@ 0xff
 8001524:	d00a      	beq.n	800153c <__lesf2+0x34>
 8001526:	2a00      	cmp	r2, #0
 8001528:	d11b      	bne.n	8001562 <__lesf2+0x5a>
 800152a:	2800      	cmp	r0, #0
 800152c:	d10a      	bne.n	8001544 <__lesf2+0x3c>
 800152e:	2d00      	cmp	r5, #0
 8001530:	d01d      	beq.n	800156e <__lesf2+0x66>
 8001532:	2c00      	cmp	r4, #0
 8001534:	d12d      	bne.n	8001592 <__lesf2+0x8a>
 8001536:	0048      	lsls	r0, r1, #1
 8001538:	3801      	subs	r0, #1
 800153a:	e011      	b.n	8001560 <__lesf2+0x58>
 800153c:	2d00      	cmp	r5, #0
 800153e:	d10e      	bne.n	800155e <__lesf2+0x56>
 8001540:	2a00      	cmp	r2, #0
 8001542:	d101      	bne.n	8001548 <__lesf2+0x40>
 8001544:	2c00      	cmp	r4, #0
 8001546:	d0f6      	beq.n	8001536 <__lesf2+0x2e>
 8001548:	428b      	cmp	r3, r1
 800154a:	d10c      	bne.n	8001566 <__lesf2+0x5e>
 800154c:	0058      	lsls	r0, r3, #1
 800154e:	3801      	subs	r0, #1
 8001550:	e006      	b.n	8001560 <__lesf2+0x58>
 8001552:	2c00      	cmp	r4, #0
 8001554:	d103      	bne.n	800155e <__lesf2+0x56>
 8001556:	28ff      	cmp	r0, #255	@ 0xff
 8001558:	d105      	bne.n	8001566 <__lesf2+0x5e>
 800155a:	2d00      	cmp	r5, #0
 800155c:	d015      	beq.n	800158a <__lesf2+0x82>
 800155e:	2002      	movs	r0, #2
 8001560:	bd30      	pop	{r4, r5, pc}
 8001562:	2800      	cmp	r0, #0
 8001564:	d106      	bne.n	8001574 <__lesf2+0x6c>
 8001566:	2001      	movs	r0, #1
 8001568:	425b      	negs	r3, r3
 800156a:	4318      	orrs	r0, r3
 800156c:	e7f8      	b.n	8001560 <__lesf2+0x58>
 800156e:	2c00      	cmp	r4, #0
 8001570:	d0f6      	beq.n	8001560 <__lesf2+0x58>
 8001572:	e7f8      	b.n	8001566 <__lesf2+0x5e>
 8001574:	428b      	cmp	r3, r1
 8001576:	d1f6      	bne.n	8001566 <__lesf2+0x5e>
 8001578:	4282      	cmp	r2, r0
 800157a:	dcf4      	bgt.n	8001566 <__lesf2+0x5e>
 800157c:	dbe6      	blt.n	800154c <__lesf2+0x44>
 800157e:	42ac      	cmp	r4, r5
 8001580:	d8f1      	bhi.n	8001566 <__lesf2+0x5e>
 8001582:	2000      	movs	r0, #0
 8001584:	42ac      	cmp	r4, r5
 8001586:	d2eb      	bcs.n	8001560 <__lesf2+0x58>
 8001588:	e7e0      	b.n	800154c <__lesf2+0x44>
 800158a:	2000      	movs	r0, #0
 800158c:	428b      	cmp	r3, r1
 800158e:	d1ea      	bne.n	8001566 <__lesf2+0x5e>
 8001590:	e7e6      	b.n	8001560 <__lesf2+0x58>
 8001592:	428b      	cmp	r3, r1
 8001594:	d1e7      	bne.n	8001566 <__lesf2+0x5e>
 8001596:	e7f2      	b.n	800157e <__lesf2+0x76>

08001598 <Init_RFIO>:
static latch * RFIO_latch = &RFIO_latch_struct;

const Module_Slave_Bus_t *pbus = NULL;


void Init_RFIO(void){
 8001598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800159a:	b085      	sub	sp, #20
 800159c:	af04      	add	r7, sp, #16
    Init_RFIO_GPIO_Bus();
 800159e:	f000 f867 	bl	8001670 <Init_RFIO_GPIO_Bus>
    
    Init_DMA_UART(RFIO_uart, &huart1, UART_TX_Buffer, sizeof(UART_TX_Buffer), UART_RX_Buffer, sizeof(UART_RX_Buffer));
 80015a2:	4b23      	ldr	r3, [pc, #140]	@ (8001630 <Init_RFIO+0x98>)
 80015a4:	6818      	ldr	r0, [r3, #0]
 80015a6:	2380      	movs	r3, #128	@ 0x80
 80015a8:	005c      	lsls	r4, r3, #1
 80015aa:	4a22      	ldr	r2, [pc, #136]	@ (8001634 <Init_RFIO+0x9c>)
 80015ac:	4922      	ldr	r1, [pc, #136]	@ (8001638 <Init_RFIO+0xa0>)
 80015ae:	2380      	movs	r3, #128	@ 0x80
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	9301      	str	r3, [sp, #4]
 80015b4:	4b21      	ldr	r3, [pc, #132]	@ (800163c <Init_RFIO+0xa4>)
 80015b6:	9300      	str	r3, [sp, #0]
 80015b8:	0023      	movs	r3, r4
 80015ba:	f006 fd15 	bl	8007fe8 <Init_DMA_UART>
    
    pbus = Init_Module_Bus(I2C1, INT_OUT_GPIO_Port, INT_OUT_Pin, &FWVer);
 80015be:	4b20      	ldr	r3, [pc, #128]	@ (8001640 <Init_RFIO+0xa8>)
 80015c0:	2280      	movs	r2, #128	@ 0x80
 80015c2:	0052      	lsls	r2, r2, #1
 80015c4:	21a0      	movs	r1, #160	@ 0xa0
 80015c6:	05c9      	lsls	r1, r1, #23
 80015c8:	481e      	ldr	r0, [pc, #120]	@ (8001644 <Init_RFIO+0xac>)
 80015ca:	f008 f8c5 	bl	8009758 <Init_Module_Bus>
 80015ce:	0002      	movs	r2, r0
 80015d0:	4b1d      	ldr	r3, [pc, #116]	@ (8001648 <Init_RFIO+0xb0>)
 80015d2:	601a      	str	r2, [r3, #0]

    Init_HumPRO_900(HumPRO_900, RFIO_uart, Power_Down_GPIO, Reset_GPIO, CMD_GPIO, BE_GPIO, EX_GPIO, CRESP_GPIO);
 80015d4:	4b1d      	ldr	r3, [pc, #116]	@ (800164c <Init_RFIO+0xb4>)
 80015d6:	681c      	ldr	r4, [r3, #0]
 80015d8:	4b15      	ldr	r3, [pc, #84]	@ (8001630 <Init_RFIO+0x98>)
 80015da:	681d      	ldr	r5, [r3, #0]
 80015dc:	4b1c      	ldr	r3, [pc, #112]	@ (8001650 <Init_RFIO+0xb8>)
 80015de:	681e      	ldr	r6, [r3, #0]
 80015e0:	4b1c      	ldr	r3, [pc, #112]	@ (8001654 <Init_RFIO+0xbc>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	469c      	mov	ip, r3
 80015e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001658 <Init_RFIO+0xc0>)
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	4b1c      	ldr	r3, [pc, #112]	@ (800165c <Init_RFIO+0xc4>)
 80015ec:	6819      	ldr	r1, [r3, #0]
 80015ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001660 <Init_RFIO+0xc8>)
 80015f0:	6818      	ldr	r0, [r3, #0]
 80015f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001664 <Init_RFIO+0xcc>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	9303      	str	r3, [sp, #12]
 80015f8:	9002      	str	r0, [sp, #8]
 80015fa:	9101      	str	r1, [sp, #4]
 80015fc:	9200      	str	r2, [sp, #0]
 80015fe:	4663      	mov	r3, ip
 8001600:	0032      	movs	r2, r6
 8001602:	0029      	movs	r1, r5
 8001604:	0020      	movs	r0, r4
 8001606:	f006 ff1d 	bl	8008444 <Init_HumPRO_900>

    HumPRO_900->Receiver.RX_Complete_Callback = rfio_RX_Complete;
 800160a:	4b10      	ldr	r3, [pc, #64]	@ (800164c <Init_RFIO+0xb4>)
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	2393      	movs	r3, #147	@ 0x93
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	4915      	ldr	r1, [pc, #84]	@ (8001668 <Init_RFIO+0xd0>)
 8001614:	50d1      	str	r1, [r2, r3]

    RFIO_latch->RFIO_Event_Flag = 0;
 8001616:	4b15      	ldr	r3, [pc, #84]	@ (800166c <Init_RFIO+0xd4>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	2200      	movs	r2, #0
 800161c:	701a      	strb	r2, [r3, #0]
    RFIO_latch->latch_states = 0;
 800161e:	4b13      	ldr	r3, [pc, #76]	@ (800166c <Init_RFIO+0xd4>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	2200      	movs	r2, #0
 8001624:	705a      	strb	r2, [r3, #1]
}
 8001626:	46c0      	nop			@ (mov r8, r8)
 8001628:	46bd      	mov	sp, r7
 800162a:	b001      	add	sp, #4
 800162c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800162e:	46c0      	nop			@ (mov r8, r8)
 8001630:	20000004 	.word	0x20000004
 8001634:	200004ac 	.word	0x200004ac
 8001638:	200007fc 	.word	0x200007fc
 800163c:	200005ac 	.word	0x200005ac
 8001640:	0800e114 	.word	0x0800e114
 8001644:	40005400 	.word	0x40005400
 8001648:	200006e0 	.word	0x200006e0
 800164c:	20000000 	.word	0x20000000
 8001650:	20000008 	.word	0x20000008
 8001654:	2000000c 	.word	0x2000000c
 8001658:	20000010 	.word	0x20000010
 800165c:	20000014 	.word	0x20000014
 8001660:	20000018 	.word	0x20000018
 8001664:	2000001c 	.word	0x2000001c
 8001668:	0800173d 	.word	0x0800173d
 800166c:	20000020 	.word	0x20000020

08001670 <Init_RFIO_GPIO_Bus>:

void Init_RFIO_GPIO_Bus(void){
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
    Init_GPIO(Power_Down_GPIO, N_CTS_GPIO_Port, N_CTS_Pin);
 8001674:	4b18      	ldr	r3, [pc, #96]	@ (80016d8 <Init_RFIO_GPIO_Bus+0x68>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	22a0      	movs	r2, #160	@ 0xa0
 800167a:	05d1      	lsls	r1, r2, #23
 800167c:	2240      	movs	r2, #64	@ 0x40
 800167e:	0018      	movs	r0, r3
 8001680:	f001 f9cb 	bl	8002a1a <Init_GPIO>
    Init_GPIO(Reset_GPIO, N_RST_GPIO_Port, N_RST_Pin);
 8001684:	4b15      	ldr	r3, [pc, #84]	@ (80016dc <Init_RFIO_GPIO_Bus+0x6c>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	22a0      	movs	r2, #160	@ 0xa0
 800168a:	05d1      	lsls	r1, r2, #23
 800168c:	2280      	movs	r2, #128	@ 0x80
 800168e:	0018      	movs	r0, r3
 8001690:	f001 f9c3 	bl	8002a1a <Init_GPIO>
    Init_GPIO(CMD_GPIO, N_CMD_GPIO_Port, N_CMD_Pin);
 8001694:	4b12      	ldr	r3, [pc, #72]	@ (80016e0 <Init_RFIO_GPIO_Bus+0x70>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4912      	ldr	r1, [pc, #72]	@ (80016e4 <Init_RFIO_GPIO_Bus+0x74>)
 800169a:	2210      	movs	r2, #16
 800169c:	0018      	movs	r0, r3
 800169e:	f001 f9bc 	bl	8002a1a <Init_GPIO>
    Init_GPIO(BE_GPIO, BE_GPIO_Port, BE_Pin);
 80016a2:	4b11      	ldr	r3, [pc, #68]	@ (80016e8 <Init_RFIO_GPIO_Bus+0x78>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	490f      	ldr	r1, [pc, #60]	@ (80016e4 <Init_RFIO_GPIO_Bus+0x74>)
 80016a8:	2201      	movs	r2, #1
 80016aa:	0018      	movs	r0, r3
 80016ac:	f001 f9b5 	bl	8002a1a <Init_GPIO>
    Init_GPIO(EX_GPIO, EX_GPIO_Port, EX_Pin);
 80016b0:	4b0e      	ldr	r3, [pc, #56]	@ (80016ec <Init_RFIO_GPIO_Bus+0x7c>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	22a0      	movs	r2, #160	@ 0xa0
 80016b6:	05d1      	lsls	r1, r2, #23
 80016b8:	2210      	movs	r2, #16
 80016ba:	0018      	movs	r0, r3
 80016bc:	f001 f9ad 	bl	8002a1a <Init_GPIO>
    Init_GPIO(CRESP_GPIO, N_CRESP_GPIO_Port, N_CRESP_Pin);
 80016c0:	4b0b      	ldr	r3, [pc, #44]	@ (80016f0 <Init_RFIO_GPIO_Bus+0x80>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	22a0      	movs	r2, #160	@ 0xa0
 80016c6:	05d1      	lsls	r1, r2, #23
 80016c8:	2220      	movs	r2, #32
 80016ca:	0018      	movs	r0, r3
 80016cc:	f001 f9a5 	bl	8002a1a <Init_GPIO>
}
 80016d0:	46c0      	nop			@ (mov r8, r8)
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	46c0      	nop			@ (mov r8, r8)
 80016d8:	20000008 	.word	0x20000008
 80016dc:	2000000c 	.word	0x2000000c
 80016e0:	20000010 	.word	0x20000010
 80016e4:	50000400 	.word	0x50000400
 80016e8:	20000014 	.word	0x20000014
 80016ec:	20000018 	.word	0x20000018
 80016f0:	2000001c 	.word	0x2000001c

080016f4 <Send_Latch_States>:

void Send_Latch_States(void){
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af02      	add	r7, sp, #8
    uint8_t Data[2];
    Data[0] = RFIO_latch->latch_states;
 80016fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001738 <Send_Latch_States+0x44>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	785b      	ldrb	r3, [r3, #1]
 8001700:	b2da      	uxtb	r2, r3
 8001702:	003b      	movs	r3, r7
 8001704:	701a      	strb	r2, [r3, #0]
    Data[1] = RFIO_latch->RFIO_Event_Flag;
 8001706:	4b0c      	ldr	r3, [pc, #48]	@ (8001738 <Send_Latch_States+0x44>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	b2da      	uxtb	r2, r3
 800170e:	003b      	movs	r3, r7
 8001710:	705a      	strb	r2, [r3, #1]
    MODULE_BUS_PACKET * packet = Create_Module_Bus_Packet(rfio_msg_Read_Ports, 1, 1, 2, (unsigned char*)Data);
 8001712:	003b      	movs	r3, r7
 8001714:	9300      	str	r3, [sp, #0]
 8001716:	2302      	movs	r3, #2
 8001718:	2201      	movs	r2, #1
 800171a:	2101      	movs	r1, #1
 800171c:	2055      	movs	r0, #85	@ 0x55
 800171e:	f008 fa2f 	bl	8009b80 <Create_Module_Bus_Packet>
 8001722:	0003      	movs	r3, r0
 8001724:	607b      	str	r3, [r7, #4]
    Module_Bus_Buffered_Send(packet, 0);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2100      	movs	r1, #0
 800172a:	0018      	movs	r0, r3
 800172c:	f008 f94e 	bl	80099cc <Module_Bus_Buffered_Send>
}
 8001730:	46c0      	nop			@ (mov r8, r8)
 8001732:	46bd      	mov	sp, r7
 8001734:	b002      	add	sp, #8
 8001736:	bd80      	pop	{r7, pc}
 8001738:	20000020 	.word	0x20000020

0800173c <rfio_RX_Complete>:

void rfio_RX_Complete(void *callback_data, uint8_t *source_id, uint8_t *payload, uint8_t payload_len){
 800173c:	b580      	push	{r7, lr}
 800173e:	b08a      	sub	sp, #40	@ 0x28
 8001740:	af02      	add	r7, sp, #8
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	607a      	str	r2, [r7, #4]
 8001748:	001a      	movs	r2, r3
 800174a:	1cfb      	adds	r3, r7, #3
 800174c:	701a      	strb	r2, [r3, #0]
    rfio_src_wrapper(source_id);
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	0018      	movs	r0, r3
 8001752:	f000 f856 	bl	8001802 <rfio_src_wrapper>
    //not an RFIO message, return; need a more complex system as more RFIO is implemented. 
    // i.e, RFIO_MSG_ID, a certain magic number reserved for RFIO messages
    if (payload_len != RFIO_LENGTH){
 8001756:	1cfb      	adds	r3, r7, #3
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	2b01      	cmp	r3, #1
 800175c:	d139      	bne.n	80017d2 <rfio_RX_Complete+0x96>
        return;
    }
    uint8_t new_latch;
    new_latch = payload[0];
 800175e:	201f      	movs	r0, #31
 8001760:	183b      	adds	r3, r7, r0
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	7812      	ldrb	r2, [r2, #0]
 8001766:	701a      	strb	r2, [r3, #0]
    // if latch is the same, return
    if (RFIO_latch->latch_states == new_latch) {
 8001768:	4b1d      	ldr	r3, [pc, #116]	@ (80017e0 <rfio_RX_Complete+0xa4>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	785b      	ldrb	r3, [r3, #1]
 800176e:	b2db      	uxtb	r3, r3
 8001770:	183a      	adds	r2, r7, r0
 8001772:	7812      	ldrb	r2, [r2, #0]
 8001774:	429a      	cmp	r2, r3
 8001776:	d02e      	beq.n	80017d6 <rfio_RX_Complete+0x9a>
            return;
    }

    // if latch is not the same, send the latch events
    RFIO_latch->RFIO_Event_Flag = RFIO_latch->latch_states ^ new_latch;
 8001778:	4b19      	ldr	r3, [pc, #100]	@ (80017e0 <rfio_RX_Complete+0xa4>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	785b      	ldrb	r3, [r3, #1]
 800177e:	b2d9      	uxtb	r1, r3
 8001780:	4b17      	ldr	r3, [pc, #92]	@ (80017e0 <rfio_RX_Complete+0xa4>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	183a      	adds	r2, r7, r0
 8001786:	7812      	ldrb	r2, [r2, #0]
 8001788:	404a      	eors	r2, r1
 800178a:	b2d2      	uxtb	r2, r2
 800178c:	701a      	strb	r2, [r3, #0]
    RFIO_latch->latch_states = new_latch;
 800178e:	4b14      	ldr	r3, [pc, #80]	@ (80017e0 <rfio_RX_Complete+0xa4>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	183a      	adds	r2, r7, r0
 8001794:	7812      	ldrb	r2, [r2, #0]
 8001796:	705a      	strb	r2, [r3, #1]
    uint8_t Data[2];
    Data[0] = RFIO_latch->latch_states;
 8001798:	4b11      	ldr	r3, [pc, #68]	@ (80017e0 <rfio_RX_Complete+0xa4>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	785b      	ldrb	r3, [r3, #1]
 800179e:	b2da      	uxtb	r2, r3
 80017a0:	2114      	movs	r1, #20
 80017a2:	187b      	adds	r3, r7, r1
 80017a4:	701a      	strb	r2, [r3, #0]
    Data[1] = RFIO_latch->RFIO_Event_Flag;
 80017a6:	4b0e      	ldr	r3, [pc, #56]	@ (80017e0 <rfio_RX_Complete+0xa4>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	b2da      	uxtb	r2, r3
 80017ae:	187b      	adds	r3, r7, r1
 80017b0:	705a      	strb	r2, [r3, #1]
    MODULE_BUS_PACKET * packet = Create_Module_Bus_Packet(rfio_msg_Read_Ports, 1, 1, 2, (unsigned char*)Data);
 80017b2:	187b      	adds	r3, r7, r1
 80017b4:	9300      	str	r3, [sp, #0]
 80017b6:	2302      	movs	r3, #2
 80017b8:	2201      	movs	r2, #1
 80017ba:	2101      	movs	r1, #1
 80017bc:	2055      	movs	r0, #85	@ 0x55
 80017be:	f008 f9df 	bl	8009b80 <Create_Module_Bus_Packet>
 80017c2:	0003      	movs	r3, r0
 80017c4:	61bb      	str	r3, [r7, #24]
    Module_Bus_Buffered_Send(packet, 1);
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	2101      	movs	r1, #1
 80017ca:	0018      	movs	r0, r3
 80017cc:	f008 f8fe 	bl	80099cc <Module_Bus_Buffered_Send>
 80017d0:	e002      	b.n	80017d8 <rfio_RX_Complete+0x9c>
        return;
 80017d2:	46c0      	nop			@ (mov r8, r8)
 80017d4:	e000      	b.n	80017d8 <rfio_RX_Complete+0x9c>
            return;
 80017d6:	46c0      	nop			@ (mov r8, r8)

}
 80017d8:	46bd      	mov	sp, r7
 80017da:	b008      	add	sp, #32
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	46c0      	nop			@ (mov r8, r8)
 80017e0:	20000020 	.word	0x20000020

080017e4 <Module_Bus_Rx_Callback>:

void Module_Bus_Rx_Callback(MODULE_BUS_RX_PACKET * packet){
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
    switch(packet->RX_Packet.Formatted_Data.Packet_Header.Formatted_Packet_Header.Command){
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	2b55      	cmp	r3, #85	@ 0x55
 80017f2:	d102      	bne.n	80017fa <Module_Bus_Rx_Callback+0x16>
        case rfio_msg_Read_Ports:
            {
                Send_Latch_States();
 80017f4:	f7ff ff7e 	bl	80016f4 <Send_Latch_States>
            }
            break;
 80017f8:	46c0      	nop			@ (mov r8, r8)
        // put other cases below if decide to later implement
    }

}
 80017fa:	46c0      	nop			@ (mov r8, r8)
 80017fc:	46bd      	mov	sp, r7
 80017fe:	b002      	add	sp, #8
 8001800:	bd80      	pop	{r7, pc}

08001802 <rfio_src_wrapper>:


void rfio_src_wrapper(uint8_t *source_id){
 8001802:	b580      	push	{r7, lr}
 8001804:	b084      	sub	sp, #16
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
    uint8_t local_src_id[4];   
    memcpy(local_src_id, source_id, sizeof(local_src_id));
 800180a:	230c      	movs	r3, #12
 800180c:	18fa      	adds	r2, r7, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	0010      	movs	r0, r2
 8001812:	0019      	movs	r1, r3
 8001814:	2304      	movs	r3, #4
 8001816:	001a      	movs	r2, r3
 8001818:	f00a fd21 	bl	800c25e <memcpy>

    //do things with the source id here
    return;
 800181c:	46c0      	nop			@ (mov r8, r8)
 800181e:	46bd      	mov	sp, r7
 8001820:	b004      	add	sp, #16
 8001822:	bd80      	pop	{r7, pc}

08001824 <Prep_Queue>:
#include "Queue.h"
#include <stdlib.h>
#include <stdio.h>

void Prep_Queue(Queue * que)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
	que->Head = NULL;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2200      	movs	r2, #0
 8001830:	601a      	str	r2, [r3, #0]
	que->Tail = NULL;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2200      	movs	r2, #0
 8001836:	605a      	str	r2, [r3, #4]
	que->Size = 0;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2200      	movs	r2, #0
 800183c:	609a      	str	r2, [r3, #8]
}
 800183e:	46c0      	nop			@ (mov r8, r8)
 8001840:	46bd      	mov	sp, r7
 8001842:	b002      	add	sp, #8
 8001844:	bd80      	pop	{r7, pc}
	...

08001848 <Enqueue>:

uint8_t Enqueue(Queue * que, void * data)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	6039      	str	r1, [r7, #0]
	Node * node = (Node *)malloc(sizeof(Node));
 8001852:	2008      	movs	r0, #8
 8001854:	f009 fab0 	bl	800adb8 <malloc>
 8001858:	0003      	movs	r3, r0
 800185a:	60fb      	str	r3, [r7, #12]

	if(node != NULL)
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d01e      	beq.n	80018a0 <Enqueue+0x58>
	{
		node->Next = NULL;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	2200      	movs	r2, #0
 8001866:	605a      	str	r2, [r3, #4]
		node->Data = data;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	683a      	ldr	r2, [r7, #0]
 800186c:	601a      	str	r2, [r3, #0]

		if(que->Size == 0)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d106      	bne.n	8001884 <Enqueue+0x3c>
		{
			que->Head = node;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	68fa      	ldr	r2, [r7, #12]
 800187a:	601a      	str	r2, [r3, #0]
			que->Tail = node;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	68fa      	ldr	r2, [r7, #12]
 8001880:	605a      	str	r2, [r3, #4]
 8001882:	e006      	b.n	8001892 <Enqueue+0x4a>
		}
		else
		{
			que->Tail->Next = (Node *)node;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	68fa      	ldr	r2, [r7, #12]
 800188a:	605a      	str	r2, [r3, #4]
			que->Tail = node;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	68fa      	ldr	r2, [r7, #12]
 8001890:	605a      	str	r2, [r3, #4]
		}

		que->Size++;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	1c5a      	adds	r2, r3, #1
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	609a      	str	r2, [r3, #8]
		return 1;
 800189c:	2301      	movs	r3, #1
 800189e:	e004      	b.n	80018aa <Enqueue+0x62>
	}
	else
	{
		printf("Enqueue malloc error\r\n");
 80018a0:	4b04      	ldr	r3, [pc, #16]	@ (80018b4 <Enqueue+0x6c>)
 80018a2:	0018      	movs	r0, r3
 80018a4:	f009 fc8c 	bl	800b1c0 <puts>
		return 0;
 80018a8:	2300      	movs	r3, #0
	}
}
 80018aa:	0018      	movs	r0, r3
 80018ac:	46bd      	mov	sp, r7
 80018ae:	b004      	add	sp, #16
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	46c0      	nop			@ (mov r8, r8)
 80018b4:	0800d85c 	.word	0x0800d85c

080018b8 <Dequeue>:

void * Dequeue(Queue * que)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
	if(que->Size > 0)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d026      	beq.n	8001916 <Dequeue+0x5e>
	{
		void * return_value = que->Head->Data;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	60fb      	str	r3, [r7, #12]

		if(que->Size == 1)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d10b      	bne.n	80018f0 <Dequeue+0x38>
		{
			free(que->Head);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	0018      	movs	r0, r3
 80018de:	f009 fa75 	bl	800adcc <free>
			que->Head = NULL;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
			que->Tail = NULL;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2200      	movs	r2, #0
 80018ec:	605a      	str	r2, [r3, #4]
 80018ee:	e00b      	b.n	8001908 <Dequeue+0x50>
		}
		else
		{
			Node * temp = que->Head;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	60bb      	str	r3, [r7, #8]
			que->Head = (Node *)que->Head->Next;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	685a      	ldr	r2, [r3, #4]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	601a      	str	r2, [r3, #0]
			free(temp);
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	0018      	movs	r0, r3
 8001904:	f009 fa62 	bl	800adcc <free>
		}

		que->Size--;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	1e5a      	subs	r2, r3, #1
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	609a      	str	r2, [r3, #8]

		return return_value;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	e000      	b.n	8001918 <Dequeue+0x60>
	}
	else
		return NULL;
 8001916:	2300      	movs	r3, #0
}
 8001918:	0018      	movs	r0, r3
 800191a:	46bd      	mov	sp, r7
 800191c:	b004      	add	sp, #16
 800191e:	bd80      	pop	{r7, pc}

08001920 <Queue_Peek>:

void * Queue_Peek(Queue * que, uint32_t index)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6039      	str	r1, [r7, #0]
	if(index < que->Size)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	683a      	ldr	r2, [r7, #0]
 8001930:	429a      	cmp	r2, r3
 8001932:	d212      	bcs.n	800195a <Queue_Peek+0x3a>
	{
		Node * travler = que->Head;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	60fb      	str	r3, [r7, #12]
		uint32_t counter = 0;
 800193a:	2300      	movs	r3, #0
 800193c:	60bb      	str	r3, [r7, #8]
		for(; counter < index; counter++)
 800193e:	e005      	b.n	800194c <Queue_Peek+0x2c>
			travler = (Node *)travler->Next;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	60fb      	str	r3, [r7, #12]
		for(; counter < index; counter++)
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	3301      	adds	r3, #1
 800194a:	60bb      	str	r3, [r7, #8]
 800194c:	68ba      	ldr	r2, [r7, #8]
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	429a      	cmp	r2, r3
 8001952:	d3f5      	bcc.n	8001940 <Queue_Peek+0x20>

		return travler->Data;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	e000      	b.n	800195c <Queue_Peek+0x3c>
	}
	else
		return NULL;
 800195a:	2300      	movs	r3, #0
}
 800195c:	0018      	movs	r0, r3
 800195e:	46bd      	mov	sp, r7
 8001960:	b004      	add	sp, #16
 8001962:	bd80      	pop	{r7, pc}

08001964 <Start_Scheduler>:
static void Halt_Process(uint8_t * Console_Buff, void * Data);
static void Resume_Process(uint8_t * Console_Buff, void * Data);
#endif

void Start_Scheduler(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
	Prep_Queue(&Scheduler.Tasks);
 800196a:	4b16      	ldr	r3, [pc, #88]	@ (80019c4 <Start_Scheduler+0x60>)
 800196c:	0018      	movs	r0, r3
 800196e:	f7ff ff59 	bl	8001824 <Prep_Queue>
	Scheduler.Next_TID = 1;
 8001972:	4b14      	ldr	r3, [pc, #80]	@ (80019c4 <Start_Scheduler+0x60>)
 8001974:	2201      	movs	r2, #1
 8001976:	60da      	str	r2, [r3, #12]

	Task_ID = Start_Task(Scheduler_Tasks,NULL,1000);
 8001978:	23fa      	movs	r3, #250	@ 0xfa
 800197a:	009a      	lsls	r2, r3, #2
 800197c:	4b12      	ldr	r3, [pc, #72]	@ (80019c8 <Start_Scheduler+0x64>)
 800197e:	2100      	movs	r1, #0
 8001980:	0018      	movs	r0, r3
 8001982:	f000 f8af 	bl	8001ae4 <Start_Task>
 8001986:	0002      	movs	r2, r0
 8001988:	4b10      	ldr	r3, [pc, #64]	@ (80019cc <Start_Scheduler+0x68>)
 800198a:	601a      	str	r2, [r3, #0]
	Set_Task_Name(Task_ID,"Scheduler");
 800198c:	4b0f      	ldr	r3, [pc, #60]	@ (80019cc <Start_Scheduler+0x68>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a0f      	ldr	r2, [pc, #60]	@ (80019d0 <Start_Scheduler+0x6c>)
 8001992:	0011      	movs	r1, r2
 8001994:	0018      	movs	r0, r3
 8001996:	f000 f933 	bl	8001c00 <Set_Task_Name>
	tTask * t = (tTask *)Queue_Peek(&Scheduler.Tasks,Task_ID - 1);
 800199a:	4b0c      	ldr	r3, [pc, #48]	@ (80019cc <Start_Scheduler+0x68>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	1e5a      	subs	r2, r3, #1
 80019a0:	4b08      	ldr	r3, [pc, #32]	@ (80019c4 <Start_Scheduler+0x60>)
 80019a2:	0011      	movs	r1, r2
 80019a4:	0018      	movs	r0, r3
 80019a6:	f7ff ffbb 	bl	8001920 <Queue_Peek>
 80019aa:	0003      	movs	r3, r0
 80019ac:	607b      	str	r3, [r7, #4]
	Task_Add_Heap_Size(Task_ID, t);
 80019ae:	4b07      	ldr	r3, [pc, #28]	@ (80019cc <Start_Scheduler+0x68>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	0011      	movs	r1, r2
 80019b6:	0018      	movs	r0, r3
 80019b8:	f000 f950 	bl	8001c5c <Task_Add_Heap_Size>
}
 80019bc:	46c0      	nop			@ (mov r8, r8)
 80019be:	46bd      	mov	sp, r7
 80019c0:	b002      	add	sp, #8
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	200006e4 	.word	0x200006e4
 80019c8:	080019d5 	.word	0x080019d5
 80019cc:	20000024 	.word	0x20000024
 80019d0:	0800d874 	.word	0x0800d874

080019d4 <Scheduler_Tasks>:

static void Scheduler_Tasks(void * task_data)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
		Console_Commands_Added = true;
	}
#endif

	tTask * task;
	uint32_t counter = 0;
 80019dc:	2300      	movs	r3, #0
 80019de:	617b      	str	r3, [r7, #20]
	for(; counter < Scheduler.Tasks.Size; counter++)
 80019e0:	e025      	b.n	8001a2e <Scheduler_Tasks+0x5a>
	{
		task = (tTask *)Queue_Peek(&Scheduler.Tasks,counter);
 80019e2:	697a      	ldr	r2, [r7, #20]
 80019e4:	4b17      	ldr	r3, [pc, #92]	@ (8001a44 <Scheduler_Tasks+0x70>)
 80019e6:	0011      	movs	r1, r2
 80019e8:	0018      	movs	r0, r3
 80019ea:	f7ff ff99 	bl	8001920 <Queue_Peek>
 80019ee:	0003      	movs	r3, r0
 80019f0:	613b      	str	r3, [r7, #16]

		float percent = (float)task->Task_Running_Time / 1000.0;
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	691b      	ldr	r3, [r3, #16]
 80019f6:	0018      	movs	r0, r3
 80019f8:	f7ff fb80 	bl	80010fc <__aeabi_ui2f>
 80019fc:	1c03      	adds	r3, r0, #0
 80019fe:	4912      	ldr	r1, [pc, #72]	@ (8001a48 <Scheduler_Tasks+0x74>)
 8001a00:	1c18      	adds	r0, r3, #0
 8001a02:	f7fe fe87 	bl	8000714 <__aeabi_fdiv>
 8001a06:	1c03      	adds	r3, r0, #0
 8001a08:	60fb      	str	r3, [r7, #12]
		task->Task_Running_Percentage = percent * 100;
 8001a0a:	4910      	ldr	r1, [pc, #64]	@ (8001a4c <Scheduler_Tasks+0x78>)
 8001a0c:	68f8      	ldr	r0, [r7, #12]
 8001a0e:	f7fe ff97 	bl	8000940 <__aeabi_fmul>
 8001a12:	1c03      	adds	r3, r0, #0
 8001a14:	1c18      	adds	r0, r3, #0
 8001a16:	f7fe fd7b 	bl	8000510 <__aeabi_f2uiz>
 8001a1a:	0003      	movs	r3, r0
 8001a1c:	b2da      	uxtb	r2, r3
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	751a      	strb	r2, [r3, #20]

		task->Task_Running_Time = 0;
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	2200      	movs	r2, #0
 8001a26:	611a      	str	r2, [r3, #16]
	for(; counter < Scheduler.Tasks.Size; counter++)
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	617b      	str	r3, [r7, #20]
 8001a2e:	4b05      	ldr	r3, [pc, #20]	@ (8001a44 <Scheduler_Tasks+0x70>)
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	697a      	ldr	r2, [r7, #20]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d3d4      	bcc.n	80019e2 <Scheduler_Tasks+0xe>
	}
}
 8001a38:	46c0      	nop			@ (mov r8, r8)
 8001a3a:	46c0      	nop			@ (mov r8, r8)
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	b006      	add	sp, #24
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	46c0      	nop			@ (mov r8, r8)
 8001a44:	200006e4 	.word	0x200006e4
 8001a48:	447a0000 	.word	0x447a0000
 8001a4c:	42c80000 	.word	0x42c80000

08001a50 <Run_Scheduler_Tasks>:

void Run_Scheduler_Tasks(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
	if(Scheduler.Tasks.Size > 0)
 8001a56:	4b22      	ldr	r3, [pc, #136]	@ (8001ae0 <Run_Scheduler_Tasks+0x90>)
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d03b      	beq.n	8001ad6 <Run_Scheduler_Tasks+0x86>
	{
		// Loop through all of the tasks
		tTask * task;
		uint32_t counter = 0;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	60fb      	str	r3, [r7, #12]
		for(; counter < Scheduler.Tasks.Size; counter++)
 8001a62:	e033      	b.n	8001acc <Run_Scheduler_Tasks+0x7c>
		{
			task = (tTask *)Queue_Peek(&Scheduler.Tasks,counter);
 8001a64:	68fa      	ldr	r2, [r7, #12]
 8001a66:	4b1e      	ldr	r3, [pc, #120]	@ (8001ae0 <Run_Scheduler_Tasks+0x90>)
 8001a68:	0011      	movs	r1, r2
 8001a6a:	0018      	movs	r0, r3
 8001a6c:	f7ff ff58 	bl	8001920 <Queue_Peek>
 8001a70:	0003      	movs	r3, r0
 8001a72:	60bb      	str	r3, [r7, #8]

			// Test if it is time to process the task
			if((HAL_GetTick() - task->Start_Time) > task->Timeout)
 8001a74:	f001 f896 	bl	8002ba4 <HAL_GetTick>
 8001a78:	0002      	movs	r2, r0
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	1ad2      	subs	r2, r2, r3
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d91e      	bls.n	8001ac6 <Run_Scheduler_Tasks+0x76>
			{
				// Execute the task
				if(!task->Task_Halted)
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	7b1b      	ldrb	r3, [r3, #12]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d115      	bne.n	8001abc <Run_Scheduler_Tasks+0x6c>
				{
					uint32_t start = HAL_GetTick();
 8001a90:	f001 f888 	bl	8002ba4 <HAL_GetTick>
 8001a94:	0003      	movs	r3, r0
 8001a96:	607b      	str	r3, [r7, #4]
					task->Task_Exe(task->Task_Data);
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aa0:	0018      	movs	r0, r3
 8001aa2:	4790      	blx	r2
					uint32_t stop = HAL_GetTick();
 8001aa4:	f001 f87e 	bl	8002ba4 <HAL_GetTick>
 8001aa8:	0003      	movs	r3, r0
 8001aaa:	603b      	str	r3, [r7, #0]
					task->Task_Running_Time += (stop - start);
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	691a      	ldr	r2, [r3, #16]
 8001ab0:	6839      	ldr	r1, [r7, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	1acb      	subs	r3, r1, r3
 8001ab6:	18d2      	adds	r2, r2, r3
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	611a      	str	r2, [r3, #16]
				}

				task->Start_Time = HAL_GetTick();
 8001abc:	f001 f872 	bl	8002ba4 <HAL_GetTick>
 8001ac0:	0002      	movs	r2, r0
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	605a      	str	r2, [r3, #4]
		for(; counter < Scheduler.Tasks.Size; counter++)
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	4b04      	ldr	r3, [pc, #16]	@ (8001ae0 <Run_Scheduler_Tasks+0x90>)
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	68fa      	ldr	r2, [r7, #12]
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d3c6      	bcc.n	8001a64 <Run_Scheduler_Tasks+0x14>
			}
		}
	}
}
 8001ad6:	46c0      	nop			@ (mov r8, r8)
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	b004      	add	sp, #16
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	46c0      	nop			@ (mov r8, r8)
 8001ae0:	200006e4 	.word	0x200006e4

08001ae4 <Start_Task>:

uint32_t Start_Task(void * Task_CallBack, void * Data, uint32_t timeout)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b086      	sub	sp, #24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	60b9      	str	r1, [r7, #8]
 8001aee:	607a      	str	r2, [r7, #4]
	tTask * task = (tTask *)malloc(sizeof(tTask));
 8001af0:	2034      	movs	r0, #52	@ 0x34
 8001af2:	f009 f961 	bl	800adb8 <malloc>
 8001af6:	0003      	movs	r3, r0
 8001af8:	617b      	str	r3, [r7, #20]

	if(Task_ID != 0xFFFFFFFF)
 8001afa:	4b27      	ldr	r3, [pc, #156]	@ (8001b98 <Start_Task+0xb4>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	3301      	adds	r3, #1
 8001b00:	d006      	beq.n	8001b10 <Start_Task+0x2c>
		Task_Add_Heap_Size(Task_ID, task);
 8001b02:	4b25      	ldr	r3, [pc, #148]	@ (8001b98 <Start_Task+0xb4>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	697a      	ldr	r2, [r7, #20]
 8001b08:	0011      	movs	r1, r2
 8001b0a:	0018      	movs	r0, r3
 8001b0c:	f000 f8a6 	bl	8001c5c <Task_Add_Heap_Size>

	if(task != NULL)
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d036      	beq.n	8001b84 <Start_Task+0xa0>
	{
		task->TID = Scheduler.Next_TID;
 8001b16:	4b21      	ldr	r3, [pc, #132]	@ (8001b9c <Start_Task+0xb8>)
 8001b18:	68da      	ldr	r2, [r3, #12]
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	601a      	str	r2, [r3, #0]
		Scheduler.Next_TID++;
 8001b1e:	4b1f      	ldr	r3, [pc, #124]	@ (8001b9c <Start_Task+0xb8>)
 8001b20:	68db      	ldr	r3, [r3, #12]
 8001b22:	1c5a      	adds	r2, r3, #1
 8001b24:	4b1d      	ldr	r3, [pc, #116]	@ (8001b9c <Start_Task+0xb8>)
 8001b26:	60da      	str	r2, [r3, #12]

		task->Task_Halted = 0;
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	731a      	strb	r2, [r3, #12]
		task->Start_Time = HAL_GetTick();
 8001b2e:	f001 f839 	bl	8002ba4 <HAL_GetTick>
 8001b32:	0002      	movs	r2, r0
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	605a      	str	r2, [r3, #4]
		task->Timeout = timeout;
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	609a      	str	r2, [r3, #8]
		task->Task_Running_Time = 0;
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	2200      	movs	r2, #0
 8001b42:	611a      	str	r2, [r3, #16]
		strcpy((char *)task->Task_Name,"               ");
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	3315      	adds	r3, #21
 8001b48:	001a      	movs	r2, r3
 8001b4a:	4b15      	ldr	r3, [pc, #84]	@ (8001ba0 <Start_Task+0xbc>)
 8001b4c:	0010      	movs	r0, r2
 8001b4e:	0019      	movs	r1, r3
 8001b50:	2310      	movs	r3, #16
 8001b52:	001a      	movs	r2, r3
 8001b54:	f00a fb83 	bl	800c25e <memcpy>
		task->Task_Exe = Task_CallBack;
 8001b58:	68fa      	ldr	r2, [r7, #12]
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	629a      	str	r2, [r3, #40]	@ 0x28
		task->Task_Data = Data;
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	68ba      	ldr	r2, [r7, #8]
 8001b62:	62da      	str	r2, [r3, #44]	@ 0x2c
		task->Task_Heap_Usage = 0;
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	2200      	movs	r2, #0
 8001b68:	631a      	str	r2, [r3, #48]	@ 0x30

		if(Enqueue(&Scheduler.Tasks,(void *)task))
 8001b6a:	697a      	ldr	r2, [r7, #20]
 8001b6c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b9c <Start_Task+0xb8>)
 8001b6e:	0011      	movs	r1, r2
 8001b70:	0018      	movs	r0, r3
 8001b72:	f7ff fe69 	bl	8001848 <Enqueue>
 8001b76:	1e03      	subs	r3, r0, #0
 8001b78:	d002      	beq.n	8001b80 <Start_Task+0x9c>
			return task->TID;
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	e006      	b.n	8001b8e <Start_Task+0xaa>
		else
			return 0;
 8001b80:	2300      	movs	r3, #0
 8001b82:	e004      	b.n	8001b8e <Start_Task+0xaa>
	}
	else
	{
		printf("Task start malloc error\r\n");
 8001b84:	4b07      	ldr	r3, [pc, #28]	@ (8001ba4 <Start_Task+0xc0>)
 8001b86:	0018      	movs	r0, r3
 8001b88:	f009 fb1a 	bl	800b1c0 <puts>
		return 0;
 8001b8c:	2300      	movs	r3, #0
	}
}
 8001b8e:	0018      	movs	r0, r3
 8001b90:	46bd      	mov	sp, r7
 8001b92:	b006      	add	sp, #24
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	46c0      	nop			@ (mov r8, r8)
 8001b98:	20000024 	.word	0x20000024
 8001b9c:	200006e4 	.word	0x200006e4
 8001ba0:	0800d880 	.word	0x0800d880
 8001ba4:	0800d890 	.word	0x0800d890

08001ba8 <Modify_Task_Timeout>:
		}
	}
}

void Modify_Task_Timeout(uint32_t task, uint32_t timeout)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
	// Loop through all of the tasks
	tTask * t;
	uint32_t counter = 0;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	60fb      	str	r3, [r7, #12]
	for(; counter < Scheduler.Tasks.Size; counter++)
 8001bb6:	e018      	b.n	8001bea <Modify_Task_Timeout+0x42>
	{
		t = (tTask *)Queue_Peek(&Scheduler.Tasks,counter);
 8001bb8:	68fa      	ldr	r2, [r7, #12]
 8001bba:	4b10      	ldr	r3, [pc, #64]	@ (8001bfc <Modify_Task_Timeout+0x54>)
 8001bbc:	0011      	movs	r1, r2
 8001bbe:	0018      	movs	r0, r3
 8001bc0:	f7ff feae 	bl	8001920 <Queue_Peek>
 8001bc4:	0003      	movs	r3, r0
 8001bc6:	60bb      	str	r3, [r7, #8]

		if(t->TID == task)
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d108      	bne.n	8001be4 <Modify_Task_Timeout+0x3c>
		{
			t->Timeout = timeout;
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	683a      	ldr	r2, [r7, #0]
 8001bd6:	609a      	str	r2, [r3, #8]
			t->Start_Time = HAL_GetTick();
 8001bd8:	f000 ffe4 	bl	8002ba4 <HAL_GetTick>
 8001bdc:	0002      	movs	r2, r0
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	605a      	str	r2, [r3, #4]

			return;
 8001be2:	e007      	b.n	8001bf4 <Modify_Task_Timeout+0x4c>
	for(; counter < Scheduler.Tasks.Size; counter++)
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	3301      	adds	r3, #1
 8001be8:	60fb      	str	r3, [r7, #12]
 8001bea:	4b04      	ldr	r3, [pc, #16]	@ (8001bfc <Modify_Task_Timeout+0x54>)
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	68fa      	ldr	r2, [r7, #12]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d3e1      	bcc.n	8001bb8 <Modify_Task_Timeout+0x10>
		}
	}
}
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	b004      	add	sp, #16
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	46c0      	nop			@ (mov r8, r8)
 8001bfc:	200006e4 	.word	0x200006e4

08001c00 <Set_Task_Name>:

void Set_Task_Name(uint32_t task, const char * name)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	6039      	str	r1, [r7, #0]
	// Loop through all of the tasks
	tTask * t;
	uint32_t counter = 0;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	60fb      	str	r3, [r7, #12]
	for(; counter < Scheduler.Tasks.Size; counter++)
 8001c0e:	e01b      	b.n	8001c48 <Set_Task_Name+0x48>
	{
		t = (tTask *)Queue_Peek(&Scheduler.Tasks,counter);
 8001c10:	68fa      	ldr	r2, [r7, #12]
 8001c12:	4b11      	ldr	r3, [pc, #68]	@ (8001c58 <Set_Task_Name+0x58>)
 8001c14:	0011      	movs	r1, r2
 8001c16:	0018      	movs	r0, r3
 8001c18:	f7ff fe82 	bl	8001920 <Queue_Peek>
 8001c1c:	0003      	movs	r3, r0
 8001c1e:	60bb      	str	r3, [r7, #8]

		if(t->TID == task)
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d10b      	bne.n	8001c42 <Set_Task_Name+0x42>
		{
			strncpy((char *)t->Task_Name,name,15);
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	3315      	adds	r3, #21
 8001c2e:	6839      	ldr	r1, [r7, #0]
 8001c30:	220f      	movs	r2, #15
 8001c32:	0018      	movs	r0, r3
 8001c34:	f009 fbd2 	bl	800b3dc <strncpy>
			t->Task_Name[15] = '\0';
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	2224      	movs	r2, #36	@ 0x24
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	5499      	strb	r1, [r3, r2]

			return;
 8001c40:	e007      	b.n	8001c52 <Set_Task_Name+0x52>
	for(; counter < Scheduler.Tasks.Size; counter++)
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	3301      	adds	r3, #1
 8001c46:	60fb      	str	r3, [r7, #12]
 8001c48:	4b03      	ldr	r3, [pc, #12]	@ (8001c58 <Set_Task_Name+0x58>)
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	68fa      	ldr	r2, [r7, #12]
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d3de      	bcc.n	8001c10 <Set_Task_Name+0x10>
		}
	}
}
 8001c52:	46bd      	mov	sp, r7
 8001c54:	b004      	add	sp, #16
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	200006e4 	.word	0x200006e4

08001c5c <Task_Add_Heap_Size>:
		}
	}
}

void Task_Add_Heap_Size(uint32_t task, void * data_ptr)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6039      	str	r1, [r7, #0]
	tTask * t;
	for(int counter = 0; counter < Scheduler.Tasks.Size; counter++)
 8001c66:	2300      	movs	r3, #0
 8001c68:	60fb      	str	r3, [r7, #12]
 8001c6a:	e01a      	b.n	8001ca2 <Task_Add_Heap_Size+0x46>
	{
		t = (tTask *)Queue_Peek(&Scheduler.Tasks,counter);
 8001c6c:	68fa      	ldr	r2, [r7, #12]
 8001c6e:	4b12      	ldr	r3, [pc, #72]	@ (8001cb8 <Task_Add_Heap_Size+0x5c>)
 8001c70:	0011      	movs	r1, r2
 8001c72:	0018      	movs	r0, r3
 8001c74:	f7ff fe54 	bl	8001920 <Queue_Peek>
 8001c78:	0003      	movs	r3, r0
 8001c7a:	60bb      	str	r3, [r7, #8]

		if(t->TID == task)
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d10a      	bne.n	8001c9c <Task_Add_Heap_Size+0x40>
		{
			t->Task_Heap_Usage += malloc_usable_size(data_ptr);
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	0018      	movs	r0, r3
 8001c8a:	f009 f95b 	bl	800af44 <malloc_usable_size>
 8001c8e:	0002      	movs	r2, r0
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c94:	18d2      	adds	r2, r2, r3
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	631a      	str	r2, [r3, #48]	@ 0x30
			break;
 8001c9a:	e008      	b.n	8001cae <Task_Add_Heap_Size+0x52>
	for(int counter = 0; counter < Scheduler.Tasks.Size; counter++)
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	60fb      	str	r3, [r7, #12]
 8001ca2:	4b05      	ldr	r3, [pc, #20]	@ (8001cb8 <Task_Add_Heap_Size+0x5c>)
 8001ca4:	689a      	ldr	r2, [r3, #8]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d8df      	bhi.n	8001c6c <Task_Add_Heap_Size+0x10>
		}
	}
}
 8001cac:	46c0      	nop			@ (mov r8, r8)
 8001cae:	46c0      	nop			@ (mov r8, r8)
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	b004      	add	sp, #16
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	46c0      	nop			@ (mov r8, r8)
 8001cb8:	200006e4 	.word	0x200006e4

08001cbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cc0:	f000 ff0a 	bl	8002ad8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cc4:	f000 f82a 	bl	8001d1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cc8:	f000 fad0 	bl	800226c <MX_GPIO_Init>
  MX_DMA_Init();
 8001ccc:	f000 fab0 	bl	8002230 <MX_DMA_Init>
  MX_CRC_Init();
 8001cd0:	f000 f8a0 	bl	8001e14 <MX_CRC_Init>
  MX_I2C1_Init();
 8001cd4:	f000 f8c2 	bl	8001e5c <MX_I2C1_Init>
  MX_IWDG_Init();
 8001cd8:	f000 f902 	bl	8001ee0 <MX_IWDG_Init>
  MX_TIM2_Init();
 8001cdc:	f000 f920 	bl	8001f20 <MX_TIM2_Init>
  MX_TIM21_Init();
 8001ce0:	f000 f99a 	bl	8002018 <MX_TIM21_Init>
  MX_USART2_UART_Init();
 8001ce4:	f000 fa44 	bl	8002170 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8001ce8:	f000 fa12 	bl	8002110 <MX_USART1_UART_Init>
  MX_USART4_UART_Init();
 8001cec:	f000 fa70 	bl	80021d0 <MX_USART4_UART_Init>
  /* USER CODE BEGIN 2 */
  Start_Scheduler();
 8001cf0:	f7ff fe38 	bl	8001964 <Start_Scheduler>
  Init_RFIO();
 8001cf4:	f7ff fc50 	bl	8001598 <Init_RFIO>
  HAL_TIM_Base_Start_IT(&htim2);
 8001cf8:	4b06      	ldr	r3, [pc, #24]	@ (8001d14 <main+0x58>)
 8001cfa:	0018      	movs	r0, r3
 8001cfc:	f003 ff06 	bl	8005b0c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim21);
 8001d00:	4b05      	ldr	r3, [pc, #20]	@ (8001d18 <main+0x5c>)
 8001d02:	0018      	movs	r0, r3
 8001d04:	f003 ff02 	bl	8005b0c <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    Run_Scheduler_Tasks();
 8001d08:	f7ff fea2 	bl	8001a50 <Run_Scheduler_Tasks>
    Module_Bus_Tasks();
 8001d0c:	f007 fdb2 	bl	8009874 <Module_Bus_Tasks>
    Run_Scheduler_Tasks();
 8001d10:	46c0      	nop			@ (mov r8, r8)
 8001d12:	e7f9      	b.n	8001d08 <main+0x4c>
 8001d14:	2000077c 	.word	0x2000077c
 8001d18:	200007bc 	.word	0x200007bc

08001d1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d1c:	b590      	push	{r4, r7, lr}
 8001d1e:	b09d      	sub	sp, #116	@ 0x74
 8001d20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d22:	2438      	movs	r4, #56	@ 0x38
 8001d24:	193b      	adds	r3, r7, r4
 8001d26:	0018      	movs	r0, r3
 8001d28:	2338      	movs	r3, #56	@ 0x38
 8001d2a:	001a      	movs	r2, r3
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	f009 fb4d 	bl	800b3cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d32:	2324      	movs	r3, #36	@ 0x24
 8001d34:	18fb      	adds	r3, r7, r3
 8001d36:	0018      	movs	r0, r3
 8001d38:	2314      	movs	r3, #20
 8001d3a:	001a      	movs	r2, r3
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	f009 fb45 	bl	800b3cc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d42:	003b      	movs	r3, r7
 8001d44:	0018      	movs	r0, r3
 8001d46:	2324      	movs	r3, #36	@ 0x24
 8001d48:	001a      	movs	r2, r3
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	f009 fb3e 	bl	800b3cc <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d50:	4b2e      	ldr	r3, [pc, #184]	@ (8001e0c <SystemClock_Config+0xf0>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a2e      	ldr	r2, [pc, #184]	@ (8001e10 <SystemClock_Config+0xf4>)
 8001d56:	401a      	ands	r2, r3
 8001d58:	4b2c      	ldr	r3, [pc, #176]	@ (8001e0c <SystemClock_Config+0xf0>)
 8001d5a:	2180      	movs	r1, #128	@ 0x80
 8001d5c:	0109      	lsls	r1, r1, #4
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001d62:	0021      	movs	r1, r4
 8001d64:	187b      	adds	r3, r7, r1
 8001d66:	220a      	movs	r2, #10
 8001d68:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d6a:	187b      	adds	r3, r7, r1
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d70:	187b      	adds	r3, r7, r1
 8001d72:	2210      	movs	r2, #16
 8001d74:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001d76:	187b      	adds	r3, r7, r1
 8001d78:	2201      	movs	r2, #1
 8001d7a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d7c:	187b      	adds	r3, r7, r1
 8001d7e:	2202      	movs	r2, #2
 8001d80:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d82:	187b      	adds	r3, r7, r1
 8001d84:	2200      	movs	r2, #0
 8001d86:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8001d88:	187b      	adds	r3, r7, r1
 8001d8a:	2280      	movs	r2, #128	@ 0x80
 8001d8c:	02d2      	lsls	r2, r2, #11
 8001d8e:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8001d90:	187b      	adds	r3, r7, r1
 8001d92:	2280      	movs	r2, #128	@ 0x80
 8001d94:	03d2      	lsls	r2, r2, #15
 8001d96:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d98:	187b      	adds	r3, r7, r1
 8001d9a:	0018      	movs	r0, r3
 8001d9c:	f002 ff42 	bl	8004c24 <HAL_RCC_OscConfig>
 8001da0:	1e03      	subs	r3, r0, #0
 8001da2:	d001      	beq.n	8001da8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001da4:	f000 fb10 	bl	80023c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001da8:	2124      	movs	r1, #36	@ 0x24
 8001daa:	187b      	adds	r3, r7, r1
 8001dac:	220f      	movs	r2, #15
 8001dae:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001db0:	187b      	adds	r3, r7, r1
 8001db2:	2203      	movs	r2, #3
 8001db4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001db6:	187b      	adds	r3, r7, r1
 8001db8:	2200      	movs	r2, #0
 8001dba:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001dbc:	187b      	adds	r3, r7, r1
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001dc2:	187b      	adds	r3, r7, r1
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001dc8:	187b      	adds	r3, r7, r1
 8001dca:	2101      	movs	r1, #1
 8001dcc:	0018      	movs	r0, r3
 8001dce:	f003 fafd 	bl	80053cc <HAL_RCC_ClockConfig>
 8001dd2:	1e03      	subs	r3, r0, #0
 8001dd4:	d001      	beq.n	8001dda <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001dd6:	f000 faf7 	bl	80023c8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8001dda:	003b      	movs	r3, r7
 8001ddc:	220b      	movs	r2, #11
 8001dde:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001de0:	003b      	movs	r3, r7
 8001de2:	2200      	movs	r2, #0
 8001de4:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001de6:	003b      	movs	r3, r7
 8001de8:	2200      	movs	r2, #0
 8001dea:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001dec:	003b      	movs	r3, r7
 8001dee:	2200      	movs	r2, #0
 8001df0:	615a      	str	r2, [r3, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001df2:	003b      	movs	r3, r7
 8001df4:	0018      	movs	r0, r3
 8001df6:	f003 fced 	bl	80057d4 <HAL_RCCEx_PeriphCLKConfig>
 8001dfa:	1e03      	subs	r3, r0, #0
 8001dfc:	d001      	beq.n	8001e02 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8001dfe:	f000 fae3 	bl	80023c8 <Error_Handler>
  }
}
 8001e02:	46c0      	nop			@ (mov r8, r8)
 8001e04:	46bd      	mov	sp, r7
 8001e06:	b01d      	add	sp, #116	@ 0x74
 8001e08:	bd90      	pop	{r4, r7, pc}
 8001e0a:	46c0      	nop			@ (mov r8, r8)
 8001e0c:	40007000 	.word	0x40007000
 8001e10:	ffffe7ff 	.word	0xffffe7ff

08001e14 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001e18:	4b0e      	ldr	r3, [pc, #56]	@ (8001e54 <MX_CRC_Init+0x40>)
 8001e1a:	4a0f      	ldr	r2, [pc, #60]	@ (8001e58 <MX_CRC_Init+0x44>)
 8001e1c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001e1e:	4b0d      	ldr	r3, [pc, #52]	@ (8001e54 <MX_CRC_Init+0x40>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001e24:	4b0b      	ldr	r3, [pc, #44]	@ (8001e54 <MX_CRC_Init+0x40>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001e2a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e54 <MX_CRC_Init+0x40>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001e30:	4b08      	ldr	r3, [pc, #32]	@ (8001e54 <MX_CRC_Init+0x40>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001e36:	4b07      	ldr	r3, [pc, #28]	@ (8001e54 <MX_CRC_Init+0x40>)
 8001e38:	2201      	movs	r2, #1
 8001e3a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001e3c:	4b05      	ldr	r3, [pc, #20]	@ (8001e54 <MX_CRC_Init+0x40>)
 8001e3e:	0018      	movs	r0, r3
 8001e40:	f000 ffbc 	bl	8002dbc <HAL_CRC_Init>
 8001e44:	1e03      	subs	r3, r0, #0
 8001e46:	d001      	beq.n	8001e4c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001e48:	f000 fabe 	bl	80023c8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001e4c:	46c0      	nop			@ (mov r8, r8)
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	46c0      	nop			@ (mov r8, r8)
 8001e54:	200006f4 	.word	0x200006f4
 8001e58:	40023000 	.word	0x40023000

08001e5c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001e60:	4b1c      	ldr	r3, [pc, #112]	@ (8001ed4 <MX_I2C1_Init+0x78>)
 8001e62:	4a1d      	ldr	r2, [pc, #116]	@ (8001ed8 <MX_I2C1_Init+0x7c>)
 8001e64:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00300F38;
 8001e66:	4b1b      	ldr	r3, [pc, #108]	@ (8001ed4 <MX_I2C1_Init+0x78>)
 8001e68:	4a1c      	ldr	r2, [pc, #112]	@ (8001edc <MX_I2C1_Init+0x80>)
 8001e6a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 136;
 8001e6c:	4b19      	ldr	r3, [pc, #100]	@ (8001ed4 <MX_I2C1_Init+0x78>)
 8001e6e:	2288      	movs	r2, #136	@ 0x88
 8001e70:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e72:	4b18      	ldr	r3, [pc, #96]	@ (8001ed4 <MX_I2C1_Init+0x78>)
 8001e74:	2201      	movs	r2, #1
 8001e76:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_ENABLE;
 8001e78:	4b16      	ldr	r3, [pc, #88]	@ (8001ed4 <MX_I2C1_Init+0x78>)
 8001e7a:	2280      	movs	r2, #128	@ 0x80
 8001e7c:	0212      	lsls	r2, r2, #8
 8001e7e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 254;
 8001e80:	4b14      	ldr	r3, [pc, #80]	@ (8001ed4 <MX_I2C1_Init+0x78>)
 8001e82:	22fe      	movs	r2, #254	@ 0xfe
 8001e84:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001e86:	4b13      	ldr	r3, [pc, #76]	@ (8001ed4 <MX_I2C1_Init+0x78>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e8c:	4b11      	ldr	r3, [pc, #68]	@ (8001ed4 <MX_I2C1_Init+0x78>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e92:	4b10      	ldr	r3, [pc, #64]	@ (8001ed4 <MX_I2C1_Init+0x78>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e98:	4b0e      	ldr	r3, [pc, #56]	@ (8001ed4 <MX_I2C1_Init+0x78>)
 8001e9a:	0018      	movs	r0, r3
 8001e9c:	f001 fea6 	bl	8003bec <HAL_I2C_Init>
 8001ea0:	1e03      	subs	r3, r0, #0
 8001ea2:	d001      	beq.n	8001ea8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001ea4:	f000 fa90 	bl	80023c8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001ea8:	4b0a      	ldr	r3, [pc, #40]	@ (8001ed4 <MX_I2C1_Init+0x78>)
 8001eaa:	2100      	movs	r1, #0
 8001eac:	0018      	movs	r0, r3
 8001eae:	f002 fdcf 	bl	8004a50 <HAL_I2CEx_ConfigAnalogFilter>
 8001eb2:	1e03      	subs	r3, r0, #0
 8001eb4:	d001      	beq.n	8001eba <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001eb6:	f000 fa87 	bl	80023c8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001eba:	4b06      	ldr	r3, [pc, #24]	@ (8001ed4 <MX_I2C1_Init+0x78>)
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	0018      	movs	r0, r3
 8001ec0:	f002 fe12 	bl	8004ae8 <HAL_I2CEx_ConfigDigitalFilter>
 8001ec4:	1e03      	subs	r3, r0, #0
 8001ec6:	d001      	beq.n	8001ecc <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001ec8:	f000 fa7e 	bl	80023c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ecc:	46c0      	nop			@ (mov r8, r8)
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	46c0      	nop			@ (mov r8, r8)
 8001ed4:	20000718 	.word	0x20000718
 8001ed8:	40005400 	.word	0x40005400
 8001edc:	00300f38 	.word	0x00300f38

08001ee0 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8001ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8001f14 <MX_IWDG_Init+0x34>)
 8001ee6:	4a0c      	ldr	r2, [pc, #48]	@ (8001f18 <MX_IWDG_Init+0x38>)
 8001ee8:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8001eea:	4b0a      	ldr	r3, [pc, #40]	@ (8001f14 <MX_IWDG_Init+0x34>)
 8001eec:	2206      	movs	r2, #6
 8001eee:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8001ef0:	4b08      	ldr	r3, [pc, #32]	@ (8001f14 <MX_IWDG_Init+0x34>)
 8001ef2:	4a0a      	ldr	r2, [pc, #40]	@ (8001f1c <MX_IWDG_Init+0x3c>)
 8001ef4:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 8001ef6:	4b07      	ldr	r3, [pc, #28]	@ (8001f14 <MX_IWDG_Init+0x34>)
 8001ef8:	4a08      	ldr	r2, [pc, #32]	@ (8001f1c <MX_IWDG_Init+0x3c>)
 8001efa:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8001efc:	4b05      	ldr	r3, [pc, #20]	@ (8001f14 <MX_IWDG_Init+0x34>)
 8001efe:	0018      	movs	r0, r3
 8001f00:	f002 fe3e 	bl	8004b80 <HAL_IWDG_Init>
 8001f04:	1e03      	subs	r3, r0, #0
 8001f06:	d001      	beq.n	8001f0c <MX_IWDG_Init+0x2c>
  {
    Error_Handler();
 8001f08:	f000 fa5e 	bl	80023c8 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8001f0c:	46c0      	nop			@ (mov r8, r8)
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	46c0      	nop			@ (mov r8, r8)
 8001f14:	2000076c 	.word	0x2000076c
 8001f18:	40003000 	.word	0x40003000
 8001f1c:	00000fff 	.word	0x00000fff

08001f20 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b08a      	sub	sp, #40	@ 0x28
 8001f24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f26:	2318      	movs	r3, #24
 8001f28:	18fb      	adds	r3, r7, r3
 8001f2a:	0018      	movs	r0, r3
 8001f2c:	2310      	movs	r3, #16
 8001f2e:	001a      	movs	r2, r3
 8001f30:	2100      	movs	r1, #0
 8001f32:	f009 fa4b 	bl	800b3cc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f36:	2310      	movs	r3, #16
 8001f38:	18fb      	adds	r3, r7, r3
 8001f3a:	0018      	movs	r0, r3
 8001f3c:	2308      	movs	r3, #8
 8001f3e:	001a      	movs	r2, r3
 8001f40:	2100      	movs	r1, #0
 8001f42:	f009 fa43 	bl	800b3cc <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f46:	003b      	movs	r3, r7
 8001f48:	0018      	movs	r0, r3
 8001f4a:	2310      	movs	r3, #16
 8001f4c:	001a      	movs	r2, r3
 8001f4e:	2100      	movs	r1, #0
 8001f50:	f009 fa3c 	bl	800b3cc <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f54:	4b2e      	ldr	r3, [pc, #184]	@ (8002010 <MX_TIM2_Init+0xf0>)
 8001f56:	2280      	movs	r2, #128	@ 0x80
 8001f58:	05d2      	lsls	r2, r2, #23
 8001f5a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001f5c:	4b2c      	ldr	r3, [pc, #176]	@ (8002010 <MX_TIM2_Init+0xf0>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f62:	4b2b      	ldr	r3, [pc, #172]	@ (8002010 <MX_TIM2_Init+0xf0>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 32000 - 1;
 8001f68:	4b29      	ldr	r3, [pc, #164]	@ (8002010 <MX_TIM2_Init+0xf0>)
 8001f6a:	4a2a      	ldr	r2, [pc, #168]	@ (8002014 <MX_TIM2_Init+0xf4>)
 8001f6c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f6e:	4b28      	ldr	r3, [pc, #160]	@ (8002010 <MX_TIM2_Init+0xf0>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f74:	4b26      	ldr	r3, [pc, #152]	@ (8002010 <MX_TIM2_Init+0xf0>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f7a:	4b25      	ldr	r3, [pc, #148]	@ (8002010 <MX_TIM2_Init+0xf0>)
 8001f7c:	0018      	movs	r0, r3
 8001f7e:	f003 fd85 	bl	8005a8c <HAL_TIM_Base_Init>
 8001f82:	1e03      	subs	r3, r0, #0
 8001f84:	d001      	beq.n	8001f8a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001f86:	f000 fa1f 	bl	80023c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f8a:	2118      	movs	r1, #24
 8001f8c:	187b      	adds	r3, r7, r1
 8001f8e:	2280      	movs	r2, #128	@ 0x80
 8001f90:	0152      	lsls	r2, r2, #5
 8001f92:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f94:	187a      	adds	r2, r7, r1
 8001f96:	4b1e      	ldr	r3, [pc, #120]	@ (8002010 <MX_TIM2_Init+0xf0>)
 8001f98:	0011      	movs	r1, r2
 8001f9a:	0018      	movs	r0, r3
 8001f9c:	f003 ff74 	bl	8005e88 <HAL_TIM_ConfigClockSource>
 8001fa0:	1e03      	subs	r3, r0, #0
 8001fa2:	d001      	beq.n	8001fa8 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8001fa4:	f000 fa10 	bl	80023c8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001fa8:	4b19      	ldr	r3, [pc, #100]	@ (8002010 <MX_TIM2_Init+0xf0>)
 8001faa:	0018      	movs	r0, r3
 8001fac:	f003 fe00 	bl	8005bb0 <HAL_TIM_OC_Init>
 8001fb0:	1e03      	subs	r3, r0, #0
 8001fb2:	d001      	beq.n	8001fb8 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001fb4:	f000 fa08 	bl	80023c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fb8:	2110      	movs	r1, #16
 8001fba:	187b      	adds	r3, r7, r1
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fc0:	187b      	adds	r3, r7, r1
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001fc6:	187a      	adds	r2, r7, r1
 8001fc8:	4b11      	ldr	r3, [pc, #68]	@ (8002010 <MX_TIM2_Init+0xf0>)
 8001fca:	0011      	movs	r1, r2
 8001fcc:	0018      	movs	r0, r3
 8001fce:	f004 fa59 	bl	8006484 <HAL_TIMEx_MasterConfigSynchronization>
 8001fd2:	1e03      	subs	r3, r0, #0
 8001fd4:	d001      	beq.n	8001fda <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8001fd6:	f000 f9f7 	bl	80023c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001fda:	003b      	movs	r3, r7
 8001fdc:	2200      	movs	r2, #0
 8001fde:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001fe0:	003b      	movs	r3, r7
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fe6:	003b      	movs	r3, r7
 8001fe8:	2200      	movs	r2, #0
 8001fea:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fec:	003b      	movs	r3, r7
 8001fee:	2200      	movs	r2, #0
 8001ff0:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ff2:	0039      	movs	r1, r7
 8001ff4:	4b06      	ldr	r3, [pc, #24]	@ (8002010 <MX_TIM2_Init+0xf0>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	0018      	movs	r0, r3
 8001ffa:	f003 feed 	bl	8005dd8 <HAL_TIM_OC_ConfigChannel>
 8001ffe:	1e03      	subs	r3, r0, #0
 8002000:	d001      	beq.n	8002006 <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 8002002:	f000 f9e1 	bl	80023c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002006:	46c0      	nop			@ (mov r8, r8)
 8002008:	46bd      	mov	sp, r7
 800200a:	b00a      	add	sp, #40	@ 0x28
 800200c:	bd80      	pop	{r7, pc}
 800200e:	46c0      	nop			@ (mov r8, r8)
 8002010:	2000077c 	.word	0x2000077c
 8002014:	00007cff 	.word	0x00007cff

08002018 <MX_TIM21_Init>:
  * @brief TIM21 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM21_Init(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b08a      	sub	sp, #40	@ 0x28
 800201c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800201e:	2318      	movs	r3, #24
 8002020:	18fb      	adds	r3, r7, r3
 8002022:	0018      	movs	r0, r3
 8002024:	2310      	movs	r3, #16
 8002026:	001a      	movs	r2, r3
 8002028:	2100      	movs	r1, #0
 800202a:	f009 f9cf 	bl	800b3cc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800202e:	2310      	movs	r3, #16
 8002030:	18fb      	adds	r3, r7, r3
 8002032:	0018      	movs	r0, r3
 8002034:	2308      	movs	r3, #8
 8002036:	001a      	movs	r2, r3
 8002038:	2100      	movs	r1, #0
 800203a:	f009 f9c7 	bl	800b3cc <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800203e:	003b      	movs	r3, r7
 8002040:	0018      	movs	r0, r3
 8002042:	2310      	movs	r3, #16
 8002044:	001a      	movs	r2, r3
 8002046:	2100      	movs	r1, #0
 8002048:	f009 f9c0 	bl	800b3cc <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 800204c:	4b2d      	ldr	r3, [pc, #180]	@ (8002104 <MX_TIM21_Init+0xec>)
 800204e:	4a2e      	ldr	r2, [pc, #184]	@ (8002108 <MX_TIM21_Init+0xf0>)
 8002050:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 0;
 8002052:	4b2c      	ldr	r3, [pc, #176]	@ (8002104 <MX_TIM21_Init+0xec>)
 8002054:	2200      	movs	r2, #0
 8002056:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002058:	4b2a      	ldr	r3, [pc, #168]	@ (8002104 <MX_TIM21_Init+0xec>)
 800205a:	2200      	movs	r2, #0
 800205c:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 3333 - 1;
 800205e:	4b29      	ldr	r3, [pc, #164]	@ (8002104 <MX_TIM21_Init+0xec>)
 8002060:	4a2a      	ldr	r2, [pc, #168]	@ (800210c <MX_TIM21_Init+0xf4>)
 8002062:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002064:	4b27      	ldr	r3, [pc, #156]	@ (8002104 <MX_TIM21_Init+0xec>)
 8002066:	2200      	movs	r2, #0
 8002068:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800206a:	4b26      	ldr	r3, [pc, #152]	@ (8002104 <MX_TIM21_Init+0xec>)
 800206c:	2200      	movs	r2, #0
 800206e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 8002070:	4b24      	ldr	r3, [pc, #144]	@ (8002104 <MX_TIM21_Init+0xec>)
 8002072:	0018      	movs	r0, r3
 8002074:	f003 fd0a 	bl	8005a8c <HAL_TIM_Base_Init>
 8002078:	1e03      	subs	r3, r0, #0
 800207a:	d001      	beq.n	8002080 <MX_TIM21_Init+0x68>
  {
    Error_Handler();
 800207c:	f000 f9a4 	bl	80023c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002080:	2118      	movs	r1, #24
 8002082:	187b      	adds	r3, r7, r1
 8002084:	2280      	movs	r2, #128	@ 0x80
 8002086:	0152      	lsls	r2, r2, #5
 8002088:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 800208a:	187a      	adds	r2, r7, r1
 800208c:	4b1d      	ldr	r3, [pc, #116]	@ (8002104 <MX_TIM21_Init+0xec>)
 800208e:	0011      	movs	r1, r2
 8002090:	0018      	movs	r0, r3
 8002092:	f003 fef9 	bl	8005e88 <HAL_TIM_ConfigClockSource>
 8002096:	1e03      	subs	r3, r0, #0
 8002098:	d001      	beq.n	800209e <MX_TIM21_Init+0x86>
  {
    Error_Handler();
 800209a:	f000 f995 	bl	80023c8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim21) != HAL_OK)
 800209e:	4b19      	ldr	r3, [pc, #100]	@ (8002104 <MX_TIM21_Init+0xec>)
 80020a0:	0018      	movs	r0, r3
 80020a2:	f003 fd85 	bl	8005bb0 <HAL_TIM_OC_Init>
 80020a6:	1e03      	subs	r3, r0, #0
 80020a8:	d001      	beq.n	80020ae <MX_TIM21_Init+0x96>
  {
    Error_Handler();
 80020aa:	f000 f98d 	bl	80023c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020ae:	2110      	movs	r1, #16
 80020b0:	187b      	adds	r3, r7, r1
 80020b2:	2200      	movs	r2, #0
 80020b4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020b6:	187b      	adds	r3, r7, r1
 80020b8:	2200      	movs	r2, #0
 80020ba:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 80020bc:	187a      	adds	r2, r7, r1
 80020be:	4b11      	ldr	r3, [pc, #68]	@ (8002104 <MX_TIM21_Init+0xec>)
 80020c0:	0011      	movs	r1, r2
 80020c2:	0018      	movs	r0, r3
 80020c4:	f004 f9de 	bl	8006484 <HAL_TIMEx_MasterConfigSynchronization>
 80020c8:	1e03      	subs	r3, r0, #0
 80020ca:	d001      	beq.n	80020d0 <MX_TIM21_Init+0xb8>
  {
    Error_Handler();
 80020cc:	f000 f97c 	bl	80023c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80020d0:	003b      	movs	r3, r7
 80020d2:	2200      	movs	r2, #0
 80020d4:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80020d6:	003b      	movs	r3, r7
 80020d8:	2200      	movs	r2, #0
 80020da:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020dc:	003b      	movs	r3, r7
 80020de:	2200      	movs	r2, #0
 80020e0:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020e2:	003b      	movs	r3, r7
 80020e4:	2200      	movs	r2, #0
 80020e6:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim21, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020e8:	0039      	movs	r1, r7
 80020ea:	4b06      	ldr	r3, [pc, #24]	@ (8002104 <MX_TIM21_Init+0xec>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	0018      	movs	r0, r3
 80020f0:	f003 fe72 	bl	8005dd8 <HAL_TIM_OC_ConfigChannel>
 80020f4:	1e03      	subs	r3, r0, #0
 80020f6:	d001      	beq.n	80020fc <MX_TIM21_Init+0xe4>
  {
    Error_Handler();
 80020f8:	f000 f966 	bl	80023c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */

}
 80020fc:	46c0      	nop			@ (mov r8, r8)
 80020fe:	46bd      	mov	sp, r7
 8002100:	b00a      	add	sp, #40	@ 0x28
 8002102:	bd80      	pop	{r7, pc}
 8002104:	200007bc 	.word	0x200007bc
 8002108:	40010800 	.word	0x40010800
 800210c:	00000d04 	.word	0x00000d04

08002110 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002114:	4b14      	ldr	r3, [pc, #80]	@ (8002168 <MX_USART1_UART_Init+0x58>)
 8002116:	4a15      	ldr	r2, [pc, #84]	@ (800216c <MX_USART1_UART_Init+0x5c>)
 8002118:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800211a:	4b13      	ldr	r3, [pc, #76]	@ (8002168 <MX_USART1_UART_Init+0x58>)
 800211c:	2296      	movs	r2, #150	@ 0x96
 800211e:	0192      	lsls	r2, r2, #6
 8002120:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002122:	4b11      	ldr	r3, [pc, #68]	@ (8002168 <MX_USART1_UART_Init+0x58>)
 8002124:	2200      	movs	r2, #0
 8002126:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002128:	4b0f      	ldr	r3, [pc, #60]	@ (8002168 <MX_USART1_UART_Init+0x58>)
 800212a:	2200      	movs	r2, #0
 800212c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800212e:	4b0e      	ldr	r3, [pc, #56]	@ (8002168 <MX_USART1_UART_Init+0x58>)
 8002130:	2200      	movs	r2, #0
 8002132:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002134:	4b0c      	ldr	r3, [pc, #48]	@ (8002168 <MX_USART1_UART_Init+0x58>)
 8002136:	220c      	movs	r2, #12
 8002138:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800213a:	4b0b      	ldr	r3, [pc, #44]	@ (8002168 <MX_USART1_UART_Init+0x58>)
 800213c:	2200      	movs	r2, #0
 800213e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002140:	4b09      	ldr	r3, [pc, #36]	@ (8002168 <MX_USART1_UART_Init+0x58>)
 8002142:	2200      	movs	r2, #0
 8002144:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002146:	4b08      	ldr	r3, [pc, #32]	@ (8002168 <MX_USART1_UART_Init+0x58>)
 8002148:	2200      	movs	r2, #0
 800214a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800214c:	4b06      	ldr	r3, [pc, #24]	@ (8002168 <MX_USART1_UART_Init+0x58>)
 800214e:	2200      	movs	r2, #0
 8002150:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002152:	4b05      	ldr	r3, [pc, #20]	@ (8002168 <MX_USART1_UART_Init+0x58>)
 8002154:	0018      	movs	r0, r3
 8002156:	f004 f9f3 	bl	8006540 <HAL_UART_Init>
 800215a:	1e03      	subs	r3, r0, #0
 800215c:	d001      	beq.n	8002162 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800215e:	f000 f933 	bl	80023c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002162:	46c0      	nop			@ (mov r8, r8)
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	200007fc 	.word	0x200007fc
 800216c:	40013800 	.word	0x40013800

08002170 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002174:	4b14      	ldr	r3, [pc, #80]	@ (80021c8 <MX_USART2_UART_Init+0x58>)
 8002176:	4a15      	ldr	r2, [pc, #84]	@ (80021cc <MX_USART2_UART_Init+0x5c>)
 8002178:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 28800;
 800217a:	4b13      	ldr	r3, [pc, #76]	@ (80021c8 <MX_USART2_UART_Init+0x58>)
 800217c:	22e1      	movs	r2, #225	@ 0xe1
 800217e:	01d2      	lsls	r2, r2, #7
 8002180:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002182:	4b11      	ldr	r3, [pc, #68]	@ (80021c8 <MX_USART2_UART_Init+0x58>)
 8002184:	2200      	movs	r2, #0
 8002186:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002188:	4b0f      	ldr	r3, [pc, #60]	@ (80021c8 <MX_USART2_UART_Init+0x58>)
 800218a:	2200      	movs	r2, #0
 800218c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800218e:	4b0e      	ldr	r3, [pc, #56]	@ (80021c8 <MX_USART2_UART_Init+0x58>)
 8002190:	2200      	movs	r2, #0
 8002192:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002194:	4b0c      	ldr	r3, [pc, #48]	@ (80021c8 <MX_USART2_UART_Init+0x58>)
 8002196:	220c      	movs	r2, #12
 8002198:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800219a:	4b0b      	ldr	r3, [pc, #44]	@ (80021c8 <MX_USART2_UART_Init+0x58>)
 800219c:	2200      	movs	r2, #0
 800219e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80021a0:	4b09      	ldr	r3, [pc, #36]	@ (80021c8 <MX_USART2_UART_Init+0x58>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021a6:	4b08      	ldr	r3, [pc, #32]	@ (80021c8 <MX_USART2_UART_Init+0x58>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021ac:	4b06      	ldr	r3, [pc, #24]	@ (80021c8 <MX_USART2_UART_Init+0x58>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80021b2:	4b05      	ldr	r3, [pc, #20]	@ (80021c8 <MX_USART2_UART_Init+0x58>)
 80021b4:	0018      	movs	r0, r3
 80021b6:	f004 f9c3 	bl	8006540 <HAL_UART_Init>
 80021ba:	1e03      	subs	r3, r0, #0
 80021bc:	d001      	beq.n	80021c2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80021be:	f000 f903 	bl	80023c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80021c2:	46c0      	nop			@ (mov r8, r8)
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	20000884 	.word	0x20000884
 80021cc:	40004400 	.word	0x40004400

080021d0 <MX_USART4_UART_Init>:
  * @brief USART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART4_UART_Init(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 80021d4:	4b14      	ldr	r3, [pc, #80]	@ (8002228 <MX_USART4_UART_Init+0x58>)
 80021d6:	4a15      	ldr	r2, [pc, #84]	@ (800222c <MX_USART4_UART_Init+0x5c>)
 80021d8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80021da:	4b13      	ldr	r3, [pc, #76]	@ (8002228 <MX_USART4_UART_Init+0x58>)
 80021dc:	22e1      	movs	r2, #225	@ 0xe1
 80021de:	0252      	lsls	r2, r2, #9
 80021e0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80021e2:	4b11      	ldr	r3, [pc, #68]	@ (8002228 <MX_USART4_UART_Init+0x58>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80021e8:	4b0f      	ldr	r3, [pc, #60]	@ (8002228 <MX_USART4_UART_Init+0x58>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80021ee:	4b0e      	ldr	r3, [pc, #56]	@ (8002228 <MX_USART4_UART_Init+0x58>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80021f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002228 <MX_USART4_UART_Init+0x58>)
 80021f6:	220c      	movs	r2, #12
 80021f8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021fa:	4b0b      	ldr	r3, [pc, #44]	@ (8002228 <MX_USART4_UART_Init+0x58>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002200:	4b09      	ldr	r3, [pc, #36]	@ (8002228 <MX_USART4_UART_Init+0x58>)
 8002202:	2200      	movs	r2, #0
 8002204:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002206:	4b08      	ldr	r3, [pc, #32]	@ (8002228 <MX_USART4_UART_Init+0x58>)
 8002208:	2200      	movs	r2, #0
 800220a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800220c:	4b06      	ldr	r3, [pc, #24]	@ (8002228 <MX_USART4_UART_Init+0x58>)
 800220e:	2200      	movs	r2, #0
 8002210:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_HalfDuplex_Init(&huart4) != HAL_OK)
 8002212:	4b05      	ldr	r3, [pc, #20]	@ (8002228 <MX_USART4_UART_Init+0x58>)
 8002214:	0018      	movs	r0, r3
 8002216:	f004 f9e7 	bl	80065e8 <HAL_HalfDuplex_Init>
 800221a:	1e03      	subs	r3, r0, #0
 800221c:	d001      	beq.n	8002222 <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 800221e:	f000 f8d3 	bl	80023c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 8002222:	46c0      	nop			@ (mov r8, r8)
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	2000090c 	.word	0x2000090c
 800222c:	40004c00 	.word	0x40004c00

08002230 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002236:	4b0c      	ldr	r3, [pc, #48]	@ (8002268 <MX_DMA_Init+0x38>)
 8002238:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800223a:	4b0b      	ldr	r3, [pc, #44]	@ (8002268 <MX_DMA_Init+0x38>)
 800223c:	2101      	movs	r1, #1
 800223e:	430a      	orrs	r2, r1
 8002240:	631a      	str	r2, [r3, #48]	@ 0x30
 8002242:	4b09      	ldr	r3, [pc, #36]	@ (8002268 <MX_DMA_Init+0x38>)
 8002244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002246:	2201      	movs	r2, #1
 8002248:	4013      	ands	r3, r2
 800224a:	607b      	str	r3, [r7, #4]
 800224c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800224e:	2200      	movs	r2, #0
 8002250:	2100      	movs	r1, #0
 8002252:	200a      	movs	r0, #10
 8002254:	f000 fd80 	bl	8002d58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8002258:	200a      	movs	r0, #10
 800225a:	f000 fd92 	bl	8002d82 <HAL_NVIC_EnableIRQ>

}
 800225e:	46c0      	nop			@ (mov r8, r8)
 8002260:	46bd      	mov	sp, r7
 8002262:	b002      	add	sp, #8
 8002264:	bd80      	pop	{r7, pc}
 8002266:	46c0      	nop			@ (mov r8, r8)
 8002268:	40021000 	.word	0x40021000

0800226c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800226c:	b590      	push	{r4, r7, lr}
 800226e:	b089      	sub	sp, #36	@ 0x24
 8002270:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002272:	240c      	movs	r4, #12
 8002274:	193b      	adds	r3, r7, r4
 8002276:	0018      	movs	r0, r3
 8002278:	2314      	movs	r3, #20
 800227a:	001a      	movs	r2, r3
 800227c:	2100      	movs	r1, #0
 800227e:	f009 f8a5 	bl	800b3cc <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002282:	4b4f      	ldr	r3, [pc, #316]	@ (80023c0 <MX_GPIO_Init+0x154>)
 8002284:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002286:	4b4e      	ldr	r3, [pc, #312]	@ (80023c0 <MX_GPIO_Init+0x154>)
 8002288:	2101      	movs	r1, #1
 800228a:	430a      	orrs	r2, r1
 800228c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800228e:	4b4c      	ldr	r3, [pc, #304]	@ (80023c0 <MX_GPIO_Init+0x154>)
 8002290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002292:	2201      	movs	r2, #1
 8002294:	4013      	ands	r3, r2
 8002296:	60bb      	str	r3, [r7, #8]
 8002298:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800229a:	4b49      	ldr	r3, [pc, #292]	@ (80023c0 <MX_GPIO_Init+0x154>)
 800229c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800229e:	4b48      	ldr	r3, [pc, #288]	@ (80023c0 <MX_GPIO_Init+0x154>)
 80022a0:	2102      	movs	r1, #2
 80022a2:	430a      	orrs	r2, r1
 80022a4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80022a6:	4b46      	ldr	r3, [pc, #280]	@ (80023c0 <MX_GPIO_Init+0x154>)
 80022a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022aa:	2202      	movs	r2, #2
 80022ac:	4013      	ands	r3, r2
 80022ae:	607b      	str	r3, [r7, #4]
 80022b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, N_RST_Pin|INT_OUT_Pin|STATUS_LED_Pin, GPIO_PIN_RESET);
 80022b2:	2398      	movs	r3, #152	@ 0x98
 80022b4:	0119      	lsls	r1, r3, #4
 80022b6:	23a0      	movs	r3, #160	@ 0xa0
 80022b8:	05db      	lsls	r3, r3, #23
 80022ba:	2200      	movs	r2, #0
 80022bc:	0018      	movs	r0, r3
 80022be:	f001 fc52 	bl	8003b66 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, N_CMD_Pin|TP1_Pin, GPIO_PIN_RESET);
 80022c2:	4b40      	ldr	r3, [pc, #256]	@ (80023c4 <MX_GPIO_Init+0x158>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	2130      	movs	r1, #48	@ 0x30
 80022c8:	0018      	movs	r0, r3
 80022ca:	f001 fc4c 	bl	8003b66 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : EX_Pin */
  GPIO_InitStruct.Pin = EX_Pin;
 80022ce:	193b      	adds	r3, r7, r4
 80022d0:	2210      	movs	r2, #16
 80022d2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80022d4:	193b      	adds	r3, r7, r4
 80022d6:	2288      	movs	r2, #136	@ 0x88
 80022d8:	0352      	lsls	r2, r2, #13
 80022da:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022dc:	193b      	adds	r3, r7, r4
 80022de:	2200      	movs	r2, #0
 80022e0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(EX_GPIO_Port, &GPIO_InitStruct);
 80022e2:	193a      	adds	r2, r7, r4
 80022e4:	23a0      	movs	r3, #160	@ 0xa0
 80022e6:	05db      	lsls	r3, r3, #23
 80022e8:	0011      	movs	r1, r2
 80022ea:	0018      	movs	r0, r3
 80022ec:	f001 faa0 	bl	8003830 <HAL_GPIO_Init>

  /*Configure GPIO pins : N_CRESP_Pin N_CTS_Pin nTEST_Pin */
  GPIO_InitStruct.Pin = N_CRESP_Pin|N_CTS_Pin|nTEST_Pin;
 80022f0:	193b      	adds	r3, r7, r4
 80022f2:	2283      	movs	r2, #131	@ 0x83
 80022f4:	0152      	lsls	r2, r2, #5
 80022f6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022f8:	193b      	adds	r3, r7, r4
 80022fa:	2200      	movs	r2, #0
 80022fc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fe:	193b      	adds	r3, r7, r4
 8002300:	2200      	movs	r2, #0
 8002302:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002304:	193a      	adds	r2, r7, r4
 8002306:	23a0      	movs	r3, #160	@ 0xa0
 8002308:	05db      	lsls	r3, r3, #23
 800230a:	0011      	movs	r1, r2
 800230c:	0018      	movs	r0, r3
 800230e:	f001 fa8f 	bl	8003830 <HAL_GPIO_Init>

  /*Configure GPIO pins : N_RST_Pin INT_OUT_Pin STATUS_LED_Pin */
  GPIO_InitStruct.Pin = N_RST_Pin|INT_OUT_Pin|STATUS_LED_Pin;
 8002312:	0021      	movs	r1, r4
 8002314:	187b      	adds	r3, r7, r1
 8002316:	2298      	movs	r2, #152	@ 0x98
 8002318:	0112      	lsls	r2, r2, #4
 800231a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800231c:	000c      	movs	r4, r1
 800231e:	193b      	adds	r3, r7, r4
 8002320:	2201      	movs	r2, #1
 8002322:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002324:	193b      	adds	r3, r7, r4
 8002326:	2200      	movs	r2, #0
 8002328:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800232a:	193b      	adds	r3, r7, r4
 800232c:	2200      	movs	r2, #0
 800232e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002330:	193a      	adds	r2, r7, r4
 8002332:	23a0      	movs	r3, #160	@ 0xa0
 8002334:	05db      	lsls	r3, r3, #23
 8002336:	0011      	movs	r1, r2
 8002338:	0018      	movs	r0, r3
 800233a:	f001 fa79 	bl	8003830 <HAL_GPIO_Init>

  /*Configure GPIO pin : BE_Pin */
  GPIO_InitStruct.Pin = BE_Pin;
 800233e:	193b      	adds	r3, r7, r4
 8002340:	2201      	movs	r2, #1
 8002342:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002344:	193b      	adds	r3, r7, r4
 8002346:	2200      	movs	r2, #0
 8002348:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234a:	193b      	adds	r3, r7, r4
 800234c:	2200      	movs	r2, #0
 800234e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BE_GPIO_Port, &GPIO_InitStruct);
 8002350:	193b      	adds	r3, r7, r4
 8002352:	4a1c      	ldr	r2, [pc, #112]	@ (80023c4 <MX_GPIO_Init+0x158>)
 8002354:	0019      	movs	r1, r3
 8002356:	0010      	movs	r0, r2
 8002358:	f001 fa6a 	bl	8003830 <HAL_GPIO_Init>

  /*Configure GPIO pin : N_CMD_Pin */
  GPIO_InitStruct.Pin = N_CMD_Pin;
 800235c:	193b      	adds	r3, r7, r4
 800235e:	2210      	movs	r2, #16
 8002360:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002362:	193b      	adds	r3, r7, r4
 8002364:	2201      	movs	r2, #1
 8002366:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002368:	193b      	adds	r3, r7, r4
 800236a:	2200      	movs	r2, #0
 800236c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800236e:	193b      	adds	r3, r7, r4
 8002370:	2200      	movs	r2, #0
 8002372:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(N_CMD_GPIO_Port, &GPIO_InitStruct);
 8002374:	193b      	adds	r3, r7, r4
 8002376:	4a13      	ldr	r2, [pc, #76]	@ (80023c4 <MX_GPIO_Init+0x158>)
 8002378:	0019      	movs	r1, r3
 800237a:	0010      	movs	r0, r2
 800237c:	f001 fa58 	bl	8003830 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP1_Pin */
  GPIO_InitStruct.Pin = TP1_Pin;
 8002380:	0021      	movs	r1, r4
 8002382:	187b      	adds	r3, r7, r1
 8002384:	2220      	movs	r2, #32
 8002386:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002388:	187b      	adds	r3, r7, r1
 800238a:	2201      	movs	r2, #1
 800238c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238e:	187b      	adds	r3, r7, r1
 8002390:	2200      	movs	r2, #0
 8002392:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002394:	187b      	adds	r3, r7, r1
 8002396:	2203      	movs	r2, #3
 8002398:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(TP1_GPIO_Port, &GPIO_InitStruct);
 800239a:	187b      	adds	r3, r7, r1
 800239c:	4a09      	ldr	r2, [pc, #36]	@ (80023c4 <MX_GPIO_Init+0x158>)
 800239e:	0019      	movs	r1, r3
 80023a0:	0010      	movs	r0, r2
 80023a2:	f001 fa45 	bl	8003830 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 80023a6:	2200      	movs	r2, #0
 80023a8:	2101      	movs	r1, #1
 80023aa:	2007      	movs	r0, #7
 80023ac:	f000 fcd4 	bl	8002d58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80023b0:	2007      	movs	r0, #7
 80023b2:	f000 fce6 	bl	8002d82 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80023b6:	46c0      	nop			@ (mov r8, r8)
 80023b8:	46bd      	mov	sp, r7
 80023ba:	b009      	add	sp, #36	@ 0x24
 80023bc:	bd90      	pop	{r4, r7, pc}
 80023be:	46c0      	nop			@ (mov r8, r8)
 80023c0:	40021000 	.word	0x40021000
 80023c4:	50000400 	.word	0x50000400

080023c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023cc:	b672      	cpsid	i
}
 80023ce:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023d0:	46c0      	nop			@ (mov r8, r8)
 80023d2:	e7fd      	b.n	80023d0 <Error_Handler+0x8>

080023d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023d8:	4b07      	ldr	r3, [pc, #28]	@ (80023f8 <HAL_MspInit+0x24>)
 80023da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80023dc:	4b06      	ldr	r3, [pc, #24]	@ (80023f8 <HAL_MspInit+0x24>)
 80023de:	2101      	movs	r1, #1
 80023e0:	430a      	orrs	r2, r1
 80023e2:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80023e4:	4b04      	ldr	r3, [pc, #16]	@ (80023f8 <HAL_MspInit+0x24>)
 80023e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80023e8:	4b03      	ldr	r3, [pc, #12]	@ (80023f8 <HAL_MspInit+0x24>)
 80023ea:	2180      	movs	r1, #128	@ 0x80
 80023ec:	0549      	lsls	r1, r1, #21
 80023ee:	430a      	orrs	r2, r1
 80023f0:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023f2:	46c0      	nop			@ (mov r8, r8)
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	40021000 	.word	0x40021000

080023fc <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a0a      	ldr	r2, [pc, #40]	@ (8002434 <HAL_CRC_MspInit+0x38>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d10d      	bne.n	800242a <HAL_CRC_MspInit+0x2e>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800240e:	4b0a      	ldr	r3, [pc, #40]	@ (8002438 <HAL_CRC_MspInit+0x3c>)
 8002410:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002412:	4b09      	ldr	r3, [pc, #36]	@ (8002438 <HAL_CRC_MspInit+0x3c>)
 8002414:	2180      	movs	r1, #128	@ 0x80
 8002416:	0149      	lsls	r1, r1, #5
 8002418:	430a      	orrs	r2, r1
 800241a:	631a      	str	r2, [r3, #48]	@ 0x30
 800241c:	4b06      	ldr	r3, [pc, #24]	@ (8002438 <HAL_CRC_MspInit+0x3c>)
 800241e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002420:	2380      	movs	r3, #128	@ 0x80
 8002422:	015b      	lsls	r3, r3, #5
 8002424:	4013      	ands	r3, r2
 8002426:	60fb      	str	r3, [r7, #12]
 8002428:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 800242a:	46c0      	nop			@ (mov r8, r8)
 800242c:	46bd      	mov	sp, r7
 800242e:	b004      	add	sp, #16
 8002430:	bd80      	pop	{r7, pc}
 8002432:	46c0      	nop			@ (mov r8, r8)
 8002434:	40023000 	.word	0x40023000
 8002438:	40021000 	.word	0x40021000

0800243c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800243c:	b590      	push	{r4, r7, lr}
 800243e:	b089      	sub	sp, #36	@ 0x24
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002444:	240c      	movs	r4, #12
 8002446:	193b      	adds	r3, r7, r4
 8002448:	0018      	movs	r0, r3
 800244a:	2314      	movs	r3, #20
 800244c:	001a      	movs	r2, r3
 800244e:	2100      	movs	r1, #0
 8002450:	f008 ffbc 	bl	800b3cc <memset>
  if(hi2c->Instance==I2C1)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a1c      	ldr	r2, [pc, #112]	@ (80024cc <HAL_I2C_MspInit+0x90>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d132      	bne.n	80024c4 <HAL_I2C_MspInit+0x88>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800245e:	4b1c      	ldr	r3, [pc, #112]	@ (80024d0 <HAL_I2C_MspInit+0x94>)
 8002460:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002462:	4b1b      	ldr	r3, [pc, #108]	@ (80024d0 <HAL_I2C_MspInit+0x94>)
 8002464:	2101      	movs	r1, #1
 8002466:	430a      	orrs	r2, r1
 8002468:	62da      	str	r2, [r3, #44]	@ 0x2c
 800246a:	4b19      	ldr	r3, [pc, #100]	@ (80024d0 <HAL_I2C_MspInit+0x94>)
 800246c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800246e:	2201      	movs	r2, #1
 8002470:	4013      	ands	r3, r2
 8002472:	60bb      	str	r3, [r7, #8]
 8002474:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCK_Pin|GPIO_PIN_10;
 8002476:	193b      	adds	r3, r7, r4
 8002478:	22c0      	movs	r2, #192	@ 0xc0
 800247a:	00d2      	lsls	r2, r2, #3
 800247c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800247e:	0021      	movs	r1, r4
 8002480:	187b      	adds	r3, r7, r1
 8002482:	2212      	movs	r2, #18
 8002484:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002486:	187b      	adds	r3, r7, r1
 8002488:	2200      	movs	r2, #0
 800248a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800248c:	187b      	adds	r3, r7, r1
 800248e:	2203      	movs	r2, #3
 8002490:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8002492:	187b      	adds	r3, r7, r1
 8002494:	2206      	movs	r2, #6
 8002496:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002498:	187a      	adds	r2, r7, r1
 800249a:	23a0      	movs	r3, #160	@ 0xa0
 800249c:	05db      	lsls	r3, r3, #23
 800249e:	0011      	movs	r1, r2
 80024a0:	0018      	movs	r0, r3
 80024a2:	f001 f9c5 	bl	8003830 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80024a6:	4b0a      	ldr	r3, [pc, #40]	@ (80024d0 <HAL_I2C_MspInit+0x94>)
 80024a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80024aa:	4b09      	ldr	r3, [pc, #36]	@ (80024d0 <HAL_I2C_MspInit+0x94>)
 80024ac:	2180      	movs	r1, #128	@ 0x80
 80024ae:	0389      	lsls	r1, r1, #14
 80024b0:	430a      	orrs	r2, r1
 80024b2:	639a      	str	r2, [r3, #56]	@ 0x38
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 80024b4:	2200      	movs	r2, #0
 80024b6:	2100      	movs	r1, #0
 80024b8:	2017      	movs	r0, #23
 80024ba:	f000 fc4d 	bl	8002d58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 80024be:	2017      	movs	r0, #23
 80024c0:	f000 fc5f 	bl	8002d82 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80024c4:	46c0      	nop			@ (mov r8, r8)
 80024c6:	46bd      	mov	sp, r7
 80024c8:	b009      	add	sp, #36	@ 0x24
 80024ca:	bd90      	pop	{r4, r7, pc}
 80024cc:	40005400 	.word	0x40005400
 80024d0:	40021000 	.word	0x40021000

080024d4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	2380      	movs	r3, #128	@ 0x80
 80024e2:	05db      	lsls	r3, r3, #23
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d10e      	bne.n	8002506 <HAL_TIM_Base_MspInit+0x32>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80024e8:	4b12      	ldr	r3, [pc, #72]	@ (8002534 <HAL_TIM_Base_MspInit+0x60>)
 80024ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80024ec:	4b11      	ldr	r3, [pc, #68]	@ (8002534 <HAL_TIM_Base_MspInit+0x60>)
 80024ee:	2101      	movs	r1, #1
 80024f0:	430a      	orrs	r2, r1
 80024f2:	639a      	str	r2, [r3, #56]	@ 0x38
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80024f4:	2200      	movs	r2, #0
 80024f6:	2100      	movs	r1, #0
 80024f8:	200f      	movs	r0, #15
 80024fa:	f000 fc2d 	bl	8002d58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80024fe:	200f      	movs	r0, #15
 8002500:	f000 fc3f 	bl	8002d82 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM21_MspInit 1 */

    /* USER CODE END TIM21_MspInit 1 */
  }

}
 8002504:	e012      	b.n	800252c <HAL_TIM_Base_MspInit+0x58>
  else if(htim_base->Instance==TIM21)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a0b      	ldr	r2, [pc, #44]	@ (8002538 <HAL_TIM_Base_MspInit+0x64>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d10d      	bne.n	800252c <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM21_CLK_ENABLE();
 8002510:	4b08      	ldr	r3, [pc, #32]	@ (8002534 <HAL_TIM_Base_MspInit+0x60>)
 8002512:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002514:	4b07      	ldr	r3, [pc, #28]	@ (8002534 <HAL_TIM_Base_MspInit+0x60>)
 8002516:	2104      	movs	r1, #4
 8002518:	430a      	orrs	r2, r1
 800251a:	635a      	str	r2, [r3, #52]	@ 0x34
    HAL_NVIC_SetPriority(TIM21_IRQn, 0, 0);
 800251c:	2200      	movs	r2, #0
 800251e:	2100      	movs	r1, #0
 8002520:	2014      	movs	r0, #20
 8002522:	f000 fc19 	bl	8002d58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
 8002526:	2014      	movs	r0, #20
 8002528:	f000 fc2b 	bl	8002d82 <HAL_NVIC_EnableIRQ>
}
 800252c:	46c0      	nop			@ (mov r8, r8)
 800252e:	46bd      	mov	sp, r7
 8002530:	b002      	add	sp, #8
 8002532:	bd80      	pop	{r7, pc}
 8002534:	40021000 	.word	0x40021000
 8002538:	40010800 	.word	0x40010800

0800253c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800253c:	b590      	push	{r4, r7, lr}
 800253e:	b08b      	sub	sp, #44	@ 0x2c
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002544:	2414      	movs	r4, #20
 8002546:	193b      	adds	r3, r7, r4
 8002548:	0018      	movs	r0, r3
 800254a:	2314      	movs	r3, #20
 800254c:	001a      	movs	r2, r3
 800254e:	2100      	movs	r1, #0
 8002550:	f008 ff3c 	bl	800b3cc <memset>
  if(huart->Instance==USART1)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a7d      	ldr	r2, [pc, #500]	@ (8002750 <HAL_UART_MspInit+0x214>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d000      	beq.n	8002560 <HAL_UART_MspInit+0x24>
 800255e:	e083      	b.n	8002668 <HAL_UART_MspInit+0x12c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002560:	4b7c      	ldr	r3, [pc, #496]	@ (8002754 <HAL_UART_MspInit+0x218>)
 8002562:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002564:	4b7b      	ldr	r3, [pc, #492]	@ (8002754 <HAL_UART_MspInit+0x218>)
 8002566:	2180      	movs	r1, #128	@ 0x80
 8002568:	01c9      	lsls	r1, r1, #7
 800256a:	430a      	orrs	r2, r1
 800256c:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800256e:	4b79      	ldr	r3, [pc, #484]	@ (8002754 <HAL_UART_MspInit+0x218>)
 8002570:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002572:	4b78      	ldr	r3, [pc, #480]	@ (8002754 <HAL_UART_MspInit+0x218>)
 8002574:	2102      	movs	r1, #2
 8002576:	430a      	orrs	r2, r1
 8002578:	62da      	str	r2, [r3, #44]	@ 0x2c
 800257a:	4b76      	ldr	r3, [pc, #472]	@ (8002754 <HAL_UART_MspInit+0x218>)
 800257c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800257e:	2202      	movs	r2, #2
 8002580:	4013      	ands	r3, r2
 8002582:	613b      	str	r3, [r7, #16]
 8002584:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = UART1_TX_Pin|UART1_RX_Pin;
 8002586:	0021      	movs	r1, r4
 8002588:	187b      	adds	r3, r7, r1
 800258a:	22c0      	movs	r2, #192	@ 0xc0
 800258c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800258e:	187b      	adds	r3, r7, r1
 8002590:	2202      	movs	r2, #2
 8002592:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002594:	187b      	adds	r3, r7, r1
 8002596:	2200      	movs	r2, #0
 8002598:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800259a:	187b      	adds	r3, r7, r1
 800259c:	2203      	movs	r2, #3
 800259e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 80025a0:	187b      	adds	r3, r7, r1
 80025a2:	2200      	movs	r2, #0
 80025a4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025a6:	187b      	adds	r3, r7, r1
 80025a8:	4a6b      	ldr	r2, [pc, #428]	@ (8002758 <HAL_UART_MspInit+0x21c>)
 80025aa:	0019      	movs	r1, r3
 80025ac:	0010      	movs	r0, r2
 80025ae:	f001 f93f 	bl	8003830 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 80025b2:	4b6a      	ldr	r3, [pc, #424]	@ (800275c <HAL_UART_MspInit+0x220>)
 80025b4:	4a6a      	ldr	r2, [pc, #424]	@ (8002760 <HAL_UART_MspInit+0x224>)
 80025b6:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_3;
 80025b8:	4b68      	ldr	r3, [pc, #416]	@ (800275c <HAL_UART_MspInit+0x220>)
 80025ba:	2203      	movs	r2, #3
 80025bc:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80025be:	4b67      	ldr	r3, [pc, #412]	@ (800275c <HAL_UART_MspInit+0x220>)
 80025c0:	2210      	movs	r2, #16
 80025c2:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025c4:	4b65      	ldr	r3, [pc, #404]	@ (800275c <HAL_UART_MspInit+0x220>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80025ca:	4b64      	ldr	r3, [pc, #400]	@ (800275c <HAL_UART_MspInit+0x220>)
 80025cc:	2280      	movs	r2, #128	@ 0x80
 80025ce:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025d0:	4b62      	ldr	r3, [pc, #392]	@ (800275c <HAL_UART_MspInit+0x220>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025d6:	4b61      	ldr	r3, [pc, #388]	@ (800275c <HAL_UART_MspInit+0x220>)
 80025d8:	2200      	movs	r2, #0
 80025da:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80025dc:	4b5f      	ldr	r3, [pc, #380]	@ (800275c <HAL_UART_MspInit+0x220>)
 80025de:	2200      	movs	r2, #0
 80025e0:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80025e2:	4b5e      	ldr	r3, [pc, #376]	@ (800275c <HAL_UART_MspInit+0x220>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80025e8:	4b5c      	ldr	r3, [pc, #368]	@ (800275c <HAL_UART_MspInit+0x220>)
 80025ea:	0018      	movs	r0, r3
 80025ec:	f000 fcc2 	bl	8002f74 <HAL_DMA_Init>
 80025f0:	1e03      	subs	r3, r0, #0
 80025f2:	d001      	beq.n	80025f8 <HAL_UART_MspInit+0xbc>
    {
      Error_Handler();
 80025f4:	f7ff fee8 	bl	80023c8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	4a58      	ldr	r2, [pc, #352]	@ (800275c <HAL_UART_MspInit+0x220>)
 80025fc:	671a      	str	r2, [r3, #112]	@ 0x70
 80025fe:	4b57      	ldr	r3, [pc, #348]	@ (800275c <HAL_UART_MspInit+0x220>)
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8002604:	4b57      	ldr	r3, [pc, #348]	@ (8002764 <HAL_UART_MspInit+0x228>)
 8002606:	4a58      	ldr	r2, [pc, #352]	@ (8002768 <HAL_UART_MspInit+0x22c>)
 8002608:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_3;
 800260a:	4b56      	ldr	r3, [pc, #344]	@ (8002764 <HAL_UART_MspInit+0x228>)
 800260c:	2203      	movs	r2, #3
 800260e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002610:	4b54      	ldr	r3, [pc, #336]	@ (8002764 <HAL_UART_MspInit+0x228>)
 8002612:	2200      	movs	r2, #0
 8002614:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002616:	4b53      	ldr	r3, [pc, #332]	@ (8002764 <HAL_UART_MspInit+0x228>)
 8002618:	2200      	movs	r2, #0
 800261a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800261c:	4b51      	ldr	r3, [pc, #324]	@ (8002764 <HAL_UART_MspInit+0x228>)
 800261e:	2280      	movs	r2, #128	@ 0x80
 8002620:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002622:	4b50      	ldr	r3, [pc, #320]	@ (8002764 <HAL_UART_MspInit+0x228>)
 8002624:	2200      	movs	r2, #0
 8002626:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002628:	4b4e      	ldr	r3, [pc, #312]	@ (8002764 <HAL_UART_MspInit+0x228>)
 800262a:	2200      	movs	r2, #0
 800262c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800262e:	4b4d      	ldr	r3, [pc, #308]	@ (8002764 <HAL_UART_MspInit+0x228>)
 8002630:	2220      	movs	r2, #32
 8002632:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002634:	4b4b      	ldr	r3, [pc, #300]	@ (8002764 <HAL_UART_MspInit+0x228>)
 8002636:	2200      	movs	r2, #0
 8002638:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800263a:	4b4a      	ldr	r3, [pc, #296]	@ (8002764 <HAL_UART_MspInit+0x228>)
 800263c:	0018      	movs	r0, r3
 800263e:	f000 fc99 	bl	8002f74 <HAL_DMA_Init>
 8002642:	1e03      	subs	r3, r0, #0
 8002644:	d001      	beq.n	800264a <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 8002646:	f7ff febf 	bl	80023c8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a45      	ldr	r2, [pc, #276]	@ (8002764 <HAL_UART_MspInit+0x228>)
 800264e:	675a      	str	r2, [r3, #116]	@ 0x74
 8002650:	4b44      	ldr	r3, [pc, #272]	@ (8002764 <HAL_UART_MspInit+0x228>)
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8002656:	2200      	movs	r2, #0
 8002658:	2102      	movs	r1, #2
 800265a:	201b      	movs	r0, #27
 800265c:	f000 fb7c 	bl	8002d58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002660:	201b      	movs	r0, #27
 8002662:	f000 fb8e 	bl	8002d82 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART4_MspInit 1 */

    /* USER CODE END USART4_MspInit 1 */
  }

}
 8002666:	e06e      	b.n	8002746 <HAL_UART_MspInit+0x20a>
  else if(huart->Instance==USART2)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a3f      	ldr	r2, [pc, #252]	@ (800276c <HAL_UART_MspInit+0x230>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d132      	bne.n	80026d8 <HAL_UART_MspInit+0x19c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002672:	4b38      	ldr	r3, [pc, #224]	@ (8002754 <HAL_UART_MspInit+0x218>)
 8002674:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002676:	4b37      	ldr	r3, [pc, #220]	@ (8002754 <HAL_UART_MspInit+0x218>)
 8002678:	2180      	movs	r1, #128	@ 0x80
 800267a:	0289      	lsls	r1, r1, #10
 800267c:	430a      	orrs	r2, r1
 800267e:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002680:	4b34      	ldr	r3, [pc, #208]	@ (8002754 <HAL_UART_MspInit+0x218>)
 8002682:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002684:	4b33      	ldr	r3, [pc, #204]	@ (8002754 <HAL_UART_MspInit+0x218>)
 8002686:	2101      	movs	r1, #1
 8002688:	430a      	orrs	r2, r1
 800268a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800268c:	4b31      	ldr	r3, [pc, #196]	@ (8002754 <HAL_UART_MspInit+0x218>)
 800268e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002690:	2201      	movs	r2, #1
 8002692:	4013      	ands	r3, r2
 8002694:	60fb      	str	r3, [r7, #12]
 8002696:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002698:	2114      	movs	r1, #20
 800269a:	187b      	adds	r3, r7, r1
 800269c:	220c      	movs	r2, #12
 800269e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a0:	187b      	adds	r3, r7, r1
 80026a2:	2202      	movs	r2, #2
 80026a4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a6:	187b      	adds	r3, r7, r1
 80026a8:	2200      	movs	r2, #0
 80026aa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026ac:	187b      	adds	r3, r7, r1
 80026ae:	2203      	movs	r2, #3
 80026b0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80026b2:	187b      	adds	r3, r7, r1
 80026b4:	2204      	movs	r2, #4
 80026b6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026b8:	187a      	adds	r2, r7, r1
 80026ba:	23a0      	movs	r3, #160	@ 0xa0
 80026bc:	05db      	lsls	r3, r3, #23
 80026be:	0011      	movs	r1, r2
 80026c0:	0018      	movs	r0, r3
 80026c2:	f001 f8b5 	bl	8003830 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80026c6:	2200      	movs	r2, #0
 80026c8:	2100      	movs	r1, #0
 80026ca:	201c      	movs	r0, #28
 80026cc:	f000 fb44 	bl	8002d58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80026d0:	201c      	movs	r0, #28
 80026d2:	f000 fb56 	bl	8002d82 <HAL_NVIC_EnableIRQ>
}
 80026d6:	e036      	b.n	8002746 <HAL_UART_MspInit+0x20a>
  else if(huart->Instance==USART4)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a24      	ldr	r2, [pc, #144]	@ (8002770 <HAL_UART_MspInit+0x234>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d131      	bne.n	8002746 <HAL_UART_MspInit+0x20a>
    __HAL_RCC_USART4_CLK_ENABLE();
 80026e2:	4b1c      	ldr	r3, [pc, #112]	@ (8002754 <HAL_UART_MspInit+0x218>)
 80026e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80026e6:	4b1b      	ldr	r3, [pc, #108]	@ (8002754 <HAL_UART_MspInit+0x218>)
 80026e8:	2180      	movs	r1, #128	@ 0x80
 80026ea:	0309      	lsls	r1, r1, #12
 80026ec:	430a      	orrs	r2, r1
 80026ee:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026f0:	4b18      	ldr	r3, [pc, #96]	@ (8002754 <HAL_UART_MspInit+0x218>)
 80026f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026f4:	4b17      	ldr	r3, [pc, #92]	@ (8002754 <HAL_UART_MspInit+0x218>)
 80026f6:	2101      	movs	r1, #1
 80026f8:	430a      	orrs	r2, r1
 80026fa:	62da      	str	r2, [r3, #44]	@ 0x2c
 80026fc:	4b15      	ldr	r3, [pc, #84]	@ (8002754 <HAL_UART_MspInit+0x218>)
 80026fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002700:	2201      	movs	r2, #1
 8002702:	4013      	ands	r3, r2
 8002704:	60bb      	str	r3, [r7, #8]
 8002706:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002708:	2114      	movs	r1, #20
 800270a:	187b      	adds	r3, r7, r1
 800270c:	2201      	movs	r2, #1
 800270e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002710:	187b      	adds	r3, r7, r1
 8002712:	2202      	movs	r2, #2
 8002714:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002716:	187b      	adds	r3, r7, r1
 8002718:	2200      	movs	r2, #0
 800271a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800271c:	187b      	adds	r3, r7, r1
 800271e:	2203      	movs	r2, #3
 8002720:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 8002722:	187b      	adds	r3, r7, r1
 8002724:	2206      	movs	r2, #6
 8002726:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002728:	187a      	adds	r2, r7, r1
 800272a:	23a0      	movs	r3, #160	@ 0xa0
 800272c:	05db      	lsls	r3, r3, #23
 800272e:	0011      	movs	r1, r2
 8002730:	0018      	movs	r0, r3
 8002732:	f001 f87d 	bl	8003830 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 8002736:	2200      	movs	r2, #0
 8002738:	2100      	movs	r1, #0
 800273a:	200e      	movs	r0, #14
 800273c:	f000 fb0c 	bl	8002d58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 8002740:	200e      	movs	r0, #14
 8002742:	f000 fb1e 	bl	8002d82 <HAL_NVIC_EnableIRQ>
}
 8002746:	46c0      	nop			@ (mov r8, r8)
 8002748:	46bd      	mov	sp, r7
 800274a:	b00b      	add	sp, #44	@ 0x2c
 800274c:	bd90      	pop	{r4, r7, pc}
 800274e:	46c0      	nop			@ (mov r8, r8)
 8002750:	40013800 	.word	0x40013800
 8002754:	40021000 	.word	0x40021000
 8002758:	50000400 	.word	0x50000400
 800275c:	20000994 	.word	0x20000994
 8002760:	4002001c 	.word	0x4002001c
 8002764:	200009dc 	.word	0x200009dc
 8002768:	40020030 	.word	0x40020030
 800276c:	40004400 	.word	0x40004400
 8002770:	40004c00 	.word	0x40004c00

08002774 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002778:	46c0      	nop			@ (mov r8, r8)
 800277a:	e7fd      	b.n	8002778 <NMI_Handler+0x4>

0800277c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002780:	46c0      	nop			@ (mov r8, r8)
 8002782:	e7fd      	b.n	8002780 <HardFault_Handler+0x4>

08002784 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002788:	46c0      	nop			@ (mov r8, r8)
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}

0800278e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800278e:	b580      	push	{r7, lr}
 8002790:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002792:	46c0      	nop			@ (mov r8, r8)
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}

08002798 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800279c:	f000 f9f0 	bl	8002b80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027a0:	46c0      	nop			@ (mov r8, r8)
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}

080027a6 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80027a6:	b580      	push	{r7, lr}
 80027a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EX_Pin);
 80027aa:	2010      	movs	r0, #16
 80027ac:	f001 f9f8 	bl	8003ba0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80027b0:	46c0      	nop			@ (mov r8, r8)
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
	...

080027b8 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80027bc:	4b05      	ldr	r3, [pc, #20]	@ (80027d4 <DMA1_Channel2_3_IRQHandler+0x1c>)
 80027be:	0018      	movs	r0, r3
 80027c0:	f000 fd3d 	bl	800323e <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80027c4:	4b04      	ldr	r3, [pc, #16]	@ (80027d8 <DMA1_Channel2_3_IRQHandler+0x20>)
 80027c6:	0018      	movs	r0, r3
 80027c8:	f000 fd39 	bl	800323e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80027cc:	46c0      	nop			@ (mov r8, r8)
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	46c0      	nop			@ (mov r8, r8)
 80027d4:	20000994 	.word	0x20000994
 80027d8:	200009dc 	.word	0x200009dc

080027dc <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80027e0:	4b03      	ldr	r3, [pc, #12]	@ (80027f0 <USART4_5_IRQHandler+0x14>)
 80027e2:	0018      	movs	r0, r3
 80027e4:	f004 f97a 	bl	8006adc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 80027e8:	46c0      	nop			@ (mov r8, r8)
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	46c0      	nop			@ (mov r8, r8)
 80027f0:	2000090c 	.word	0x2000090c

080027f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80027f8:	4b03      	ldr	r3, [pc, #12]	@ (8002808 <TIM2_IRQHandler+0x14>)
 80027fa:	0018      	movs	r0, r3
 80027fc:	f003 fa20 	bl	8005c40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002800:	46c0      	nop			@ (mov r8, r8)
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	46c0      	nop			@ (mov r8, r8)
 8002808:	2000077c 	.word	0x2000077c

0800280c <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM21_IRQn 0 */

  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 8002810:	4b03      	ldr	r3, [pc, #12]	@ (8002820 <TIM21_IRQHandler+0x14>)
 8002812:	0018      	movs	r0, r3
 8002814:	f003 fa14 	bl	8005c40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 8002818:	46c0      	nop			@ (mov r8, r8)
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	46c0      	nop			@ (mov r8, r8)
 8002820:	200007bc 	.word	0x200007bc

08002824 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 8002828:	4b09      	ldr	r3, [pc, #36]	@ (8002850 <I2C1_IRQHandler+0x2c>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	699a      	ldr	r2, [r3, #24]
 800282e:	23e0      	movs	r3, #224	@ 0xe0
 8002830:	00db      	lsls	r3, r3, #3
 8002832:	4013      	ands	r3, r2
 8002834:	d004      	beq.n	8002840 <I2C1_IRQHandler+0x1c>
  {
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8002836:	4b06      	ldr	r3, [pc, #24]	@ (8002850 <I2C1_IRQHandler+0x2c>)
 8002838:	0018      	movs	r0, r3
 800283a:	f001 fa97 	bl	8003d6c <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 800283e:	e003      	b.n	8002848 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8002840:	4b03      	ldr	r3, [pc, #12]	@ (8002850 <I2C1_IRQHandler+0x2c>)
 8002842:	0018      	movs	r0, r3
 8002844:	f001 fa78 	bl	8003d38 <HAL_I2C_EV_IRQHandler>
}
 8002848:	46c0      	nop			@ (mov r8, r8)
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	46c0      	nop			@ (mov r8, r8)
 8002850:	20000718 	.word	0x20000718

08002854 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002858:	4b03      	ldr	r3, [pc, #12]	@ (8002868 <USART1_IRQHandler+0x14>)
 800285a:	0018      	movs	r0, r3
 800285c:	f004 f93e 	bl	8006adc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002860:	46c0      	nop			@ (mov r8, r8)
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	46c0      	nop			@ (mov r8, r8)
 8002868:	200007fc 	.word	0x200007fc

0800286c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002870:	4b03      	ldr	r3, [pc, #12]	@ (8002880 <USART2_IRQHandler+0x14>)
 8002872:	0018      	movs	r0, r3
 8002874:	f004 f932 	bl	8006adc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002878:	46c0      	nop			@ (mov r8, r8)
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	46c0      	nop			@ (mov r8, r8)
 8002880:	20000884 	.word	0x20000884

08002884 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b086      	sub	sp, #24
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002890:	2300      	movs	r3, #0
 8002892:	617b      	str	r3, [r7, #20]
 8002894:	e00a      	b.n	80028ac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002896:	e000      	b.n	800289a <_read+0x16>
 8002898:	bf00      	nop
 800289a:	0001      	movs	r1, r0
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	1c5a      	adds	r2, r3, #1
 80028a0:	60ba      	str	r2, [r7, #8]
 80028a2:	b2ca      	uxtb	r2, r1
 80028a4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	3301      	adds	r3, #1
 80028aa:	617b      	str	r3, [r7, #20]
 80028ac:	697a      	ldr	r2, [r7, #20]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	dbf0      	blt.n	8002896 <_read+0x12>
  }

  return len;
 80028b4:	687b      	ldr	r3, [r7, #4]
}
 80028b6:	0018      	movs	r0, r3
 80028b8:	46bd      	mov	sp, r7
 80028ba:	b006      	add	sp, #24
 80028bc:	bd80      	pop	{r7, pc}

080028be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80028be:	b580      	push	{r7, lr}
 80028c0:	b086      	sub	sp, #24
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	60f8      	str	r0, [r7, #12]
 80028c6:	60b9      	str	r1, [r7, #8]
 80028c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028ca:	2300      	movs	r3, #0
 80028cc:	617b      	str	r3, [r7, #20]
 80028ce:	e009      	b.n	80028e4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	1c5a      	adds	r2, r3, #1
 80028d4:	60ba      	str	r2, [r7, #8]
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	0018      	movs	r0, r3
 80028da:	e000      	b.n	80028de <_write+0x20>
 80028dc:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	3301      	adds	r3, #1
 80028e2:	617b      	str	r3, [r7, #20]
 80028e4:	697a      	ldr	r2, [r7, #20]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	dbf1      	blt.n	80028d0 <_write+0x12>
  }
  return len;
 80028ec:	687b      	ldr	r3, [r7, #4]
}
 80028ee:	0018      	movs	r0, r3
 80028f0:	46bd      	mov	sp, r7
 80028f2:	b006      	add	sp, #24
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <_close>:

int _close(int file)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b082      	sub	sp, #8
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80028fe:	2301      	movs	r3, #1
 8002900:	425b      	negs	r3, r3
}
 8002902:	0018      	movs	r0, r3
 8002904:	46bd      	mov	sp, r7
 8002906:	b002      	add	sp, #8
 8002908:	bd80      	pop	{r7, pc}

0800290a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800290a:	b580      	push	{r7, lr}
 800290c:	b082      	sub	sp, #8
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
 8002912:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	2280      	movs	r2, #128	@ 0x80
 8002918:	0192      	lsls	r2, r2, #6
 800291a:	605a      	str	r2, [r3, #4]
  return 0;
 800291c:	2300      	movs	r3, #0
}
 800291e:	0018      	movs	r0, r3
 8002920:	46bd      	mov	sp, r7
 8002922:	b002      	add	sp, #8
 8002924:	bd80      	pop	{r7, pc}

08002926 <_isatty>:

int _isatty(int file)
{
 8002926:	b580      	push	{r7, lr}
 8002928:	b082      	sub	sp, #8
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800292e:	2301      	movs	r3, #1
}
 8002930:	0018      	movs	r0, r3
 8002932:	46bd      	mov	sp, r7
 8002934:	b002      	add	sp, #8
 8002936:	bd80      	pop	{r7, pc}

08002938 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002944:	2300      	movs	r3, #0
}
 8002946:	0018      	movs	r0, r3
 8002948:	46bd      	mov	sp, r7
 800294a:	b004      	add	sp, #16
 800294c:	bd80      	pop	{r7, pc}
	...

08002950 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b086      	sub	sp, #24
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002958:	4a14      	ldr	r2, [pc, #80]	@ (80029ac <_sbrk+0x5c>)
 800295a:	4b15      	ldr	r3, [pc, #84]	@ (80029b0 <_sbrk+0x60>)
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002964:	4b13      	ldr	r3, [pc, #76]	@ (80029b4 <_sbrk+0x64>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d102      	bne.n	8002972 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800296c:	4b11      	ldr	r3, [pc, #68]	@ (80029b4 <_sbrk+0x64>)
 800296e:	4a12      	ldr	r2, [pc, #72]	@ (80029b8 <_sbrk+0x68>)
 8002970:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002972:	4b10      	ldr	r3, [pc, #64]	@ (80029b4 <_sbrk+0x64>)
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	18d3      	adds	r3, r2, r3
 800297a:	693a      	ldr	r2, [r7, #16]
 800297c:	429a      	cmp	r2, r3
 800297e:	d207      	bcs.n	8002990 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002980:	f009 fc36 	bl	800c1f0 <__errno>
 8002984:	0003      	movs	r3, r0
 8002986:	220c      	movs	r2, #12
 8002988:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800298a:	2301      	movs	r3, #1
 800298c:	425b      	negs	r3, r3
 800298e:	e009      	b.n	80029a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002990:	4b08      	ldr	r3, [pc, #32]	@ (80029b4 <_sbrk+0x64>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002996:	4b07      	ldr	r3, [pc, #28]	@ (80029b4 <_sbrk+0x64>)
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	18d2      	adds	r2, r2, r3
 800299e:	4b05      	ldr	r3, [pc, #20]	@ (80029b4 <_sbrk+0x64>)
 80029a0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80029a2:	68fb      	ldr	r3, [r7, #12]
}
 80029a4:	0018      	movs	r0, r3
 80029a6:	46bd      	mov	sp, r7
 80029a8:	b006      	add	sp, #24
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	20005000 	.word	0x20005000
 80029b0:	00000800 	.word	0x00000800
 80029b4:	20000a28 	.word	0x20000a28
 80029b8:	200013f0 	.word	0x200013f0

080029bc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029c0:	46c0      	nop			@ (mov r8, r8)
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
	...

080029c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80029c8:	480d      	ldr	r0, [pc, #52]	@ (8002a00 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80029ca:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 80029cc:	f7ff fff6 	bl	80029bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80029d0:	480c      	ldr	r0, [pc, #48]	@ (8002a04 <LoopForever+0x6>)
  ldr r1, =_edata
 80029d2:	490d      	ldr	r1, [pc, #52]	@ (8002a08 <LoopForever+0xa>)
  ldr r2, =_sidata
 80029d4:	4a0d      	ldr	r2, [pc, #52]	@ (8002a0c <LoopForever+0xe>)
  movs r3, #0
 80029d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029d8:	e002      	b.n	80029e0 <LoopCopyDataInit>

080029da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029de:	3304      	adds	r3, #4

080029e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029e4:	d3f9      	bcc.n	80029da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029e6:	4a0a      	ldr	r2, [pc, #40]	@ (8002a10 <LoopForever+0x12>)
  ldr r4, =_ebss
 80029e8:	4c0a      	ldr	r4, [pc, #40]	@ (8002a14 <LoopForever+0x16>)
  movs r3, #0
 80029ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029ec:	e001      	b.n	80029f2 <LoopFillZerobss>

080029ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029f0:	3204      	adds	r2, #4

080029f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029f4:	d3fb      	bcc.n	80029ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80029f6:	f009 fc01 	bl	800c1fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029fa:	f7ff f95f 	bl	8001cbc <main>

080029fe <LoopForever>:

LoopForever:
    b LoopForever
 80029fe:	e7fe      	b.n	80029fe <LoopForever>
   ldr   r0, =_estack
 8002a00:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8002a04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a08:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 8002a0c:	0800e46c 	.word	0x0800e46c
  ldr r2, =_sbss
 8002a10:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8002a14:	200013ec 	.word	0x200013ec

08002a18 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a18:	e7fe      	b.n	8002a18 <ADC1_COMP_IRQHandler>

08002a1a <Init_GPIO>:

#include "GPIO.h"
#include <stdlib.h>

void Init_GPIO(GPIO * gpio, GPIO_TypeDef * Port, uint16_t Pin)
{
 8002a1a:	b580      	push	{r7, lr}
 8002a1c:	b084      	sub	sp, #16
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	60f8      	str	r0, [r7, #12]
 8002a22:	60b9      	str	r1, [r7, #8]
 8002a24:	1dbb      	adds	r3, r7, #6
 8002a26:	801a      	strh	r2, [r3, #0]
	gpio->Port = Port;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	68ba      	ldr	r2, [r7, #8]
 8002a2c:	601a      	str	r2, [r3, #0]
	gpio->Pin = Pin;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	1dba      	adds	r2, r7, #6
 8002a32:	8812      	ldrh	r2, [r2, #0]
 8002a34:	809a      	strh	r2, [r3, #4]
	Read_GPIO_State(gpio);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	0018      	movs	r0, r3
 8002a3a:	f000 f804 	bl	8002a46 <Read_GPIO_State>
}
 8002a3e:	46c0      	nop			@ (mov r8, r8)
 8002a40:	46bd      	mov	sp, r7
 8002a42:	b004      	add	sp, #16
 8002a44:	bd80      	pop	{r7, pc}

08002a46 <Read_GPIO_State>:
		HAL_GPIO_Init(gpio->Port, &GPIO_InitStruct);
	}
}

GPIO_State Read_GPIO_State(GPIO * gpio)
{
 8002a46:	b580      	push	{r7, lr}
 8002a48:	b082      	sub	sp, #8
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
	if(gpio != NULL)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d00e      	beq.n	8002a72 <Read_GPIO_State+0x2c>
	{
		gpio->Current_State = (GPIO_State)HAL_GPIO_ReadPin(gpio->Port, gpio->Pin);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	889b      	ldrh	r3, [r3, #4]
 8002a5c:	0019      	movs	r1, r3
 8002a5e:	0010      	movs	r0, r2
 8002a60:	f001 f864 	bl	8003b2c <HAL_GPIO_ReadPin>
 8002a64:	0003      	movs	r3, r0
 8002a66:	001a      	movs	r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	719a      	strb	r2, [r3, #6]
		return gpio->Current_State;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	799b      	ldrb	r3, [r3, #6]
 8002a70:	e000      	b.n	8002a74 <Read_GPIO_State+0x2e>
	}

	return eGPIO_Low;
 8002a72:	2300      	movs	r3, #0
}
 8002a74:	0018      	movs	r0, r3
 8002a76:	46bd      	mov	sp, r7
 8002a78:	b002      	add	sp, #8
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <Set_GPIO_State_High>:

void Set_GPIO_State_High(GPIO * gpio)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
	if(gpio != NULL)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d00b      	beq.n	8002aa2 <Set_GPIO_State_High+0x26>
	{
		gpio->Current_State = eGPIO_High;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	719a      	strb	r2, [r3, #6]
		HAL_GPIO_WritePin(gpio->Port, gpio->Pin, (GPIO_PinState)gpio->Current_State);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6818      	ldr	r0, [r3, #0]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	8899      	ldrh	r1, [r3, #4]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	799b      	ldrb	r3, [r3, #6]
 8002a9c:	001a      	movs	r2, r3
 8002a9e:	f001 f862 	bl	8003b66 <HAL_GPIO_WritePin>
	}
}
 8002aa2:	46c0      	nop			@ (mov r8, r8)
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	b002      	add	sp, #8
 8002aa8:	bd80      	pop	{r7, pc}

08002aaa <Set_GPIO_State_Low>:

void Set_GPIO_State_Low(GPIO * gpio)
{
 8002aaa:	b580      	push	{r7, lr}
 8002aac:	b082      	sub	sp, #8
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
	if(gpio != NULL)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d00b      	beq.n	8002ad0 <Set_GPIO_State_Low+0x26>
	{
		gpio->Current_State = eGPIO_Low;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	719a      	strb	r2, [r3, #6]
		HAL_GPIO_WritePin(gpio->Port, gpio->Pin, (GPIO_PinState)gpio->Current_State);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6818      	ldr	r0, [r3, #0]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	8899      	ldrh	r1, [r3, #4]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	799b      	ldrb	r3, [r3, #6]
 8002aca:	001a      	movs	r2, r3
 8002acc:	f001 f84b 	bl	8003b66 <HAL_GPIO_WritePin>
	}
}
 8002ad0:	46c0      	nop			@ (mov r8, r8)
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	b002      	add	sp, #8
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002ade:	1dfb      	adds	r3, r7, #7
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002ae4:	4b0b      	ldr	r3, [pc, #44]	@ (8002b14 <HAL_Init+0x3c>)
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	4b0a      	ldr	r3, [pc, #40]	@ (8002b14 <HAL_Init+0x3c>)
 8002aea:	2140      	movs	r1, #64	@ 0x40
 8002aec:	430a      	orrs	r2, r1
 8002aee:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002af0:	2000      	movs	r0, #0
 8002af2:	f000 f811 	bl	8002b18 <HAL_InitTick>
 8002af6:	1e03      	subs	r3, r0, #0
 8002af8:	d003      	beq.n	8002b02 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8002afa:	1dfb      	adds	r3, r7, #7
 8002afc:	2201      	movs	r2, #1
 8002afe:	701a      	strb	r2, [r3, #0]
 8002b00:	e001      	b.n	8002b06 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002b02:	f7ff fc67 	bl	80023d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002b06:	1dfb      	adds	r3, r7, #7
 8002b08:	781b      	ldrb	r3, [r3, #0]
}
 8002b0a:	0018      	movs	r0, r3
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	b002      	add	sp, #8
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	46c0      	nop			@ (mov r8, r8)
 8002b14:	40022000 	.word	0x40022000

08002b18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b18:	b590      	push	{r4, r7, lr}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b20:	4b14      	ldr	r3, [pc, #80]	@ (8002b74 <HAL_InitTick+0x5c>)
 8002b22:	681c      	ldr	r4, [r3, #0]
 8002b24:	4b14      	ldr	r3, [pc, #80]	@ (8002b78 <HAL_InitTick+0x60>)
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	0019      	movs	r1, r3
 8002b2a:	23fa      	movs	r3, #250	@ 0xfa
 8002b2c:	0098      	lsls	r0, r3, #2
 8002b2e:	f7fd fb07 	bl	8000140 <__udivsi3>
 8002b32:	0003      	movs	r3, r0
 8002b34:	0019      	movs	r1, r3
 8002b36:	0020      	movs	r0, r4
 8002b38:	f7fd fb02 	bl	8000140 <__udivsi3>
 8002b3c:	0003      	movs	r3, r0
 8002b3e:	0018      	movs	r0, r3
 8002b40:	f000 f92f 	bl	8002da2 <HAL_SYSTICK_Config>
 8002b44:	1e03      	subs	r3, r0, #0
 8002b46:	d001      	beq.n	8002b4c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e00f      	b.n	8002b6c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2b03      	cmp	r3, #3
 8002b50:	d80b      	bhi.n	8002b6a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b52:	6879      	ldr	r1, [r7, #4]
 8002b54:	2301      	movs	r3, #1
 8002b56:	425b      	negs	r3, r3
 8002b58:	2200      	movs	r2, #0
 8002b5a:	0018      	movs	r0, r3
 8002b5c:	f000 f8fc 	bl	8002d58 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b60:	4b06      	ldr	r3, [pc, #24]	@ (8002b7c <HAL_InitTick+0x64>)
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b66:	2300      	movs	r3, #0
 8002b68:	e000      	b.n	8002b6c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
}
 8002b6c:	0018      	movs	r0, r3
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	b003      	add	sp, #12
 8002b72:	bd90      	pop	{r4, r7, pc}
 8002b74:	2000002c 	.word	0x2000002c
 8002b78:	20000034 	.word	0x20000034
 8002b7c:	20000030 	.word	0x20000030

08002b80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b84:	4b05      	ldr	r3, [pc, #20]	@ (8002b9c <HAL_IncTick+0x1c>)
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	001a      	movs	r2, r3
 8002b8a:	4b05      	ldr	r3, [pc, #20]	@ (8002ba0 <HAL_IncTick+0x20>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	18d2      	adds	r2, r2, r3
 8002b90:	4b03      	ldr	r3, [pc, #12]	@ (8002ba0 <HAL_IncTick+0x20>)
 8002b92:	601a      	str	r2, [r3, #0]
}
 8002b94:	46c0      	nop			@ (mov r8, r8)
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	46c0      	nop			@ (mov r8, r8)
 8002b9c:	20000034 	.word	0x20000034
 8002ba0:	20000a2c 	.word	0x20000a2c

08002ba4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	af00      	add	r7, sp, #0
  return uwTick;
 8002ba8:	4b02      	ldr	r3, [pc, #8]	@ (8002bb4 <HAL_GetTick+0x10>)
 8002baa:	681b      	ldr	r3, [r3, #0]
}
 8002bac:	0018      	movs	r0, r3
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	46c0      	nop			@ (mov r8, r8)
 8002bb4:	20000a2c 	.word	0x20000a2c

08002bb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bc0:	f7ff fff0 	bl	8002ba4 <HAL_GetTick>
 8002bc4:	0003      	movs	r3, r0
 8002bc6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	3301      	adds	r3, #1
 8002bd0:	d005      	beq.n	8002bde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bd2:	4b0a      	ldr	r3, [pc, #40]	@ (8002bfc <HAL_Delay+0x44>)
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	001a      	movs	r2, r3
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	189b      	adds	r3, r3, r2
 8002bdc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002bde:	46c0      	nop			@ (mov r8, r8)
 8002be0:	f7ff ffe0 	bl	8002ba4 <HAL_GetTick>
 8002be4:	0002      	movs	r2, r0
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	68fa      	ldr	r2, [r7, #12]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d8f7      	bhi.n	8002be0 <HAL_Delay+0x28>
  {
  }
}
 8002bf0:	46c0      	nop			@ (mov r8, r8)
 8002bf2:	46c0      	nop			@ (mov r8, r8)
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	b004      	add	sp, #16
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	46c0      	nop			@ (mov r8, r8)
 8002bfc:	20000034 	.word	0x20000034

08002c00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	0002      	movs	r2, r0
 8002c08:	1dfb      	adds	r3, r7, #7
 8002c0a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002c0c:	1dfb      	adds	r3, r7, #7
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	2b7f      	cmp	r3, #127	@ 0x7f
 8002c12:	d809      	bhi.n	8002c28 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c14:	1dfb      	adds	r3, r7, #7
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	001a      	movs	r2, r3
 8002c1a:	231f      	movs	r3, #31
 8002c1c:	401a      	ands	r2, r3
 8002c1e:	4b04      	ldr	r3, [pc, #16]	@ (8002c30 <__NVIC_EnableIRQ+0x30>)
 8002c20:	2101      	movs	r1, #1
 8002c22:	4091      	lsls	r1, r2
 8002c24:	000a      	movs	r2, r1
 8002c26:	601a      	str	r2, [r3, #0]
  }
}
 8002c28:	46c0      	nop			@ (mov r8, r8)
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	b002      	add	sp, #8
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	e000e100 	.word	0xe000e100

08002c34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c34:	b590      	push	{r4, r7, lr}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	0002      	movs	r2, r0
 8002c3c:	6039      	str	r1, [r7, #0]
 8002c3e:	1dfb      	adds	r3, r7, #7
 8002c40:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002c42:	1dfb      	adds	r3, r7, #7
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	2b7f      	cmp	r3, #127	@ 0x7f
 8002c48:	d828      	bhi.n	8002c9c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c4a:	4a2f      	ldr	r2, [pc, #188]	@ (8002d08 <__NVIC_SetPriority+0xd4>)
 8002c4c:	1dfb      	adds	r3, r7, #7
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	b25b      	sxtb	r3, r3
 8002c52:	089b      	lsrs	r3, r3, #2
 8002c54:	33c0      	adds	r3, #192	@ 0xc0
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	589b      	ldr	r3, [r3, r2]
 8002c5a:	1dfa      	adds	r2, r7, #7
 8002c5c:	7812      	ldrb	r2, [r2, #0]
 8002c5e:	0011      	movs	r1, r2
 8002c60:	2203      	movs	r2, #3
 8002c62:	400a      	ands	r2, r1
 8002c64:	00d2      	lsls	r2, r2, #3
 8002c66:	21ff      	movs	r1, #255	@ 0xff
 8002c68:	4091      	lsls	r1, r2
 8002c6a:	000a      	movs	r2, r1
 8002c6c:	43d2      	mvns	r2, r2
 8002c6e:	401a      	ands	r2, r3
 8002c70:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	019b      	lsls	r3, r3, #6
 8002c76:	22ff      	movs	r2, #255	@ 0xff
 8002c78:	401a      	ands	r2, r3
 8002c7a:	1dfb      	adds	r3, r7, #7
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	0018      	movs	r0, r3
 8002c80:	2303      	movs	r3, #3
 8002c82:	4003      	ands	r3, r0
 8002c84:	00db      	lsls	r3, r3, #3
 8002c86:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c88:	481f      	ldr	r0, [pc, #124]	@ (8002d08 <__NVIC_SetPriority+0xd4>)
 8002c8a:	1dfb      	adds	r3, r7, #7
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	b25b      	sxtb	r3, r3
 8002c90:	089b      	lsrs	r3, r3, #2
 8002c92:	430a      	orrs	r2, r1
 8002c94:	33c0      	adds	r3, #192	@ 0xc0
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002c9a:	e031      	b.n	8002d00 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c9c:	4a1b      	ldr	r2, [pc, #108]	@ (8002d0c <__NVIC_SetPriority+0xd8>)
 8002c9e:	1dfb      	adds	r3, r7, #7
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	0019      	movs	r1, r3
 8002ca4:	230f      	movs	r3, #15
 8002ca6:	400b      	ands	r3, r1
 8002ca8:	3b08      	subs	r3, #8
 8002caa:	089b      	lsrs	r3, r3, #2
 8002cac:	3306      	adds	r3, #6
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	18d3      	adds	r3, r2, r3
 8002cb2:	3304      	adds	r3, #4
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	1dfa      	adds	r2, r7, #7
 8002cb8:	7812      	ldrb	r2, [r2, #0]
 8002cba:	0011      	movs	r1, r2
 8002cbc:	2203      	movs	r2, #3
 8002cbe:	400a      	ands	r2, r1
 8002cc0:	00d2      	lsls	r2, r2, #3
 8002cc2:	21ff      	movs	r1, #255	@ 0xff
 8002cc4:	4091      	lsls	r1, r2
 8002cc6:	000a      	movs	r2, r1
 8002cc8:	43d2      	mvns	r2, r2
 8002cca:	401a      	ands	r2, r3
 8002ccc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	019b      	lsls	r3, r3, #6
 8002cd2:	22ff      	movs	r2, #255	@ 0xff
 8002cd4:	401a      	ands	r2, r3
 8002cd6:	1dfb      	adds	r3, r7, #7
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	0018      	movs	r0, r3
 8002cdc:	2303      	movs	r3, #3
 8002cde:	4003      	ands	r3, r0
 8002ce0:	00db      	lsls	r3, r3, #3
 8002ce2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002ce4:	4809      	ldr	r0, [pc, #36]	@ (8002d0c <__NVIC_SetPriority+0xd8>)
 8002ce6:	1dfb      	adds	r3, r7, #7
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	001c      	movs	r4, r3
 8002cec:	230f      	movs	r3, #15
 8002cee:	4023      	ands	r3, r4
 8002cf0:	3b08      	subs	r3, #8
 8002cf2:	089b      	lsrs	r3, r3, #2
 8002cf4:	430a      	orrs	r2, r1
 8002cf6:	3306      	adds	r3, #6
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	18c3      	adds	r3, r0, r3
 8002cfc:	3304      	adds	r3, #4
 8002cfe:	601a      	str	r2, [r3, #0]
}
 8002d00:	46c0      	nop			@ (mov r8, r8)
 8002d02:	46bd      	mov	sp, r7
 8002d04:	b003      	add	sp, #12
 8002d06:	bd90      	pop	{r4, r7, pc}
 8002d08:	e000e100 	.word	0xe000e100
 8002d0c:	e000ed00 	.word	0xe000ed00

08002d10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	1e5a      	subs	r2, r3, #1
 8002d1c:	2380      	movs	r3, #128	@ 0x80
 8002d1e:	045b      	lsls	r3, r3, #17
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d301      	bcc.n	8002d28 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d24:	2301      	movs	r3, #1
 8002d26:	e010      	b.n	8002d4a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d28:	4b0a      	ldr	r3, [pc, #40]	@ (8002d54 <SysTick_Config+0x44>)
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	3a01      	subs	r2, #1
 8002d2e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d30:	2301      	movs	r3, #1
 8002d32:	425b      	negs	r3, r3
 8002d34:	2103      	movs	r1, #3
 8002d36:	0018      	movs	r0, r3
 8002d38:	f7ff ff7c 	bl	8002c34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d3c:	4b05      	ldr	r3, [pc, #20]	@ (8002d54 <SysTick_Config+0x44>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d42:	4b04      	ldr	r3, [pc, #16]	@ (8002d54 <SysTick_Config+0x44>)
 8002d44:	2207      	movs	r2, #7
 8002d46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	0018      	movs	r0, r3
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	b002      	add	sp, #8
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	46c0      	nop			@ (mov r8, r8)
 8002d54:	e000e010 	.word	0xe000e010

08002d58 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	60b9      	str	r1, [r7, #8]
 8002d60:	607a      	str	r2, [r7, #4]
 8002d62:	210f      	movs	r1, #15
 8002d64:	187b      	adds	r3, r7, r1
 8002d66:	1c02      	adds	r2, r0, #0
 8002d68:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002d6a:	68ba      	ldr	r2, [r7, #8]
 8002d6c:	187b      	adds	r3, r7, r1
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	b25b      	sxtb	r3, r3
 8002d72:	0011      	movs	r1, r2
 8002d74:	0018      	movs	r0, r3
 8002d76:	f7ff ff5d 	bl	8002c34 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 8002d7a:	46c0      	nop			@ (mov r8, r8)
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	b004      	add	sp, #16
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d82:	b580      	push	{r7, lr}
 8002d84:	b082      	sub	sp, #8
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	0002      	movs	r2, r0
 8002d8a:	1dfb      	adds	r3, r7, #7
 8002d8c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d8e:	1dfb      	adds	r3, r7, #7
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	b25b      	sxtb	r3, r3
 8002d94:	0018      	movs	r0, r3
 8002d96:	f7ff ff33 	bl	8002c00 <__NVIC_EnableIRQ>
}
 8002d9a:	46c0      	nop			@ (mov r8, r8)
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	b002      	add	sp, #8
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002da2:	b580      	push	{r7, lr}
 8002da4:	b082      	sub	sp, #8
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	0018      	movs	r0, r3
 8002dae:	f7ff ffaf 	bl	8002d10 <SysTick_Config>
 8002db2:	0003      	movs	r3, r0
}
 8002db4:	0018      	movs	r0, r3
 8002db6:	46bd      	mov	sp, r7
 8002db8:	b002      	add	sp, #8
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d101      	bne.n	8002dce <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e056      	b.n	8002e7c <HAL_CRC_Init+0xc0>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	7f5b      	ldrb	r3, [r3, #29]
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d106      	bne.n	8002de6 <HAL_CRC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	0018      	movs	r0, r3
 8002de2:	f7ff fb0b 	bl	80023fc <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2202      	movs	r2, #2
 8002dea:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	791b      	ldrb	r3, [r3, #4]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d10c      	bne.n	8002e0e <HAL_CRC_Init+0x52>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a22      	ldr	r2, [pc, #136]	@ (8002e84 <HAL_CRC_Init+0xc8>)
 8002dfa:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	689a      	ldr	r2, [r3, #8]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	2118      	movs	r1, #24
 8002e08:	438a      	bics	r2, r1
 8002e0a:	609a      	str	r2, [r3, #8]
 8002e0c:	e00b      	b.n	8002e26 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6899      	ldr	r1, [r3, #8]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	68da      	ldr	r2, [r3, #12]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	0018      	movs	r0, r3
 8002e1a:	f000 f835 	bl	8002e88 <HAL_CRCEx_Polynomial_Set>
 8002e1e:	1e03      	subs	r3, r0, #0
 8002e20:	d001      	beq.n	8002e26 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e02a      	b.n	8002e7c <HAL_CRC_Init+0xc0>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	795b      	ldrb	r3, [r3, #5]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d105      	bne.n	8002e3a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	2201      	movs	r2, #1
 8002e34:	4252      	negs	r2, r2
 8002e36:	611a      	str	r2, [r3, #16]
 8002e38:	e004      	b.n	8002e44 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	6912      	ldr	r2, [r2, #16]
 8002e42:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	2260      	movs	r2, #96	@ 0x60
 8002e4c:	4393      	bics	r3, r2
 8002e4e:	0019      	movs	r1, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	695a      	ldr	r2, [r3, #20]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	430a      	orrs	r2, r1
 8002e5a:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	2280      	movs	r2, #128	@ 0x80
 8002e64:	4393      	bics	r3, r2
 8002e66:	0019      	movs	r1, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	699a      	ldr	r2, [r3, #24]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	430a      	orrs	r2, r1
 8002e72:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2201      	movs	r2, #1
 8002e78:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002e7a:	2300      	movs	r3, #0
}
 8002e7c:	0018      	movs	r0, r3
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	b002      	add	sp, #8
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	04c11db7 	.word	0x04c11db7

08002e88 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b086      	sub	sp, #24
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	60b9      	str	r1, [r7, #8]
 8002e92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e94:	2117      	movs	r1, #23
 8002e96:	187b      	adds	r3, r7, r1
 8002e98:	2200      	movs	r2, #0
 8002e9a:	701a      	strb	r2, [r3, #0]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002e9c:	231f      	movs	r3, #31
 8002e9e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	d103      	bne.n	8002eb0 <HAL_CRCEx_Polynomial_Set+0x28>
  {
    status =  HAL_ERROR;
 8002ea8:	187b      	adds	r3, r7, r1
 8002eaa:	2201      	movs	r2, #1
 8002eac:	701a      	strb	r2, [r3, #0]
 8002eae:	e045      	b.n	8002f3c <HAL_CRCEx_Polynomial_Set+0xb4>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002eb0:	46c0      	nop			@ (mov r8, r8)
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	1e5a      	subs	r2, r3, #1
 8002eb6:	613a      	str	r2, [r7, #16]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d008      	beq.n	8002ece <HAL_CRCEx_Polynomial_Set+0x46>
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	221f      	movs	r2, #31
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	68ba      	ldr	r2, [r7, #8]
 8002ec4:	40da      	lsrs	r2, r3
 8002ec6:	0013      	movs	r3, r2
 8002ec8:	2201      	movs	r2, #1
 8002eca:	4013      	ands	r3, r2
 8002ecc:	d0f1      	beq.n	8002eb2 <HAL_CRCEx_Polynomial_Set+0x2a>
    {
    }

    switch (PolyLength)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2b18      	cmp	r3, #24
 8002ed2:	d00f      	beq.n	8002ef4 <HAL_CRCEx_Polynomial_Set+0x6c>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2b18      	cmp	r3, #24
 8002ed8:	d824      	bhi.n	8002f24 <HAL_CRCEx_Polynomial_Set+0x9c>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2b10      	cmp	r3, #16
 8002ede:	d011      	beq.n	8002f04 <HAL_CRCEx_Polynomial_Set+0x7c>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2b10      	cmp	r3, #16
 8002ee4:	d81e      	bhi.n	8002f24 <HAL_CRCEx_Polynomial_Set+0x9c>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d020      	beq.n	8002f2e <HAL_CRCEx_Polynomial_Set+0xa6>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2b08      	cmp	r3, #8
 8002ef0:	d010      	beq.n	8002f14 <HAL_CRCEx_Polynomial_Set+0x8c>
 8002ef2:	e017      	b.n	8002f24 <HAL_CRCEx_Polynomial_Set+0x9c>
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	2b06      	cmp	r3, #6
 8002ef8:	d91b      	bls.n	8002f32 <HAL_CRCEx_Polynomial_Set+0xaa>
        {
          status =   HAL_ERROR;
 8002efa:	2317      	movs	r3, #23
 8002efc:	18fb      	adds	r3, r7, r3
 8002efe:	2201      	movs	r2, #1
 8002f00:	701a      	strb	r2, [r3, #0]
        }
        break;
 8002f02:	e016      	b.n	8002f32 <HAL_CRCEx_Polynomial_Set+0xaa>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	2b07      	cmp	r3, #7
 8002f08:	d915      	bls.n	8002f36 <HAL_CRCEx_Polynomial_Set+0xae>
        {
          status =   HAL_ERROR;
 8002f0a:	2317      	movs	r3, #23
 8002f0c:	18fb      	adds	r3, r7, r3
 8002f0e:	2201      	movs	r2, #1
 8002f10:	701a      	strb	r2, [r3, #0]
        }
        break;
 8002f12:	e010      	b.n	8002f36 <HAL_CRCEx_Polynomial_Set+0xae>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	2b0f      	cmp	r3, #15
 8002f18:	d90f      	bls.n	8002f3a <HAL_CRCEx_Polynomial_Set+0xb2>
        {
          status =   HAL_ERROR;
 8002f1a:	2317      	movs	r3, #23
 8002f1c:	18fb      	adds	r3, r7, r3
 8002f1e:	2201      	movs	r2, #1
 8002f20:	701a      	strb	r2, [r3, #0]
        }
        break;
 8002f22:	e00a      	b.n	8002f3a <HAL_CRCEx_Polynomial_Set+0xb2>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8002f24:	2317      	movs	r3, #23
 8002f26:	18fb      	adds	r3, r7, r3
 8002f28:	2201      	movs	r2, #1
 8002f2a:	701a      	strb	r2, [r3, #0]
        break;
 8002f2c:	e006      	b.n	8002f3c <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 8002f2e:	46c0      	nop			@ (mov r8, r8)
 8002f30:	e004      	b.n	8002f3c <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 8002f32:	46c0      	nop			@ (mov r8, r8)
 8002f34:	e002      	b.n	8002f3c <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 8002f36:	46c0      	nop			@ (mov r8, r8)
 8002f38:	e000      	b.n	8002f3c <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 8002f3a:	46c0      	nop			@ (mov r8, r8)
    }
  }
  if (status == HAL_OK)
 8002f3c:	2317      	movs	r3, #23
 8002f3e:	18fb      	adds	r3, r7, r3
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d10e      	bne.n	8002f64 <HAL_CRCEx_Polynomial_Set+0xdc>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	68ba      	ldr	r2, [r7, #8]
 8002f4c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	2218      	movs	r2, #24
 8002f56:	4393      	bics	r3, r2
 8002f58:	0019      	movs	r1, r3
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	430a      	orrs	r2, r1
 8002f62:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002f64:	2317      	movs	r3, #23
 8002f66:	18fb      	adds	r3, r7, r3
 8002f68:	781b      	ldrb	r3, [r3, #0]
}
 8002f6a:	0018      	movs	r0, r3
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	b006      	add	sp, #24
 8002f70:	bd80      	pop	{r7, pc}
	...

08002f74 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d101      	bne.n	8002f86 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e061      	b.n	800304a <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a32      	ldr	r2, [pc, #200]	@ (8003054 <HAL_DMA_Init+0xe0>)
 8002f8c:	4694      	mov	ip, r2
 8002f8e:	4463      	add	r3, ip
 8002f90:	2114      	movs	r1, #20
 8002f92:	0018      	movs	r0, r3
 8002f94:	f7fd f8d4 	bl	8000140 <__udivsi3>
 8002f98:	0003      	movs	r3, r0
 8002f9a:	009a      	lsls	r2, r3, #2
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	4a2d      	ldr	r2, [pc, #180]	@ (8003058 <HAL_DMA_Init+0xe4>)
 8002fa4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2225      	movs	r2, #37	@ 0x25
 8002faa:	2102      	movs	r1, #2
 8002fac:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	4a28      	ldr	r2, [pc, #160]	@ (800305c <HAL_DMA_Init+0xe8>)
 8002fba:	4013      	ands	r3, r2
 8002fbc:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002fc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	691b      	ldr	r3, [r3, #16]
 8002fcc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fd2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	699b      	ldr	r3, [r3, #24]
 8002fd8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fde:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6a1b      	ldr	r3, [r3, #32]
 8002fe4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	68fa      	ldr	r2, [r7, #12]
 8002ff2:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	689a      	ldr	r2, [r3, #8]
 8002ff8:	2380      	movs	r3, #128	@ 0x80
 8002ffa:	01db      	lsls	r3, r3, #7
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d018      	beq.n	8003032 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003000:	4b17      	ldr	r3, [pc, #92]	@ (8003060 <HAL_DMA_Init+0xec>)
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003008:	211c      	movs	r1, #28
 800300a:	400b      	ands	r3, r1
 800300c:	210f      	movs	r1, #15
 800300e:	4099      	lsls	r1, r3
 8003010:	000b      	movs	r3, r1
 8003012:	43d9      	mvns	r1, r3
 8003014:	4b12      	ldr	r3, [pc, #72]	@ (8003060 <HAL_DMA_Init+0xec>)
 8003016:	400a      	ands	r2, r1
 8003018:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800301a:	4b11      	ldr	r3, [pc, #68]	@ (8003060 <HAL_DMA_Init+0xec>)
 800301c:	6819      	ldr	r1, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685a      	ldr	r2, [r3, #4]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003026:	201c      	movs	r0, #28
 8003028:	4003      	ands	r3, r0
 800302a:	409a      	lsls	r2, r3
 800302c:	4b0c      	ldr	r3, [pc, #48]	@ (8003060 <HAL_DMA_Init+0xec>)
 800302e:	430a      	orrs	r2, r1
 8003030:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2225      	movs	r2, #37	@ 0x25
 800303c:	2101      	movs	r1, #1
 800303e:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2224      	movs	r2, #36	@ 0x24
 8003044:	2100      	movs	r1, #0
 8003046:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003048:	2300      	movs	r3, #0
}
 800304a:	0018      	movs	r0, r3
 800304c:	46bd      	mov	sp, r7
 800304e:	b004      	add	sp, #16
 8003050:	bd80      	pop	{r7, pc}
 8003052:	46c0      	nop			@ (mov r8, r8)
 8003054:	bffdfff8 	.word	0xbffdfff8
 8003058:	40020000 	.word	0x40020000
 800305c:	ffff800f 	.word	0xffff800f
 8003060:	400200a8 	.word	0x400200a8

08003064 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b086      	sub	sp, #24
 8003068:	af00      	add	r7, sp, #0
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	607a      	str	r2, [r7, #4]
 8003070:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003072:	2317      	movs	r3, #23
 8003074:	18fb      	adds	r3, r7, r3
 8003076:	2200      	movs	r2, #0
 8003078:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2224      	movs	r2, #36	@ 0x24
 800307e:	5c9b      	ldrb	r3, [r3, r2]
 8003080:	2b01      	cmp	r3, #1
 8003082:	d101      	bne.n	8003088 <HAL_DMA_Start_IT+0x24>
 8003084:	2302      	movs	r3, #2
 8003086:	e04f      	b.n	8003128 <HAL_DMA_Start_IT+0xc4>
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2224      	movs	r2, #36	@ 0x24
 800308c:	2101      	movs	r1, #1
 800308e:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2225      	movs	r2, #37	@ 0x25
 8003094:	5c9b      	ldrb	r3, [r3, r2]
 8003096:	b2db      	uxtb	r3, r3
 8003098:	2b01      	cmp	r3, #1
 800309a:	d13a      	bne.n	8003112 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2225      	movs	r2, #37	@ 0x25
 80030a0:	2102      	movs	r1, #2
 80030a2:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2200      	movs	r2, #0
 80030a8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2101      	movs	r1, #1
 80030b6:	438a      	bics	r2, r1
 80030b8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	68b9      	ldr	r1, [r7, #8]
 80030c0:	68f8      	ldr	r0, [r7, #12]
 80030c2:	f000 f980 	bl	80033c6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d008      	beq.n	80030e0 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	210e      	movs	r1, #14
 80030da:	430a      	orrs	r2, r1
 80030dc:	601a      	str	r2, [r3, #0]
 80030de:	e00f      	b.n	8003100 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2104      	movs	r1, #4
 80030ec:	438a      	bics	r2, r1
 80030ee:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	210a      	movs	r1, #10
 80030fc:	430a      	orrs	r2, r1
 80030fe:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2101      	movs	r1, #1
 800310c:	430a      	orrs	r2, r1
 800310e:	601a      	str	r2, [r3, #0]
 8003110:	e007      	b.n	8003122 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2224      	movs	r2, #36	@ 0x24
 8003116:	2100      	movs	r1, #0
 8003118:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800311a:	2317      	movs	r3, #23
 800311c:	18fb      	adds	r3, r7, r3
 800311e:	2202      	movs	r2, #2
 8003120:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8003122:	2317      	movs	r3, #23
 8003124:	18fb      	adds	r3, r7, r3
 8003126:	781b      	ldrb	r3, [r3, #0]
}
 8003128:	0018      	movs	r0, r3
 800312a:	46bd      	mov	sp, r7
 800312c:	b006      	add	sp, #24
 800312e:	bd80      	pop	{r7, pc}

08003130 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b084      	sub	sp, #16
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003138:	230f      	movs	r3, #15
 800313a:	18fb      	adds	r3, r7, r3
 800313c:	2200      	movs	r2, #0
 800313e:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2225      	movs	r2, #37	@ 0x25
 8003144:	5c9b      	ldrb	r3, [r3, r2]
 8003146:	b2db      	uxtb	r3, r3
 8003148:	2b02      	cmp	r3, #2
 800314a:	d008      	beq.n	800315e <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2204      	movs	r2, #4
 8003150:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2224      	movs	r2, #36	@ 0x24
 8003156:	2100      	movs	r1, #0
 8003158:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e024      	b.n	80031a8 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	210e      	movs	r1, #14
 800316a:	438a      	bics	r2, r1
 800316c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2101      	movs	r1, #1
 800317a:	438a      	bics	r2, r1
 800317c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003182:	221c      	movs	r2, #28
 8003184:	401a      	ands	r2, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800318a:	2101      	movs	r1, #1
 800318c:	4091      	lsls	r1, r2
 800318e:	000a      	movs	r2, r1
 8003190:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2225      	movs	r2, #37	@ 0x25
 8003196:	2101      	movs	r1, #1
 8003198:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2224      	movs	r2, #36	@ 0x24
 800319e:	2100      	movs	r1, #0
 80031a0:	5499      	strb	r1, [r3, r2]

    return status;
 80031a2:	230f      	movs	r3, #15
 80031a4:	18fb      	adds	r3, r7, r3
 80031a6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80031a8:	0018      	movs	r0, r3
 80031aa:	46bd      	mov	sp, r7
 80031ac:	b004      	add	sp, #16
 80031ae:	bd80      	pop	{r7, pc}

080031b0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031b8:	210f      	movs	r1, #15
 80031ba:	187b      	adds	r3, r7, r1
 80031bc:	2200      	movs	r2, #0
 80031be:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2225      	movs	r2, #37	@ 0x25
 80031c4:	5c9b      	ldrb	r3, [r3, r2]
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d006      	beq.n	80031da <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2204      	movs	r2, #4
 80031d0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80031d2:	187b      	adds	r3, r7, r1
 80031d4:	2201      	movs	r2, #1
 80031d6:	701a      	strb	r2, [r3, #0]
 80031d8:	e02a      	b.n	8003230 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	210e      	movs	r1, #14
 80031e6:	438a      	bics	r2, r1
 80031e8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2101      	movs	r1, #1
 80031f6:	438a      	bics	r2, r1
 80031f8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031fe:	221c      	movs	r2, #28
 8003200:	401a      	ands	r2, r3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003206:	2101      	movs	r1, #1
 8003208:	4091      	lsls	r1, r2
 800320a:	000a      	movs	r2, r1
 800320c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2225      	movs	r2, #37	@ 0x25
 8003212:	2101      	movs	r1, #1
 8003214:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2224      	movs	r2, #36	@ 0x24
 800321a:	2100      	movs	r1, #0
 800321c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003222:	2b00      	cmp	r3, #0
 8003224:	d004      	beq.n	8003230 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	0010      	movs	r0, r2
 800322e:	4798      	blx	r3
    }
  }
  return status;
 8003230:	230f      	movs	r3, #15
 8003232:	18fb      	adds	r3, r7, r3
 8003234:	781b      	ldrb	r3, [r3, #0]
}
 8003236:	0018      	movs	r0, r3
 8003238:	46bd      	mov	sp, r7
 800323a:	b004      	add	sp, #16
 800323c:	bd80      	pop	{r7, pc}

0800323e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800323e:	b580      	push	{r7, lr}
 8003240:	b084      	sub	sp, #16
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800325a:	221c      	movs	r2, #28
 800325c:	4013      	ands	r3, r2
 800325e:	2204      	movs	r2, #4
 8003260:	409a      	lsls	r2, r3
 8003262:	0013      	movs	r3, r2
 8003264:	68fa      	ldr	r2, [r7, #12]
 8003266:	4013      	ands	r3, r2
 8003268:	d026      	beq.n	80032b8 <HAL_DMA_IRQHandler+0x7a>
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	2204      	movs	r2, #4
 800326e:	4013      	ands	r3, r2
 8003270:	d022      	beq.n	80032b8 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2220      	movs	r2, #32
 800327a:	4013      	ands	r3, r2
 800327c:	d107      	bne.n	800328e <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2104      	movs	r1, #4
 800328a:	438a      	bics	r2, r1
 800328c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003292:	221c      	movs	r2, #28
 8003294:	401a      	ands	r2, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800329a:	2104      	movs	r1, #4
 800329c:	4091      	lsls	r1, r2
 800329e:	000a      	movs	r2, r1
 80032a0:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d100      	bne.n	80032ac <HAL_DMA_IRQHandler+0x6e>
 80032aa:	e071      	b.n	8003390 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	0010      	movs	r0, r2
 80032b4:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 80032b6:	e06b      	b.n	8003390 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032bc:	221c      	movs	r2, #28
 80032be:	4013      	ands	r3, r2
 80032c0:	2202      	movs	r2, #2
 80032c2:	409a      	lsls	r2, r3
 80032c4:	0013      	movs	r3, r2
 80032c6:	68fa      	ldr	r2, [r7, #12]
 80032c8:	4013      	ands	r3, r2
 80032ca:	d02d      	beq.n	8003328 <HAL_DMA_IRQHandler+0xea>
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	2202      	movs	r2, #2
 80032d0:	4013      	ands	r3, r2
 80032d2:	d029      	beq.n	8003328 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	2220      	movs	r2, #32
 80032dc:	4013      	ands	r3, r2
 80032de:	d10b      	bne.n	80032f8 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	210a      	movs	r1, #10
 80032ec:	438a      	bics	r2, r1
 80032ee:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2225      	movs	r2, #37	@ 0x25
 80032f4:	2101      	movs	r1, #1
 80032f6:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032fc:	221c      	movs	r2, #28
 80032fe:	401a      	ands	r2, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003304:	2102      	movs	r1, #2
 8003306:	4091      	lsls	r1, r2
 8003308:	000a      	movs	r2, r1
 800330a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2224      	movs	r2, #36	@ 0x24
 8003310:	2100      	movs	r1, #0
 8003312:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003318:	2b00      	cmp	r3, #0
 800331a:	d039      	beq.n	8003390 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	0010      	movs	r0, r2
 8003324:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003326:	e033      	b.n	8003390 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800332c:	221c      	movs	r2, #28
 800332e:	4013      	ands	r3, r2
 8003330:	2208      	movs	r2, #8
 8003332:	409a      	lsls	r2, r3
 8003334:	0013      	movs	r3, r2
 8003336:	68fa      	ldr	r2, [r7, #12]
 8003338:	4013      	ands	r3, r2
 800333a:	d02a      	beq.n	8003392 <HAL_DMA_IRQHandler+0x154>
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	2208      	movs	r2, #8
 8003340:	4013      	ands	r3, r2
 8003342:	d026      	beq.n	8003392 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	210e      	movs	r1, #14
 8003350:	438a      	bics	r2, r1
 8003352:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003358:	221c      	movs	r2, #28
 800335a:	401a      	ands	r2, r3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003360:	2101      	movs	r1, #1
 8003362:	4091      	lsls	r1, r2
 8003364:	000a      	movs	r2, r1
 8003366:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2225      	movs	r2, #37	@ 0x25
 8003372:	2101      	movs	r1, #1
 8003374:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2224      	movs	r2, #36	@ 0x24
 800337a:	2100      	movs	r1, #0
 800337c:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003382:	2b00      	cmp	r3, #0
 8003384:	d005      	beq.n	8003392 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	0010      	movs	r0, r2
 800338e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003390:	46c0      	nop			@ (mov r8, r8)
 8003392:	46c0      	nop			@ (mov r8, r8)
}
 8003394:	46bd      	mov	sp, r7
 8003396:	b004      	add	sp, #16
 8003398:	bd80      	pop	{r7, pc}

0800339a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800339a:	b580      	push	{r7, lr}
 800339c:	b082      	sub	sp, #8
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2225      	movs	r2, #37	@ 0x25
 80033a6:	5c9b      	ldrb	r3, [r3, r2]
 80033a8:	b2db      	uxtb	r3, r3
}
 80033aa:	0018      	movs	r0, r3
 80033ac:	46bd      	mov	sp, r7
 80033ae:	b002      	add	sp, #8
 80033b0:	bd80      	pop	{r7, pc}

080033b2 <HAL_DMA_GetError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80033b2:	b580      	push	{r7, lr}
 80033b4:	b082      	sub	sp, #8
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 80033be:	0018      	movs	r0, r3
 80033c0:	46bd      	mov	sp, r7
 80033c2:	b002      	add	sp, #8
 80033c4:	bd80      	pop	{r7, pc}

080033c6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033c6:	b580      	push	{r7, lr}
 80033c8:	b084      	sub	sp, #16
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	60f8      	str	r0, [r7, #12]
 80033ce:	60b9      	str	r1, [r7, #8]
 80033d0:	607a      	str	r2, [r7, #4]
 80033d2:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033d8:	221c      	movs	r2, #28
 80033da:	401a      	ands	r2, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e0:	2101      	movs	r1, #1
 80033e2:	4091      	lsls	r1, r2
 80033e4:	000a      	movs	r2, r1
 80033e6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	683a      	ldr	r2, [r7, #0]
 80033ee:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	2b10      	cmp	r3, #16
 80033f6:	d108      	bne.n	800340a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	68ba      	ldr	r2, [r7, #8]
 8003406:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003408:	e007      	b.n	800341a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68ba      	ldr	r2, [r7, #8]
 8003410:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	60da      	str	r2, [r3, #12]
}
 800341a:	46c0      	nop			@ (mov r8, r8)
 800341c:	46bd      	mov	sp, r7
 800341e:	b004      	add	sp, #16
 8003420:	bd80      	pop	{r7, pc}
	...

08003424 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b086      	sub	sp, #24
 8003428:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  /* Unlocking FLASH_PECR register access*/
  if(HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PELOCK))
 800342a:	4b23      	ldr	r3, [pc, #140]	@ (80034b8 <HAL_FLASH_Unlock+0x94>)
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	4013      	ands	r3, r2
 8003432:	2b01      	cmp	r3, #1
 8003434:	d11a      	bne.n	800346c <HAL_FLASH_Unlock+0x48>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003436:	f3ef 8310 	mrs	r3, PRIMASK
 800343a:	60fb      	str	r3, [r7, #12]
  return(result);
 800343c:	68fb      	ldr	r3, [r7, #12]
  {
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 800343e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8003440:	b672      	cpsid	i
}
 8003442:	46c0      	nop			@ (mov r8, r8)
    __disable_irq();

    WRITE_REG(FLASH->PEKEYR, FLASH_PEKEY1);
 8003444:	4b1c      	ldr	r3, [pc, #112]	@ (80034b8 <HAL_FLASH_Unlock+0x94>)
 8003446:	4a1d      	ldr	r2, [pc, #116]	@ (80034bc <HAL_FLASH_Unlock+0x98>)
 8003448:	60da      	str	r2, [r3, #12]
    WRITE_REG(FLASH->PEKEYR, FLASH_PEKEY2);
 800344a:	4b1b      	ldr	r3, [pc, #108]	@ (80034b8 <HAL_FLASH_Unlock+0x94>)
 800344c:	4a1c      	ldr	r2, [pc, #112]	@ (80034c0 <HAL_FLASH_Unlock+0x9c>)
 800344e:	60da      	str	r2, [r3, #12]
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	f383 8810 	msr	PRIMASK, r3
}
 800345a:	46c0      	nop			@ (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if(HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PELOCK))
 800345c:	4b16      	ldr	r3, [pc, #88]	@ (80034b8 <HAL_FLASH_Unlock+0x94>)
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	2201      	movs	r2, #1
 8003462:	4013      	ands	r3, r2
 8003464:	2b01      	cmp	r3, #1
 8003466:	d101      	bne.n	800346c <HAL_FLASH_Unlock+0x48>
    {
      return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e021      	b.n	80034b0 <HAL_FLASH_Unlock+0x8c>
    }
  }

  if (HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PRGLOCK))
 800346c:	4b12      	ldr	r3, [pc, #72]	@ (80034b8 <HAL_FLASH_Unlock+0x94>)
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	2202      	movs	r2, #2
 8003472:	4013      	ands	r3, r2
 8003474:	2b02      	cmp	r3, #2
 8003476:	d11a      	bne.n	80034ae <HAL_FLASH_Unlock+0x8a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003478:	f3ef 8310 	mrs	r3, PRIMASK
 800347c:	607b      	str	r3, [r7, #4]
  return(result);
 800347e:	687b      	ldr	r3, [r7, #4]
  {
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 8003480:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8003482:	b672      	cpsid	i
}
 8003484:	46c0      	nop			@ (mov r8, r8)
    __disable_irq();

    /* Unlocking the program memory access */
    WRITE_REG(FLASH->PRGKEYR, FLASH_PRGKEY1);
 8003486:	4b0c      	ldr	r3, [pc, #48]	@ (80034b8 <HAL_FLASH_Unlock+0x94>)
 8003488:	4a0e      	ldr	r2, [pc, #56]	@ (80034c4 <HAL_FLASH_Unlock+0xa0>)
 800348a:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->PRGKEYR, FLASH_PRGKEY2);  
 800348c:	4b0a      	ldr	r3, [pc, #40]	@ (80034b8 <HAL_FLASH_Unlock+0x94>)
 800348e:	4a0e      	ldr	r2, [pc, #56]	@ (80034c8 <HAL_FLASH_Unlock+0xa4>)
 8003490:	611a      	str	r2, [r3, #16]
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	f383 8810 	msr	PRIMASK, r3
}
 800349c:	46c0      	nop			@ (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if (HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PRGLOCK))
 800349e:	4b06      	ldr	r3, [pc, #24]	@ (80034b8 <HAL_FLASH_Unlock+0x94>)
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	2202      	movs	r2, #2
 80034a4:	4013      	ands	r3, r2
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d101      	bne.n	80034ae <HAL_FLASH_Unlock+0x8a>
    {
      return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e000      	b.n	80034b0 <HAL_FLASH_Unlock+0x8c>
    }
  }

  return HAL_OK; 
 80034ae:	2300      	movs	r3, #0
}
 80034b0:	0018      	movs	r0, r3
 80034b2:	46bd      	mov	sp, r7
 80034b4:	b006      	add	sp, #24
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	40022000 	.word	0x40022000
 80034bc:	89abcdef 	.word	0x89abcdef
 80034c0:	02030405 	.word	0x02030405
 80034c4:	8c9daebf 	.word	0x8c9daebf
 80034c8:	13141516 	.word	0x13141516

080034cc <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	af00      	add	r7, sp, #0
  /* Set the PRGLOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PRGLOCK);
 80034d0:	4b07      	ldr	r3, [pc, #28]	@ (80034f0 <HAL_FLASH_Lock+0x24>)
 80034d2:	685a      	ldr	r2, [r3, #4]
 80034d4:	4b06      	ldr	r3, [pc, #24]	@ (80034f0 <HAL_FLASH_Lock+0x24>)
 80034d6:	2102      	movs	r1, #2
 80034d8:	430a      	orrs	r2, r1
 80034da:	605a      	str	r2, [r3, #4]
  
  /* Set the PELOCK Bit to lock the PECR Register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 80034dc:	4b04      	ldr	r3, [pc, #16]	@ (80034f0 <HAL_FLASH_Lock+0x24>)
 80034de:	685a      	ldr	r2, [r3, #4]
 80034e0:	4b03      	ldr	r3, [pc, #12]	@ (80034f0 <HAL_FLASH_Lock+0x24>)
 80034e2:	2101      	movs	r1, #1
 80034e4:	430a      	orrs	r2, r1
 80034e6:	605a      	str	r2, [r3, #4]

  return HAL_OK;  
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	0018      	movs	r0, r3
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	40022000 	.word	0x40022000

080034f4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80034fc:	f7ff fb52 	bl	8002ba4 <HAL_GetTick>
 8003500:	0003      	movs	r3, r0
 8003502:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003504:	e00f      	b.n	8003526 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	3301      	adds	r3, #1
 800350a:	d00c      	beq.n	8003526 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d007      	beq.n	8003522 <FLASH_WaitForLastOperation+0x2e>
 8003512:	f7ff fb47 	bl	8002ba4 <HAL_GetTick>
 8003516:	0002      	movs	r2, r0
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	429a      	cmp	r2, r3
 8003520:	d201      	bcs.n	8003526 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e052      	b.n	80035cc <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003526:	4b2b      	ldr	r3, [pc, #172]	@ (80035d4 <FLASH_WaitForLastOperation+0xe0>)
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	2201      	movs	r2, #1
 800352c:	4013      	ands	r3, r2
 800352e:	2b01      	cmp	r3, #1
 8003530:	d0e9      	beq.n	8003506 <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003532:	4b28      	ldr	r3, [pc, #160]	@ (80035d4 <FLASH_WaitForLastOperation+0xe0>)
 8003534:	699b      	ldr	r3, [r3, #24]
 8003536:	2202      	movs	r2, #2
 8003538:	4013      	ands	r3, r2
 800353a:	2b02      	cmp	r3, #2
 800353c:	d102      	bne.n	8003544 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800353e:	4b25      	ldr	r3, [pc, #148]	@ (80035d4 <FLASH_WaitForLastOperation+0xe0>)
 8003540:	2202      	movs	r2, #2
 8003542:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8003544:	4b23      	ldr	r3, [pc, #140]	@ (80035d4 <FLASH_WaitForLastOperation+0xe0>)
 8003546:	699a      	ldr	r2, [r3, #24]
 8003548:	2380      	movs	r3, #128	@ 0x80
 800354a:	005b      	lsls	r3, r3, #1
 800354c:	401a      	ands	r2, r3
 800354e:	2380      	movs	r3, #128	@ 0x80
 8003550:	005b      	lsls	r3, r3, #1
 8003552:	429a      	cmp	r2, r3
 8003554:	d035      	beq.n	80035c2 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8003556:	4b1f      	ldr	r3, [pc, #124]	@ (80035d4 <FLASH_WaitForLastOperation+0xe0>)
 8003558:	699a      	ldr	r2, [r3, #24]
 800355a:	2380      	movs	r3, #128	@ 0x80
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8003560:	2380      	movs	r3, #128	@ 0x80
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	429a      	cmp	r2, r3
 8003566:	d02c      	beq.n	80035c2 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8003568:	4b1a      	ldr	r3, [pc, #104]	@ (80035d4 <FLASH_WaitForLastOperation+0xe0>)
 800356a:	699a      	ldr	r2, [r3, #24]
 800356c:	2380      	movs	r3, #128	@ 0x80
 800356e:	00db      	lsls	r3, r3, #3
 8003570:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8003572:	2380      	movs	r3, #128	@ 0x80
 8003574:	00db      	lsls	r3, r3, #3
 8003576:	429a      	cmp	r2, r3
 8003578:	d023      	beq.n	80035c2 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800357a:	4b16      	ldr	r3, [pc, #88]	@ (80035d4 <FLASH_WaitForLastOperation+0xe0>)
 800357c:	699a      	ldr	r2, [r3, #24]
 800357e:	2380      	movs	r3, #128	@ 0x80
 8003580:	011b      	lsls	r3, r3, #4
 8003582:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8003584:	2380      	movs	r3, #128	@ 0x80
 8003586:	011b      	lsls	r3, r3, #4
 8003588:	429a      	cmp	r2, r3
 800358a:	d01a      	beq.n	80035c2 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800358c:	4b11      	ldr	r3, [pc, #68]	@ (80035d4 <FLASH_WaitForLastOperation+0xe0>)
 800358e:	699a      	ldr	r2, [r3, #24]
 8003590:	2380      	movs	r3, #128	@ 0x80
 8003592:	019b      	lsls	r3, r3, #6
 8003594:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8003596:	2380      	movs	r3, #128	@ 0x80
 8003598:	019b      	lsls	r3, r3, #6
 800359a:	429a      	cmp	r2, r3
 800359c:	d011      	beq.n	80035c2 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800359e:	4b0d      	ldr	r3, [pc, #52]	@ (80035d4 <FLASH_WaitForLastOperation+0xe0>)
 80035a0:	699a      	ldr	r2, [r3, #24]
 80035a2:	2380      	movs	r3, #128	@ 0x80
 80035a4:	029b      	lsls	r3, r3, #10
 80035a6:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 80035a8:	2380      	movs	r3, #128	@ 0x80
 80035aa:	029b      	lsls	r3, r3, #10
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d008      	beq.n	80035c2 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 80035b0:	4b08      	ldr	r3, [pc, #32]	@ (80035d4 <FLASH_WaitForLastOperation+0xe0>)
 80035b2:	699a      	ldr	r2, [r3, #24]
 80035b4:	2380      	movs	r3, #128	@ 0x80
 80035b6:	025b      	lsls	r3, r3, #9
 80035b8:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 80035ba:	2380      	movs	r3, #128	@ 0x80
 80035bc:	025b      	lsls	r3, r3, #9
 80035be:	429a      	cmp	r2, r3
 80035c0:	d103      	bne.n	80035ca <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 80035c2:	f000 f809 	bl	80035d8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e000      	b.n	80035cc <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 80035ca:	2300      	movs	r3, #0
}
 80035cc:	0018      	movs	r0, r3
 80035ce:	46bd      	mov	sp, r7
 80035d0:	b004      	add	sp, #16
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	40022000 	.word	0x40022000

080035d8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 80035de:	2300      	movs	r3, #0
 80035e0:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80035e2:	4b49      	ldr	r3, [pc, #292]	@ (8003708 <FLASH_SetErrorCode+0x130>)
 80035e4:	699a      	ldr	r2, [r3, #24]
 80035e6:	2380      	movs	r3, #128	@ 0x80
 80035e8:	005b      	lsls	r3, r3, #1
 80035ea:	401a      	ands	r2, r3
 80035ec:	2380      	movs	r3, #128	@ 0x80
 80035ee:	005b      	lsls	r3, r3, #1
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d10a      	bne.n	800360a <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80035f4:	4b45      	ldr	r3, [pc, #276]	@ (800370c <FLASH_SetErrorCode+0x134>)
 80035f6:	695b      	ldr	r3, [r3, #20]
 80035f8:	2202      	movs	r2, #2
 80035fa:	431a      	orrs	r2, r3
 80035fc:	4b43      	ldr	r3, [pc, #268]	@ (800370c <FLASH_SetErrorCode+0x134>)
 80035fe:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2280      	movs	r2, #128	@ 0x80
 8003604:	0052      	lsls	r2, r2, #1
 8003606:	4313      	orrs	r3, r2
 8003608:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 800360a:	4b3f      	ldr	r3, [pc, #252]	@ (8003708 <FLASH_SetErrorCode+0x130>)
 800360c:	699a      	ldr	r2, [r3, #24]
 800360e:	2380      	movs	r3, #128	@ 0x80
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	401a      	ands	r2, r3
 8003614:	2380      	movs	r3, #128	@ 0x80
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	429a      	cmp	r2, r3
 800361a:	d10a      	bne.n	8003632 <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800361c:	4b3b      	ldr	r3, [pc, #236]	@ (800370c <FLASH_SetErrorCode+0x134>)
 800361e:	695b      	ldr	r3, [r3, #20]
 8003620:	2201      	movs	r2, #1
 8003622:	431a      	orrs	r2, r3
 8003624:	4b39      	ldr	r3, [pc, #228]	@ (800370c <FLASH_SetErrorCode+0x134>)
 8003626:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2280      	movs	r2, #128	@ 0x80
 800362c:	0092      	lsls	r2, r2, #2
 800362e:	4313      	orrs	r3, r2
 8003630:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 8003632:	4b35      	ldr	r3, [pc, #212]	@ (8003708 <FLASH_SetErrorCode+0x130>)
 8003634:	699a      	ldr	r2, [r3, #24]
 8003636:	2380      	movs	r3, #128	@ 0x80
 8003638:	00db      	lsls	r3, r3, #3
 800363a:	401a      	ands	r2, r3
 800363c:	2380      	movs	r3, #128	@ 0x80
 800363e:	00db      	lsls	r3, r3, #3
 8003640:	429a      	cmp	r2, r3
 8003642:	d10a      	bne.n	800365a <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 8003644:	4b31      	ldr	r3, [pc, #196]	@ (800370c <FLASH_SetErrorCode+0x134>)
 8003646:	695b      	ldr	r3, [r3, #20]
 8003648:	2208      	movs	r2, #8
 800364a:	431a      	orrs	r2, r3
 800364c:	4b2f      	ldr	r3, [pc, #188]	@ (800370c <FLASH_SetErrorCode+0x134>)
 800364e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2280      	movs	r2, #128	@ 0x80
 8003654:	00d2      	lsls	r2, r2, #3
 8003656:	4313      	orrs	r3, r2
 8003658:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800365a:	4b2b      	ldr	r3, [pc, #172]	@ (8003708 <FLASH_SetErrorCode+0x130>)
 800365c:	699a      	ldr	r2, [r3, #24]
 800365e:	2380      	movs	r3, #128	@ 0x80
 8003660:	011b      	lsls	r3, r3, #4
 8003662:	401a      	ands	r2, r3
 8003664:	2380      	movs	r3, #128	@ 0x80
 8003666:	011b      	lsls	r3, r3, #4
 8003668:	429a      	cmp	r2, r3
 800366a:	d10a      	bne.n	8003682 <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800366c:	4b27      	ldr	r3, [pc, #156]	@ (800370c <FLASH_SetErrorCode+0x134>)
 800366e:	695b      	ldr	r3, [r3, #20]
 8003670:	2204      	movs	r2, #4
 8003672:	431a      	orrs	r2, r3
 8003674:	4b25      	ldr	r3, [pc, #148]	@ (800370c <FLASH_SetErrorCode+0x134>)
 8003676:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2280      	movs	r2, #128	@ 0x80
 800367c:	0112      	lsls	r2, r2, #4
 800367e:	4313      	orrs	r3, r2
 8003680:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 8003682:	4b21      	ldr	r3, [pc, #132]	@ (8003708 <FLASH_SetErrorCode+0x130>)
 8003684:	699a      	ldr	r2, [r3, #24]
 8003686:	2380      	movs	r3, #128	@ 0x80
 8003688:	019b      	lsls	r3, r3, #6
 800368a:	401a      	ands	r2, r3
 800368c:	2380      	movs	r3, #128	@ 0x80
 800368e:	019b      	lsls	r3, r3, #6
 8003690:	429a      	cmp	r2, r3
 8003692:	d10a      	bne.n	80036aa <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8003694:	4b1d      	ldr	r3, [pc, #116]	@ (800370c <FLASH_SetErrorCode+0x134>)
 8003696:	695b      	ldr	r3, [r3, #20]
 8003698:	2210      	movs	r2, #16
 800369a:	431a      	orrs	r2, r3
 800369c:	4b1b      	ldr	r3, [pc, #108]	@ (800370c <FLASH_SetErrorCode+0x134>)
 800369e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2280      	movs	r2, #128	@ 0x80
 80036a4:	0192      	lsls	r2, r2, #6
 80036a6:	4313      	orrs	r3, r2
 80036a8:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 80036aa:	4b17      	ldr	r3, [pc, #92]	@ (8003708 <FLASH_SetErrorCode+0x130>)
 80036ac:	699a      	ldr	r2, [r3, #24]
 80036ae:	2380      	movs	r3, #128	@ 0x80
 80036b0:	029b      	lsls	r3, r3, #10
 80036b2:	401a      	ands	r2, r3
 80036b4:	2380      	movs	r3, #128	@ 0x80
 80036b6:	029b      	lsls	r3, r3, #10
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d109      	bne.n	80036d0 <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 80036bc:	4b13      	ldr	r3, [pc, #76]	@ (800370c <FLASH_SetErrorCode+0x134>)
 80036be:	695b      	ldr	r3, [r3, #20]
 80036c0:	2220      	movs	r2, #32
 80036c2:	431a      	orrs	r2, r3
 80036c4:	4b11      	ldr	r3, [pc, #68]	@ (800370c <FLASH_SetErrorCode+0x134>)
 80036c6:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2220      	movs	r2, #32
 80036cc:	4313      	orrs	r3, r2
 80036ce:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 80036d0:	4b0d      	ldr	r3, [pc, #52]	@ (8003708 <FLASH_SetErrorCode+0x130>)
 80036d2:	699a      	ldr	r2, [r3, #24]
 80036d4:	2380      	movs	r3, #128	@ 0x80
 80036d6:	025b      	lsls	r3, r3, #9
 80036d8:	401a      	ands	r2, r3
 80036da:	2380      	movs	r3, #128	@ 0x80
 80036dc:	025b      	lsls	r3, r3, #9
 80036de:	429a      	cmp	r2, r3
 80036e0:	d10a      	bne.n	80036f8 <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 80036e2:	4b0a      	ldr	r3, [pc, #40]	@ (800370c <FLASH_SetErrorCode+0x134>)
 80036e4:	695b      	ldr	r3, [r3, #20]
 80036e6:	2240      	movs	r2, #64	@ 0x40
 80036e8:	431a      	orrs	r2, r3
 80036ea:	4b08      	ldr	r3, [pc, #32]	@ (800370c <FLASH_SetErrorCode+0x134>)
 80036ec:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2280      	movs	r2, #128	@ 0x80
 80036f2:	0252      	lsls	r2, r2, #9
 80036f4:	4313      	orrs	r3, r2
 80036f6:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80036f8:	4b03      	ldr	r3, [pc, #12]	@ (8003708 <FLASH_SetErrorCode+0x130>)
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	619a      	str	r2, [r3, #24]
}  
 80036fe:	46c0      	nop			@ (mov r8, r8)
 8003700:	46bd      	mov	sp, r7
 8003702:	b002      	add	sp, #8
 8003704:	bd80      	pop	{r7, pc}
 8003706:	46c0      	nop			@ (mov r8, r8)
 8003708:	40022000 	.word	0x40022000
 800370c:	20000a30 	.word	0x20000a30

08003710 <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 8003716:	4b12      	ldr	r3, [pc, #72]	@ (8003760 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	4013      	ands	r3, r2
 800371e:	d019      	beq.n	8003754 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003720:	f3ef 8310 	mrs	r3, PRIMASK
 8003724:	607b      	str	r3, [r7, #4]
  return(result);
 8003726:	687b      	ldr	r3, [r7, #4]
  {  
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 8003728:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800372a:	b672      	cpsid	i
}
 800372c:	46c0      	nop			@ (mov r8, r8)
    __disable_irq();

    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 800372e:	4b0c      	ldr	r3, [pc, #48]	@ (8003760 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8003730:	4a0c      	ldr	r2, [pc, #48]	@ (8003764 <HAL_FLASHEx_DATAEEPROM_Unlock+0x54>)
 8003732:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 8003734:	4b0a      	ldr	r3, [pc, #40]	@ (8003760 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8003736:	4a0c      	ldr	r2, [pc, #48]	@ (8003768 <HAL_FLASHEx_DATAEEPROM_Unlock+0x58>)
 8003738:	60da      	str	r2, [r3, #12]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	f383 8810 	msr	PRIMASK, r3
}
 8003744:	46c0      	nop			@ (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 8003746:	4b06      	ldr	r3, [pc, #24]	@ (8003760 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	4013      	ands	r3, r2
 800374e:	d001      	beq.n	8003754 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
    {
      return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e000      	b.n	8003756 <HAL_FLASHEx_DATAEEPROM_Unlock+0x46>
    }
  }

  return HAL_OK;  
 8003754:	2300      	movs	r3, #0
}
 8003756:	0018      	movs	r0, r3
 8003758:	46bd      	mov	sp, r7
 800375a:	b004      	add	sp, #16
 800375c:	bd80      	pop	{r7, pc}
 800375e:	46c0      	nop			@ (mov r8, r8)
 8003760:	40022000 	.word	0x40022000
 8003764:	89abcdef 	.word	0x89abcdef
 8003768:	02030405 	.word	0x02030405

0800376c <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 8003770:	4b04      	ldr	r3, [pc, #16]	@ (8003784 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 8003772:	685a      	ldr	r2, [r3, #4]
 8003774:	4b03      	ldr	r3, [pc, #12]	@ (8003784 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 8003776:	2101      	movs	r1, #1
 8003778:	430a      	orrs	r2, r1
 800377a:	605a      	str	r2, [r3, #4]
  
  return HAL_OK;
 800377c:	2300      	movs	r3, #0
}
 800377e:	0018      	movs	r0, r3
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	40022000 	.word	0x40022000

08003788 <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 8003788:	b5b0      	push	{r4, r5, r7, lr}
 800378a:	b086      	sub	sp, #24
 800378c:	af00      	add	r7, sp, #0
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	60b9      	str	r1, [r7, #8]
 8003792:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003794:	4b24      	ldr	r3, [pc, #144]	@ (8003828 <HAL_FLASHEx_DATAEEPROM_Program+0xa0>)
 8003796:	7c1b      	ldrb	r3, [r3, #16]
 8003798:	2b01      	cmp	r3, #1
 800379a:	d101      	bne.n	80037a0 <HAL_FLASHEx_DATAEEPROM_Program+0x18>
 800379c:	2302      	movs	r3, #2
 800379e:	e03e      	b.n	800381e <HAL_FLASHEx_DATAEEPROM_Program+0x96>
 80037a0:	4b21      	ldr	r3, [pc, #132]	@ (8003828 <HAL_FLASHEx_DATAEEPROM_Program+0xa0>)
 80037a2:	2201      	movs	r2, #1
 80037a4:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80037a6:	2517      	movs	r5, #23
 80037a8:	197c      	adds	r4, r7, r5
 80037aa:	4b20      	ldr	r3, [pc, #128]	@ (800382c <HAL_FLASHEx_DATAEEPROM_Program+0xa4>)
 80037ac:	0018      	movs	r0, r3
 80037ae:	f7ff fea1 	bl	80034f4 <FLASH_WaitForLastOperation>
 80037b2:	0003      	movs	r3, r0
 80037b4:	7023      	strb	r3, [r4, #0]

  if(status == HAL_OK)
 80037b6:	197b      	adds	r3, r7, r5
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d129      	bne.n	8003812 <HAL_FLASHEx_DATAEEPROM_Program+0x8a>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80037be:	4b1a      	ldr	r3, [pc, #104]	@ (8003828 <HAL_FLASHEx_DATAEEPROM_Program+0xa0>)
 80037c0:	2200      	movs	r2, #0
 80037c2:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	d103      	bne.n	80037d2 <HAL_FLASHEx_DATAEEPROM_Program+0x4a>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	601a      	str	r2, [r3, #0]
 80037d0:	e013      	b.n	80037fa <HAL_FLASHEx_DATAEEPROM_Program+0x72>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d104      	bne.n	80037e2 <HAL_FLASHEx_DATAEEPROM_Program+0x5a>
    {
      /* Program halfword (16-bit) at a specified address.*/
      *(__IO uint16_t *)Address = (uint16_t) Data;
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	b292      	uxth	r2, r2
 80037de:	801a      	strh	r2, [r3, #0]
 80037e0:	e00b      	b.n	80037fa <HAL_FLASHEx_DATAEEPROM_Program+0x72>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d104      	bne.n	80037f2 <HAL_FLASHEx_DATAEEPROM_Program+0x6a>
    {
      /* Program byte (8-bit) at a specified address.*/
      *(__IO uint8_t *)Address = (uint8_t) Data;
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	b2d2      	uxtb	r2, r2
 80037ee:	701a      	strb	r2, [r3, #0]
 80037f0:	e003      	b.n	80037fa <HAL_FLASHEx_DATAEEPROM_Program+0x72>
    }
    else
    {
      status = HAL_ERROR;
 80037f2:	2317      	movs	r3, #23
 80037f4:	18fb      	adds	r3, r7, r3
 80037f6:	2201      	movs	r2, #1
 80037f8:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 80037fa:	2217      	movs	r2, #23
 80037fc:	18bb      	adds	r3, r7, r2
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d106      	bne.n	8003812 <HAL_FLASHEx_DATAEEPROM_Program+0x8a>
    {
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003804:	18bc      	adds	r4, r7, r2
 8003806:	4b09      	ldr	r3, [pc, #36]	@ (800382c <HAL_FLASHEx_DATAEEPROM_Program+0xa4>)
 8003808:	0018      	movs	r0, r3
 800380a:	f7ff fe73 	bl	80034f4 <FLASH_WaitForLastOperation>
 800380e:	0003      	movs	r3, r0
 8003810:	7023      	strb	r3, [r4, #0]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003812:	4b05      	ldr	r3, [pc, #20]	@ (8003828 <HAL_FLASHEx_DATAEEPROM_Program+0xa0>)
 8003814:	2200      	movs	r2, #0
 8003816:	741a      	strb	r2, [r3, #16]

  return status;
 8003818:	2317      	movs	r3, #23
 800381a:	18fb      	adds	r3, r7, r3
 800381c:	781b      	ldrb	r3, [r3, #0]
}
 800381e:	0018      	movs	r0, r3
 8003820:	46bd      	mov	sp, r7
 8003822:	b006      	add	sp, #24
 8003824:	bdb0      	pop	{r4, r5, r7, pc}
 8003826:	46c0      	nop			@ (mov r8, r8)
 8003828:	20000a30 	.word	0x20000a30
 800382c:	0000c350 	.word	0x0000c350

08003830 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b086      	sub	sp, #24
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800383a:	2300      	movs	r3, #0
 800383c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800383e:	2300      	movs	r3, #0
 8003840:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8003842:	2300      	movs	r3, #0
 8003844:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8003846:	e155      	b.n	8003af4 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2101      	movs	r1, #1
 800384e:	697a      	ldr	r2, [r7, #20]
 8003850:	4091      	lsls	r1, r2
 8003852:	000a      	movs	r2, r1
 8003854:	4013      	ands	r3, r2
 8003856:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d100      	bne.n	8003860 <HAL_GPIO_Init+0x30>
 800385e:	e146      	b.n	8003aee <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	2203      	movs	r2, #3
 8003866:	4013      	ands	r3, r2
 8003868:	2b01      	cmp	r3, #1
 800386a:	d005      	beq.n	8003878 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	2203      	movs	r2, #3
 8003872:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003874:	2b02      	cmp	r3, #2
 8003876:	d130      	bne.n	80038da <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	005b      	lsls	r3, r3, #1
 8003882:	2203      	movs	r2, #3
 8003884:	409a      	lsls	r2, r3
 8003886:	0013      	movs	r3, r2
 8003888:	43da      	mvns	r2, r3
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	4013      	ands	r3, r2
 800388e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	68da      	ldr	r2, [r3, #12]
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	005b      	lsls	r3, r3, #1
 8003898:	409a      	lsls	r2, r3
 800389a:	0013      	movs	r3, r2
 800389c:	693a      	ldr	r2, [r7, #16]
 800389e:	4313      	orrs	r3, r2
 80038a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	693a      	ldr	r2, [r7, #16]
 80038a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038ae:	2201      	movs	r2, #1
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	409a      	lsls	r2, r3
 80038b4:	0013      	movs	r3, r2
 80038b6:	43da      	mvns	r2, r3
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	4013      	ands	r3, r2
 80038bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	091b      	lsrs	r3, r3, #4
 80038c4:	2201      	movs	r2, #1
 80038c6:	401a      	ands	r2, r3
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	409a      	lsls	r2, r3
 80038cc:	0013      	movs	r3, r2
 80038ce:	693a      	ldr	r2, [r7, #16]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	693a      	ldr	r2, [r7, #16]
 80038d8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	2203      	movs	r2, #3
 80038e0:	4013      	ands	r3, r2
 80038e2:	2b03      	cmp	r3, #3
 80038e4:	d017      	beq.n	8003916 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	005b      	lsls	r3, r3, #1
 80038f0:	2203      	movs	r2, #3
 80038f2:	409a      	lsls	r2, r3
 80038f4:	0013      	movs	r3, r2
 80038f6:	43da      	mvns	r2, r3
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	4013      	ands	r3, r2
 80038fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	689a      	ldr	r2, [r3, #8]
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	005b      	lsls	r3, r3, #1
 8003906:	409a      	lsls	r2, r3
 8003908:	0013      	movs	r3, r2
 800390a:	693a      	ldr	r2, [r7, #16]
 800390c:	4313      	orrs	r3, r2
 800390e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	693a      	ldr	r2, [r7, #16]
 8003914:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	2203      	movs	r2, #3
 800391c:	4013      	ands	r3, r2
 800391e:	2b02      	cmp	r3, #2
 8003920:	d123      	bne.n	800396a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	08da      	lsrs	r2, r3, #3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	3208      	adds	r2, #8
 800392a:	0092      	lsls	r2, r2, #2
 800392c:	58d3      	ldr	r3, [r2, r3]
 800392e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	2207      	movs	r2, #7
 8003934:	4013      	ands	r3, r2
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	220f      	movs	r2, #15
 800393a:	409a      	lsls	r2, r3
 800393c:	0013      	movs	r3, r2
 800393e:	43da      	mvns	r2, r3
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	4013      	ands	r3, r2
 8003944:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	691a      	ldr	r2, [r3, #16]
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	2107      	movs	r1, #7
 800394e:	400b      	ands	r3, r1
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	409a      	lsls	r2, r3
 8003954:	0013      	movs	r3, r2
 8003956:	693a      	ldr	r2, [r7, #16]
 8003958:	4313      	orrs	r3, r2
 800395a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	08da      	lsrs	r2, r3, #3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	3208      	adds	r2, #8
 8003964:	0092      	lsls	r2, r2, #2
 8003966:	6939      	ldr	r1, [r7, #16]
 8003968:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	005b      	lsls	r3, r3, #1
 8003974:	2203      	movs	r2, #3
 8003976:	409a      	lsls	r2, r3
 8003978:	0013      	movs	r3, r2
 800397a:	43da      	mvns	r2, r3
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	4013      	ands	r3, r2
 8003980:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	2203      	movs	r2, #3
 8003988:	401a      	ands	r2, r3
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	005b      	lsls	r3, r3, #1
 800398e:	409a      	lsls	r2, r3
 8003990:	0013      	movs	r3, r2
 8003992:	693a      	ldr	r2, [r7, #16]
 8003994:	4313      	orrs	r3, r2
 8003996:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	693a      	ldr	r2, [r7, #16]
 800399c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	685a      	ldr	r2, [r3, #4]
 80039a2:	23c0      	movs	r3, #192	@ 0xc0
 80039a4:	029b      	lsls	r3, r3, #10
 80039a6:	4013      	ands	r3, r2
 80039a8:	d100      	bne.n	80039ac <HAL_GPIO_Init+0x17c>
 80039aa:	e0a0      	b.n	8003aee <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039ac:	4b57      	ldr	r3, [pc, #348]	@ (8003b0c <HAL_GPIO_Init+0x2dc>)
 80039ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80039b0:	4b56      	ldr	r3, [pc, #344]	@ (8003b0c <HAL_GPIO_Init+0x2dc>)
 80039b2:	2101      	movs	r1, #1
 80039b4:	430a      	orrs	r2, r1
 80039b6:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80039b8:	4a55      	ldr	r2, [pc, #340]	@ (8003b10 <HAL_GPIO_Init+0x2e0>)
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	089b      	lsrs	r3, r3, #2
 80039be:	3302      	adds	r3, #2
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	589b      	ldr	r3, [r3, r2]
 80039c4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	2203      	movs	r2, #3
 80039ca:	4013      	ands	r3, r2
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	220f      	movs	r2, #15
 80039d0:	409a      	lsls	r2, r3
 80039d2:	0013      	movs	r3, r2
 80039d4:	43da      	mvns	r2, r3
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	4013      	ands	r3, r2
 80039da:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	23a0      	movs	r3, #160	@ 0xa0
 80039e0:	05db      	lsls	r3, r3, #23
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d01f      	beq.n	8003a26 <HAL_GPIO_Init+0x1f6>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a4a      	ldr	r2, [pc, #296]	@ (8003b14 <HAL_GPIO_Init+0x2e4>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d019      	beq.n	8003a22 <HAL_GPIO_Init+0x1f2>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a49      	ldr	r2, [pc, #292]	@ (8003b18 <HAL_GPIO_Init+0x2e8>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d013      	beq.n	8003a1e <HAL_GPIO_Init+0x1ee>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a48      	ldr	r2, [pc, #288]	@ (8003b1c <HAL_GPIO_Init+0x2ec>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d00d      	beq.n	8003a1a <HAL_GPIO_Init+0x1ea>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a47      	ldr	r2, [pc, #284]	@ (8003b20 <HAL_GPIO_Init+0x2f0>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d007      	beq.n	8003a16 <HAL_GPIO_Init+0x1e6>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a46      	ldr	r2, [pc, #280]	@ (8003b24 <HAL_GPIO_Init+0x2f4>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d101      	bne.n	8003a12 <HAL_GPIO_Init+0x1e2>
 8003a0e:	2305      	movs	r3, #5
 8003a10:	e00a      	b.n	8003a28 <HAL_GPIO_Init+0x1f8>
 8003a12:	2306      	movs	r3, #6
 8003a14:	e008      	b.n	8003a28 <HAL_GPIO_Init+0x1f8>
 8003a16:	2304      	movs	r3, #4
 8003a18:	e006      	b.n	8003a28 <HAL_GPIO_Init+0x1f8>
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e004      	b.n	8003a28 <HAL_GPIO_Init+0x1f8>
 8003a1e:	2302      	movs	r3, #2
 8003a20:	e002      	b.n	8003a28 <HAL_GPIO_Init+0x1f8>
 8003a22:	2301      	movs	r3, #1
 8003a24:	e000      	b.n	8003a28 <HAL_GPIO_Init+0x1f8>
 8003a26:	2300      	movs	r3, #0
 8003a28:	697a      	ldr	r2, [r7, #20]
 8003a2a:	2103      	movs	r1, #3
 8003a2c:	400a      	ands	r2, r1
 8003a2e:	0092      	lsls	r2, r2, #2
 8003a30:	4093      	lsls	r3, r2
 8003a32:	693a      	ldr	r2, [r7, #16]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a38:	4935      	ldr	r1, [pc, #212]	@ (8003b10 <HAL_GPIO_Init+0x2e0>)
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	089b      	lsrs	r3, r3, #2
 8003a3e:	3302      	adds	r3, #2
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	693a      	ldr	r2, [r7, #16]
 8003a44:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a46:	4b38      	ldr	r3, [pc, #224]	@ (8003b28 <HAL_GPIO_Init+0x2f8>)
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	43da      	mvns	r2, r3
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	4013      	ands	r3, r2
 8003a54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	685a      	ldr	r2, [r3, #4]
 8003a5a:	2380      	movs	r3, #128	@ 0x80
 8003a5c:	035b      	lsls	r3, r3, #13
 8003a5e:	4013      	ands	r3, r2
 8003a60:	d003      	beq.n	8003a6a <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8003a62:	693a      	ldr	r2, [r7, #16]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003a6a:	4b2f      	ldr	r3, [pc, #188]	@ (8003b28 <HAL_GPIO_Init+0x2f8>)
 8003a6c:	693a      	ldr	r2, [r7, #16]
 8003a6e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003a70:	4b2d      	ldr	r3, [pc, #180]	@ (8003b28 <HAL_GPIO_Init+0x2f8>)
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	43da      	mvns	r2, r3
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	685a      	ldr	r2, [r3, #4]
 8003a84:	2380      	movs	r3, #128	@ 0x80
 8003a86:	039b      	lsls	r3, r3, #14
 8003a88:	4013      	ands	r3, r2
 8003a8a:	d003      	beq.n	8003a94 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003a8c:	693a      	ldr	r2, [r7, #16]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003a94:	4b24      	ldr	r3, [pc, #144]	@ (8003b28 <HAL_GPIO_Init+0x2f8>)
 8003a96:	693a      	ldr	r2, [r7, #16]
 8003a98:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8003a9a:	4b23      	ldr	r3, [pc, #140]	@ (8003b28 <HAL_GPIO_Init+0x2f8>)
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	43da      	mvns	r2, r3
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	685a      	ldr	r2, [r3, #4]
 8003aae:	2380      	movs	r3, #128	@ 0x80
 8003ab0:	029b      	lsls	r3, r3, #10
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	d003      	beq.n	8003abe <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8003ab6:	693a      	ldr	r2, [r7, #16]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003abe:	4b1a      	ldr	r3, [pc, #104]	@ (8003b28 <HAL_GPIO_Init+0x2f8>)
 8003ac0:	693a      	ldr	r2, [r7, #16]
 8003ac2:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ac4:	4b18      	ldr	r3, [pc, #96]	@ (8003b28 <HAL_GPIO_Init+0x2f8>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	43da      	mvns	r2, r3
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	685a      	ldr	r2, [r3, #4]
 8003ad8:	2380      	movs	r3, #128	@ 0x80
 8003ada:	025b      	lsls	r3, r3, #9
 8003adc:	4013      	ands	r3, r2
 8003ade:	d003      	beq.n	8003ae8 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8003ae0:	693a      	ldr	r2, [r7, #16]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003ae8:	4b0f      	ldr	r3, [pc, #60]	@ (8003b28 <HAL_GPIO_Init+0x2f8>)
 8003aea:	693a      	ldr	r2, [r7, #16]
 8003aec:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	3301      	adds	r3, #1
 8003af2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	40da      	lsrs	r2, r3
 8003afc:	1e13      	subs	r3, r2, #0
 8003afe:	d000      	beq.n	8003b02 <HAL_GPIO_Init+0x2d2>
 8003b00:	e6a2      	b.n	8003848 <HAL_GPIO_Init+0x18>
  }
}
 8003b02:	46c0      	nop			@ (mov r8, r8)
 8003b04:	46c0      	nop			@ (mov r8, r8)
 8003b06:	46bd      	mov	sp, r7
 8003b08:	b006      	add	sp, #24
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	40021000 	.word	0x40021000
 8003b10:	40010000 	.word	0x40010000
 8003b14:	50000400 	.word	0x50000400
 8003b18:	50000800 	.word	0x50000800
 8003b1c:	50000c00 	.word	0x50000c00
 8003b20:	50001000 	.word	0x50001000
 8003b24:	50001c00 	.word	0x50001c00
 8003b28:	40010400 	.word	0x40010400

08003b2c <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	000a      	movs	r2, r1
 8003b36:	1cbb      	adds	r3, r7, #2
 8003b38:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	1cba      	adds	r2, r7, #2
 8003b40:	8812      	ldrh	r2, [r2, #0]
 8003b42:	4013      	ands	r3, r2
 8003b44:	d004      	beq.n	8003b50 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003b46:	230f      	movs	r3, #15
 8003b48:	18fb      	adds	r3, r7, r3
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	701a      	strb	r2, [r3, #0]
 8003b4e:	e003      	b.n	8003b58 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003b50:	230f      	movs	r3, #15
 8003b52:	18fb      	adds	r3, r7, r3
 8003b54:	2200      	movs	r2, #0
 8003b56:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003b58:	230f      	movs	r3, #15
 8003b5a:	18fb      	adds	r3, r7, r3
 8003b5c:	781b      	ldrb	r3, [r3, #0]
}
 8003b5e:	0018      	movs	r0, r3
 8003b60:	46bd      	mov	sp, r7
 8003b62:	b004      	add	sp, #16
 8003b64:	bd80      	pop	{r7, pc}

08003b66 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b66:	b580      	push	{r7, lr}
 8003b68:	b082      	sub	sp, #8
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
 8003b6e:	0008      	movs	r0, r1
 8003b70:	0011      	movs	r1, r2
 8003b72:	1cbb      	adds	r3, r7, #2
 8003b74:	1c02      	adds	r2, r0, #0
 8003b76:	801a      	strh	r2, [r3, #0]
 8003b78:	1c7b      	adds	r3, r7, #1
 8003b7a:	1c0a      	adds	r2, r1, #0
 8003b7c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003b7e:	1c7b      	adds	r3, r7, #1
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d004      	beq.n	8003b90 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b86:	1cbb      	adds	r3, r7, #2
 8003b88:	881a      	ldrh	r2, [r3, #0]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8003b8e:	e003      	b.n	8003b98 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8003b90:	1cbb      	adds	r3, r7, #2
 8003b92:	881a      	ldrh	r2, [r3, #0]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003b98:	46c0      	nop			@ (mov r8, r8)
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	b002      	add	sp, #8
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b082      	sub	sp, #8
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	0002      	movs	r2, r0
 8003ba8:	1dbb      	adds	r3, r7, #6
 8003baa:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003bac:	4b09      	ldr	r3, [pc, #36]	@ (8003bd4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8003bae:	695b      	ldr	r3, [r3, #20]
 8003bb0:	1dba      	adds	r2, r7, #6
 8003bb2:	8812      	ldrh	r2, [r2, #0]
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	d008      	beq.n	8003bca <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003bb8:	4b06      	ldr	r3, [pc, #24]	@ (8003bd4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8003bba:	1dba      	adds	r2, r7, #6
 8003bbc:	8812      	ldrh	r2, [r2, #0]
 8003bbe:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003bc0:	1dbb      	adds	r3, r7, #6
 8003bc2:	881b      	ldrh	r3, [r3, #0]
 8003bc4:	0018      	movs	r0, r3
 8003bc6:	f000 f807 	bl	8003bd8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003bca:	46c0      	nop			@ (mov r8, r8)
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	b002      	add	sp, #8
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	46c0      	nop			@ (mov r8, r8)
 8003bd4:	40010400 	.word	0x40010400

08003bd8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	0002      	movs	r2, r0
 8003be0:	1dbb      	adds	r3, r7, #6
 8003be2:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003be4:	46c0      	nop			@ (mov r8, r8)
 8003be6:	46bd      	mov	sp, r7
 8003be8:	b002      	add	sp, #8
 8003bea:	bd80      	pop	{r7, pc}

08003bec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b082      	sub	sp, #8
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d101      	bne.n	8003bfe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e08f      	b.n	8003d1e <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2241      	movs	r2, #65	@ 0x41
 8003c02:	5c9b      	ldrb	r3, [r3, r2]
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d107      	bne.n	8003c1a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2240      	movs	r2, #64	@ 0x40
 8003c0e:	2100      	movs	r1, #0
 8003c10:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	0018      	movs	r0, r3
 8003c16:	f7fe fc11 	bl	800243c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2241      	movs	r2, #65	@ 0x41
 8003c1e:	2124      	movs	r1, #36	@ 0x24
 8003c20:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	2101      	movs	r1, #1
 8003c2e:	438a      	bics	r2, r1
 8003c30:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685a      	ldr	r2, [r3, #4]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	493b      	ldr	r1, [pc, #236]	@ (8003d28 <HAL_I2C_Init+0x13c>)
 8003c3c:	400a      	ands	r2, r1
 8003c3e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	689a      	ldr	r2, [r3, #8]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4938      	ldr	r1, [pc, #224]	@ (8003d2c <HAL_I2C_Init+0x140>)
 8003c4c:	400a      	ands	r2, r1
 8003c4e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d108      	bne.n	8003c6a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	689a      	ldr	r2, [r3, #8]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2180      	movs	r1, #128	@ 0x80
 8003c62:	0209      	lsls	r1, r1, #8
 8003c64:	430a      	orrs	r2, r1
 8003c66:	609a      	str	r2, [r3, #8]
 8003c68:	e007      	b.n	8003c7a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	689a      	ldr	r2, [r3, #8]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	2184      	movs	r1, #132	@ 0x84
 8003c74:	0209      	lsls	r1, r1, #8
 8003c76:	430a      	orrs	r2, r1
 8003c78:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d109      	bne.n	8003c96 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	685a      	ldr	r2, [r3, #4]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2180      	movs	r1, #128	@ 0x80
 8003c8e:	0109      	lsls	r1, r1, #4
 8003c90:	430a      	orrs	r2, r1
 8003c92:	605a      	str	r2, [r3, #4]
 8003c94:	e007      	b.n	8003ca6 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	685a      	ldr	r2, [r3, #4]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4923      	ldr	r1, [pc, #140]	@ (8003d30 <HAL_I2C_Init+0x144>)
 8003ca2:	400a      	ands	r2, r1
 8003ca4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	685a      	ldr	r2, [r3, #4]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4920      	ldr	r1, [pc, #128]	@ (8003d34 <HAL_I2C_Init+0x148>)
 8003cb2:	430a      	orrs	r2, r1
 8003cb4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	68da      	ldr	r2, [r3, #12]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	491a      	ldr	r1, [pc, #104]	@ (8003d2c <HAL_I2C_Init+0x140>)
 8003cc2:	400a      	ands	r2, r1
 8003cc4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	691a      	ldr	r2, [r3, #16]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	695b      	ldr	r3, [r3, #20]
 8003cce:	431a      	orrs	r2, r3
 8003cd0:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	699b      	ldr	r3, [r3, #24]
 8003cd6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	430a      	orrs	r2, r1
 8003cde:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	69d9      	ldr	r1, [r3, #28]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a1a      	ldr	r2, [r3, #32]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	430a      	orrs	r2, r1
 8003cee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	2101      	movs	r1, #1
 8003cfc:	430a      	orrs	r2, r1
 8003cfe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2241      	movs	r2, #65	@ 0x41
 8003d0a:	2120      	movs	r1, #32
 8003d0c:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2242      	movs	r2, #66	@ 0x42
 8003d18:	2100      	movs	r1, #0
 8003d1a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	0018      	movs	r0, r3
 8003d20:	46bd      	mov	sp, r7
 8003d22:	b002      	add	sp, #8
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	46c0      	nop			@ (mov r8, r8)
 8003d28:	f0ffffff 	.word	0xf0ffffff
 8003d2c:	ffff7fff 	.word	0xffff7fff
 8003d30:	fffff7ff 	.word	0xfffff7ff
 8003d34:	02008000 	.word	0x02008000

08003d38 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	699b      	ldr	r3, [r3, #24]
 8003d46:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d005      	beq.n	8003d64 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d5c:	68ba      	ldr	r2, [r7, #8]
 8003d5e:	68f9      	ldr	r1, [r7, #12]
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	4798      	blx	r3
  }
}
 8003d64:	46c0      	nop			@ (mov r8, r8)
 8003d66:	46bd      	mov	sp, r7
 8003d68:	b004      	add	sp, #16
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b086      	sub	sp, #24
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	699b      	ldr	r3, [r3, #24]
 8003d7a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	0a1b      	lsrs	r3, r3, #8
 8003d88:	001a      	movs	r2, r3
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	d010      	beq.n	8003db2 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	09db      	lsrs	r3, r3, #7
 8003d94:	001a      	movs	r2, r3
 8003d96:	2301      	movs	r3, #1
 8003d98:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003d9a:	d00a      	beq.n	8003db2 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003da0:	2201      	movs	r2, #1
 8003da2:	431a      	orrs	r2, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2280      	movs	r2, #128	@ 0x80
 8003dae:	0052      	lsls	r2, r2, #1
 8003db0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	0a9b      	lsrs	r3, r3, #10
 8003db6:	001a      	movs	r2, r3
 8003db8:	2301      	movs	r3, #1
 8003dba:	4013      	ands	r3, r2
 8003dbc:	d010      	beq.n	8003de0 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	09db      	lsrs	r3, r3, #7
 8003dc2:	001a      	movs	r2, r3
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003dc8:	d00a      	beq.n	8003de0 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dce:	2208      	movs	r2, #8
 8003dd0:	431a      	orrs	r2, r3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	2280      	movs	r2, #128	@ 0x80
 8003ddc:	00d2      	lsls	r2, r2, #3
 8003dde:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	0a5b      	lsrs	r3, r3, #9
 8003de4:	001a      	movs	r2, r3
 8003de6:	2301      	movs	r3, #1
 8003de8:	4013      	ands	r3, r2
 8003dea:	d010      	beq.n	8003e0e <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	09db      	lsrs	r3, r3, #7
 8003df0:	001a      	movs	r2, r3
 8003df2:	2301      	movs	r3, #1
 8003df4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003df6:	d00a      	beq.n	8003e0e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dfc:	2202      	movs	r2, #2
 8003dfe:	431a      	orrs	r2, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2280      	movs	r2, #128	@ 0x80
 8003e0a:	0092      	lsls	r2, r2, #2
 8003e0c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e12:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	220b      	movs	r2, #11
 8003e18:	4013      	ands	r3, r2
 8003e1a:	d005      	beq.n	8003e28 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 8003e1c:	68fa      	ldr	r2, [r7, #12]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	0011      	movs	r1, r2
 8003e22:	0018      	movs	r0, r3
 8003e24:	f000 fc44 	bl	80046b0 <I2C_ITError>
  }
}
 8003e28:	46c0      	nop			@ (mov r8, r8)
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	b006      	add	sp, #24
 8003e2e:	bd80      	pop	{r7, pc}

08003e30 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b082      	sub	sp, #8
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003e38:	46c0      	nop			@ (mov r8, r8)
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	b002      	add	sp, #8
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003e48:	46c0      	nop			@ (mov r8, r8)
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	b002      	add	sp, #8
 8003e4e:	bd80      	pop	{r7, pc}

08003e50 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b082      	sub	sp, #8
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	0008      	movs	r0, r1
 8003e5a:	0011      	movs	r1, r2
 8003e5c:	1cfb      	adds	r3, r7, #3
 8003e5e:	1c02      	adds	r2, r0, #0
 8003e60:	701a      	strb	r2, [r3, #0]
 8003e62:	003b      	movs	r3, r7
 8003e64:	1c0a      	adds	r2, r1, #0
 8003e66:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003e68:	46c0      	nop			@ (mov r8, r8)
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	b002      	add	sp, #8
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b082      	sub	sp, #8
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003e78:	46c0      	nop			@ (mov r8, r8)
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	b002      	add	sp, #8
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003e88:	46c0      	nop			@ (mov r8, r8)
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	b002      	add	sp, #8
 8003e8e:	bd80      	pop	{r7, pc}

08003e90 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b082      	sub	sp, #8
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003e98:	46c0      	nop			@ (mov r8, r8)
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	b002      	add	sp, #8
 8003e9e:	bd80      	pop	{r7, pc}

08003ea0 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b086      	sub	sp, #24
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	60b9      	str	r1, [r7, #8]
 8003eaa:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eb0:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2240      	movs	r2, #64	@ 0x40
 8003eba:	5c9b      	ldrb	r3, [r3, r2]
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d101      	bne.n	8003ec4 <I2C_Slave_ISR_IT+0x24>
 8003ec0:	2302      	movs	r3, #2
 8003ec2:	e0fb      	b.n	80040bc <I2C_Slave_ISR_IT+0x21c>
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2240      	movs	r2, #64	@ 0x40
 8003ec8:	2101      	movs	r1, #1
 8003eca:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	095b      	lsrs	r3, r3, #5
 8003ed0:	001a      	movs	r2, r3
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	d00c      	beq.n	8003ef2 <I2C_Slave_ISR_IT+0x52>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	095b      	lsrs	r3, r3, #5
 8003edc:	001a      	movs	r2, r3
 8003ede:	2301      	movs	r3, #1
 8003ee0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003ee2:	d006      	beq.n	8003ef2 <I2C_Slave_ISR_IT+0x52>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003ee4:	693a      	ldr	r2, [r7, #16]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	0011      	movs	r1, r2
 8003eea:	0018      	movs	r0, r3
 8003eec:	f000 f9f6 	bl	80042dc <I2C_ITSlaveCplt>
 8003ef0:	e0df      	b.n	80040b2 <I2C_Slave_ISR_IT+0x212>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	091b      	lsrs	r3, r3, #4
 8003ef6:	001a      	movs	r2, r3
 8003ef8:	2301      	movs	r3, #1
 8003efa:	4013      	ands	r3, r2
 8003efc:	d054      	beq.n	8003fa8 <I2C_Slave_ISR_IT+0x108>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	091b      	lsrs	r3, r3, #4
 8003f02:	001a      	movs	r2, r3
 8003f04:	2301      	movs	r3, #1
 8003f06:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003f08:	d04e      	beq.n	8003fa8 <I2C_Slave_ISR_IT+0x108>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d12d      	bne.n	8003f70 <I2C_Slave_ISR_IT+0xd0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2241      	movs	r2, #65	@ 0x41
 8003f18:	5c9b      	ldrb	r3, [r3, r2]
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	2b28      	cmp	r3, #40	@ 0x28
 8003f1e:	d10b      	bne.n	8003f38 <I2C_Slave_ISR_IT+0x98>
 8003f20:	697a      	ldr	r2, [r7, #20]
 8003f22:	2380      	movs	r3, #128	@ 0x80
 8003f24:	049b      	lsls	r3, r3, #18
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d106      	bne.n	8003f38 <I2C_Slave_ISR_IT+0x98>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003f2a:	693a      	ldr	r2, [r7, #16]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	0011      	movs	r1, r2
 8003f30:	0018      	movs	r0, r3
 8003f32:	f000 fb63 	bl	80045fc <I2C_ITListenCplt>
 8003f36:	e036      	b.n	8003fa6 <I2C_Slave_ISR_IT+0x106>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2241      	movs	r2, #65	@ 0x41
 8003f3c:	5c9b      	ldrb	r3, [r3, r2]
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	2b29      	cmp	r3, #41	@ 0x29
 8003f42:	d110      	bne.n	8003f66 <I2C_Slave_ISR_IT+0xc6>
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	4a5f      	ldr	r2, [pc, #380]	@ (80040c4 <I2C_Slave_ISR_IT+0x224>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d00c      	beq.n	8003f66 <I2C_Slave_ISR_IT+0xc6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2210      	movs	r2, #16
 8003f52:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	0018      	movs	r0, r3
 8003f58:	f000 fcd5 	bl	8004906 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	0018      	movs	r0, r3
 8003f60:	f000 f956 	bl	8004210 <I2C_ITSlaveSeqCplt>
 8003f64:	e01f      	b.n	8003fa6 <I2C_Slave_ISR_IT+0x106>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2210      	movs	r2, #16
 8003f6c:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003f6e:	e09d      	b.n	80040ac <I2C_Slave_ISR_IT+0x20c>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2210      	movs	r2, #16
 8003f76:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f7c:	2204      	movs	r2, #4
 8003f7e:	431a      	orrs	r2, r3
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d005      	beq.n	8003f96 <I2C_Slave_ISR_IT+0xf6>
 8003f8a:	697a      	ldr	r2, [r7, #20]
 8003f8c:	2380      	movs	r3, #128	@ 0x80
 8003f8e:	045b      	lsls	r3, r3, #17
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d000      	beq.n	8003f96 <I2C_Slave_ISR_IT+0xf6>
 8003f94:	e08a      	b.n	80040ac <I2C_Slave_ISR_IT+0x20c>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	0011      	movs	r1, r2
 8003f9e:	0018      	movs	r0, r3
 8003fa0:	f000 fb86 	bl	80046b0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003fa4:	e082      	b.n	80040ac <I2C_Slave_ISR_IT+0x20c>
 8003fa6:	e081      	b.n	80040ac <I2C_Slave_ISR_IT+0x20c>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	089b      	lsrs	r3, r3, #2
 8003fac:	001a      	movs	r2, r3
 8003fae:	2301      	movs	r3, #1
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	d031      	beq.n	8004018 <I2C_Slave_ISR_IT+0x178>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	089b      	lsrs	r3, r3, #2
 8003fb8:	001a      	movs	r2, r3
 8003fba:	2301      	movs	r3, #1
 8003fbc:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003fbe:	d02b      	beq.n	8004018 <I2C_Slave_ISR_IT+0x178>
  {
    if (hi2c->XferCount > 0U)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d018      	beq.n	8003ffc <I2C_Slave_ISR_IT+0x15c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fd4:	b2d2      	uxtb	r2, r2
 8003fd6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fdc:	1c5a      	adds	r2, r3, #1
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	b29a      	uxth	r2, r3
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	3b01      	subs	r3, #1
 8003ff6:	b29a      	uxth	r2, r3
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004000:	b29b      	uxth	r3, r3
 8004002:	2b00      	cmp	r3, #0
 8004004:	d154      	bne.n	80040b0 <I2C_Slave_ISR_IT+0x210>
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	4a2e      	ldr	r2, [pc, #184]	@ (80040c4 <I2C_Slave_ISR_IT+0x224>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d050      	beq.n	80040b0 <I2C_Slave_ISR_IT+0x210>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	0018      	movs	r0, r3
 8004012:	f000 f8fd 	bl	8004210 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8004016:	e04b      	b.n	80040b0 <I2C_Slave_ISR_IT+0x210>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	08db      	lsrs	r3, r3, #3
 800401c:	001a      	movs	r2, r3
 800401e:	2301      	movs	r3, #1
 8004020:	4013      	ands	r3, r2
 8004022:	d00c      	beq.n	800403e <I2C_Slave_ISR_IT+0x19e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	08db      	lsrs	r3, r3, #3
 8004028:	001a      	movs	r2, r3
 800402a:	2301      	movs	r3, #1
 800402c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800402e:	d006      	beq.n	800403e <I2C_Slave_ISR_IT+0x19e>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004030:	693a      	ldr	r2, [r7, #16]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	0011      	movs	r1, r2
 8004036:	0018      	movs	r0, r3
 8004038:	f000 f846 	bl	80040c8 <I2C_ITAddrCplt>
 800403c:	e039      	b.n	80040b2 <I2C_Slave_ISR_IT+0x212>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	085b      	lsrs	r3, r3, #1
 8004042:	001a      	movs	r2, r3
 8004044:	2301      	movs	r3, #1
 8004046:	4013      	ands	r3, r2
 8004048:	d033      	beq.n	80040b2 <I2C_Slave_ISR_IT+0x212>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	085b      	lsrs	r3, r3, #1
 800404e:	001a      	movs	r2, r3
 8004050:	2301      	movs	r3, #1
 8004052:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004054:	d02d      	beq.n	80040b2 <I2C_Slave_ISR_IT+0x212>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800405a:	b29b      	uxth	r3, r3
 800405c:	2b00      	cmp	r3, #0
 800405e:	d018      	beq.n	8004092 <I2C_Slave_ISR_IT+0x1f2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004064:	781a      	ldrb	r2, [r3, #0]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004070:	1c5a      	adds	r2, r3, #1
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800407a:	b29b      	uxth	r3, r3
 800407c:	3b01      	subs	r3, #1
 800407e:	b29a      	uxth	r2, r3
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004088:	3b01      	subs	r3, #1
 800408a:	b29a      	uxth	r2, r3
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004090:	e00f      	b.n	80040b2 <I2C_Slave_ISR_IT+0x212>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004092:	697a      	ldr	r2, [r7, #20]
 8004094:	2380      	movs	r3, #128	@ 0x80
 8004096:	045b      	lsls	r3, r3, #17
 8004098:	429a      	cmp	r2, r3
 800409a:	d002      	beq.n	80040a2 <I2C_Slave_ISR_IT+0x202>
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d107      	bne.n	80040b2 <I2C_Slave_ISR_IT+0x212>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	0018      	movs	r0, r3
 80040a6:	f000 f8b3 	bl	8004210 <I2C_ITSlaveSeqCplt>
 80040aa:	e002      	b.n	80040b2 <I2C_Slave_ISR_IT+0x212>
    if (hi2c->XferCount == 0U)
 80040ac:	46c0      	nop			@ (mov r8, r8)
 80040ae:	e000      	b.n	80040b2 <I2C_Slave_ISR_IT+0x212>
    if ((hi2c->XferCount == 0U) && \
 80040b0:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2240      	movs	r2, #64	@ 0x40
 80040b6:	2100      	movs	r1, #0
 80040b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80040ba:	2300      	movs	r3, #0
}
 80040bc:	0018      	movs	r0, r3
 80040be:	46bd      	mov	sp, r7
 80040c0:	b006      	add	sp, #24
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	ffff0000 	.word	0xffff0000

080040c8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80040c8:	b5b0      	push	{r4, r5, r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2241      	movs	r2, #65	@ 0x41
 80040d6:	5c9b      	ldrb	r3, [r3, r2]
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	001a      	movs	r2, r3
 80040dc:	2328      	movs	r3, #40	@ 0x28
 80040de:	4013      	ands	r3, r2
 80040e0:	2b28      	cmp	r3, #40	@ 0x28
 80040e2:	d000      	beq.n	80040e6 <I2C_ITAddrCplt+0x1e>
 80040e4:	e088      	b.n	80041f8 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	699b      	ldr	r3, [r3, #24]
 80040ec:	0c1b      	lsrs	r3, r3, #16
 80040ee:	b2da      	uxtb	r2, r3
 80040f0:	250f      	movs	r5, #15
 80040f2:	197b      	adds	r3, r7, r5
 80040f4:	2101      	movs	r1, #1
 80040f6:	400a      	ands	r2, r1
 80040f8:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	699b      	ldr	r3, [r3, #24]
 8004100:	0c1b      	lsrs	r3, r3, #16
 8004102:	b29a      	uxth	r2, r3
 8004104:	200c      	movs	r0, #12
 8004106:	183b      	adds	r3, r7, r0
 8004108:	21fe      	movs	r1, #254	@ 0xfe
 800410a:	400a      	ands	r2, r1
 800410c:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	b29a      	uxth	r2, r3
 8004116:	240a      	movs	r4, #10
 8004118:	193b      	adds	r3, r7, r4
 800411a:	0592      	lsls	r2, r2, #22
 800411c:	0d92      	lsrs	r2, r2, #22
 800411e:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	68db      	ldr	r3, [r3, #12]
 8004126:	b29a      	uxth	r2, r3
 8004128:	2308      	movs	r3, #8
 800412a:	18fb      	adds	r3, r7, r3
 800412c:	21fe      	movs	r1, #254	@ 0xfe
 800412e:	400a      	ands	r2, r1
 8004130:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	2b02      	cmp	r3, #2
 8004138:	d148      	bne.n	80041cc <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800413a:	0021      	movs	r1, r4
 800413c:	187b      	adds	r3, r7, r1
 800413e:	881b      	ldrh	r3, [r3, #0]
 8004140:	09db      	lsrs	r3, r3, #7
 8004142:	b29a      	uxth	r2, r3
 8004144:	183b      	adds	r3, r7, r0
 8004146:	881b      	ldrh	r3, [r3, #0]
 8004148:	4053      	eors	r3, r2
 800414a:	b29b      	uxth	r3, r3
 800414c:	001a      	movs	r2, r3
 800414e:	2306      	movs	r3, #6
 8004150:	4013      	ands	r3, r2
 8004152:	d120      	bne.n	8004196 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8004154:	183b      	adds	r3, r7, r0
 8004156:	187a      	adds	r2, r7, r1
 8004158:	8812      	ldrh	r2, [r2, #0]
 800415a:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004160:	1c5a      	adds	r2, r3, #1
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800416a:	2b02      	cmp	r3, #2
 800416c:	d14c      	bne.n	8004208 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2208      	movs	r2, #8
 800417a:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2240      	movs	r2, #64	@ 0x40
 8004180:	2100      	movs	r1, #0
 8004182:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004184:	183b      	adds	r3, r7, r0
 8004186:	881a      	ldrh	r2, [r3, #0]
 8004188:	197b      	adds	r3, r7, r5
 800418a:	7819      	ldrb	r1, [r3, #0]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	0018      	movs	r0, r3
 8004190:	f7ff fe5e 	bl	8003e50 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004194:	e038      	b.n	8004208 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8004196:	240c      	movs	r4, #12
 8004198:	193b      	adds	r3, r7, r4
 800419a:	2208      	movs	r2, #8
 800419c:	18ba      	adds	r2, r7, r2
 800419e:	8812      	ldrh	r2, [r2, #0]
 80041a0:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80041a2:	2380      	movs	r3, #128	@ 0x80
 80041a4:	021a      	lsls	r2, r3, #8
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	0011      	movs	r1, r2
 80041aa:	0018      	movs	r0, r3
 80041ac:	f000 fbec 	bl	8004988 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2240      	movs	r2, #64	@ 0x40
 80041b4:	2100      	movs	r1, #0
 80041b6:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80041b8:	193b      	adds	r3, r7, r4
 80041ba:	881a      	ldrh	r2, [r3, #0]
 80041bc:	230f      	movs	r3, #15
 80041be:	18fb      	adds	r3, r7, r3
 80041c0:	7819      	ldrb	r1, [r3, #0]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	0018      	movs	r0, r3
 80041c6:	f7ff fe43 	bl	8003e50 <HAL_I2C_AddrCallback>
}
 80041ca:	e01d      	b.n	8004208 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80041cc:	2380      	movs	r3, #128	@ 0x80
 80041ce:	021a      	lsls	r2, r3, #8
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	0011      	movs	r1, r2
 80041d4:	0018      	movs	r0, r3
 80041d6:	f000 fbd7 	bl	8004988 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2240      	movs	r2, #64	@ 0x40
 80041de:	2100      	movs	r1, #0
 80041e0:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80041e2:	230c      	movs	r3, #12
 80041e4:	18fb      	adds	r3, r7, r3
 80041e6:	881a      	ldrh	r2, [r3, #0]
 80041e8:	230f      	movs	r3, #15
 80041ea:	18fb      	adds	r3, r7, r3
 80041ec:	7819      	ldrb	r1, [r3, #0]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	0018      	movs	r0, r3
 80041f2:	f7ff fe2d 	bl	8003e50 <HAL_I2C_AddrCallback>
}
 80041f6:	e007      	b.n	8004208 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2208      	movs	r2, #8
 80041fe:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2240      	movs	r2, #64	@ 0x40
 8004204:	2100      	movs	r1, #0
 8004206:	5499      	strb	r1, [r3, r2]
}
 8004208:	46c0      	nop			@ (mov r8, r8)
 800420a:	46bd      	mov	sp, r7
 800420c:	b004      	add	sp, #16
 800420e:	bdb0      	pop	{r4, r5, r7, pc}

08004210 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2242      	movs	r2, #66	@ 0x42
 8004224:	2100      	movs	r1, #0
 8004226:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	0b9b      	lsrs	r3, r3, #14
 800422c:	001a      	movs	r2, r3
 800422e:	2301      	movs	r3, #1
 8004230:	4013      	ands	r3, r2
 8004232:	d008      	beq.n	8004246 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4925      	ldr	r1, [pc, #148]	@ (80042d4 <I2C_ITSlaveSeqCplt+0xc4>)
 8004240:	400a      	ands	r2, r1
 8004242:	601a      	str	r2, [r3, #0]
 8004244:	e00d      	b.n	8004262 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	0bdb      	lsrs	r3, r3, #15
 800424a:	001a      	movs	r2, r3
 800424c:	2301      	movs	r3, #1
 800424e:	4013      	ands	r3, r2
 8004250:	d007      	beq.n	8004262 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	491e      	ldr	r1, [pc, #120]	@ (80042d8 <I2C_ITSlaveSeqCplt+0xc8>)
 800425e:	400a      	ands	r2, r1
 8004260:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2241      	movs	r2, #65	@ 0x41
 8004266:	5c9b      	ldrb	r3, [r3, r2]
 8004268:	b2db      	uxtb	r3, r3
 800426a:	2b29      	cmp	r3, #41	@ 0x29
 800426c:	d114      	bne.n	8004298 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2241      	movs	r2, #65	@ 0x41
 8004272:	2128      	movs	r1, #40	@ 0x28
 8004274:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2221      	movs	r2, #33	@ 0x21
 800427a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2101      	movs	r1, #1
 8004280:	0018      	movs	r0, r3
 8004282:	f000 fb81 	bl	8004988 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2240      	movs	r2, #64	@ 0x40
 800428a:	2100      	movs	r1, #0
 800428c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	0018      	movs	r0, r3
 8004292:	f7ff fdcd 	bl	8003e30 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004296:	e019      	b.n	80042cc <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2241      	movs	r2, #65	@ 0x41
 800429c:	5c9b      	ldrb	r3, [r3, r2]
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80042a2:	d113      	bne.n	80042cc <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2241      	movs	r2, #65	@ 0x41
 80042a8:	2128      	movs	r1, #40	@ 0x28
 80042aa:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2222      	movs	r2, #34	@ 0x22
 80042b0:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2102      	movs	r1, #2
 80042b6:	0018      	movs	r0, r3
 80042b8:	f000 fb66 	bl	8004988 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2240      	movs	r2, #64	@ 0x40
 80042c0:	2100      	movs	r1, #0
 80042c2:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	0018      	movs	r0, r3
 80042c8:	f7ff fdba 	bl	8003e40 <HAL_I2C_SlaveRxCpltCallback>
}
 80042cc:	46c0      	nop			@ (mov r8, r8)
 80042ce:	46bd      	mov	sp, r7
 80042d0:	b004      	add	sp, #16
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	ffffbfff 	.word	0xffffbfff
 80042d8:	ffff7fff 	.word	0xffff7fff

080042dc <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b086      	sub	sp, #24
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042f6:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80042f8:	200b      	movs	r0, #11
 80042fa:	183b      	adds	r3, r7, r0
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	2141      	movs	r1, #65	@ 0x41
 8004300:	5c52      	ldrb	r2, [r2, r1]
 8004302:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	2220      	movs	r2, #32
 800430a:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800430c:	183b      	adds	r3, r7, r0
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	2b21      	cmp	r3, #33	@ 0x21
 8004312:	d003      	beq.n	800431c <I2C_ITSlaveCplt+0x40>
 8004314:	183b      	adds	r3, r7, r0
 8004316:	781b      	ldrb	r3, [r3, #0]
 8004318:	2b29      	cmp	r3, #41	@ 0x29
 800431a:	d109      	bne.n	8004330 <I2C_ITSlaveCplt+0x54>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800431c:	4ab0      	ldr	r2, [pc, #704]	@ (80045e0 <I2C_ITSlaveCplt+0x304>)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	0011      	movs	r1, r2
 8004322:	0018      	movs	r0, r3
 8004324:	f000 fb30 	bl	8004988 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2221      	movs	r2, #33	@ 0x21
 800432c:	631a      	str	r2, [r3, #48]	@ 0x30
 800432e:	e020      	b.n	8004372 <I2C_ITSlaveCplt+0x96>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004330:	220b      	movs	r2, #11
 8004332:	18bb      	adds	r3, r7, r2
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	2b22      	cmp	r3, #34	@ 0x22
 8004338:	d003      	beq.n	8004342 <I2C_ITSlaveCplt+0x66>
 800433a:	18bb      	adds	r3, r7, r2
 800433c:	781b      	ldrb	r3, [r3, #0]
 800433e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004340:	d109      	bne.n	8004356 <I2C_ITSlaveCplt+0x7a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004342:	4aa8      	ldr	r2, [pc, #672]	@ (80045e4 <I2C_ITSlaveCplt+0x308>)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	0011      	movs	r1, r2
 8004348:	0018      	movs	r0, r3
 800434a:	f000 fb1d 	bl	8004988 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2222      	movs	r2, #34	@ 0x22
 8004352:	631a      	str	r2, [r3, #48]	@ 0x30
 8004354:	e00d      	b.n	8004372 <I2C_ITSlaveCplt+0x96>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8004356:	230b      	movs	r3, #11
 8004358:	18fb      	adds	r3, r7, r3
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	2b28      	cmp	r3, #40	@ 0x28
 800435e:	d108      	bne.n	8004372 <I2C_ITSlaveCplt+0x96>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8004360:	4aa1      	ldr	r2, [pc, #644]	@ (80045e8 <I2C_ITSlaveCplt+0x30c>)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	0011      	movs	r1, r2
 8004366:	0018      	movs	r0, r3
 8004368:	f000 fb0e 	bl	8004988 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	685a      	ldr	r2, [r3, #4]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	2180      	movs	r1, #128	@ 0x80
 800437e:	0209      	lsls	r1, r1, #8
 8004380:	430a      	orrs	r2, r1
 8004382:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	685a      	ldr	r2, [r3, #4]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4997      	ldr	r1, [pc, #604]	@ (80045ec <I2C_ITSlaveCplt+0x310>)
 8004390:	400a      	ands	r2, r1
 8004392:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	0018      	movs	r0, r3
 8004398:	f000 fab5 	bl	8004906 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	0b9b      	lsrs	r3, r3, #14
 80043a0:	001a      	movs	r2, r3
 80043a2:	2301      	movs	r3, #1
 80043a4:	4013      	ands	r3, r2
 80043a6:	d013      	beq.n	80043d0 <I2C_ITSlaveCplt+0xf4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	498f      	ldr	r1, [pc, #572]	@ (80045f0 <I2C_ITSlaveCplt+0x314>)
 80043b4:	400a      	ands	r2, r1
 80043b6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d020      	beq.n	8004402 <I2C_ITSlaveCplt+0x126>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	b29a      	uxth	r2, r3
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80043ce:	e018      	b.n	8004402 <I2C_ITSlaveCplt+0x126>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	0bdb      	lsrs	r3, r3, #15
 80043d4:	001a      	movs	r2, r3
 80043d6:	2301      	movs	r3, #1
 80043d8:	4013      	ands	r3, r2
 80043da:	d012      	beq.n	8004402 <I2C_ITSlaveCplt+0x126>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4983      	ldr	r1, [pc, #524]	@ (80045f4 <I2C_ITSlaveCplt+0x318>)
 80043e8:	400a      	ands	r2, r1
 80043ea:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d006      	beq.n	8004402 <I2C_ITSlaveCplt+0x126>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	b29a      	uxth	r2, r3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	089b      	lsrs	r3, r3, #2
 8004406:	001a      	movs	r2, r3
 8004408:	2301      	movs	r3, #1
 800440a:	4013      	ands	r3, r2
 800440c:	d020      	beq.n	8004450 <I2C_ITSlaveCplt+0x174>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	2204      	movs	r2, #4
 8004412:	4393      	bics	r3, r2
 8004414:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004420:	b2d2      	uxtb	r2, r2
 8004422:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004428:	1c5a      	adds	r2, r3, #1
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004432:	2b00      	cmp	r3, #0
 8004434:	d00c      	beq.n	8004450 <I2C_ITSlaveCplt+0x174>
    {
      hi2c->XferSize--;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800443a:	3b01      	subs	r3, #1
 800443c:	b29a      	uxth	r2, r3
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004446:	b29b      	uxth	r3, r3
 8004448:	3b01      	subs	r3, #1
 800444a:	b29a      	uxth	r2, r3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004454:	b29b      	uxth	r3, r3
 8004456:	2b00      	cmp	r3, #0
 8004458:	d005      	beq.n	8004466 <I2C_ITSlaveCplt+0x18a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800445e:	2204      	movs	r2, #4
 8004460:	431a      	orrs	r2, r3
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	091b      	lsrs	r3, r3, #4
 800446a:	001a      	movs	r2, r3
 800446c:	2301      	movs	r3, #1
 800446e:	4013      	ands	r3, r2
 8004470:	d051      	beq.n	8004516 <I2C_ITSlaveCplt+0x23a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	091b      	lsrs	r3, r3, #4
 8004476:	001a      	movs	r2, r3
 8004478:	2301      	movs	r3, #1
 800447a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800447c:	d04b      	beq.n	8004516 <I2C_ITSlaveCplt+0x23a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004482:	b29b      	uxth	r3, r3
 8004484:	2b00      	cmp	r3, #0
 8004486:	d12d      	bne.n	80044e4 <I2C_ITSlaveCplt+0x208>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2241      	movs	r2, #65	@ 0x41
 800448c:	5c9b      	ldrb	r3, [r3, r2]
 800448e:	b2db      	uxtb	r3, r3
 8004490:	2b28      	cmp	r3, #40	@ 0x28
 8004492:	d10b      	bne.n	80044ac <I2C_ITSlaveCplt+0x1d0>
 8004494:	68fa      	ldr	r2, [r7, #12]
 8004496:	2380      	movs	r3, #128	@ 0x80
 8004498:	049b      	lsls	r3, r3, #18
 800449a:	429a      	cmp	r2, r3
 800449c:	d106      	bne.n	80044ac <I2C_ITSlaveCplt+0x1d0>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800449e:	697a      	ldr	r2, [r7, #20]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	0011      	movs	r1, r2
 80044a4:	0018      	movs	r0, r3
 80044a6:	f000 f8a9 	bl	80045fc <I2C_ITListenCplt>
 80044aa:	e034      	b.n	8004516 <I2C_ITSlaveCplt+0x23a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2241      	movs	r2, #65	@ 0x41
 80044b0:	5c9b      	ldrb	r3, [r3, r2]
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	2b29      	cmp	r3, #41	@ 0x29
 80044b6:	d110      	bne.n	80044da <I2C_ITSlaveCplt+0x1fe>
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	4a4f      	ldr	r2, [pc, #316]	@ (80045f8 <I2C_ITSlaveCplt+0x31c>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d00c      	beq.n	80044da <I2C_ITSlaveCplt+0x1fe>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	2210      	movs	r2, #16
 80044c6:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	0018      	movs	r0, r3
 80044cc:	f000 fa1b 	bl	8004906 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	0018      	movs	r0, r3
 80044d4:	f7ff fe9c 	bl	8004210 <I2C_ITSlaveSeqCplt>
 80044d8:	e01d      	b.n	8004516 <I2C_ITSlaveCplt+0x23a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	2210      	movs	r2, #16
 80044e0:	61da      	str	r2, [r3, #28]
 80044e2:	e018      	b.n	8004516 <I2C_ITSlaveCplt+0x23a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	2210      	movs	r2, #16
 80044ea:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044f0:	2204      	movs	r2, #4
 80044f2:	431a      	orrs	r2, r3
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d004      	beq.n	8004508 <I2C_ITSlaveCplt+0x22c>
 80044fe:	68fa      	ldr	r2, [r7, #12]
 8004500:	2380      	movs	r3, #128	@ 0x80
 8004502:	045b      	lsls	r3, r3, #17
 8004504:	429a      	cmp	r2, r3
 8004506:	d106      	bne.n	8004516 <I2C_ITSlaveCplt+0x23a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	0011      	movs	r1, r2
 8004510:	0018      	movs	r0, r3
 8004512:	f000 f8cd 	bl	80046b0 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2242      	movs	r2, #66	@ 0x42
 800451a:	2100      	movs	r1, #0
 800451c:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004528:	2b00      	cmp	r3, #0
 800452a:	d013      	beq.n	8004554 <I2C_ITSlaveCplt+0x278>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	0011      	movs	r1, r2
 8004534:	0018      	movs	r0, r3
 8004536:	f000 f8bb 	bl	80046b0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2241      	movs	r2, #65	@ 0x41
 800453e:	5c9b      	ldrb	r3, [r3, r2]
 8004540:	b2db      	uxtb	r3, r3
 8004542:	2b28      	cmp	r3, #40	@ 0x28
 8004544:	d147      	bne.n	80045d6 <I2C_ITSlaveCplt+0x2fa>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004546:	697a      	ldr	r2, [r7, #20]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	0011      	movs	r1, r2
 800454c:	0018      	movs	r0, r3
 800454e:	f000 f855 	bl	80045fc <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004552:	e040      	b.n	80045d6 <I2C_ITSlaveCplt+0x2fa>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004558:	4a27      	ldr	r2, [pc, #156]	@ (80045f8 <I2C_ITSlaveCplt+0x31c>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d016      	beq.n	800458c <I2C_ITSlaveCplt+0x2b0>
    I2C_ITSlaveSeqCplt(hi2c);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	0018      	movs	r0, r3
 8004562:	f7ff fe55 	bl	8004210 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4a23      	ldr	r2, [pc, #140]	@ (80045f8 <I2C_ITSlaveCplt+0x31c>)
 800456a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2241      	movs	r2, #65	@ 0x41
 8004570:	2120      	movs	r1, #32
 8004572:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2240      	movs	r2, #64	@ 0x40
 800457e:	2100      	movs	r1, #0
 8004580:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	0018      	movs	r0, r3
 8004586:	f7ff fc73 	bl	8003e70 <HAL_I2C_ListenCpltCallback>
}
 800458a:	e024      	b.n	80045d6 <I2C_ITSlaveCplt+0x2fa>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2241      	movs	r2, #65	@ 0x41
 8004590:	5c9b      	ldrb	r3, [r3, r2]
 8004592:	b2db      	uxtb	r3, r3
 8004594:	2b22      	cmp	r3, #34	@ 0x22
 8004596:	d10f      	bne.n	80045b8 <I2C_ITSlaveCplt+0x2dc>
    hi2c->State = HAL_I2C_STATE_READY;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2241      	movs	r2, #65	@ 0x41
 800459c:	2120      	movs	r1, #32
 800459e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2240      	movs	r2, #64	@ 0x40
 80045aa:	2100      	movs	r1, #0
 80045ac:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	0018      	movs	r0, r3
 80045b2:	f7ff fc45 	bl	8003e40 <HAL_I2C_SlaveRxCpltCallback>
}
 80045b6:	e00e      	b.n	80045d6 <I2C_ITSlaveCplt+0x2fa>
    hi2c->State = HAL_I2C_STATE_READY;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2241      	movs	r2, #65	@ 0x41
 80045bc:	2120      	movs	r1, #32
 80045be:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2200      	movs	r2, #0
 80045c4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2240      	movs	r2, #64	@ 0x40
 80045ca:	2100      	movs	r1, #0
 80045cc:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	0018      	movs	r0, r3
 80045d2:	f7ff fc2d 	bl	8003e30 <HAL_I2C_SlaveTxCpltCallback>
}
 80045d6:	46c0      	nop			@ (mov r8, r8)
 80045d8:	46bd      	mov	sp, r7
 80045da:	b006      	add	sp, #24
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	46c0      	nop			@ (mov r8, r8)
 80045e0:	00008001 	.word	0x00008001
 80045e4:	00008002 	.word	0x00008002
 80045e8:	00008003 	.word	0x00008003
 80045ec:	fe00e800 	.word	0xfe00e800
 80045f0:	ffffbfff 	.word	0xffffbfff
 80045f4:	ffff7fff 	.word	0xffff7fff
 80045f8:	ffff0000 	.word	0xffff0000

080045fc <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b082      	sub	sp, #8
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4a27      	ldr	r2, [pc, #156]	@ (80046a8 <I2C_ITListenCplt+0xac>)
 800460a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2241      	movs	r2, #65	@ 0x41
 8004616:	2120      	movs	r1, #32
 8004618:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2242      	movs	r2, #66	@ 0x42
 800461e:	2100      	movs	r1, #0
 8004620:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	089b      	lsrs	r3, r3, #2
 800462c:	001a      	movs	r2, r3
 800462e:	2301      	movs	r3, #1
 8004630:	4013      	ands	r3, r2
 8004632:	d022      	beq.n	800467a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800463e:	b2d2      	uxtb	r2, r2
 8004640:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004646:	1c5a      	adds	r2, r3, #1
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004650:	2b00      	cmp	r3, #0
 8004652:	d012      	beq.n	800467a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004658:	3b01      	subs	r3, #1
 800465a:	b29a      	uxth	r2, r3
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004664:	b29b      	uxth	r3, r3
 8004666:	3b01      	subs	r3, #1
 8004668:	b29a      	uxth	r2, r3
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004672:	2204      	movs	r2, #4
 8004674:	431a      	orrs	r2, r3
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800467a:	4a0c      	ldr	r2, [pc, #48]	@ (80046ac <I2C_ITListenCplt+0xb0>)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	0011      	movs	r1, r2
 8004680:	0018      	movs	r0, r3
 8004682:	f000 f981 	bl	8004988 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	2210      	movs	r2, #16
 800468c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2240      	movs	r2, #64	@ 0x40
 8004692:	2100      	movs	r1, #0
 8004694:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	0018      	movs	r0, r3
 800469a:	f7ff fbe9 	bl	8003e70 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800469e:	46c0      	nop			@ (mov r8, r8)
 80046a0:	46bd      	mov	sp, r7
 80046a2:	b002      	add	sp, #8
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	46c0      	nop			@ (mov r8, r8)
 80046a8:	ffff0000 	.word	0xffff0000
 80046ac:	00008003 	.word	0x00008003

080046b0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80046ba:	200f      	movs	r0, #15
 80046bc:	183b      	adds	r3, r7, r0
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	2141      	movs	r1, #65	@ 0x41
 80046c2:	5c52      	ldrb	r2, [r2, r1]
 80046c4:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2242      	movs	r2, #66	@ 0x42
 80046ca:	2100      	movs	r1, #0
 80046cc:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4a72      	ldr	r2, [pc, #456]	@ (800489c <I2C_ITError+0x1ec>)
 80046d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	431a      	orrs	r2, r3
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80046e6:	183b      	adds	r3, r7, r0
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	2b28      	cmp	r3, #40	@ 0x28
 80046ec:	d007      	beq.n	80046fe <I2C_ITError+0x4e>
 80046ee:	183b      	adds	r3, r7, r0
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	2b29      	cmp	r3, #41	@ 0x29
 80046f4:	d003      	beq.n	80046fe <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80046f6:	183b      	adds	r3, r7, r0
 80046f8:	781b      	ldrb	r3, [r3, #0]
 80046fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80046fc:	d10c      	bne.n	8004718 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2103      	movs	r1, #3
 8004702:	0018      	movs	r0, r3
 8004704:	f000 f940 	bl	8004988 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2241      	movs	r2, #65	@ 0x41
 800470c:	2128      	movs	r1, #40	@ 0x28
 800470e:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	4a63      	ldr	r2, [pc, #396]	@ (80048a0 <I2C_ITError+0x1f0>)
 8004714:	635a      	str	r2, [r3, #52]	@ 0x34
 8004716:	e032      	b.n	800477e <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004718:	4a62      	ldr	r2, [pc, #392]	@ (80048a4 <I2C_ITError+0x1f4>)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	0011      	movs	r1, r2
 800471e:	0018      	movs	r0, r3
 8004720:	f000 f932 	bl	8004988 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	0018      	movs	r0, r3
 8004728:	f000 f8ed 	bl	8004906 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2241      	movs	r2, #65	@ 0x41
 8004730:	5c9b      	ldrb	r3, [r3, r2]
 8004732:	b2db      	uxtb	r3, r3
 8004734:	2b60      	cmp	r3, #96	@ 0x60
 8004736:	d01f      	beq.n	8004778 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2241      	movs	r2, #65	@ 0x41
 800473c:	2120      	movs	r1, #32
 800473e:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	699b      	ldr	r3, [r3, #24]
 8004746:	2220      	movs	r2, #32
 8004748:	4013      	ands	r3, r2
 800474a:	2b20      	cmp	r3, #32
 800474c:	d114      	bne.n	8004778 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	699b      	ldr	r3, [r3, #24]
 8004754:	2210      	movs	r2, #16
 8004756:	4013      	ands	r3, r2
 8004758:	2b10      	cmp	r3, #16
 800475a:	d109      	bne.n	8004770 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	2210      	movs	r2, #16
 8004762:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004768:	2204      	movs	r2, #4
 800476a:	431a      	orrs	r2, r3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2220      	movs	r2, #32
 8004776:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004782:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004788:	2b00      	cmp	r3, #0
 800478a:	d03b      	beq.n	8004804 <I2C_ITError+0x154>
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	2b11      	cmp	r3, #17
 8004790:	d002      	beq.n	8004798 <I2C_ITError+0xe8>
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	2b21      	cmp	r3, #33	@ 0x21
 8004796:	d135      	bne.n	8004804 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	2380      	movs	r3, #128	@ 0x80
 80047a0:	01db      	lsls	r3, r3, #7
 80047a2:	401a      	ands	r2, r3
 80047a4:	2380      	movs	r3, #128	@ 0x80
 80047a6:	01db      	lsls	r3, r3, #7
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d107      	bne.n	80047bc <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	493c      	ldr	r1, [pc, #240]	@ (80048a8 <I2C_ITError+0x1f8>)
 80047b8:	400a      	ands	r2, r1
 80047ba:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047c0:	0018      	movs	r0, r3
 80047c2:	f7fe fdea 	bl	800339a <HAL_DMA_GetState>
 80047c6:	0003      	movs	r3, r0
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d016      	beq.n	80047fa <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047d0:	4a36      	ldr	r2, [pc, #216]	@ (80048ac <I2C_ITError+0x1fc>)
 80047d2:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2240      	movs	r2, #64	@ 0x40
 80047d8:	2100      	movs	r1, #0
 80047da:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047e0:	0018      	movs	r0, r3
 80047e2:	f7fe fce5 	bl	80031b0 <HAL_DMA_Abort_IT>
 80047e6:	1e03      	subs	r3, r0, #0
 80047e8:	d051      	beq.n	800488e <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047f4:	0018      	movs	r0, r3
 80047f6:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80047f8:	e049      	b.n	800488e <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	0018      	movs	r0, r3
 80047fe:	f000 f859 	bl	80048b4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004802:	e044      	b.n	800488e <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004808:	2b00      	cmp	r3, #0
 800480a:	d03b      	beq.n	8004884 <I2C_ITError+0x1d4>
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	2b12      	cmp	r3, #18
 8004810:	d002      	beq.n	8004818 <I2C_ITError+0x168>
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	2b22      	cmp	r3, #34	@ 0x22
 8004816:	d135      	bne.n	8004884 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	2380      	movs	r3, #128	@ 0x80
 8004820:	021b      	lsls	r3, r3, #8
 8004822:	401a      	ands	r2, r3
 8004824:	2380      	movs	r3, #128	@ 0x80
 8004826:	021b      	lsls	r3, r3, #8
 8004828:	429a      	cmp	r2, r3
 800482a:	d107      	bne.n	800483c <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	491e      	ldr	r1, [pc, #120]	@ (80048b0 <I2C_ITError+0x200>)
 8004838:	400a      	ands	r2, r1
 800483a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004840:	0018      	movs	r0, r3
 8004842:	f7fe fdaa 	bl	800339a <HAL_DMA_GetState>
 8004846:	0003      	movs	r3, r0
 8004848:	2b01      	cmp	r3, #1
 800484a:	d016      	beq.n	800487a <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004850:	4a16      	ldr	r2, [pc, #88]	@ (80048ac <I2C_ITError+0x1fc>)
 8004852:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2240      	movs	r2, #64	@ 0x40
 8004858:	2100      	movs	r1, #0
 800485a:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004860:	0018      	movs	r0, r3
 8004862:	f7fe fca5 	bl	80031b0 <HAL_DMA_Abort_IT>
 8004866:	1e03      	subs	r3, r0, #0
 8004868:	d013      	beq.n	8004892 <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800486e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004874:	0018      	movs	r0, r3
 8004876:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004878:	e00b      	b.n	8004892 <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	0018      	movs	r0, r3
 800487e:	f000 f819 	bl	80048b4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004882:	e006      	b.n	8004892 <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	0018      	movs	r0, r3
 8004888:	f000 f814 	bl	80048b4 <I2C_TreatErrorCallback>
  }
}
 800488c:	e002      	b.n	8004894 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800488e:	46c0      	nop			@ (mov r8, r8)
 8004890:	e000      	b.n	8004894 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004892:	46c0      	nop			@ (mov r8, r8)
}
 8004894:	46c0      	nop			@ (mov r8, r8)
 8004896:	46bd      	mov	sp, r7
 8004898:	b004      	add	sp, #16
 800489a:	bd80      	pop	{r7, pc}
 800489c:	ffff0000 	.word	0xffff0000
 80048a0:	08003ea1 	.word	0x08003ea1
 80048a4:	00008003 	.word	0x00008003
 80048a8:	ffffbfff 	.word	0xffffbfff
 80048ac:	0800494b 	.word	0x0800494b
 80048b0:	ffff7fff 	.word	0xffff7fff

080048b4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b082      	sub	sp, #8
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2241      	movs	r2, #65	@ 0x41
 80048c0:	5c9b      	ldrb	r3, [r3, r2]
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	2b60      	cmp	r3, #96	@ 0x60
 80048c6:	d10f      	bne.n	80048e8 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2241      	movs	r2, #65	@ 0x41
 80048cc:	2120      	movs	r1, #32
 80048ce:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2240      	movs	r2, #64	@ 0x40
 80048da:	2100      	movs	r1, #0
 80048dc:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	0018      	movs	r0, r3
 80048e2:	f7ff fad5 	bl	8003e90 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80048e6:	e00a      	b.n	80048fe <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2240      	movs	r2, #64	@ 0x40
 80048f2:	2100      	movs	r1, #0
 80048f4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	0018      	movs	r0, r3
 80048fa:	f7ff fac1 	bl	8003e80 <HAL_I2C_ErrorCallback>
}
 80048fe:	46c0      	nop			@ (mov r8, r8)
 8004900:	46bd      	mov	sp, r7
 8004902:	b002      	add	sp, #8
 8004904:	bd80      	pop	{r7, pc}

08004906 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004906:	b580      	push	{r7, lr}
 8004908:	b082      	sub	sp, #8
 800490a:	af00      	add	r7, sp, #0
 800490c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	699b      	ldr	r3, [r3, #24]
 8004914:	2202      	movs	r2, #2
 8004916:	4013      	ands	r3, r2
 8004918:	2b02      	cmp	r3, #2
 800491a:	d103      	bne.n	8004924 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2200      	movs	r2, #0
 8004922:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	699b      	ldr	r3, [r3, #24]
 800492a:	2201      	movs	r2, #1
 800492c:	4013      	ands	r3, r2
 800492e:	2b01      	cmp	r3, #1
 8004930:	d007      	beq.n	8004942 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	699a      	ldr	r2, [r3, #24]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	2101      	movs	r1, #1
 800493e:	430a      	orrs	r2, r1
 8004940:	619a      	str	r2, [r3, #24]
  }
}
 8004942:	46c0      	nop			@ (mov r8, r8)
 8004944:	46bd      	mov	sp, r7
 8004946:	b002      	add	sp, #8
 8004948:	bd80      	pop	{r7, pc}

0800494a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800494a:	b580      	push	{r7, lr}
 800494c:	b084      	sub	sp, #16
 800494e:	af00      	add	r7, sp, #0
 8004950:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004956:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800495c:	2b00      	cmp	r3, #0
 800495e:	d003      	beq.n	8004968 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004964:	2200      	movs	r2, #0
 8004966:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800496c:	2b00      	cmp	r3, #0
 800496e:	d003      	beq.n	8004978 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004974:	2200      	movs	r2, #0
 8004976:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	0018      	movs	r0, r3
 800497c:	f7ff ff9a 	bl	80048b4 <I2C_TreatErrorCallback>
}
 8004980:	46c0      	nop			@ (mov r8, r8)
 8004982:	46bd      	mov	sp, r7
 8004984:	b004      	add	sp, #16
 8004986:	bd80      	pop	{r7, pc}

08004988 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b084      	sub	sp, #16
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	000a      	movs	r2, r1
 8004992:	1cbb      	adds	r3, r7, #2
 8004994:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8004996:	2300      	movs	r3, #0
 8004998:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800499a:	1cbb      	adds	r3, r7, #2
 800499c:	881b      	ldrh	r3, [r3, #0]
 800499e:	2201      	movs	r2, #1
 80049a0:	4013      	ands	r3, r2
 80049a2:	d010      	beq.n	80049c6 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2242      	movs	r2, #66	@ 0x42
 80049a8:	4313      	orrs	r3, r2
 80049aa:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2241      	movs	r2, #65	@ 0x41
 80049b0:	5c9b      	ldrb	r3, [r3, r2]
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	001a      	movs	r2, r3
 80049b6:	2328      	movs	r3, #40	@ 0x28
 80049b8:	4013      	ands	r3, r2
 80049ba:	2b28      	cmp	r3, #40	@ 0x28
 80049bc:	d003      	beq.n	80049c6 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	22b0      	movs	r2, #176	@ 0xb0
 80049c2:	4313      	orrs	r3, r2
 80049c4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80049c6:	1cbb      	adds	r3, r7, #2
 80049c8:	881b      	ldrh	r3, [r3, #0]
 80049ca:	2202      	movs	r2, #2
 80049cc:	4013      	ands	r3, r2
 80049ce:	d010      	beq.n	80049f2 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2244      	movs	r2, #68	@ 0x44
 80049d4:	4313      	orrs	r3, r2
 80049d6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2241      	movs	r2, #65	@ 0x41
 80049dc:	5c9b      	ldrb	r3, [r3, r2]
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	001a      	movs	r2, r3
 80049e2:	2328      	movs	r3, #40	@ 0x28
 80049e4:	4013      	ands	r3, r2
 80049e6:	2b28      	cmp	r3, #40	@ 0x28
 80049e8:	d003      	beq.n	80049f2 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	22b0      	movs	r2, #176	@ 0xb0
 80049ee:	4313      	orrs	r3, r2
 80049f0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80049f2:	1cbb      	adds	r3, r7, #2
 80049f4:	2200      	movs	r2, #0
 80049f6:	5e9b      	ldrsh	r3, [r3, r2]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	da03      	bge.n	8004a04 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	22b8      	movs	r2, #184	@ 0xb8
 8004a00:	4313      	orrs	r3, r2
 8004a02:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004a04:	1cbb      	adds	r3, r7, #2
 8004a06:	881b      	ldrh	r3, [r3, #0]
 8004a08:	2b10      	cmp	r3, #16
 8004a0a:	d103      	bne.n	8004a14 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2290      	movs	r2, #144	@ 0x90
 8004a10:	4313      	orrs	r3, r2
 8004a12:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004a14:	1cbb      	adds	r3, r7, #2
 8004a16:	881b      	ldrh	r3, [r3, #0]
 8004a18:	2b20      	cmp	r3, #32
 8004a1a:	d103      	bne.n	8004a24 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2220      	movs	r2, #32
 8004a20:	4313      	orrs	r3, r2
 8004a22:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004a24:	1cbb      	adds	r3, r7, #2
 8004a26:	881b      	ldrh	r3, [r3, #0]
 8004a28:	2b40      	cmp	r3, #64	@ 0x40
 8004a2a:	d103      	bne.n	8004a34 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2240      	movs	r2, #64	@ 0x40
 8004a30:	4313      	orrs	r3, r2
 8004a32:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	43d9      	mvns	r1, r3
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	400a      	ands	r2, r1
 8004a44:	601a      	str	r2, [r3, #0]
}
 8004a46:	46c0      	nop			@ (mov r8, r8)
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	b004      	add	sp, #16
 8004a4c:	bd80      	pop	{r7, pc}
	...

08004a50 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b082      	sub	sp, #8
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2241      	movs	r2, #65	@ 0x41
 8004a5e:	5c9b      	ldrb	r3, [r3, r2]
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	2b20      	cmp	r3, #32
 8004a64:	d138      	bne.n	8004ad8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2240      	movs	r2, #64	@ 0x40
 8004a6a:	5c9b      	ldrb	r3, [r3, r2]
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d101      	bne.n	8004a74 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004a70:	2302      	movs	r3, #2
 8004a72:	e032      	b.n	8004ada <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2240      	movs	r2, #64	@ 0x40
 8004a78:	2101      	movs	r1, #1
 8004a7a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2241      	movs	r2, #65	@ 0x41
 8004a80:	2124      	movs	r1, #36	@ 0x24
 8004a82:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2101      	movs	r1, #1
 8004a90:	438a      	bics	r2, r1
 8004a92:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4911      	ldr	r1, [pc, #68]	@ (8004ae4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004aa0:	400a      	ands	r2, r1
 8004aa2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	6819      	ldr	r1, [r3, #0]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	683a      	ldr	r2, [r7, #0]
 8004ab0:	430a      	orrs	r2, r1
 8004ab2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	2101      	movs	r1, #1
 8004ac0:	430a      	orrs	r2, r1
 8004ac2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2241      	movs	r2, #65	@ 0x41
 8004ac8:	2120      	movs	r1, #32
 8004aca:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2240      	movs	r2, #64	@ 0x40
 8004ad0:	2100      	movs	r1, #0
 8004ad2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	e000      	b.n	8004ada <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004ad8:	2302      	movs	r3, #2
  }
}
 8004ada:	0018      	movs	r0, r3
 8004adc:	46bd      	mov	sp, r7
 8004ade:	b002      	add	sp, #8
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	46c0      	nop			@ (mov r8, r8)
 8004ae4:	ffffefff 	.word	0xffffefff

08004ae8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2241      	movs	r2, #65	@ 0x41
 8004af6:	5c9b      	ldrb	r3, [r3, r2]
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	2b20      	cmp	r3, #32
 8004afc:	d139      	bne.n	8004b72 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2240      	movs	r2, #64	@ 0x40
 8004b02:	5c9b      	ldrb	r3, [r3, r2]
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d101      	bne.n	8004b0c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004b08:	2302      	movs	r3, #2
 8004b0a:	e033      	b.n	8004b74 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2240      	movs	r2, #64	@ 0x40
 8004b10:	2101      	movs	r1, #1
 8004b12:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2241      	movs	r2, #65	@ 0x41
 8004b18:	2124      	movs	r1, #36	@ 0x24
 8004b1a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	2101      	movs	r1, #1
 8004b28:	438a      	bics	r2, r1
 8004b2a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	4a11      	ldr	r2, [pc, #68]	@ (8004b7c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004b38:	4013      	ands	r3, r2
 8004b3a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	021b      	lsls	r3, r3, #8
 8004b40:	68fa      	ldr	r2, [r7, #12]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	68fa      	ldr	r2, [r7, #12]
 8004b4c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	2101      	movs	r1, #1
 8004b5a:	430a      	orrs	r2, r1
 8004b5c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2241      	movs	r2, #65	@ 0x41
 8004b62:	2120      	movs	r1, #32
 8004b64:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2240      	movs	r2, #64	@ 0x40
 8004b6a:	2100      	movs	r1, #0
 8004b6c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	e000      	b.n	8004b74 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004b72:	2302      	movs	r3, #2
  }
}
 8004b74:	0018      	movs	r0, r3
 8004b76:	46bd      	mov	sp, r7
 8004b78:	b004      	add	sp, #16
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	fffff0ff 	.word	0xfffff0ff

08004b80 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d101      	bne.n	8004b92 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e03d      	b.n	8004c0e <HAL_IWDG_Init+0x8e>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a20      	ldr	r2, [pc, #128]	@ (8004c18 <HAL_IWDG_Init+0x98>)
 8004b98:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a1f      	ldr	r2, [pc, #124]	@ (8004c1c <HAL_IWDG_Init+0x9c>)
 8004ba0:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	6852      	ldr	r2, [r2, #4]
 8004baa:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	687a      	ldr	r2, [r7, #4]
 8004bb2:	6892      	ldr	r2, [r2, #8]
 8004bb4:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8004bb6:	f7fd fff5 	bl	8002ba4 <HAL_GetTick>
 8004bba:	0003      	movs	r3, r0
 8004bbc:	60fb      	str	r3, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004bbe:	e00e      	b.n	8004bde <HAL_IWDG_Init+0x5e>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8004bc0:	f7fd fff0 	bl	8002ba4 <HAL_GetTick>
 8004bc4:	0002      	movs	r2, r0
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	2b2a      	cmp	r3, #42	@ 0x2a
 8004bcc:	d907      	bls.n	8004bde <HAL_IWDG_Init+0x5e>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	2207      	movs	r2, #7
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	d001      	beq.n	8004bde <HAL_IWDG_Init+0x5e>
      {
        return HAL_TIMEOUT;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	e017      	b.n	8004c0e <HAL_IWDG_Init+0x8e>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	2207      	movs	r2, #7
 8004be6:	4013      	ands	r3, r2
 8004be8:	d1ea      	bne.n	8004bc0 <HAL_IWDG_Init+0x40>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	691a      	ldr	r2, [r3, #16]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d005      	beq.n	8004c04 <HAL_IWDG_Init+0x84>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	68d2      	ldr	r2, [r2, #12]
 8004c00:	611a      	str	r2, [r3, #16]
 8004c02:	e003      	b.n	8004c0c <HAL_IWDG_Init+0x8c>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a05      	ldr	r2, [pc, #20]	@ (8004c20 <HAL_IWDG_Init+0xa0>)
 8004c0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c0c:	2300      	movs	r3, #0
}
 8004c0e:	0018      	movs	r0, r3
 8004c10:	46bd      	mov	sp, r7
 8004c12:	b004      	add	sp, #16
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	46c0      	nop			@ (mov r8, r8)
 8004c18:	0000cccc 	.word	0x0000cccc
 8004c1c:	00005555 	.word	0x00005555
 8004c20:	0000aaaa 	.word	0x0000aaaa

08004c24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c24:	b5b0      	push	{r4, r5, r7, lr}
 8004c26:	b08a      	sub	sp, #40	@ 0x28
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d102      	bne.n	8004c38 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	f000 fbbf 	bl	80053b6 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c38:	4bc9      	ldr	r3, [pc, #804]	@ (8004f60 <HAL_RCC_OscConfig+0x33c>)
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	220c      	movs	r2, #12
 8004c3e:	4013      	ands	r3, r2
 8004c40:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c42:	4bc7      	ldr	r3, [pc, #796]	@ (8004f60 <HAL_RCC_OscConfig+0x33c>)
 8004c44:	68da      	ldr	r2, [r3, #12]
 8004c46:	2380      	movs	r3, #128	@ 0x80
 8004c48:	025b      	lsls	r3, r3, #9
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	2201      	movs	r2, #1
 8004c54:	4013      	ands	r3, r2
 8004c56:	d100      	bne.n	8004c5a <HAL_RCC_OscConfig+0x36>
 8004c58:	e07e      	b.n	8004d58 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004c5a:	69fb      	ldr	r3, [r7, #28]
 8004c5c:	2b08      	cmp	r3, #8
 8004c5e:	d007      	beq.n	8004c70 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	2b0c      	cmp	r3, #12
 8004c64:	d112      	bne.n	8004c8c <HAL_RCC_OscConfig+0x68>
 8004c66:	69ba      	ldr	r2, [r7, #24]
 8004c68:	2380      	movs	r3, #128	@ 0x80
 8004c6a:	025b      	lsls	r3, r3, #9
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d10d      	bne.n	8004c8c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c70:	4bbb      	ldr	r3, [pc, #748]	@ (8004f60 <HAL_RCC_OscConfig+0x33c>)
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	2380      	movs	r3, #128	@ 0x80
 8004c76:	029b      	lsls	r3, r3, #10
 8004c78:	4013      	ands	r3, r2
 8004c7a:	d100      	bne.n	8004c7e <HAL_RCC_OscConfig+0x5a>
 8004c7c:	e06b      	b.n	8004d56 <HAL_RCC_OscConfig+0x132>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d167      	bne.n	8004d56 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	f000 fb95 	bl	80053b6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	685a      	ldr	r2, [r3, #4]
 8004c90:	2380      	movs	r3, #128	@ 0x80
 8004c92:	025b      	lsls	r3, r3, #9
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d107      	bne.n	8004ca8 <HAL_RCC_OscConfig+0x84>
 8004c98:	4bb1      	ldr	r3, [pc, #708]	@ (8004f60 <HAL_RCC_OscConfig+0x33c>)
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	4bb0      	ldr	r3, [pc, #704]	@ (8004f60 <HAL_RCC_OscConfig+0x33c>)
 8004c9e:	2180      	movs	r1, #128	@ 0x80
 8004ca0:	0249      	lsls	r1, r1, #9
 8004ca2:	430a      	orrs	r2, r1
 8004ca4:	601a      	str	r2, [r3, #0]
 8004ca6:	e027      	b.n	8004cf8 <HAL_RCC_OscConfig+0xd4>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	685a      	ldr	r2, [r3, #4]
 8004cac:	23a0      	movs	r3, #160	@ 0xa0
 8004cae:	02db      	lsls	r3, r3, #11
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d10e      	bne.n	8004cd2 <HAL_RCC_OscConfig+0xae>
 8004cb4:	4baa      	ldr	r3, [pc, #680]	@ (8004f60 <HAL_RCC_OscConfig+0x33c>)
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	4ba9      	ldr	r3, [pc, #676]	@ (8004f60 <HAL_RCC_OscConfig+0x33c>)
 8004cba:	2180      	movs	r1, #128	@ 0x80
 8004cbc:	02c9      	lsls	r1, r1, #11
 8004cbe:	430a      	orrs	r2, r1
 8004cc0:	601a      	str	r2, [r3, #0]
 8004cc2:	4ba7      	ldr	r3, [pc, #668]	@ (8004f60 <HAL_RCC_OscConfig+0x33c>)
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	4ba6      	ldr	r3, [pc, #664]	@ (8004f60 <HAL_RCC_OscConfig+0x33c>)
 8004cc8:	2180      	movs	r1, #128	@ 0x80
 8004cca:	0249      	lsls	r1, r1, #9
 8004ccc:	430a      	orrs	r2, r1
 8004cce:	601a      	str	r2, [r3, #0]
 8004cd0:	e012      	b.n	8004cf8 <HAL_RCC_OscConfig+0xd4>
 8004cd2:	4ba3      	ldr	r3, [pc, #652]	@ (8004f60 <HAL_RCC_OscConfig+0x33c>)
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	4ba2      	ldr	r3, [pc, #648]	@ (8004f60 <HAL_RCC_OscConfig+0x33c>)
 8004cd8:	49a2      	ldr	r1, [pc, #648]	@ (8004f64 <HAL_RCC_OscConfig+0x340>)
 8004cda:	400a      	ands	r2, r1
 8004cdc:	601a      	str	r2, [r3, #0]
 8004cde:	4ba0      	ldr	r3, [pc, #640]	@ (8004f60 <HAL_RCC_OscConfig+0x33c>)
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	2380      	movs	r3, #128	@ 0x80
 8004ce4:	025b      	lsls	r3, r3, #9
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	60fb      	str	r3, [r7, #12]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	4b9c      	ldr	r3, [pc, #624]	@ (8004f60 <HAL_RCC_OscConfig+0x33c>)
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	4b9b      	ldr	r3, [pc, #620]	@ (8004f60 <HAL_RCC_OscConfig+0x33c>)
 8004cf2:	499d      	ldr	r1, [pc, #628]	@ (8004f68 <HAL_RCC_OscConfig+0x344>)
 8004cf4:	400a      	ands	r2, r1
 8004cf6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d015      	beq.n	8004d2c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d00:	f7fd ff50 	bl	8002ba4 <HAL_GetTick>
 8004d04:	0003      	movs	r3, r0
 8004d06:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d08:	e009      	b.n	8004d1e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d0a:	f7fd ff4b 	bl	8002ba4 <HAL_GetTick>
 8004d0e:	0002      	movs	r2, r0
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	1ad3      	subs	r3, r2, r3
 8004d14:	2b64      	cmp	r3, #100	@ 0x64
 8004d16:	d902      	bls.n	8004d1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d18:	2303      	movs	r3, #3
 8004d1a:	f000 fb4c 	bl	80053b6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d1e:	4b90      	ldr	r3, [pc, #576]	@ (8004f60 <HAL_RCC_OscConfig+0x33c>)
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	2380      	movs	r3, #128	@ 0x80
 8004d24:	029b      	lsls	r3, r3, #10
 8004d26:	4013      	ands	r3, r2
 8004d28:	d0ef      	beq.n	8004d0a <HAL_RCC_OscConfig+0xe6>
 8004d2a:	e015      	b.n	8004d58 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d2c:	f7fd ff3a 	bl	8002ba4 <HAL_GetTick>
 8004d30:	0003      	movs	r3, r0
 8004d32:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004d34:	e008      	b.n	8004d48 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d36:	f7fd ff35 	bl	8002ba4 <HAL_GetTick>
 8004d3a:	0002      	movs	r2, r0
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	1ad3      	subs	r3, r2, r3
 8004d40:	2b64      	cmp	r3, #100	@ 0x64
 8004d42:	d901      	bls.n	8004d48 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8004d44:	2303      	movs	r3, #3
 8004d46:	e336      	b.n	80053b6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004d48:	4b85      	ldr	r3, [pc, #532]	@ (8004f60 <HAL_RCC_OscConfig+0x33c>)
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	2380      	movs	r3, #128	@ 0x80
 8004d4e:	029b      	lsls	r3, r3, #10
 8004d50:	4013      	ands	r3, r2
 8004d52:	d1f0      	bne.n	8004d36 <HAL_RCC_OscConfig+0x112>
 8004d54:	e000      	b.n	8004d58 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d56:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	2202      	movs	r2, #2
 8004d5e:	4013      	ands	r3, r2
 8004d60:	d100      	bne.n	8004d64 <HAL_RCC_OscConfig+0x140>
 8004d62:	e099      	b.n	8004e98 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8004d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d6c:	2220      	movs	r2, #32
 8004d6e:	4013      	ands	r3, r2
 8004d70:	d009      	beq.n	8004d86 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8004d72:	4b7b      	ldr	r3, [pc, #492]	@ (8004f60 <HAL_RCC_OscConfig+0x33c>)
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	4b7a      	ldr	r3, [pc, #488]	@ (8004f60 <HAL_RCC_OscConfig+0x33c>)
 8004d78:	2120      	movs	r1, #32
 8004d7a:	430a      	orrs	r2, r1
 8004d7c:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8004d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d80:	2220      	movs	r2, #32
 8004d82:	4393      	bics	r3, r2
 8004d84:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	2b04      	cmp	r3, #4
 8004d8a:	d005      	beq.n	8004d98 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004d8c:	69fb      	ldr	r3, [r7, #28]
 8004d8e:	2b0c      	cmp	r3, #12
 8004d90:	d13e      	bne.n	8004e10 <HAL_RCC_OscConfig+0x1ec>
 8004d92:	69bb      	ldr	r3, [r7, #24]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d13b      	bne.n	8004e10 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8004d98:	4b71      	ldr	r3, [pc, #452]	@ (8004f60 <HAL_RCC_OscConfig+0x33c>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	2204      	movs	r2, #4
 8004d9e:	4013      	ands	r3, r2
 8004da0:	d004      	beq.n	8004dac <HAL_RCC_OscConfig+0x188>
 8004da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d101      	bne.n	8004dac <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e304      	b.n	80053b6 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dac:	4b6c      	ldr	r3, [pc, #432]	@ (8004f60 <HAL_RCC_OscConfig+0x33c>)
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	4a6e      	ldr	r2, [pc, #440]	@ (8004f6c <HAL_RCC_OscConfig+0x348>)
 8004db2:	4013      	ands	r3, r2
 8004db4:	0019      	movs	r1, r3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	691b      	ldr	r3, [r3, #16]
 8004dba:	021a      	lsls	r2, r3, #8
 8004dbc:	4b68      	ldr	r3, [pc, #416]	@ (8004f60 <HAL_RCC_OscConfig+0x33c>)
 8004dbe:	430a      	orrs	r2, r1
 8004dc0:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004dc2:	4b67      	ldr	r3, [pc, #412]	@ (8004f60 <HAL_RCC_OscConfig+0x33c>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	2209      	movs	r2, #9
 8004dc8:	4393      	bics	r3, r2
 8004dca:	0019      	movs	r1, r3
 8004dcc:	4b64      	ldr	r3, [pc, #400]	@ (8004f60 <HAL_RCC_OscConfig+0x33c>)
 8004dce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004dd0:	430a      	orrs	r2, r1
 8004dd2:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004dd4:	f000 fc42 	bl	800565c <HAL_RCC_GetSysClockFreq>
 8004dd8:	0001      	movs	r1, r0
 8004dda:	4b61      	ldr	r3, [pc, #388]	@ (8004f60 <HAL_RCC_OscConfig+0x33c>)
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	091b      	lsrs	r3, r3, #4
 8004de0:	220f      	movs	r2, #15
 8004de2:	4013      	ands	r3, r2
 8004de4:	4a62      	ldr	r2, [pc, #392]	@ (8004f70 <HAL_RCC_OscConfig+0x34c>)
 8004de6:	5cd3      	ldrb	r3, [r2, r3]
 8004de8:	000a      	movs	r2, r1
 8004dea:	40da      	lsrs	r2, r3
 8004dec:	4b61      	ldr	r3, [pc, #388]	@ (8004f74 <HAL_RCC_OscConfig+0x350>)
 8004dee:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8004df0:	4b61      	ldr	r3, [pc, #388]	@ (8004f78 <HAL_RCC_OscConfig+0x354>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	2513      	movs	r5, #19
 8004df6:	197c      	adds	r4, r7, r5
 8004df8:	0018      	movs	r0, r3
 8004dfa:	f7fd fe8d 	bl	8002b18 <HAL_InitTick>
 8004dfe:	0003      	movs	r3, r0
 8004e00:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8004e02:	197b      	adds	r3, r7, r5
 8004e04:	781b      	ldrb	r3, [r3, #0]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d046      	beq.n	8004e98 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8004e0a:	197b      	adds	r3, r7, r5
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	e2d2      	b.n	80053b6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8004e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d027      	beq.n	8004e66 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004e16:	4b52      	ldr	r3, [pc, #328]	@ (8004f60 <HAL_RCC_OscConfig+0x33c>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	2209      	movs	r2, #9
 8004e1c:	4393      	bics	r3, r2
 8004e1e:	0019      	movs	r1, r3
 8004e20:	4b4f      	ldr	r3, [pc, #316]	@ (8004f60 <HAL_RCC_OscConfig+0x33c>)
 8004e22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e24:	430a      	orrs	r2, r1
 8004e26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e28:	f7fd febc 	bl	8002ba4 <HAL_GetTick>
 8004e2c:	0003      	movs	r3, r0
 8004e2e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e30:	e008      	b.n	8004e44 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e32:	f7fd feb7 	bl	8002ba4 <HAL_GetTick>
 8004e36:	0002      	movs	r2, r0
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d901      	bls.n	8004e44 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8004e40:	2303      	movs	r3, #3
 8004e42:	e2b8      	b.n	80053b6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e44:	4b46      	ldr	r3, [pc, #280]	@ (8004f60 <HAL_RCC_OscConfig+0x33c>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	2204      	movs	r2, #4
 8004e4a:	4013      	ands	r3, r2
 8004e4c:	d0f1      	beq.n	8004e32 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e4e:	4b44      	ldr	r3, [pc, #272]	@ (8004f60 <HAL_RCC_OscConfig+0x33c>)
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	4a46      	ldr	r2, [pc, #280]	@ (8004f6c <HAL_RCC_OscConfig+0x348>)
 8004e54:	4013      	ands	r3, r2
 8004e56:	0019      	movs	r1, r3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	691b      	ldr	r3, [r3, #16]
 8004e5c:	021a      	lsls	r2, r3, #8
 8004e5e:	4b40      	ldr	r3, [pc, #256]	@ (8004f60 <HAL_RCC_OscConfig+0x33c>)
 8004e60:	430a      	orrs	r2, r1
 8004e62:	605a      	str	r2, [r3, #4]
 8004e64:	e018      	b.n	8004e98 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e66:	4b3e      	ldr	r3, [pc, #248]	@ (8004f60 <HAL_RCC_OscConfig+0x33c>)
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	4b3d      	ldr	r3, [pc, #244]	@ (8004f60 <HAL_RCC_OscConfig+0x33c>)
 8004e6c:	2101      	movs	r1, #1
 8004e6e:	438a      	bics	r2, r1
 8004e70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e72:	f7fd fe97 	bl	8002ba4 <HAL_GetTick>
 8004e76:	0003      	movs	r3, r0
 8004e78:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004e7a:	e008      	b.n	8004e8e <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e7c:	f7fd fe92 	bl	8002ba4 <HAL_GetTick>
 8004e80:	0002      	movs	r2, r0
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	2b02      	cmp	r3, #2
 8004e88:	d901      	bls.n	8004e8e <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	e293      	b.n	80053b6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004e8e:	4b34      	ldr	r3, [pc, #208]	@ (8004f60 <HAL_RCC_OscConfig+0x33c>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	2204      	movs	r2, #4
 8004e94:	4013      	ands	r3, r2
 8004e96:	d1f1      	bne.n	8004e7c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	2210      	movs	r2, #16
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	d100      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x280>
 8004ea2:	e0a2      	b.n	8004fea <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ea4:	69fb      	ldr	r3, [r7, #28]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d140      	bne.n	8004f2c <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004eaa:	4b2d      	ldr	r3, [pc, #180]	@ (8004f60 <HAL_RCC_OscConfig+0x33c>)
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	2380      	movs	r3, #128	@ 0x80
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	4013      	ands	r3, r2
 8004eb4:	d005      	beq.n	8004ec2 <HAL_RCC_OscConfig+0x29e>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	69db      	ldr	r3, [r3, #28]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d101      	bne.n	8004ec2 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e279      	b.n	80053b6 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ec2:	4b27      	ldr	r3, [pc, #156]	@ (8004f60 <HAL_RCC_OscConfig+0x33c>)
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	4a2d      	ldr	r2, [pc, #180]	@ (8004f7c <HAL_RCC_OscConfig+0x358>)
 8004ec8:	4013      	ands	r3, r2
 8004eca:	0019      	movs	r1, r3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004ed0:	4b23      	ldr	r3, [pc, #140]	@ (8004f60 <HAL_RCC_OscConfig+0x33c>)
 8004ed2:	430a      	orrs	r2, r1
 8004ed4:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ed6:	4b22      	ldr	r3, [pc, #136]	@ (8004f60 <HAL_RCC_OscConfig+0x33c>)
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	021b      	lsls	r3, r3, #8
 8004edc:	0a19      	lsrs	r1, r3, #8
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a1b      	ldr	r3, [r3, #32]
 8004ee2:	061a      	lsls	r2, r3, #24
 8004ee4:	4b1e      	ldr	r3, [pc, #120]	@ (8004f60 <HAL_RCC_OscConfig+0x33c>)
 8004ee6:	430a      	orrs	r2, r1
 8004ee8:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eee:	0b5b      	lsrs	r3, r3, #13
 8004ef0:	3301      	adds	r3, #1
 8004ef2:	2280      	movs	r2, #128	@ 0x80
 8004ef4:	0212      	lsls	r2, r2, #8
 8004ef6:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004ef8:	4b19      	ldr	r3, [pc, #100]	@ (8004f60 <HAL_RCC_OscConfig+0x33c>)
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	091b      	lsrs	r3, r3, #4
 8004efe:	210f      	movs	r1, #15
 8004f00:	400b      	ands	r3, r1
 8004f02:	491b      	ldr	r1, [pc, #108]	@ (8004f70 <HAL_RCC_OscConfig+0x34c>)
 8004f04:	5ccb      	ldrb	r3, [r1, r3]
 8004f06:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004f08:	4b1a      	ldr	r3, [pc, #104]	@ (8004f74 <HAL_RCC_OscConfig+0x350>)
 8004f0a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8004f0c:	4b1a      	ldr	r3, [pc, #104]	@ (8004f78 <HAL_RCC_OscConfig+0x354>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	2513      	movs	r5, #19
 8004f12:	197c      	adds	r4, r7, r5
 8004f14:	0018      	movs	r0, r3
 8004f16:	f7fd fdff 	bl	8002b18 <HAL_InitTick>
 8004f1a:	0003      	movs	r3, r0
 8004f1c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8004f1e:	197b      	adds	r3, r7, r5
 8004f20:	781b      	ldrb	r3, [r3, #0]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d061      	beq.n	8004fea <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8004f26:	197b      	adds	r3, r7, r5
 8004f28:	781b      	ldrb	r3, [r3, #0]
 8004f2a:	e244      	b.n	80053b6 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	69db      	ldr	r3, [r3, #28]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d040      	beq.n	8004fb6 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004f34:	4b0a      	ldr	r3, [pc, #40]	@ (8004f60 <HAL_RCC_OscConfig+0x33c>)
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	4b09      	ldr	r3, [pc, #36]	@ (8004f60 <HAL_RCC_OscConfig+0x33c>)
 8004f3a:	2180      	movs	r1, #128	@ 0x80
 8004f3c:	0049      	lsls	r1, r1, #1
 8004f3e:	430a      	orrs	r2, r1
 8004f40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f42:	f7fd fe2f 	bl	8002ba4 <HAL_GetTick>
 8004f46:	0003      	movs	r3, r0
 8004f48:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004f4a:	e019      	b.n	8004f80 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004f4c:	f7fd fe2a 	bl	8002ba4 <HAL_GetTick>
 8004f50:	0002      	movs	r2, r0
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d912      	bls.n	8004f80 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e22b      	b.n	80053b6 <HAL_RCC_OscConfig+0x792>
 8004f5e:	46c0      	nop			@ (mov r8, r8)
 8004f60:	40021000 	.word	0x40021000
 8004f64:	fffeffff 	.word	0xfffeffff
 8004f68:	fffbffff 	.word	0xfffbffff
 8004f6c:	ffffe0ff 	.word	0xffffe0ff
 8004f70:	0800e11c 	.word	0x0800e11c
 8004f74:	2000002c 	.word	0x2000002c
 8004f78:	20000030 	.word	0x20000030
 8004f7c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004f80:	4bca      	ldr	r3, [pc, #808]	@ (80052ac <HAL_RCC_OscConfig+0x688>)
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	2380      	movs	r3, #128	@ 0x80
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	4013      	ands	r3, r2
 8004f8a:	d0df      	beq.n	8004f4c <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004f8c:	4bc7      	ldr	r3, [pc, #796]	@ (80052ac <HAL_RCC_OscConfig+0x688>)
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	4ac7      	ldr	r2, [pc, #796]	@ (80052b0 <HAL_RCC_OscConfig+0x68c>)
 8004f92:	4013      	ands	r3, r2
 8004f94:	0019      	movs	r1, r3
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004f9a:	4bc4      	ldr	r3, [pc, #784]	@ (80052ac <HAL_RCC_OscConfig+0x688>)
 8004f9c:	430a      	orrs	r2, r1
 8004f9e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004fa0:	4bc2      	ldr	r3, [pc, #776]	@ (80052ac <HAL_RCC_OscConfig+0x688>)
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	021b      	lsls	r3, r3, #8
 8004fa6:	0a19      	lsrs	r1, r3, #8
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6a1b      	ldr	r3, [r3, #32]
 8004fac:	061a      	lsls	r2, r3, #24
 8004fae:	4bbf      	ldr	r3, [pc, #764]	@ (80052ac <HAL_RCC_OscConfig+0x688>)
 8004fb0:	430a      	orrs	r2, r1
 8004fb2:	605a      	str	r2, [r3, #4]
 8004fb4:	e019      	b.n	8004fea <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004fb6:	4bbd      	ldr	r3, [pc, #756]	@ (80052ac <HAL_RCC_OscConfig+0x688>)
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	4bbc      	ldr	r3, [pc, #752]	@ (80052ac <HAL_RCC_OscConfig+0x688>)
 8004fbc:	49bd      	ldr	r1, [pc, #756]	@ (80052b4 <HAL_RCC_OscConfig+0x690>)
 8004fbe:	400a      	ands	r2, r1
 8004fc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fc2:	f7fd fdef 	bl	8002ba4 <HAL_GetTick>
 8004fc6:	0003      	movs	r3, r0
 8004fc8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004fca:	e008      	b.n	8004fde <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004fcc:	f7fd fdea 	bl	8002ba4 <HAL_GetTick>
 8004fd0:	0002      	movs	r2, r0
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	2b02      	cmp	r3, #2
 8004fd8:	d901      	bls.n	8004fde <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8004fda:	2303      	movs	r3, #3
 8004fdc:	e1eb      	b.n	80053b6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004fde:	4bb3      	ldr	r3, [pc, #716]	@ (80052ac <HAL_RCC_OscConfig+0x688>)
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	2380      	movs	r3, #128	@ 0x80
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	d1f0      	bne.n	8004fcc <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	2208      	movs	r2, #8
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	d036      	beq.n	8005062 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	695b      	ldr	r3, [r3, #20]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d019      	beq.n	8005030 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ffc:	4bab      	ldr	r3, [pc, #684]	@ (80052ac <HAL_RCC_OscConfig+0x688>)
 8004ffe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005000:	4baa      	ldr	r3, [pc, #680]	@ (80052ac <HAL_RCC_OscConfig+0x688>)
 8005002:	2101      	movs	r1, #1
 8005004:	430a      	orrs	r2, r1
 8005006:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005008:	f7fd fdcc 	bl	8002ba4 <HAL_GetTick>
 800500c:	0003      	movs	r3, r0
 800500e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005010:	e008      	b.n	8005024 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005012:	f7fd fdc7 	bl	8002ba4 <HAL_GetTick>
 8005016:	0002      	movs	r2, r0
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	1ad3      	subs	r3, r2, r3
 800501c:	2b02      	cmp	r3, #2
 800501e:	d901      	bls.n	8005024 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8005020:	2303      	movs	r3, #3
 8005022:	e1c8      	b.n	80053b6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005024:	4ba1      	ldr	r3, [pc, #644]	@ (80052ac <HAL_RCC_OscConfig+0x688>)
 8005026:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005028:	2202      	movs	r2, #2
 800502a:	4013      	ands	r3, r2
 800502c:	d0f1      	beq.n	8005012 <HAL_RCC_OscConfig+0x3ee>
 800502e:	e018      	b.n	8005062 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005030:	4b9e      	ldr	r3, [pc, #632]	@ (80052ac <HAL_RCC_OscConfig+0x688>)
 8005032:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005034:	4b9d      	ldr	r3, [pc, #628]	@ (80052ac <HAL_RCC_OscConfig+0x688>)
 8005036:	2101      	movs	r1, #1
 8005038:	438a      	bics	r2, r1
 800503a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800503c:	f7fd fdb2 	bl	8002ba4 <HAL_GetTick>
 8005040:	0003      	movs	r3, r0
 8005042:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005044:	e008      	b.n	8005058 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005046:	f7fd fdad 	bl	8002ba4 <HAL_GetTick>
 800504a:	0002      	movs	r2, r0
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	1ad3      	subs	r3, r2, r3
 8005050:	2b02      	cmp	r3, #2
 8005052:	d901      	bls.n	8005058 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8005054:	2303      	movs	r3, #3
 8005056:	e1ae      	b.n	80053b6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005058:	4b94      	ldr	r3, [pc, #592]	@ (80052ac <HAL_RCC_OscConfig+0x688>)
 800505a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800505c:	2202      	movs	r2, #2
 800505e:	4013      	ands	r3, r2
 8005060:	d1f1      	bne.n	8005046 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	2204      	movs	r2, #4
 8005068:	4013      	ands	r3, r2
 800506a:	d100      	bne.n	800506e <HAL_RCC_OscConfig+0x44a>
 800506c:	e0ae      	b.n	80051cc <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800506e:	2023      	movs	r0, #35	@ 0x23
 8005070:	183b      	adds	r3, r7, r0
 8005072:	2200      	movs	r2, #0
 8005074:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005076:	4b8d      	ldr	r3, [pc, #564]	@ (80052ac <HAL_RCC_OscConfig+0x688>)
 8005078:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800507a:	2380      	movs	r3, #128	@ 0x80
 800507c:	055b      	lsls	r3, r3, #21
 800507e:	4013      	ands	r3, r2
 8005080:	d109      	bne.n	8005096 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005082:	4b8a      	ldr	r3, [pc, #552]	@ (80052ac <HAL_RCC_OscConfig+0x688>)
 8005084:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005086:	4b89      	ldr	r3, [pc, #548]	@ (80052ac <HAL_RCC_OscConfig+0x688>)
 8005088:	2180      	movs	r1, #128	@ 0x80
 800508a:	0549      	lsls	r1, r1, #21
 800508c:	430a      	orrs	r2, r1
 800508e:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8005090:	183b      	adds	r3, r7, r0
 8005092:	2201      	movs	r2, #1
 8005094:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005096:	4b88      	ldr	r3, [pc, #544]	@ (80052b8 <HAL_RCC_OscConfig+0x694>)
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	2380      	movs	r3, #128	@ 0x80
 800509c:	005b      	lsls	r3, r3, #1
 800509e:	4013      	ands	r3, r2
 80050a0:	d11a      	bne.n	80050d8 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050a2:	4b85      	ldr	r3, [pc, #532]	@ (80052b8 <HAL_RCC_OscConfig+0x694>)
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	4b84      	ldr	r3, [pc, #528]	@ (80052b8 <HAL_RCC_OscConfig+0x694>)
 80050a8:	2180      	movs	r1, #128	@ 0x80
 80050aa:	0049      	lsls	r1, r1, #1
 80050ac:	430a      	orrs	r2, r1
 80050ae:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050b0:	f7fd fd78 	bl	8002ba4 <HAL_GetTick>
 80050b4:	0003      	movs	r3, r0
 80050b6:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050b8:	e008      	b.n	80050cc <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050ba:	f7fd fd73 	bl	8002ba4 <HAL_GetTick>
 80050be:	0002      	movs	r2, r0
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	1ad3      	subs	r3, r2, r3
 80050c4:	2b64      	cmp	r3, #100	@ 0x64
 80050c6:	d901      	bls.n	80050cc <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 80050c8:	2303      	movs	r3, #3
 80050ca:	e174      	b.n	80053b6 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050cc:	4b7a      	ldr	r3, [pc, #488]	@ (80052b8 <HAL_RCC_OscConfig+0x694>)
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	2380      	movs	r3, #128	@ 0x80
 80050d2:	005b      	lsls	r3, r3, #1
 80050d4:	4013      	ands	r3, r2
 80050d6:	d0f0      	beq.n	80050ba <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	689a      	ldr	r2, [r3, #8]
 80050dc:	2380      	movs	r3, #128	@ 0x80
 80050de:	005b      	lsls	r3, r3, #1
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d107      	bne.n	80050f4 <HAL_RCC_OscConfig+0x4d0>
 80050e4:	4b71      	ldr	r3, [pc, #452]	@ (80052ac <HAL_RCC_OscConfig+0x688>)
 80050e6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80050e8:	4b70      	ldr	r3, [pc, #448]	@ (80052ac <HAL_RCC_OscConfig+0x688>)
 80050ea:	2180      	movs	r1, #128	@ 0x80
 80050ec:	0049      	lsls	r1, r1, #1
 80050ee:	430a      	orrs	r2, r1
 80050f0:	651a      	str	r2, [r3, #80]	@ 0x50
 80050f2:	e031      	b.n	8005158 <HAL_RCC_OscConfig+0x534>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d10c      	bne.n	8005116 <HAL_RCC_OscConfig+0x4f2>
 80050fc:	4b6b      	ldr	r3, [pc, #428]	@ (80052ac <HAL_RCC_OscConfig+0x688>)
 80050fe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005100:	4b6a      	ldr	r3, [pc, #424]	@ (80052ac <HAL_RCC_OscConfig+0x688>)
 8005102:	496c      	ldr	r1, [pc, #432]	@ (80052b4 <HAL_RCC_OscConfig+0x690>)
 8005104:	400a      	ands	r2, r1
 8005106:	651a      	str	r2, [r3, #80]	@ 0x50
 8005108:	4b68      	ldr	r3, [pc, #416]	@ (80052ac <HAL_RCC_OscConfig+0x688>)
 800510a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800510c:	4b67      	ldr	r3, [pc, #412]	@ (80052ac <HAL_RCC_OscConfig+0x688>)
 800510e:	496b      	ldr	r1, [pc, #428]	@ (80052bc <HAL_RCC_OscConfig+0x698>)
 8005110:	400a      	ands	r2, r1
 8005112:	651a      	str	r2, [r3, #80]	@ 0x50
 8005114:	e020      	b.n	8005158 <HAL_RCC_OscConfig+0x534>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	689a      	ldr	r2, [r3, #8]
 800511a:	23a0      	movs	r3, #160	@ 0xa0
 800511c:	00db      	lsls	r3, r3, #3
 800511e:	429a      	cmp	r2, r3
 8005120:	d10e      	bne.n	8005140 <HAL_RCC_OscConfig+0x51c>
 8005122:	4b62      	ldr	r3, [pc, #392]	@ (80052ac <HAL_RCC_OscConfig+0x688>)
 8005124:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005126:	4b61      	ldr	r3, [pc, #388]	@ (80052ac <HAL_RCC_OscConfig+0x688>)
 8005128:	2180      	movs	r1, #128	@ 0x80
 800512a:	00c9      	lsls	r1, r1, #3
 800512c:	430a      	orrs	r2, r1
 800512e:	651a      	str	r2, [r3, #80]	@ 0x50
 8005130:	4b5e      	ldr	r3, [pc, #376]	@ (80052ac <HAL_RCC_OscConfig+0x688>)
 8005132:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005134:	4b5d      	ldr	r3, [pc, #372]	@ (80052ac <HAL_RCC_OscConfig+0x688>)
 8005136:	2180      	movs	r1, #128	@ 0x80
 8005138:	0049      	lsls	r1, r1, #1
 800513a:	430a      	orrs	r2, r1
 800513c:	651a      	str	r2, [r3, #80]	@ 0x50
 800513e:	e00b      	b.n	8005158 <HAL_RCC_OscConfig+0x534>
 8005140:	4b5a      	ldr	r3, [pc, #360]	@ (80052ac <HAL_RCC_OscConfig+0x688>)
 8005142:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005144:	4b59      	ldr	r3, [pc, #356]	@ (80052ac <HAL_RCC_OscConfig+0x688>)
 8005146:	495b      	ldr	r1, [pc, #364]	@ (80052b4 <HAL_RCC_OscConfig+0x690>)
 8005148:	400a      	ands	r2, r1
 800514a:	651a      	str	r2, [r3, #80]	@ 0x50
 800514c:	4b57      	ldr	r3, [pc, #348]	@ (80052ac <HAL_RCC_OscConfig+0x688>)
 800514e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005150:	4b56      	ldr	r3, [pc, #344]	@ (80052ac <HAL_RCC_OscConfig+0x688>)
 8005152:	495a      	ldr	r1, [pc, #360]	@ (80052bc <HAL_RCC_OscConfig+0x698>)
 8005154:	400a      	ands	r2, r1
 8005156:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d015      	beq.n	800518c <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005160:	f7fd fd20 	bl	8002ba4 <HAL_GetTick>
 8005164:	0003      	movs	r3, r0
 8005166:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005168:	e009      	b.n	800517e <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800516a:	f7fd fd1b 	bl	8002ba4 <HAL_GetTick>
 800516e:	0002      	movs	r2, r0
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	1ad3      	subs	r3, r2, r3
 8005174:	4a52      	ldr	r2, [pc, #328]	@ (80052c0 <HAL_RCC_OscConfig+0x69c>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d901      	bls.n	800517e <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 800517a:	2303      	movs	r3, #3
 800517c:	e11b      	b.n	80053b6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800517e:	4b4b      	ldr	r3, [pc, #300]	@ (80052ac <HAL_RCC_OscConfig+0x688>)
 8005180:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005182:	2380      	movs	r3, #128	@ 0x80
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	4013      	ands	r3, r2
 8005188:	d0ef      	beq.n	800516a <HAL_RCC_OscConfig+0x546>
 800518a:	e014      	b.n	80051b6 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800518c:	f7fd fd0a 	bl	8002ba4 <HAL_GetTick>
 8005190:	0003      	movs	r3, r0
 8005192:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005194:	e009      	b.n	80051aa <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005196:	f7fd fd05 	bl	8002ba4 <HAL_GetTick>
 800519a:	0002      	movs	r2, r0
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	1ad3      	subs	r3, r2, r3
 80051a0:	4a47      	ldr	r2, [pc, #284]	@ (80052c0 <HAL_RCC_OscConfig+0x69c>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d901      	bls.n	80051aa <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 80051a6:	2303      	movs	r3, #3
 80051a8:	e105      	b.n	80053b6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80051aa:	4b40      	ldr	r3, [pc, #256]	@ (80052ac <HAL_RCC_OscConfig+0x688>)
 80051ac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80051ae:	2380      	movs	r3, #128	@ 0x80
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	4013      	ands	r3, r2
 80051b4:	d1ef      	bne.n	8005196 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80051b6:	2323      	movs	r3, #35	@ 0x23
 80051b8:	18fb      	adds	r3, r7, r3
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d105      	bne.n	80051cc <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051c0:	4b3a      	ldr	r3, [pc, #232]	@ (80052ac <HAL_RCC_OscConfig+0x688>)
 80051c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80051c4:	4b39      	ldr	r3, [pc, #228]	@ (80052ac <HAL_RCC_OscConfig+0x688>)
 80051c6:	493f      	ldr	r1, [pc, #252]	@ (80052c4 <HAL_RCC_OscConfig+0x6a0>)
 80051c8:	400a      	ands	r2, r1
 80051ca:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2220      	movs	r2, #32
 80051d2:	4013      	ands	r3, r2
 80051d4:	d049      	beq.n	800526a <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	699b      	ldr	r3, [r3, #24]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d026      	beq.n	800522c <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80051de:	4b33      	ldr	r3, [pc, #204]	@ (80052ac <HAL_RCC_OscConfig+0x688>)
 80051e0:	689a      	ldr	r2, [r3, #8]
 80051e2:	4b32      	ldr	r3, [pc, #200]	@ (80052ac <HAL_RCC_OscConfig+0x688>)
 80051e4:	2101      	movs	r1, #1
 80051e6:	430a      	orrs	r2, r1
 80051e8:	609a      	str	r2, [r3, #8]
 80051ea:	4b30      	ldr	r3, [pc, #192]	@ (80052ac <HAL_RCC_OscConfig+0x688>)
 80051ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80051ee:	4b2f      	ldr	r3, [pc, #188]	@ (80052ac <HAL_RCC_OscConfig+0x688>)
 80051f0:	2101      	movs	r1, #1
 80051f2:	430a      	orrs	r2, r1
 80051f4:	635a      	str	r2, [r3, #52]	@ 0x34
 80051f6:	4b34      	ldr	r3, [pc, #208]	@ (80052c8 <HAL_RCC_OscConfig+0x6a4>)
 80051f8:	6a1a      	ldr	r2, [r3, #32]
 80051fa:	4b33      	ldr	r3, [pc, #204]	@ (80052c8 <HAL_RCC_OscConfig+0x6a4>)
 80051fc:	2180      	movs	r1, #128	@ 0x80
 80051fe:	0189      	lsls	r1, r1, #6
 8005200:	430a      	orrs	r2, r1
 8005202:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005204:	f7fd fcce 	bl	8002ba4 <HAL_GetTick>
 8005208:	0003      	movs	r3, r0
 800520a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800520c:	e008      	b.n	8005220 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800520e:	f7fd fcc9 	bl	8002ba4 <HAL_GetTick>
 8005212:	0002      	movs	r2, r0
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	1ad3      	subs	r3, r2, r3
 8005218:	2b02      	cmp	r3, #2
 800521a:	d901      	bls.n	8005220 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 800521c:	2303      	movs	r3, #3
 800521e:	e0ca      	b.n	80053b6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005220:	4b22      	ldr	r3, [pc, #136]	@ (80052ac <HAL_RCC_OscConfig+0x688>)
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	2202      	movs	r2, #2
 8005226:	4013      	ands	r3, r2
 8005228:	d0f1      	beq.n	800520e <HAL_RCC_OscConfig+0x5ea>
 800522a:	e01e      	b.n	800526a <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800522c:	4b1f      	ldr	r3, [pc, #124]	@ (80052ac <HAL_RCC_OscConfig+0x688>)
 800522e:	689a      	ldr	r2, [r3, #8]
 8005230:	4b1e      	ldr	r3, [pc, #120]	@ (80052ac <HAL_RCC_OscConfig+0x688>)
 8005232:	2101      	movs	r1, #1
 8005234:	438a      	bics	r2, r1
 8005236:	609a      	str	r2, [r3, #8]
 8005238:	4b23      	ldr	r3, [pc, #140]	@ (80052c8 <HAL_RCC_OscConfig+0x6a4>)
 800523a:	6a1a      	ldr	r2, [r3, #32]
 800523c:	4b22      	ldr	r3, [pc, #136]	@ (80052c8 <HAL_RCC_OscConfig+0x6a4>)
 800523e:	4923      	ldr	r1, [pc, #140]	@ (80052cc <HAL_RCC_OscConfig+0x6a8>)
 8005240:	400a      	ands	r2, r1
 8005242:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005244:	f7fd fcae 	bl	8002ba4 <HAL_GetTick>
 8005248:	0003      	movs	r3, r0
 800524a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800524c:	e008      	b.n	8005260 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800524e:	f7fd fca9 	bl	8002ba4 <HAL_GetTick>
 8005252:	0002      	movs	r2, r0
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	1ad3      	subs	r3, r2, r3
 8005258:	2b02      	cmp	r3, #2
 800525a:	d901      	bls.n	8005260 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 800525c:	2303      	movs	r3, #3
 800525e:	e0aa      	b.n	80053b6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005260:	4b12      	ldr	r3, [pc, #72]	@ (80052ac <HAL_RCC_OscConfig+0x688>)
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	2202      	movs	r2, #2
 8005266:	4013      	ands	r3, r2
 8005268:	d1f1      	bne.n	800524e <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800526e:	2b00      	cmp	r3, #0
 8005270:	d100      	bne.n	8005274 <HAL_RCC_OscConfig+0x650>
 8005272:	e09f      	b.n	80053b4 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	2b0c      	cmp	r3, #12
 8005278:	d100      	bne.n	800527c <HAL_RCC_OscConfig+0x658>
 800527a:	e078      	b.n	800536e <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005280:	2b02      	cmp	r3, #2
 8005282:	d159      	bne.n	8005338 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005284:	4b09      	ldr	r3, [pc, #36]	@ (80052ac <HAL_RCC_OscConfig+0x688>)
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	4b08      	ldr	r3, [pc, #32]	@ (80052ac <HAL_RCC_OscConfig+0x688>)
 800528a:	4911      	ldr	r1, [pc, #68]	@ (80052d0 <HAL_RCC_OscConfig+0x6ac>)
 800528c:	400a      	ands	r2, r1
 800528e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005290:	f7fd fc88 	bl	8002ba4 <HAL_GetTick>
 8005294:	0003      	movs	r3, r0
 8005296:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005298:	e01c      	b.n	80052d4 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800529a:	f7fd fc83 	bl	8002ba4 <HAL_GetTick>
 800529e:	0002      	movs	r2, r0
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	1ad3      	subs	r3, r2, r3
 80052a4:	2b02      	cmp	r3, #2
 80052a6:	d915      	bls.n	80052d4 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 80052a8:	2303      	movs	r3, #3
 80052aa:	e084      	b.n	80053b6 <HAL_RCC_OscConfig+0x792>
 80052ac:	40021000 	.word	0x40021000
 80052b0:	ffff1fff 	.word	0xffff1fff
 80052b4:	fffffeff 	.word	0xfffffeff
 80052b8:	40007000 	.word	0x40007000
 80052bc:	fffffbff 	.word	0xfffffbff
 80052c0:	00001388 	.word	0x00001388
 80052c4:	efffffff 	.word	0xefffffff
 80052c8:	40010000 	.word	0x40010000
 80052cc:	ffffdfff 	.word	0xffffdfff
 80052d0:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80052d4:	4b3a      	ldr	r3, [pc, #232]	@ (80053c0 <HAL_RCC_OscConfig+0x79c>)
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	2380      	movs	r3, #128	@ 0x80
 80052da:	049b      	lsls	r3, r3, #18
 80052dc:	4013      	ands	r3, r2
 80052de:	d1dc      	bne.n	800529a <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80052e0:	4b37      	ldr	r3, [pc, #220]	@ (80053c0 <HAL_RCC_OscConfig+0x79c>)
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	4a37      	ldr	r2, [pc, #220]	@ (80053c4 <HAL_RCC_OscConfig+0x7a0>)
 80052e6:	4013      	ands	r3, r2
 80052e8:	0019      	movs	r1, r3
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052f2:	431a      	orrs	r2, r3
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052f8:	431a      	orrs	r2, r3
 80052fa:	4b31      	ldr	r3, [pc, #196]	@ (80053c0 <HAL_RCC_OscConfig+0x79c>)
 80052fc:	430a      	orrs	r2, r1
 80052fe:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005300:	4b2f      	ldr	r3, [pc, #188]	@ (80053c0 <HAL_RCC_OscConfig+0x79c>)
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	4b2e      	ldr	r3, [pc, #184]	@ (80053c0 <HAL_RCC_OscConfig+0x79c>)
 8005306:	2180      	movs	r1, #128	@ 0x80
 8005308:	0449      	lsls	r1, r1, #17
 800530a:	430a      	orrs	r2, r1
 800530c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800530e:	f7fd fc49 	bl	8002ba4 <HAL_GetTick>
 8005312:	0003      	movs	r3, r0
 8005314:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005316:	e008      	b.n	800532a <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005318:	f7fd fc44 	bl	8002ba4 <HAL_GetTick>
 800531c:	0002      	movs	r2, r0
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	1ad3      	subs	r3, r2, r3
 8005322:	2b02      	cmp	r3, #2
 8005324:	d901      	bls.n	800532a <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8005326:	2303      	movs	r3, #3
 8005328:	e045      	b.n	80053b6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800532a:	4b25      	ldr	r3, [pc, #148]	@ (80053c0 <HAL_RCC_OscConfig+0x79c>)
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	2380      	movs	r3, #128	@ 0x80
 8005330:	049b      	lsls	r3, r3, #18
 8005332:	4013      	ands	r3, r2
 8005334:	d0f0      	beq.n	8005318 <HAL_RCC_OscConfig+0x6f4>
 8005336:	e03d      	b.n	80053b4 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005338:	4b21      	ldr	r3, [pc, #132]	@ (80053c0 <HAL_RCC_OscConfig+0x79c>)
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	4b20      	ldr	r3, [pc, #128]	@ (80053c0 <HAL_RCC_OscConfig+0x79c>)
 800533e:	4922      	ldr	r1, [pc, #136]	@ (80053c8 <HAL_RCC_OscConfig+0x7a4>)
 8005340:	400a      	ands	r2, r1
 8005342:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005344:	f7fd fc2e 	bl	8002ba4 <HAL_GetTick>
 8005348:	0003      	movs	r3, r0
 800534a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800534c:	e008      	b.n	8005360 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800534e:	f7fd fc29 	bl	8002ba4 <HAL_GetTick>
 8005352:	0002      	movs	r2, r0
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	1ad3      	subs	r3, r2, r3
 8005358:	2b02      	cmp	r3, #2
 800535a:	d901      	bls.n	8005360 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 800535c:	2303      	movs	r3, #3
 800535e:	e02a      	b.n	80053b6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005360:	4b17      	ldr	r3, [pc, #92]	@ (80053c0 <HAL_RCC_OscConfig+0x79c>)
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	2380      	movs	r3, #128	@ 0x80
 8005366:	049b      	lsls	r3, r3, #18
 8005368:	4013      	ands	r3, r2
 800536a:	d1f0      	bne.n	800534e <HAL_RCC_OscConfig+0x72a>
 800536c:	e022      	b.n	80053b4 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005372:	2b01      	cmp	r3, #1
 8005374:	d101      	bne.n	800537a <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	e01d      	b.n	80053b6 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800537a:	4b11      	ldr	r3, [pc, #68]	@ (80053c0 <HAL_RCC_OscConfig+0x79c>)
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005380:	69ba      	ldr	r2, [r7, #24]
 8005382:	2380      	movs	r3, #128	@ 0x80
 8005384:	025b      	lsls	r3, r3, #9
 8005386:	401a      	ands	r2, r3
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800538c:	429a      	cmp	r2, r3
 800538e:	d10f      	bne.n	80053b0 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005390:	69ba      	ldr	r2, [r7, #24]
 8005392:	23f0      	movs	r3, #240	@ 0xf0
 8005394:	039b      	lsls	r3, r3, #14
 8005396:	401a      	ands	r2, r3
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800539c:	429a      	cmp	r2, r3
 800539e:	d107      	bne.n	80053b0 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80053a0:	69ba      	ldr	r2, [r7, #24]
 80053a2:	23c0      	movs	r3, #192	@ 0xc0
 80053a4:	041b      	lsls	r3, r3, #16
 80053a6:	401a      	ands	r2, r3
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d001      	beq.n	80053b4 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	e000      	b.n	80053b6 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 80053b4:	2300      	movs	r3, #0
}
 80053b6:	0018      	movs	r0, r3
 80053b8:	46bd      	mov	sp, r7
 80053ba:	b00a      	add	sp, #40	@ 0x28
 80053bc:	bdb0      	pop	{r4, r5, r7, pc}
 80053be:	46c0      	nop			@ (mov r8, r8)
 80053c0:	40021000 	.word	0x40021000
 80053c4:	ff02ffff 	.word	0xff02ffff
 80053c8:	feffffff 	.word	0xfeffffff

080053cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80053cc:	b5b0      	push	{r4, r5, r7, lr}
 80053ce:	b084      	sub	sp, #16
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d101      	bne.n	80053e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80053dc:	2301      	movs	r3, #1
 80053de:	e128      	b.n	8005632 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80053e0:	4b96      	ldr	r3, [pc, #600]	@ (800563c <HAL_RCC_ClockConfig+0x270>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	2201      	movs	r2, #1
 80053e6:	4013      	ands	r3, r2
 80053e8:	683a      	ldr	r2, [r7, #0]
 80053ea:	429a      	cmp	r2, r3
 80053ec:	d91e      	bls.n	800542c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053ee:	4b93      	ldr	r3, [pc, #588]	@ (800563c <HAL_RCC_ClockConfig+0x270>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	2201      	movs	r2, #1
 80053f4:	4393      	bics	r3, r2
 80053f6:	0019      	movs	r1, r3
 80053f8:	4b90      	ldr	r3, [pc, #576]	@ (800563c <HAL_RCC_ClockConfig+0x270>)
 80053fa:	683a      	ldr	r2, [r7, #0]
 80053fc:	430a      	orrs	r2, r1
 80053fe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005400:	f7fd fbd0 	bl	8002ba4 <HAL_GetTick>
 8005404:	0003      	movs	r3, r0
 8005406:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005408:	e009      	b.n	800541e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800540a:	f7fd fbcb 	bl	8002ba4 <HAL_GetTick>
 800540e:	0002      	movs	r2, r0
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	1ad3      	subs	r3, r2, r3
 8005414:	4a8a      	ldr	r2, [pc, #552]	@ (8005640 <HAL_RCC_ClockConfig+0x274>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d901      	bls.n	800541e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800541a:	2303      	movs	r3, #3
 800541c:	e109      	b.n	8005632 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800541e:	4b87      	ldr	r3, [pc, #540]	@ (800563c <HAL_RCC_ClockConfig+0x270>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	2201      	movs	r2, #1
 8005424:	4013      	ands	r3, r2
 8005426:	683a      	ldr	r2, [r7, #0]
 8005428:	429a      	cmp	r2, r3
 800542a:	d1ee      	bne.n	800540a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	2202      	movs	r2, #2
 8005432:	4013      	ands	r3, r2
 8005434:	d009      	beq.n	800544a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005436:	4b83      	ldr	r3, [pc, #524]	@ (8005644 <HAL_RCC_ClockConfig+0x278>)
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	22f0      	movs	r2, #240	@ 0xf0
 800543c:	4393      	bics	r3, r2
 800543e:	0019      	movs	r1, r3
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	689a      	ldr	r2, [r3, #8]
 8005444:	4b7f      	ldr	r3, [pc, #508]	@ (8005644 <HAL_RCC_ClockConfig+0x278>)
 8005446:	430a      	orrs	r2, r1
 8005448:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	2201      	movs	r2, #1
 8005450:	4013      	ands	r3, r2
 8005452:	d100      	bne.n	8005456 <HAL_RCC_ClockConfig+0x8a>
 8005454:	e089      	b.n	800556a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	2b02      	cmp	r3, #2
 800545c:	d107      	bne.n	800546e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800545e:	4b79      	ldr	r3, [pc, #484]	@ (8005644 <HAL_RCC_ClockConfig+0x278>)
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	2380      	movs	r3, #128	@ 0x80
 8005464:	029b      	lsls	r3, r3, #10
 8005466:	4013      	ands	r3, r2
 8005468:	d120      	bne.n	80054ac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	e0e1      	b.n	8005632 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	2b03      	cmp	r3, #3
 8005474:	d107      	bne.n	8005486 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005476:	4b73      	ldr	r3, [pc, #460]	@ (8005644 <HAL_RCC_ClockConfig+0x278>)
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	2380      	movs	r3, #128	@ 0x80
 800547c:	049b      	lsls	r3, r3, #18
 800547e:	4013      	ands	r3, r2
 8005480:	d114      	bne.n	80054ac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	e0d5      	b.n	8005632 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	2b01      	cmp	r3, #1
 800548c:	d106      	bne.n	800549c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800548e:	4b6d      	ldr	r3, [pc, #436]	@ (8005644 <HAL_RCC_ClockConfig+0x278>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	2204      	movs	r2, #4
 8005494:	4013      	ands	r3, r2
 8005496:	d109      	bne.n	80054ac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	e0ca      	b.n	8005632 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800549c:	4b69      	ldr	r3, [pc, #420]	@ (8005644 <HAL_RCC_ClockConfig+0x278>)
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	2380      	movs	r3, #128	@ 0x80
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	4013      	ands	r3, r2
 80054a6:	d101      	bne.n	80054ac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	e0c2      	b.n	8005632 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80054ac:	4b65      	ldr	r3, [pc, #404]	@ (8005644 <HAL_RCC_ClockConfig+0x278>)
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	2203      	movs	r2, #3
 80054b2:	4393      	bics	r3, r2
 80054b4:	0019      	movs	r1, r3
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	685a      	ldr	r2, [r3, #4]
 80054ba:	4b62      	ldr	r3, [pc, #392]	@ (8005644 <HAL_RCC_ClockConfig+0x278>)
 80054bc:	430a      	orrs	r2, r1
 80054be:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80054c0:	f7fd fb70 	bl	8002ba4 <HAL_GetTick>
 80054c4:	0003      	movs	r3, r0
 80054c6:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	2b02      	cmp	r3, #2
 80054ce:	d111      	bne.n	80054f4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80054d0:	e009      	b.n	80054e6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054d2:	f7fd fb67 	bl	8002ba4 <HAL_GetTick>
 80054d6:	0002      	movs	r2, r0
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	1ad3      	subs	r3, r2, r3
 80054dc:	4a58      	ldr	r2, [pc, #352]	@ (8005640 <HAL_RCC_ClockConfig+0x274>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d901      	bls.n	80054e6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80054e2:	2303      	movs	r3, #3
 80054e4:	e0a5      	b.n	8005632 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80054e6:	4b57      	ldr	r3, [pc, #348]	@ (8005644 <HAL_RCC_ClockConfig+0x278>)
 80054e8:	68db      	ldr	r3, [r3, #12]
 80054ea:	220c      	movs	r2, #12
 80054ec:	4013      	ands	r3, r2
 80054ee:	2b08      	cmp	r3, #8
 80054f0:	d1ef      	bne.n	80054d2 <HAL_RCC_ClockConfig+0x106>
 80054f2:	e03a      	b.n	800556a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	2b03      	cmp	r3, #3
 80054fa:	d111      	bne.n	8005520 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80054fc:	e009      	b.n	8005512 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054fe:	f7fd fb51 	bl	8002ba4 <HAL_GetTick>
 8005502:	0002      	movs	r2, r0
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	1ad3      	subs	r3, r2, r3
 8005508:	4a4d      	ldr	r2, [pc, #308]	@ (8005640 <HAL_RCC_ClockConfig+0x274>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d901      	bls.n	8005512 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800550e:	2303      	movs	r3, #3
 8005510:	e08f      	b.n	8005632 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005512:	4b4c      	ldr	r3, [pc, #304]	@ (8005644 <HAL_RCC_ClockConfig+0x278>)
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	220c      	movs	r2, #12
 8005518:	4013      	ands	r3, r2
 800551a:	2b0c      	cmp	r3, #12
 800551c:	d1ef      	bne.n	80054fe <HAL_RCC_ClockConfig+0x132>
 800551e:	e024      	b.n	800556a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	2b01      	cmp	r3, #1
 8005526:	d11b      	bne.n	8005560 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005528:	e009      	b.n	800553e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800552a:	f7fd fb3b 	bl	8002ba4 <HAL_GetTick>
 800552e:	0002      	movs	r2, r0
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	1ad3      	subs	r3, r2, r3
 8005534:	4a42      	ldr	r2, [pc, #264]	@ (8005640 <HAL_RCC_ClockConfig+0x274>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d901      	bls.n	800553e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800553a:	2303      	movs	r3, #3
 800553c:	e079      	b.n	8005632 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800553e:	4b41      	ldr	r3, [pc, #260]	@ (8005644 <HAL_RCC_ClockConfig+0x278>)
 8005540:	68db      	ldr	r3, [r3, #12]
 8005542:	220c      	movs	r2, #12
 8005544:	4013      	ands	r3, r2
 8005546:	2b04      	cmp	r3, #4
 8005548:	d1ef      	bne.n	800552a <HAL_RCC_ClockConfig+0x15e>
 800554a:	e00e      	b.n	800556a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800554c:	f7fd fb2a 	bl	8002ba4 <HAL_GetTick>
 8005550:	0002      	movs	r2, r0
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	1ad3      	subs	r3, r2, r3
 8005556:	4a3a      	ldr	r2, [pc, #232]	@ (8005640 <HAL_RCC_ClockConfig+0x274>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d901      	bls.n	8005560 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800555c:	2303      	movs	r3, #3
 800555e:	e068      	b.n	8005632 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005560:	4b38      	ldr	r3, [pc, #224]	@ (8005644 <HAL_RCC_ClockConfig+0x278>)
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	220c      	movs	r2, #12
 8005566:	4013      	ands	r3, r2
 8005568:	d1f0      	bne.n	800554c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800556a:	4b34      	ldr	r3, [pc, #208]	@ (800563c <HAL_RCC_ClockConfig+0x270>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	2201      	movs	r2, #1
 8005570:	4013      	ands	r3, r2
 8005572:	683a      	ldr	r2, [r7, #0]
 8005574:	429a      	cmp	r2, r3
 8005576:	d21e      	bcs.n	80055b6 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005578:	4b30      	ldr	r3, [pc, #192]	@ (800563c <HAL_RCC_ClockConfig+0x270>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	2201      	movs	r2, #1
 800557e:	4393      	bics	r3, r2
 8005580:	0019      	movs	r1, r3
 8005582:	4b2e      	ldr	r3, [pc, #184]	@ (800563c <HAL_RCC_ClockConfig+0x270>)
 8005584:	683a      	ldr	r2, [r7, #0]
 8005586:	430a      	orrs	r2, r1
 8005588:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800558a:	f7fd fb0b 	bl	8002ba4 <HAL_GetTick>
 800558e:	0003      	movs	r3, r0
 8005590:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005592:	e009      	b.n	80055a8 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005594:	f7fd fb06 	bl	8002ba4 <HAL_GetTick>
 8005598:	0002      	movs	r2, r0
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	1ad3      	subs	r3, r2, r3
 800559e:	4a28      	ldr	r2, [pc, #160]	@ (8005640 <HAL_RCC_ClockConfig+0x274>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d901      	bls.n	80055a8 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80055a4:	2303      	movs	r3, #3
 80055a6:	e044      	b.n	8005632 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055a8:	4b24      	ldr	r3, [pc, #144]	@ (800563c <HAL_RCC_ClockConfig+0x270>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	2201      	movs	r2, #1
 80055ae:	4013      	ands	r3, r2
 80055b0:	683a      	ldr	r2, [r7, #0]
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d1ee      	bne.n	8005594 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	2204      	movs	r2, #4
 80055bc:	4013      	ands	r3, r2
 80055be:	d009      	beq.n	80055d4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055c0:	4b20      	ldr	r3, [pc, #128]	@ (8005644 <HAL_RCC_ClockConfig+0x278>)
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	4a20      	ldr	r2, [pc, #128]	@ (8005648 <HAL_RCC_ClockConfig+0x27c>)
 80055c6:	4013      	ands	r3, r2
 80055c8:	0019      	movs	r1, r3
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	68da      	ldr	r2, [r3, #12]
 80055ce:	4b1d      	ldr	r3, [pc, #116]	@ (8005644 <HAL_RCC_ClockConfig+0x278>)
 80055d0:	430a      	orrs	r2, r1
 80055d2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	2208      	movs	r2, #8
 80055da:	4013      	ands	r3, r2
 80055dc:	d00a      	beq.n	80055f4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80055de:	4b19      	ldr	r3, [pc, #100]	@ (8005644 <HAL_RCC_ClockConfig+0x278>)
 80055e0:	68db      	ldr	r3, [r3, #12]
 80055e2:	4a1a      	ldr	r2, [pc, #104]	@ (800564c <HAL_RCC_ClockConfig+0x280>)
 80055e4:	4013      	ands	r3, r2
 80055e6:	0019      	movs	r1, r3
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	691b      	ldr	r3, [r3, #16]
 80055ec:	00da      	lsls	r2, r3, #3
 80055ee:	4b15      	ldr	r3, [pc, #84]	@ (8005644 <HAL_RCC_ClockConfig+0x278>)
 80055f0:	430a      	orrs	r2, r1
 80055f2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80055f4:	f000 f832 	bl	800565c <HAL_RCC_GetSysClockFreq>
 80055f8:	0001      	movs	r1, r0
 80055fa:	4b12      	ldr	r3, [pc, #72]	@ (8005644 <HAL_RCC_ClockConfig+0x278>)
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	091b      	lsrs	r3, r3, #4
 8005600:	220f      	movs	r2, #15
 8005602:	4013      	ands	r3, r2
 8005604:	4a12      	ldr	r2, [pc, #72]	@ (8005650 <HAL_RCC_ClockConfig+0x284>)
 8005606:	5cd3      	ldrb	r3, [r2, r3]
 8005608:	000a      	movs	r2, r1
 800560a:	40da      	lsrs	r2, r3
 800560c:	4b11      	ldr	r3, [pc, #68]	@ (8005654 <HAL_RCC_ClockConfig+0x288>)
 800560e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005610:	4b11      	ldr	r3, [pc, #68]	@ (8005658 <HAL_RCC_ClockConfig+0x28c>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	250b      	movs	r5, #11
 8005616:	197c      	adds	r4, r7, r5
 8005618:	0018      	movs	r0, r3
 800561a:	f7fd fa7d 	bl	8002b18 <HAL_InitTick>
 800561e:	0003      	movs	r3, r0
 8005620:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8005622:	197b      	adds	r3, r7, r5
 8005624:	781b      	ldrb	r3, [r3, #0]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d002      	beq.n	8005630 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800562a:	197b      	adds	r3, r7, r5
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	e000      	b.n	8005632 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8005630:	2300      	movs	r3, #0
}
 8005632:	0018      	movs	r0, r3
 8005634:	46bd      	mov	sp, r7
 8005636:	b004      	add	sp, #16
 8005638:	bdb0      	pop	{r4, r5, r7, pc}
 800563a:	46c0      	nop			@ (mov r8, r8)
 800563c:	40022000 	.word	0x40022000
 8005640:	00001388 	.word	0x00001388
 8005644:	40021000 	.word	0x40021000
 8005648:	fffff8ff 	.word	0xfffff8ff
 800564c:	ffffc7ff 	.word	0xffffc7ff
 8005650:	0800e11c 	.word	0x0800e11c
 8005654:	2000002c 	.word	0x2000002c
 8005658:	20000030 	.word	0x20000030

0800565c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b086      	sub	sp, #24
 8005660:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8005662:	4b3c      	ldr	r3, [pc, #240]	@ (8005754 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	220c      	movs	r2, #12
 800566c:	4013      	ands	r3, r2
 800566e:	2b0c      	cmp	r3, #12
 8005670:	d013      	beq.n	800569a <HAL_RCC_GetSysClockFreq+0x3e>
 8005672:	d85c      	bhi.n	800572e <HAL_RCC_GetSysClockFreq+0xd2>
 8005674:	2b04      	cmp	r3, #4
 8005676:	d002      	beq.n	800567e <HAL_RCC_GetSysClockFreq+0x22>
 8005678:	2b08      	cmp	r3, #8
 800567a:	d00b      	beq.n	8005694 <HAL_RCC_GetSysClockFreq+0x38>
 800567c:	e057      	b.n	800572e <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800567e:	4b35      	ldr	r3, [pc, #212]	@ (8005754 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	2210      	movs	r2, #16
 8005684:	4013      	ands	r3, r2
 8005686:	d002      	beq.n	800568e <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8005688:	4b33      	ldr	r3, [pc, #204]	@ (8005758 <HAL_RCC_GetSysClockFreq+0xfc>)
 800568a:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800568c:	e05d      	b.n	800574a <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 800568e:	4b33      	ldr	r3, [pc, #204]	@ (800575c <HAL_RCC_GetSysClockFreq+0x100>)
 8005690:	613b      	str	r3, [r7, #16]
      break;
 8005692:	e05a      	b.n	800574a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005694:	4b32      	ldr	r3, [pc, #200]	@ (8005760 <HAL_RCC_GetSysClockFreq+0x104>)
 8005696:	613b      	str	r3, [r7, #16]
      break;
 8005698:	e057      	b.n	800574a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	0c9b      	lsrs	r3, r3, #18
 800569e:	220f      	movs	r2, #15
 80056a0:	4013      	ands	r3, r2
 80056a2:	4a30      	ldr	r2, [pc, #192]	@ (8005764 <HAL_RCC_GetSysClockFreq+0x108>)
 80056a4:	5cd3      	ldrb	r3, [r2, r3]
 80056a6:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	0d9b      	lsrs	r3, r3, #22
 80056ac:	2203      	movs	r2, #3
 80056ae:	4013      	ands	r3, r2
 80056b0:	3301      	adds	r3, #1
 80056b2:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80056b4:	4b27      	ldr	r3, [pc, #156]	@ (8005754 <HAL_RCC_GetSysClockFreq+0xf8>)
 80056b6:	68da      	ldr	r2, [r3, #12]
 80056b8:	2380      	movs	r3, #128	@ 0x80
 80056ba:	025b      	lsls	r3, r3, #9
 80056bc:	4013      	ands	r3, r2
 80056be:	d00f      	beq.n	80056e0 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 80056c0:	68b9      	ldr	r1, [r7, #8]
 80056c2:	000a      	movs	r2, r1
 80056c4:	0152      	lsls	r2, r2, #5
 80056c6:	1a52      	subs	r2, r2, r1
 80056c8:	0193      	lsls	r3, r2, #6
 80056ca:	1a9b      	subs	r3, r3, r2
 80056cc:	00db      	lsls	r3, r3, #3
 80056ce:	185b      	adds	r3, r3, r1
 80056d0:	025b      	lsls	r3, r3, #9
 80056d2:	6879      	ldr	r1, [r7, #4]
 80056d4:	0018      	movs	r0, r3
 80056d6:	f7fa fd33 	bl	8000140 <__udivsi3>
 80056da:	0003      	movs	r3, r0
 80056dc:	617b      	str	r3, [r7, #20]
 80056de:	e023      	b.n	8005728 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80056e0:	4b1c      	ldr	r3, [pc, #112]	@ (8005754 <HAL_RCC_GetSysClockFreq+0xf8>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	2210      	movs	r2, #16
 80056e6:	4013      	ands	r3, r2
 80056e8:	d00f      	beq.n	800570a <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 80056ea:	68b9      	ldr	r1, [r7, #8]
 80056ec:	000a      	movs	r2, r1
 80056ee:	0152      	lsls	r2, r2, #5
 80056f0:	1a52      	subs	r2, r2, r1
 80056f2:	0193      	lsls	r3, r2, #6
 80056f4:	1a9b      	subs	r3, r3, r2
 80056f6:	00db      	lsls	r3, r3, #3
 80056f8:	185b      	adds	r3, r3, r1
 80056fa:	021b      	lsls	r3, r3, #8
 80056fc:	6879      	ldr	r1, [r7, #4]
 80056fe:	0018      	movs	r0, r3
 8005700:	f7fa fd1e 	bl	8000140 <__udivsi3>
 8005704:	0003      	movs	r3, r0
 8005706:	617b      	str	r3, [r7, #20]
 8005708:	e00e      	b.n	8005728 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 800570a:	68b9      	ldr	r1, [r7, #8]
 800570c:	000a      	movs	r2, r1
 800570e:	0152      	lsls	r2, r2, #5
 8005710:	1a52      	subs	r2, r2, r1
 8005712:	0193      	lsls	r3, r2, #6
 8005714:	1a9b      	subs	r3, r3, r2
 8005716:	00db      	lsls	r3, r3, #3
 8005718:	185b      	adds	r3, r3, r1
 800571a:	029b      	lsls	r3, r3, #10
 800571c:	6879      	ldr	r1, [r7, #4]
 800571e:	0018      	movs	r0, r3
 8005720:	f7fa fd0e 	bl	8000140 <__udivsi3>
 8005724:	0003      	movs	r3, r0
 8005726:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	613b      	str	r3, [r7, #16]
      break;
 800572c:	e00d      	b.n	800574a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800572e:	4b09      	ldr	r3, [pc, #36]	@ (8005754 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	0b5b      	lsrs	r3, r3, #13
 8005734:	2207      	movs	r2, #7
 8005736:	4013      	ands	r3, r2
 8005738:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	3301      	adds	r3, #1
 800573e:	2280      	movs	r2, #128	@ 0x80
 8005740:	0212      	lsls	r2, r2, #8
 8005742:	409a      	lsls	r2, r3
 8005744:	0013      	movs	r3, r2
 8005746:	613b      	str	r3, [r7, #16]
      break;
 8005748:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 800574a:	693b      	ldr	r3, [r7, #16]
}
 800574c:	0018      	movs	r0, r3
 800574e:	46bd      	mov	sp, r7
 8005750:	b006      	add	sp, #24
 8005752:	bd80      	pop	{r7, pc}
 8005754:	40021000 	.word	0x40021000
 8005758:	003d0900 	.word	0x003d0900
 800575c:	00f42400 	.word	0x00f42400
 8005760:	007a1200 	.word	0x007a1200
 8005764:	0800e134 	.word	0x0800e134

08005768 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800576c:	4b02      	ldr	r3, [pc, #8]	@ (8005778 <HAL_RCC_GetHCLKFreq+0x10>)
 800576e:	681b      	ldr	r3, [r3, #0]
}
 8005770:	0018      	movs	r0, r3
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
 8005776:	46c0      	nop			@ (mov r8, r8)
 8005778:	2000002c 	.word	0x2000002c

0800577c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005780:	f7ff fff2 	bl	8005768 <HAL_RCC_GetHCLKFreq>
 8005784:	0001      	movs	r1, r0
 8005786:	4b06      	ldr	r3, [pc, #24]	@ (80057a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005788:	68db      	ldr	r3, [r3, #12]
 800578a:	0a1b      	lsrs	r3, r3, #8
 800578c:	2207      	movs	r2, #7
 800578e:	4013      	ands	r3, r2
 8005790:	4a04      	ldr	r2, [pc, #16]	@ (80057a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005792:	5cd3      	ldrb	r3, [r2, r3]
 8005794:	40d9      	lsrs	r1, r3
 8005796:	000b      	movs	r3, r1
}
 8005798:	0018      	movs	r0, r3
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}
 800579e:	46c0      	nop			@ (mov r8, r8)
 80057a0:	40021000 	.word	0x40021000
 80057a4:	0800e12c 	.word	0x0800e12c

080057a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80057ac:	f7ff ffdc 	bl	8005768 <HAL_RCC_GetHCLKFreq>
 80057b0:	0001      	movs	r1, r0
 80057b2:	4b06      	ldr	r3, [pc, #24]	@ (80057cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80057b4:	68db      	ldr	r3, [r3, #12]
 80057b6:	0adb      	lsrs	r3, r3, #11
 80057b8:	2207      	movs	r2, #7
 80057ba:	4013      	ands	r3, r2
 80057bc:	4a04      	ldr	r2, [pc, #16]	@ (80057d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80057be:	5cd3      	ldrb	r3, [r2, r3]
 80057c0:	40d9      	lsrs	r1, r3
 80057c2:	000b      	movs	r3, r1
}
 80057c4:	0018      	movs	r0, r3
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}
 80057ca:	46c0      	nop			@ (mov r8, r8)
 80057cc:	40021000 	.word	0x40021000
 80057d0:	0800e12c 	.word	0x0800e12c

080057d4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b086      	sub	sp, #24
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80057dc:	2017      	movs	r0, #23
 80057de:	183b      	adds	r3, r7, r0
 80057e0:	2200      	movs	r2, #0
 80057e2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	2220      	movs	r2, #32
 80057ea:	4013      	ands	r3, r2
 80057ec:	d100      	bne.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 80057ee:	e0c7      	b.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057f0:	4b9b      	ldr	r3, [pc, #620]	@ (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80057f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80057f4:	2380      	movs	r3, #128	@ 0x80
 80057f6:	055b      	lsls	r3, r3, #21
 80057f8:	4013      	ands	r3, r2
 80057fa:	d109      	bne.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057fc:	4b98      	ldr	r3, [pc, #608]	@ (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80057fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005800:	4b97      	ldr	r3, [pc, #604]	@ (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005802:	2180      	movs	r1, #128	@ 0x80
 8005804:	0549      	lsls	r1, r1, #21
 8005806:	430a      	orrs	r2, r1
 8005808:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800580a:	183b      	adds	r3, r7, r0
 800580c:	2201      	movs	r2, #1
 800580e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005810:	4b94      	ldr	r3, [pc, #592]	@ (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	2380      	movs	r3, #128	@ 0x80
 8005816:	005b      	lsls	r3, r3, #1
 8005818:	4013      	ands	r3, r2
 800581a:	d11a      	bne.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800581c:	4b91      	ldr	r3, [pc, #580]	@ (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	4b90      	ldr	r3, [pc, #576]	@ (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005822:	2180      	movs	r1, #128	@ 0x80
 8005824:	0049      	lsls	r1, r1, #1
 8005826:	430a      	orrs	r2, r1
 8005828:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800582a:	f7fd f9bb 	bl	8002ba4 <HAL_GetTick>
 800582e:	0003      	movs	r3, r0
 8005830:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005832:	e008      	b.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005834:	f7fd f9b6 	bl	8002ba4 <HAL_GetTick>
 8005838:	0002      	movs	r2, r0
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	1ad3      	subs	r3, r2, r3
 800583e:	2b64      	cmp	r3, #100	@ 0x64
 8005840:	d901      	bls.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8005842:	2303      	movs	r3, #3
 8005844:	e107      	b.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005846:	4b87      	ldr	r3, [pc, #540]	@ (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	2380      	movs	r3, #128	@ 0x80
 800584c:	005b      	lsls	r3, r3, #1
 800584e:	4013      	ands	r3, r2
 8005850:	d0f0      	beq.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8005852:	4b83      	ldr	r3, [pc, #524]	@ (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	23c0      	movs	r3, #192	@ 0xc0
 8005858:	039b      	lsls	r3, r3, #14
 800585a:	4013      	ands	r3, r2
 800585c:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	685a      	ldr	r2, [r3, #4]
 8005862:	23c0      	movs	r3, #192	@ 0xc0
 8005864:	039b      	lsls	r3, r3, #14
 8005866:	4013      	ands	r3, r2
 8005868:	68fa      	ldr	r2, [r7, #12]
 800586a:	429a      	cmp	r2, r3
 800586c:	d013      	beq.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	685a      	ldr	r2, [r3, #4]
 8005872:	23c0      	movs	r3, #192	@ 0xc0
 8005874:	029b      	lsls	r3, r3, #10
 8005876:	401a      	ands	r2, r3
 8005878:	23c0      	movs	r3, #192	@ 0xc0
 800587a:	029b      	lsls	r3, r3, #10
 800587c:	429a      	cmp	r2, r3
 800587e:	d10a      	bne.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005880:	4b77      	ldr	r3, [pc, #476]	@ (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	2380      	movs	r3, #128	@ 0x80
 8005886:	029b      	lsls	r3, r3, #10
 8005888:	401a      	ands	r2, r3
 800588a:	2380      	movs	r3, #128	@ 0x80
 800588c:	029b      	lsls	r3, r3, #10
 800588e:	429a      	cmp	r2, r3
 8005890:	d101      	bne.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	e0df      	b.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8005896:	4b72      	ldr	r3, [pc, #456]	@ (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005898:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800589a:	23c0      	movs	r3, #192	@ 0xc0
 800589c:	029b      	lsls	r3, r3, #10
 800589e:	4013      	ands	r3, r2
 80058a0:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d03b      	beq.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	685a      	ldr	r2, [r3, #4]
 80058ac:	23c0      	movs	r3, #192	@ 0xc0
 80058ae:	029b      	lsls	r3, r3, #10
 80058b0:	4013      	ands	r3, r2
 80058b2:	68fa      	ldr	r2, [r7, #12]
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d033      	beq.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	2220      	movs	r2, #32
 80058be:	4013      	ands	r3, r2
 80058c0:	d02e      	beq.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80058c2:	4b67      	ldr	r3, [pc, #412]	@ (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80058c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058c6:	4a68      	ldr	r2, [pc, #416]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80058c8:	4013      	ands	r3, r2
 80058ca:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80058cc:	4b64      	ldr	r3, [pc, #400]	@ (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80058ce:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80058d0:	4b63      	ldr	r3, [pc, #396]	@ (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80058d2:	2180      	movs	r1, #128	@ 0x80
 80058d4:	0309      	lsls	r1, r1, #12
 80058d6:	430a      	orrs	r2, r1
 80058d8:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80058da:	4b61      	ldr	r3, [pc, #388]	@ (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80058dc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80058de:	4b60      	ldr	r3, [pc, #384]	@ (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80058e0:	4962      	ldr	r1, [pc, #392]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80058e2:	400a      	ands	r2, r1
 80058e4:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80058e6:	4b5e      	ldr	r3, [pc, #376]	@ (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80058e8:	68fa      	ldr	r2, [r7, #12]
 80058ea:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80058ec:	68fa      	ldr	r2, [r7, #12]
 80058ee:	2380      	movs	r3, #128	@ 0x80
 80058f0:	005b      	lsls	r3, r3, #1
 80058f2:	4013      	ands	r3, r2
 80058f4:	d014      	beq.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058f6:	f7fd f955 	bl	8002ba4 <HAL_GetTick>
 80058fa:	0003      	movs	r3, r0
 80058fc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80058fe:	e009      	b.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005900:	f7fd f950 	bl	8002ba4 <HAL_GetTick>
 8005904:	0002      	movs	r2, r0
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	1ad3      	subs	r3, r2, r3
 800590a:	4a59      	ldr	r2, [pc, #356]	@ (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d901      	bls.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8005910:	2303      	movs	r3, #3
 8005912:	e0a0      	b.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005914:	4b52      	ldr	r3, [pc, #328]	@ (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005916:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005918:	2380      	movs	r3, #128	@ 0x80
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	4013      	ands	r3, r2
 800591e:	d0ef      	beq.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	2220      	movs	r2, #32
 8005926:	4013      	ands	r3, r2
 8005928:	d01f      	beq.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	685a      	ldr	r2, [r3, #4]
 800592e:	23c0      	movs	r3, #192	@ 0xc0
 8005930:	029b      	lsls	r3, r3, #10
 8005932:	401a      	ands	r2, r3
 8005934:	23c0      	movs	r3, #192	@ 0xc0
 8005936:	029b      	lsls	r3, r3, #10
 8005938:	429a      	cmp	r2, r3
 800593a:	d10c      	bne.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x182>
 800593c:	4b48      	ldr	r3, [pc, #288]	@ (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a4c      	ldr	r2, [pc, #304]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8005942:	4013      	ands	r3, r2
 8005944:	0019      	movs	r1, r3
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	685a      	ldr	r2, [r3, #4]
 800594a:	23c0      	movs	r3, #192	@ 0xc0
 800594c:	039b      	lsls	r3, r3, #14
 800594e:	401a      	ands	r2, r3
 8005950:	4b43      	ldr	r3, [pc, #268]	@ (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005952:	430a      	orrs	r2, r1
 8005954:	601a      	str	r2, [r3, #0]
 8005956:	4b42      	ldr	r3, [pc, #264]	@ (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005958:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	685a      	ldr	r2, [r3, #4]
 800595e:	23c0      	movs	r3, #192	@ 0xc0
 8005960:	029b      	lsls	r3, r3, #10
 8005962:	401a      	ands	r2, r3
 8005964:	4b3e      	ldr	r3, [pc, #248]	@ (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005966:	430a      	orrs	r2, r1
 8005968:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800596a:	2317      	movs	r3, #23
 800596c:	18fb      	adds	r3, r7, r3
 800596e:	781b      	ldrb	r3, [r3, #0]
 8005970:	2b01      	cmp	r3, #1
 8005972:	d105      	bne.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005974:	4b3a      	ldr	r3, [pc, #232]	@ (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005976:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005978:	4b39      	ldr	r3, [pc, #228]	@ (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800597a:	493f      	ldr	r1, [pc, #252]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800597c:	400a      	ands	r2, r1
 800597e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	2201      	movs	r2, #1
 8005986:	4013      	ands	r3, r2
 8005988:	d009      	beq.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800598a:	4b35      	ldr	r3, [pc, #212]	@ (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800598c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800598e:	2203      	movs	r2, #3
 8005990:	4393      	bics	r3, r2
 8005992:	0019      	movs	r1, r3
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	689a      	ldr	r2, [r3, #8]
 8005998:	4b31      	ldr	r3, [pc, #196]	@ (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800599a:	430a      	orrs	r2, r1
 800599c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	2202      	movs	r2, #2
 80059a4:	4013      	ands	r3, r2
 80059a6:	d009      	beq.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80059a8:	4b2d      	ldr	r3, [pc, #180]	@ (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80059aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059ac:	220c      	movs	r2, #12
 80059ae:	4393      	bics	r3, r2
 80059b0:	0019      	movs	r1, r3
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	68da      	ldr	r2, [r3, #12]
 80059b6:	4b2a      	ldr	r3, [pc, #168]	@ (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80059b8:	430a      	orrs	r2, r1
 80059ba:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	2204      	movs	r2, #4
 80059c2:	4013      	ands	r3, r2
 80059c4:	d009      	beq.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80059c6:	4b26      	ldr	r3, [pc, #152]	@ (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80059c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059ca:	4a2c      	ldr	r2, [pc, #176]	@ (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80059cc:	4013      	ands	r3, r2
 80059ce:	0019      	movs	r1, r3
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	691a      	ldr	r2, [r3, #16]
 80059d4:	4b22      	ldr	r3, [pc, #136]	@ (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80059d6:	430a      	orrs	r2, r1
 80059d8:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	2208      	movs	r2, #8
 80059e0:	4013      	ands	r3, r2
 80059e2:	d009      	beq.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80059e4:	4b1e      	ldr	r3, [pc, #120]	@ (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80059e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059e8:	4a25      	ldr	r2, [pc, #148]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80059ea:	4013      	ands	r3, r2
 80059ec:	0019      	movs	r1, r3
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	695a      	ldr	r2, [r3, #20]
 80059f2:	4b1b      	ldr	r3, [pc, #108]	@ (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80059f4:	430a      	orrs	r2, r1
 80059f6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	2380      	movs	r3, #128	@ 0x80
 80059fe:	005b      	lsls	r3, r3, #1
 8005a00:	4013      	ands	r3, r2
 8005a02:	d009      	beq.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005a04:	4b16      	ldr	r3, [pc, #88]	@ (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005a06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a08:	4a17      	ldr	r2, [pc, #92]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8005a0a:	4013      	ands	r3, r2
 8005a0c:	0019      	movs	r1, r3
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	699a      	ldr	r2, [r3, #24]
 8005a12:	4b13      	ldr	r3, [pc, #76]	@ (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005a14:	430a      	orrs	r2, r1
 8005a16:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	2240      	movs	r2, #64	@ 0x40
 8005a1e:	4013      	ands	r3, r2
 8005a20:	d009      	beq.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a22:	4b0f      	ldr	r3, [pc, #60]	@ (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005a24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a26:	4a17      	ldr	r2, [pc, #92]	@ (8005a84 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8005a28:	4013      	ands	r3, r2
 8005a2a:	0019      	movs	r1, r3
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6a1a      	ldr	r2, [r3, #32]
 8005a30:	4b0b      	ldr	r3, [pc, #44]	@ (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005a32:	430a      	orrs	r2, r1
 8005a34:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	2280      	movs	r2, #128	@ 0x80
 8005a3c:	4013      	ands	r3, r2
 8005a3e:	d009      	beq.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8005a40:	4b07      	ldr	r3, [pc, #28]	@ (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005a42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a44:	4a10      	ldr	r2, [pc, #64]	@ (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8005a46:	4013      	ands	r3, r2
 8005a48:	0019      	movs	r1, r3
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	69da      	ldr	r2, [r3, #28]
 8005a4e:	4b04      	ldr	r3, [pc, #16]	@ (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005a50:	430a      	orrs	r2, r1
 8005a52:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8005a54:	2300      	movs	r3, #0
}
 8005a56:	0018      	movs	r0, r3
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	b006      	add	sp, #24
 8005a5c:	bd80      	pop	{r7, pc}
 8005a5e:	46c0      	nop			@ (mov r8, r8)
 8005a60:	40021000 	.word	0x40021000
 8005a64:	40007000 	.word	0x40007000
 8005a68:	fffcffff 	.word	0xfffcffff
 8005a6c:	fff7ffff 	.word	0xfff7ffff
 8005a70:	00001388 	.word	0x00001388
 8005a74:	ffcfffff 	.word	0xffcfffff
 8005a78:	efffffff 	.word	0xefffffff
 8005a7c:	fffff3ff 	.word	0xfffff3ff
 8005a80:	ffffcfff 	.word	0xffffcfff
 8005a84:	fbffffff 	.word	0xfbffffff
 8005a88:	fff3ffff 	.word	0xfff3ffff

08005a8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b082      	sub	sp, #8
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d101      	bne.n	8005a9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e032      	b.n	8005b04 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2239      	movs	r2, #57	@ 0x39
 8005aa2:	5c9b      	ldrb	r3, [r3, r2]
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d107      	bne.n	8005aba <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2238      	movs	r2, #56	@ 0x38
 8005aae:	2100      	movs	r1, #0
 8005ab0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	0018      	movs	r0, r3
 8005ab6:	f7fc fd0d 	bl	80024d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2239      	movs	r2, #57	@ 0x39
 8005abe:	2102      	movs	r1, #2
 8005ac0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681a      	ldr	r2, [r3, #0]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	3304      	adds	r3, #4
 8005aca:	0019      	movs	r1, r3
 8005acc:	0010      	movs	r0, r2
 8005ace:	f000 fad7 	bl	8006080 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	223e      	movs	r2, #62	@ 0x3e
 8005ad6:	2101      	movs	r1, #1
 8005ad8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	223a      	movs	r2, #58	@ 0x3a
 8005ade:	2101      	movs	r1, #1
 8005ae0:	5499      	strb	r1, [r3, r2]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	223b      	movs	r2, #59	@ 0x3b
 8005ae6:	2101      	movs	r1, #1
 8005ae8:	5499      	strb	r1, [r3, r2]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	223c      	movs	r2, #60	@ 0x3c
 8005aee:	2101      	movs	r1, #1
 8005af0:	5499      	strb	r1, [r3, r2]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	223d      	movs	r2, #61	@ 0x3d
 8005af6:	2101      	movs	r1, #1
 8005af8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2239      	movs	r2, #57	@ 0x39
 8005afe:	2101      	movs	r1, #1
 8005b00:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005b02:	2300      	movs	r3, #0
}
 8005b04:	0018      	movs	r0, r3
 8005b06:	46bd      	mov	sp, r7
 8005b08:	b002      	add	sp, #8
 8005b0a:	bd80      	pop	{r7, pc}

08005b0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b084      	sub	sp, #16
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2239      	movs	r2, #57	@ 0x39
 8005b18:	5c9b      	ldrb	r3, [r3, r2]
 8005b1a:	b2db      	uxtb	r3, r3
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d001      	beq.n	8005b24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	e03b      	b.n	8005b9c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2239      	movs	r2, #57	@ 0x39
 8005b28:	2102      	movs	r1, #2
 8005b2a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	68da      	ldr	r2, [r3, #12]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	2101      	movs	r1, #1
 8005b38:	430a      	orrs	r2, r1
 8005b3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	2380      	movs	r3, #128	@ 0x80
 8005b42:	05db      	lsls	r3, r3, #23
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d00e      	beq.n	8005b66 <HAL_TIM_Base_Start_IT+0x5a>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a15      	ldr	r2, [pc, #84]	@ (8005ba4 <HAL_TIM_Base_Start_IT+0x98>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d009      	beq.n	8005b66 <HAL_TIM_Base_Start_IT+0x5a>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a14      	ldr	r2, [pc, #80]	@ (8005ba8 <HAL_TIM_Base_Start_IT+0x9c>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d004      	beq.n	8005b66 <HAL_TIM_Base_Start_IT+0x5a>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a12      	ldr	r2, [pc, #72]	@ (8005bac <HAL_TIM_Base_Start_IT+0xa0>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d111      	bne.n	8005b8a <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	2207      	movs	r2, #7
 8005b6e:	4013      	ands	r3, r2
 8005b70:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2b06      	cmp	r3, #6
 8005b76:	d010      	beq.n	8005b9a <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	2101      	movs	r1, #1
 8005b84:	430a      	orrs	r2, r1
 8005b86:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b88:	e007      	b.n	8005b9a <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	2101      	movs	r1, #1
 8005b96:	430a      	orrs	r2, r1
 8005b98:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b9a:	2300      	movs	r3, #0
}
 8005b9c:	0018      	movs	r0, r3
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	b004      	add	sp, #16
 8005ba2:	bd80      	pop	{r7, pc}
 8005ba4:	40000400 	.word	0x40000400
 8005ba8:	40010800 	.word	0x40010800
 8005bac:	40011400 	.word	0x40011400

08005bb0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b082      	sub	sp, #8
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d101      	bne.n	8005bc2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e032      	b.n	8005c28 <HAL_TIM_OC_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2239      	movs	r2, #57	@ 0x39
 8005bc6:	5c9b      	ldrb	r3, [r3, r2]
 8005bc8:	b2db      	uxtb	r3, r3
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d107      	bne.n	8005bde <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2238      	movs	r2, #56	@ 0x38
 8005bd2:	2100      	movs	r1, #0
 8005bd4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	0018      	movs	r0, r3
 8005bda:	f000 f829 	bl	8005c30 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2239      	movs	r2, #57	@ 0x39
 8005be2:	2102      	movs	r1, #2
 8005be4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	3304      	adds	r3, #4
 8005bee:	0019      	movs	r1, r3
 8005bf0:	0010      	movs	r0, r2
 8005bf2:	f000 fa45 	bl	8006080 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	223e      	movs	r2, #62	@ 0x3e
 8005bfa:	2101      	movs	r1, #1
 8005bfc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	223a      	movs	r2, #58	@ 0x3a
 8005c02:	2101      	movs	r1, #1
 8005c04:	5499      	strb	r1, [r3, r2]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	223b      	movs	r2, #59	@ 0x3b
 8005c0a:	2101      	movs	r1, #1
 8005c0c:	5499      	strb	r1, [r3, r2]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	223c      	movs	r2, #60	@ 0x3c
 8005c12:	2101      	movs	r1, #1
 8005c14:	5499      	strb	r1, [r3, r2]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	223d      	movs	r2, #61	@ 0x3d
 8005c1a:	2101      	movs	r1, #1
 8005c1c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2239      	movs	r2, #57	@ 0x39
 8005c22:	2101      	movs	r1, #1
 8005c24:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005c26:	2300      	movs	r3, #0
}
 8005c28:	0018      	movs	r0, r3
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	b002      	add	sp, #8
 8005c2e:	bd80      	pop	{r7, pc}

08005c30 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b082      	sub	sp, #8
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005c38:	46c0      	nop			@ (mov r8, r8)
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	b002      	add	sp, #8
 8005c3e:	bd80      	pop	{r7, pc}

08005c40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b084      	sub	sp, #16
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	68db      	ldr	r3, [r3, #12]
 8005c4e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	691b      	ldr	r3, [r3, #16]
 8005c56:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	2202      	movs	r2, #2
 8005c5c:	4013      	ands	r3, r2
 8005c5e:	d021      	beq.n	8005ca4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2202      	movs	r2, #2
 8005c64:	4013      	ands	r3, r2
 8005c66:	d01d      	beq.n	8005ca4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	2203      	movs	r2, #3
 8005c6e:	4252      	negs	r2, r2
 8005c70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2201      	movs	r2, #1
 8005c76:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	699b      	ldr	r3, [r3, #24]
 8005c7e:	2203      	movs	r2, #3
 8005c80:	4013      	ands	r3, r2
 8005c82:	d004      	beq.n	8005c8e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	0018      	movs	r0, r3
 8005c88:	f000 f9e2 	bl	8006050 <HAL_TIM_IC_CaptureCallback>
 8005c8c:	e007      	b.n	8005c9e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	0018      	movs	r0, r3
 8005c92:	f000 f9d5 	bl	8006040 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	0018      	movs	r0, r3
 8005c9a:	f000 f9e1 	bl	8006060 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	2204      	movs	r2, #4
 8005ca8:	4013      	ands	r3, r2
 8005caa:	d022      	beq.n	8005cf2 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2204      	movs	r2, #4
 8005cb0:	4013      	ands	r3, r2
 8005cb2:	d01e      	beq.n	8005cf2 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	2205      	movs	r2, #5
 8005cba:	4252      	negs	r2, r2
 8005cbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2202      	movs	r2, #2
 8005cc2:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	699a      	ldr	r2, [r3, #24]
 8005cca:	23c0      	movs	r3, #192	@ 0xc0
 8005ccc:	009b      	lsls	r3, r3, #2
 8005cce:	4013      	ands	r3, r2
 8005cd0:	d004      	beq.n	8005cdc <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	0018      	movs	r0, r3
 8005cd6:	f000 f9bb 	bl	8006050 <HAL_TIM_IC_CaptureCallback>
 8005cda:	e007      	b.n	8005cec <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	0018      	movs	r0, r3
 8005ce0:	f000 f9ae 	bl	8006040 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	0018      	movs	r0, r3
 8005ce8:	f000 f9ba 	bl	8006060 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	2208      	movs	r2, #8
 8005cf6:	4013      	ands	r3, r2
 8005cf8:	d021      	beq.n	8005d3e <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2208      	movs	r2, #8
 8005cfe:	4013      	ands	r3, r2
 8005d00:	d01d      	beq.n	8005d3e <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	2209      	movs	r2, #9
 8005d08:	4252      	negs	r2, r2
 8005d0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2204      	movs	r2, #4
 8005d10:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	69db      	ldr	r3, [r3, #28]
 8005d18:	2203      	movs	r2, #3
 8005d1a:	4013      	ands	r3, r2
 8005d1c:	d004      	beq.n	8005d28 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	0018      	movs	r0, r3
 8005d22:	f000 f995 	bl	8006050 <HAL_TIM_IC_CaptureCallback>
 8005d26:	e007      	b.n	8005d38 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	0018      	movs	r0, r3
 8005d2c:	f000 f988 	bl	8006040 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	0018      	movs	r0, r3
 8005d34:	f000 f994 	bl	8006060 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	2210      	movs	r2, #16
 8005d42:	4013      	ands	r3, r2
 8005d44:	d022      	beq.n	8005d8c <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2210      	movs	r2, #16
 8005d4a:	4013      	ands	r3, r2
 8005d4c:	d01e      	beq.n	8005d8c <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	2211      	movs	r2, #17
 8005d54:	4252      	negs	r2, r2
 8005d56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2208      	movs	r2, #8
 8005d5c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	69da      	ldr	r2, [r3, #28]
 8005d64:	23c0      	movs	r3, #192	@ 0xc0
 8005d66:	009b      	lsls	r3, r3, #2
 8005d68:	4013      	ands	r3, r2
 8005d6a:	d004      	beq.n	8005d76 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	0018      	movs	r0, r3
 8005d70:	f000 f96e 	bl	8006050 <HAL_TIM_IC_CaptureCallback>
 8005d74:	e007      	b.n	8005d86 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	0018      	movs	r0, r3
 8005d7a:	f000 f961 	bl	8006040 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	0018      	movs	r0, r3
 8005d82:	f000 f96d 	bl	8006060 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	4013      	ands	r3, r2
 8005d92:	d00c      	beq.n	8005dae <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2201      	movs	r2, #1
 8005d98:	4013      	ands	r3, r2
 8005d9a:	d008      	beq.n	8005dae <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	2202      	movs	r2, #2
 8005da2:	4252      	negs	r2, r2
 8005da4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	0018      	movs	r0, r3
 8005daa:	f000 f941 	bl	8006030 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	2240      	movs	r2, #64	@ 0x40
 8005db2:	4013      	ands	r3, r2
 8005db4:	d00c      	beq.n	8005dd0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2240      	movs	r2, #64	@ 0x40
 8005dba:	4013      	ands	r3, r2
 8005dbc:	d008      	beq.n	8005dd0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	2241      	movs	r2, #65	@ 0x41
 8005dc4:	4252      	negs	r2, r2
 8005dc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	0018      	movs	r0, r3
 8005dcc:	f000 f950 	bl	8006070 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005dd0:	46c0      	nop			@ (mov r8, r8)
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	b004      	add	sp, #16
 8005dd6:	bd80      	pop	{r7, pc}

08005dd8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b086      	sub	sp, #24
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	60f8      	str	r0, [r7, #12]
 8005de0:	60b9      	str	r1, [r7, #8]
 8005de2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005de4:	2317      	movs	r3, #23
 8005de6:	18fb      	adds	r3, r7, r3
 8005de8:	2200      	movs	r2, #0
 8005dea:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2238      	movs	r2, #56	@ 0x38
 8005df0:	5c9b      	ldrb	r3, [r3, r2]
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d101      	bne.n	8005dfa <HAL_TIM_OC_ConfigChannel+0x22>
 8005df6:	2302      	movs	r3, #2
 8005df8:	e042      	b.n	8005e80 <HAL_TIM_OC_ConfigChannel+0xa8>
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2238      	movs	r2, #56	@ 0x38
 8005dfe:	2101      	movs	r1, #1
 8005e00:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2b0c      	cmp	r3, #12
 8005e06:	d027      	beq.n	8005e58 <HAL_TIM_OC_ConfigChannel+0x80>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2b0c      	cmp	r3, #12
 8005e0c:	d82c      	bhi.n	8005e68 <HAL_TIM_OC_ConfigChannel+0x90>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2b08      	cmp	r3, #8
 8005e12:	d019      	beq.n	8005e48 <HAL_TIM_OC_ConfigChannel+0x70>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2b08      	cmp	r3, #8
 8005e18:	d826      	bhi.n	8005e68 <HAL_TIM_OC_ConfigChannel+0x90>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d003      	beq.n	8005e28 <HAL_TIM_OC_ConfigChannel+0x50>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2b04      	cmp	r3, #4
 8005e24:	d008      	beq.n	8005e38 <HAL_TIM_OC_ConfigChannel+0x60>
 8005e26:	e01f      	b.n	8005e68 <HAL_TIM_OC_ConfigChannel+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	68ba      	ldr	r2, [r7, #8]
 8005e2e:	0011      	movs	r1, r2
 8005e30:	0018      	movs	r0, r3
 8005e32:	f000 f989 	bl	8006148 <TIM_OC1_SetConfig>
      break;
 8005e36:	e01c      	b.n	8005e72 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	68ba      	ldr	r2, [r7, #8]
 8005e3e:	0011      	movs	r1, r2
 8005e40:	0018      	movs	r0, r3
 8005e42:	f000 f9bd 	bl	80061c0 <TIM_OC2_SetConfig>
      break;
 8005e46:	e014      	b.n	8005e72 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	68ba      	ldr	r2, [r7, #8]
 8005e4e:	0011      	movs	r1, r2
 8005e50:	0018      	movs	r0, r3
 8005e52:	f000 f9f7 	bl	8006244 <TIM_OC3_SetConfig>
      break;
 8005e56:	e00c      	b.n	8005e72 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	68ba      	ldr	r2, [r7, #8]
 8005e5e:	0011      	movs	r1, r2
 8005e60:	0018      	movs	r0, r3
 8005e62:	f000 fa2f 	bl	80062c4 <TIM_OC4_SetConfig>
      break;
 8005e66:	e004      	b.n	8005e72 <HAL_TIM_OC_ConfigChannel+0x9a>
    }

    default:
      status = HAL_ERROR;
 8005e68:	2317      	movs	r3, #23
 8005e6a:	18fb      	adds	r3, r7, r3
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	701a      	strb	r2, [r3, #0]
      break;
 8005e70:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2238      	movs	r2, #56	@ 0x38
 8005e76:	2100      	movs	r1, #0
 8005e78:	5499      	strb	r1, [r3, r2]

  return status;
 8005e7a:	2317      	movs	r3, #23
 8005e7c:	18fb      	adds	r3, r7, r3
 8005e7e:	781b      	ldrb	r3, [r3, #0]
}
 8005e80:	0018      	movs	r0, r3
 8005e82:	46bd      	mov	sp, r7
 8005e84:	b006      	add	sp, #24
 8005e86:	bd80      	pop	{r7, pc}

08005e88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b084      	sub	sp, #16
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e92:	230f      	movs	r3, #15
 8005e94:	18fb      	adds	r3, r7, r3
 8005e96:	2200      	movs	r2, #0
 8005e98:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2238      	movs	r2, #56	@ 0x38
 8005e9e:	5c9b      	ldrb	r3, [r3, r2]
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d101      	bne.n	8005ea8 <HAL_TIM_ConfigClockSource+0x20>
 8005ea4:	2302      	movs	r3, #2
 8005ea6:	e0bc      	b.n	8006022 <HAL_TIM_ConfigClockSource+0x19a>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2238      	movs	r2, #56	@ 0x38
 8005eac:	2101      	movs	r1, #1
 8005eae:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2239      	movs	r2, #57	@ 0x39
 8005eb4:	2102      	movs	r1, #2
 8005eb6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	2277      	movs	r2, #119	@ 0x77
 8005ec4:	4393      	bics	r3, r2
 8005ec6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	4a58      	ldr	r2, [pc, #352]	@ (800602c <HAL_TIM_ConfigClockSource+0x1a4>)
 8005ecc:	4013      	ands	r3, r2
 8005ece:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	68ba      	ldr	r2, [r7, #8]
 8005ed6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	2280      	movs	r2, #128	@ 0x80
 8005ede:	0192      	lsls	r2, r2, #6
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d040      	beq.n	8005f66 <HAL_TIM_ConfigClockSource+0xde>
 8005ee4:	2280      	movs	r2, #128	@ 0x80
 8005ee6:	0192      	lsls	r2, r2, #6
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d900      	bls.n	8005eee <HAL_TIM_ConfigClockSource+0x66>
 8005eec:	e088      	b.n	8006000 <HAL_TIM_ConfigClockSource+0x178>
 8005eee:	2280      	movs	r2, #128	@ 0x80
 8005ef0:	0152      	lsls	r2, r2, #5
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d100      	bne.n	8005ef8 <HAL_TIM_ConfigClockSource+0x70>
 8005ef6:	e088      	b.n	800600a <HAL_TIM_ConfigClockSource+0x182>
 8005ef8:	2280      	movs	r2, #128	@ 0x80
 8005efa:	0152      	lsls	r2, r2, #5
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d900      	bls.n	8005f02 <HAL_TIM_ConfigClockSource+0x7a>
 8005f00:	e07e      	b.n	8006000 <HAL_TIM_ConfigClockSource+0x178>
 8005f02:	2b70      	cmp	r3, #112	@ 0x70
 8005f04:	d018      	beq.n	8005f38 <HAL_TIM_ConfigClockSource+0xb0>
 8005f06:	d900      	bls.n	8005f0a <HAL_TIM_ConfigClockSource+0x82>
 8005f08:	e07a      	b.n	8006000 <HAL_TIM_ConfigClockSource+0x178>
 8005f0a:	2b60      	cmp	r3, #96	@ 0x60
 8005f0c:	d04f      	beq.n	8005fae <HAL_TIM_ConfigClockSource+0x126>
 8005f0e:	d900      	bls.n	8005f12 <HAL_TIM_ConfigClockSource+0x8a>
 8005f10:	e076      	b.n	8006000 <HAL_TIM_ConfigClockSource+0x178>
 8005f12:	2b50      	cmp	r3, #80	@ 0x50
 8005f14:	d03b      	beq.n	8005f8e <HAL_TIM_ConfigClockSource+0x106>
 8005f16:	d900      	bls.n	8005f1a <HAL_TIM_ConfigClockSource+0x92>
 8005f18:	e072      	b.n	8006000 <HAL_TIM_ConfigClockSource+0x178>
 8005f1a:	2b40      	cmp	r3, #64	@ 0x40
 8005f1c:	d057      	beq.n	8005fce <HAL_TIM_ConfigClockSource+0x146>
 8005f1e:	d900      	bls.n	8005f22 <HAL_TIM_ConfigClockSource+0x9a>
 8005f20:	e06e      	b.n	8006000 <HAL_TIM_ConfigClockSource+0x178>
 8005f22:	2b30      	cmp	r3, #48	@ 0x30
 8005f24:	d063      	beq.n	8005fee <HAL_TIM_ConfigClockSource+0x166>
 8005f26:	d86b      	bhi.n	8006000 <HAL_TIM_ConfigClockSource+0x178>
 8005f28:	2b20      	cmp	r3, #32
 8005f2a:	d060      	beq.n	8005fee <HAL_TIM_ConfigClockSource+0x166>
 8005f2c:	d868      	bhi.n	8006000 <HAL_TIM_ConfigClockSource+0x178>
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d05d      	beq.n	8005fee <HAL_TIM_ConfigClockSource+0x166>
 8005f32:	2b10      	cmp	r3, #16
 8005f34:	d05b      	beq.n	8005fee <HAL_TIM_ConfigClockSource+0x166>
 8005f36:	e063      	b.n	8006000 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f48:	f000 fa7c 	bl	8006444 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	2277      	movs	r2, #119	@ 0x77
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	68ba      	ldr	r2, [r7, #8]
 8005f62:	609a      	str	r2, [r3, #8]
      break;
 8005f64:	e052      	b.n	800600c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f76:	f000 fa65 	bl	8006444 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	689a      	ldr	r2, [r3, #8]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	2180      	movs	r1, #128	@ 0x80
 8005f86:	01c9      	lsls	r1, r1, #7
 8005f88:	430a      	orrs	r2, r1
 8005f8a:	609a      	str	r2, [r3, #8]
      break;
 8005f8c:	e03e      	b.n	800600c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f9a:	001a      	movs	r2, r3
 8005f9c:	f000 f9d8 	bl	8006350 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	2150      	movs	r1, #80	@ 0x50
 8005fa6:	0018      	movs	r0, r3
 8005fa8:	f000 fa32 	bl	8006410 <TIM_ITRx_SetConfig>
      break;
 8005fac:	e02e      	b.n	800600c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005fba:	001a      	movs	r2, r3
 8005fbc:	f000 f9f6 	bl	80063ac <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	2160      	movs	r1, #96	@ 0x60
 8005fc6:	0018      	movs	r0, r3
 8005fc8:	f000 fa22 	bl	8006410 <TIM_ITRx_SetConfig>
      break;
 8005fcc:	e01e      	b.n	800600c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fda:	001a      	movs	r2, r3
 8005fdc:	f000 f9b8 	bl	8006350 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	2140      	movs	r1, #64	@ 0x40
 8005fe6:	0018      	movs	r0, r3
 8005fe8:	f000 fa12 	bl	8006410 <TIM_ITRx_SetConfig>
      break;
 8005fec:	e00e      	b.n	800600c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	0019      	movs	r1, r3
 8005ff8:	0010      	movs	r0, r2
 8005ffa:	f000 fa09 	bl	8006410 <TIM_ITRx_SetConfig>
      break;
 8005ffe:	e005      	b.n	800600c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8006000:	230f      	movs	r3, #15
 8006002:	18fb      	adds	r3, r7, r3
 8006004:	2201      	movs	r2, #1
 8006006:	701a      	strb	r2, [r3, #0]
      break;
 8006008:	e000      	b.n	800600c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800600a:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2239      	movs	r2, #57	@ 0x39
 8006010:	2101      	movs	r1, #1
 8006012:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2238      	movs	r2, #56	@ 0x38
 8006018:	2100      	movs	r1, #0
 800601a:	5499      	strb	r1, [r3, r2]

  return status;
 800601c:	230f      	movs	r3, #15
 800601e:	18fb      	adds	r3, r7, r3
 8006020:	781b      	ldrb	r3, [r3, #0]
}
 8006022:	0018      	movs	r0, r3
 8006024:	46bd      	mov	sp, r7
 8006026:	b004      	add	sp, #16
 8006028:	bd80      	pop	{r7, pc}
 800602a:	46c0      	nop			@ (mov r8, r8)
 800602c:	ffff00ff 	.word	0xffff00ff

08006030 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b082      	sub	sp, #8
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006038:	46c0      	nop			@ (mov r8, r8)
 800603a:	46bd      	mov	sp, r7
 800603c:	b002      	add	sp, #8
 800603e:	bd80      	pop	{r7, pc}

08006040 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b082      	sub	sp, #8
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006048:	46c0      	nop			@ (mov r8, r8)
 800604a:	46bd      	mov	sp, r7
 800604c:	b002      	add	sp, #8
 800604e:	bd80      	pop	{r7, pc}

08006050 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b082      	sub	sp, #8
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006058:	46c0      	nop			@ (mov r8, r8)
 800605a:	46bd      	mov	sp, r7
 800605c:	b002      	add	sp, #8
 800605e:	bd80      	pop	{r7, pc}

08006060 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b082      	sub	sp, #8
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006068:	46c0      	nop			@ (mov r8, r8)
 800606a:	46bd      	mov	sp, r7
 800606c:	b002      	add	sp, #8
 800606e:	bd80      	pop	{r7, pc}

08006070 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b082      	sub	sp, #8
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006078:	46c0      	nop			@ (mov r8, r8)
 800607a:	46bd      	mov	sp, r7
 800607c:	b002      	add	sp, #8
 800607e:	bd80      	pop	{r7, pc}

08006080 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b084      	sub	sp, #16
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006090:	687a      	ldr	r2, [r7, #4]
 8006092:	2380      	movs	r3, #128	@ 0x80
 8006094:	05db      	lsls	r3, r3, #23
 8006096:	429a      	cmp	r2, r3
 8006098:	d00b      	beq.n	80060b2 <TIM_Base_SetConfig+0x32>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	4a26      	ldr	r2, [pc, #152]	@ (8006138 <TIM_Base_SetConfig+0xb8>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d007      	beq.n	80060b2 <TIM_Base_SetConfig+0x32>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	4a25      	ldr	r2, [pc, #148]	@ (800613c <TIM_Base_SetConfig+0xbc>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d003      	beq.n	80060b2 <TIM_Base_SetConfig+0x32>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	4a24      	ldr	r2, [pc, #144]	@ (8006140 <TIM_Base_SetConfig+0xc0>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d108      	bne.n	80060c4 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2270      	movs	r2, #112	@ 0x70
 80060b6:	4393      	bics	r3, r2
 80060b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	68fa      	ldr	r2, [r7, #12]
 80060c0:	4313      	orrs	r3, r2
 80060c2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80060c4:	687a      	ldr	r2, [r7, #4]
 80060c6:	2380      	movs	r3, #128	@ 0x80
 80060c8:	05db      	lsls	r3, r3, #23
 80060ca:	429a      	cmp	r2, r3
 80060cc:	d00b      	beq.n	80060e6 <TIM_Base_SetConfig+0x66>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	4a19      	ldr	r2, [pc, #100]	@ (8006138 <TIM_Base_SetConfig+0xb8>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d007      	beq.n	80060e6 <TIM_Base_SetConfig+0x66>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	4a18      	ldr	r2, [pc, #96]	@ (800613c <TIM_Base_SetConfig+0xbc>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d003      	beq.n	80060e6 <TIM_Base_SetConfig+0x66>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	4a17      	ldr	r2, [pc, #92]	@ (8006140 <TIM_Base_SetConfig+0xc0>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d108      	bne.n	80060f8 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	4a16      	ldr	r2, [pc, #88]	@ (8006144 <TIM_Base_SetConfig+0xc4>)
 80060ea:	4013      	ands	r3, r2
 80060ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	68db      	ldr	r3, [r3, #12]
 80060f2:	68fa      	ldr	r2, [r7, #12]
 80060f4:	4313      	orrs	r3, r2
 80060f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2280      	movs	r2, #128	@ 0x80
 80060fc:	4393      	bics	r3, r2
 80060fe:	001a      	movs	r2, r3
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	691b      	ldr	r3, [r3, #16]
 8006104:	4313      	orrs	r3, r2
 8006106:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	689a      	ldr	r2, [r3, #8]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	681a      	ldr	r2, [r3, #0]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	2204      	movs	r2, #4
 800611e:	431a      	orrs	r2, r3
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2201      	movs	r2, #1
 8006128:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	68fa      	ldr	r2, [r7, #12]
 800612e:	601a      	str	r2, [r3, #0]
}
 8006130:	46c0      	nop			@ (mov r8, r8)
 8006132:	46bd      	mov	sp, r7
 8006134:	b004      	add	sp, #16
 8006136:	bd80      	pop	{r7, pc}
 8006138:	40000400 	.word	0x40000400
 800613c:	40010800 	.word	0x40010800
 8006140:	40011400 	.word	0x40011400
 8006144:	fffffcff 	.word	0xfffffcff

08006148 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b086      	sub	sp, #24
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
 8006150:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6a1b      	ldr	r3, [r3, #32]
 8006156:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6a1b      	ldr	r3, [r3, #32]
 800615c:	2201      	movs	r2, #1
 800615e:	4393      	bics	r3, r2
 8006160:	001a      	movs	r2, r3
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	699b      	ldr	r3, [r3, #24]
 8006170:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2270      	movs	r2, #112	@ 0x70
 8006176:	4393      	bics	r3, r2
 8006178:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2203      	movs	r2, #3
 800617e:	4393      	bics	r3, r2
 8006180:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	68fa      	ldr	r2, [r7, #12]
 8006188:	4313      	orrs	r3, r2
 800618a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	2202      	movs	r2, #2
 8006190:	4393      	bics	r3, r2
 8006192:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	689b      	ldr	r3, [r3, #8]
 8006198:	697a      	ldr	r2, [r7, #20]
 800619a:	4313      	orrs	r3, r2
 800619c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	693a      	ldr	r2, [r7, #16]
 80061a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	68fa      	ldr	r2, [r7, #12]
 80061a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	685a      	ldr	r2, [r3, #4]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	697a      	ldr	r2, [r7, #20]
 80061b6:	621a      	str	r2, [r3, #32]
}
 80061b8:	46c0      	nop			@ (mov r8, r8)
 80061ba:	46bd      	mov	sp, r7
 80061bc:	b006      	add	sp, #24
 80061be:	bd80      	pop	{r7, pc}

080061c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b086      	sub	sp, #24
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6a1b      	ldr	r3, [r3, #32]
 80061ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6a1b      	ldr	r3, [r3, #32]
 80061d4:	2210      	movs	r2, #16
 80061d6:	4393      	bics	r3, r2
 80061d8:	001a      	movs	r2, r3
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	699b      	ldr	r3, [r3, #24]
 80061e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	4a13      	ldr	r2, [pc, #76]	@ (800623c <TIM_OC2_SetConfig+0x7c>)
 80061ee:	4013      	ands	r3, r2
 80061f0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	4a12      	ldr	r2, [pc, #72]	@ (8006240 <TIM_OC2_SetConfig+0x80>)
 80061f6:	4013      	ands	r3, r2
 80061f8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	021b      	lsls	r3, r3, #8
 8006200:	68fa      	ldr	r2, [r7, #12]
 8006202:	4313      	orrs	r3, r2
 8006204:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	2220      	movs	r2, #32
 800620a:	4393      	bics	r3, r2
 800620c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	011b      	lsls	r3, r3, #4
 8006214:	697a      	ldr	r2, [r7, #20]
 8006216:	4313      	orrs	r3, r2
 8006218:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	693a      	ldr	r2, [r7, #16]
 800621e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	68fa      	ldr	r2, [r7, #12]
 8006224:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	685a      	ldr	r2, [r3, #4]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	697a      	ldr	r2, [r7, #20]
 8006232:	621a      	str	r2, [r3, #32]
}
 8006234:	46c0      	nop			@ (mov r8, r8)
 8006236:	46bd      	mov	sp, r7
 8006238:	b006      	add	sp, #24
 800623a:	bd80      	pop	{r7, pc}
 800623c:	ffff8fff 	.word	0xffff8fff
 8006240:	fffffcff 	.word	0xfffffcff

08006244 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b086      	sub	sp, #24
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
 800624c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6a1b      	ldr	r3, [r3, #32]
 8006252:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6a1b      	ldr	r3, [r3, #32]
 8006258:	4a18      	ldr	r2, [pc, #96]	@ (80062bc <TIM_OC3_SetConfig+0x78>)
 800625a:	401a      	ands	r2, r3
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	69db      	ldr	r3, [r3, #28]
 800626a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2270      	movs	r2, #112	@ 0x70
 8006270:	4393      	bics	r3, r2
 8006272:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2203      	movs	r2, #3
 8006278:	4393      	bics	r3, r2
 800627a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	68fa      	ldr	r2, [r7, #12]
 8006282:	4313      	orrs	r3, r2
 8006284:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	4a0d      	ldr	r2, [pc, #52]	@ (80062c0 <TIM_OC3_SetConfig+0x7c>)
 800628a:	4013      	ands	r3, r2
 800628c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	021b      	lsls	r3, r3, #8
 8006294:	697a      	ldr	r2, [r7, #20]
 8006296:	4313      	orrs	r3, r2
 8006298:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	693a      	ldr	r2, [r7, #16]
 800629e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	68fa      	ldr	r2, [r7, #12]
 80062a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	685a      	ldr	r2, [r3, #4]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	697a      	ldr	r2, [r7, #20]
 80062b2:	621a      	str	r2, [r3, #32]
}
 80062b4:	46c0      	nop			@ (mov r8, r8)
 80062b6:	46bd      	mov	sp, r7
 80062b8:	b006      	add	sp, #24
 80062ba:	bd80      	pop	{r7, pc}
 80062bc:	fffffeff 	.word	0xfffffeff
 80062c0:	fffffdff 	.word	0xfffffdff

080062c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b086      	sub	sp, #24
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6a1b      	ldr	r3, [r3, #32]
 80062d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6a1b      	ldr	r3, [r3, #32]
 80062d8:	4a19      	ldr	r2, [pc, #100]	@ (8006340 <TIM_OC4_SetConfig+0x7c>)
 80062da:	401a      	ands	r2, r3
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	69db      	ldr	r3, [r3, #28]
 80062ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	4a15      	ldr	r2, [pc, #84]	@ (8006344 <TIM_OC4_SetConfig+0x80>)
 80062f0:	4013      	ands	r3, r2
 80062f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	4a14      	ldr	r2, [pc, #80]	@ (8006348 <TIM_OC4_SetConfig+0x84>)
 80062f8:	4013      	ands	r3, r2
 80062fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	021b      	lsls	r3, r3, #8
 8006302:	68fa      	ldr	r2, [r7, #12]
 8006304:	4313      	orrs	r3, r2
 8006306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	4a10      	ldr	r2, [pc, #64]	@ (800634c <TIM_OC4_SetConfig+0x88>)
 800630c:	4013      	ands	r3, r2
 800630e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	031b      	lsls	r3, r3, #12
 8006316:	697a      	ldr	r2, [r7, #20]
 8006318:	4313      	orrs	r3, r2
 800631a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	693a      	ldr	r2, [r7, #16]
 8006320:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	68fa      	ldr	r2, [r7, #12]
 8006326:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	685a      	ldr	r2, [r3, #4]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	697a      	ldr	r2, [r7, #20]
 8006334:	621a      	str	r2, [r3, #32]
}
 8006336:	46c0      	nop			@ (mov r8, r8)
 8006338:	46bd      	mov	sp, r7
 800633a:	b006      	add	sp, #24
 800633c:	bd80      	pop	{r7, pc}
 800633e:	46c0      	nop			@ (mov r8, r8)
 8006340:	ffffefff 	.word	0xffffefff
 8006344:	ffff8fff 	.word	0xffff8fff
 8006348:	fffffcff 	.word	0xfffffcff
 800634c:	ffffdfff 	.word	0xffffdfff

08006350 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b086      	sub	sp, #24
 8006354:	af00      	add	r7, sp, #0
 8006356:	60f8      	str	r0, [r7, #12]
 8006358:	60b9      	str	r1, [r7, #8]
 800635a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	6a1b      	ldr	r3, [r3, #32]
 8006360:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	6a1b      	ldr	r3, [r3, #32]
 8006366:	2201      	movs	r2, #1
 8006368:	4393      	bics	r3, r2
 800636a:	001a      	movs	r2, r3
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	699b      	ldr	r3, [r3, #24]
 8006374:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	22f0      	movs	r2, #240	@ 0xf0
 800637a:	4393      	bics	r3, r2
 800637c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	011b      	lsls	r3, r3, #4
 8006382:	693a      	ldr	r2, [r7, #16]
 8006384:	4313      	orrs	r3, r2
 8006386:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	220a      	movs	r2, #10
 800638c:	4393      	bics	r3, r2
 800638e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006390:	697a      	ldr	r2, [r7, #20]
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	4313      	orrs	r3, r2
 8006396:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	693a      	ldr	r2, [r7, #16]
 800639c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	697a      	ldr	r2, [r7, #20]
 80063a2:	621a      	str	r2, [r3, #32]
}
 80063a4:	46c0      	nop			@ (mov r8, r8)
 80063a6:	46bd      	mov	sp, r7
 80063a8:	b006      	add	sp, #24
 80063aa:	bd80      	pop	{r7, pc}

080063ac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b086      	sub	sp, #24
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	60b9      	str	r1, [r7, #8]
 80063b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	6a1b      	ldr	r3, [r3, #32]
 80063bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	6a1b      	ldr	r3, [r3, #32]
 80063c2:	2210      	movs	r2, #16
 80063c4:	4393      	bics	r3, r2
 80063c6:	001a      	movs	r2, r3
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	699b      	ldr	r3, [r3, #24]
 80063d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	4a0d      	ldr	r2, [pc, #52]	@ (800640c <TIM_TI2_ConfigInputStage+0x60>)
 80063d6:	4013      	ands	r3, r2
 80063d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	031b      	lsls	r3, r3, #12
 80063de:	693a      	ldr	r2, [r7, #16]
 80063e0:	4313      	orrs	r3, r2
 80063e2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	22a0      	movs	r2, #160	@ 0xa0
 80063e8:	4393      	bics	r3, r2
 80063ea:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	011b      	lsls	r3, r3, #4
 80063f0:	697a      	ldr	r2, [r7, #20]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	693a      	ldr	r2, [r7, #16]
 80063fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	697a      	ldr	r2, [r7, #20]
 8006400:	621a      	str	r2, [r3, #32]
}
 8006402:	46c0      	nop			@ (mov r8, r8)
 8006404:	46bd      	mov	sp, r7
 8006406:	b006      	add	sp, #24
 8006408:	bd80      	pop	{r7, pc}
 800640a:	46c0      	nop			@ (mov r8, r8)
 800640c:	ffff0fff 	.word	0xffff0fff

08006410 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b084      	sub	sp, #16
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
 8006418:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2270      	movs	r2, #112	@ 0x70
 8006424:	4393      	bics	r3, r2
 8006426:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006428:	683a      	ldr	r2, [r7, #0]
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	4313      	orrs	r3, r2
 800642e:	2207      	movs	r2, #7
 8006430:	4313      	orrs	r3, r2
 8006432:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	68fa      	ldr	r2, [r7, #12]
 8006438:	609a      	str	r2, [r3, #8]
}
 800643a:	46c0      	nop			@ (mov r8, r8)
 800643c:	46bd      	mov	sp, r7
 800643e:	b004      	add	sp, #16
 8006440:	bd80      	pop	{r7, pc}
	...

08006444 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b086      	sub	sp, #24
 8006448:	af00      	add	r7, sp, #0
 800644a:	60f8      	str	r0, [r7, #12]
 800644c:	60b9      	str	r1, [r7, #8]
 800644e:	607a      	str	r2, [r7, #4]
 8006450:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	4a09      	ldr	r2, [pc, #36]	@ (8006480 <TIM_ETR_SetConfig+0x3c>)
 800645c:	4013      	ands	r3, r2
 800645e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	021a      	lsls	r2, r3, #8
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	431a      	orrs	r2, r3
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	4313      	orrs	r3, r2
 800646c:	697a      	ldr	r2, [r7, #20]
 800646e:	4313      	orrs	r3, r2
 8006470:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	697a      	ldr	r2, [r7, #20]
 8006476:	609a      	str	r2, [r3, #8]
}
 8006478:	46c0      	nop			@ (mov r8, r8)
 800647a:	46bd      	mov	sp, r7
 800647c:	b006      	add	sp, #24
 800647e:	bd80      	pop	{r7, pc}
 8006480:	ffff00ff 	.word	0xffff00ff

08006484 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b084      	sub	sp, #16
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2238      	movs	r2, #56	@ 0x38
 8006492:	5c9b      	ldrb	r3, [r3, r2]
 8006494:	2b01      	cmp	r3, #1
 8006496:	d101      	bne.n	800649c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006498:	2302      	movs	r3, #2
 800649a:	e047      	b.n	800652c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2238      	movs	r2, #56	@ 0x38
 80064a0:	2101      	movs	r1, #1
 80064a2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2239      	movs	r2, #57	@ 0x39
 80064a8:	2102      	movs	r1, #2
 80064aa:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2270      	movs	r2, #112	@ 0x70
 80064c0:	4393      	bics	r3, r2
 80064c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	68fa      	ldr	r2, [r7, #12]
 80064ca:	4313      	orrs	r3, r2
 80064cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	68fa      	ldr	r2, [r7, #12]
 80064d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	2380      	movs	r3, #128	@ 0x80
 80064dc:	05db      	lsls	r3, r3, #23
 80064de:	429a      	cmp	r2, r3
 80064e0:	d00e      	beq.n	8006500 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a13      	ldr	r2, [pc, #76]	@ (8006534 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d009      	beq.n	8006500 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a11      	ldr	r2, [pc, #68]	@ (8006538 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d004      	beq.n	8006500 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a10      	ldr	r2, [pc, #64]	@ (800653c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d10c      	bne.n	800651a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	2280      	movs	r2, #128	@ 0x80
 8006504:	4393      	bics	r3, r2
 8006506:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	68ba      	ldr	r2, [r7, #8]
 800650e:	4313      	orrs	r3, r2
 8006510:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	68ba      	ldr	r2, [r7, #8]
 8006518:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2239      	movs	r2, #57	@ 0x39
 800651e:	2101      	movs	r1, #1
 8006520:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2238      	movs	r2, #56	@ 0x38
 8006526:	2100      	movs	r1, #0
 8006528:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800652a:	2300      	movs	r3, #0
}
 800652c:	0018      	movs	r0, r3
 800652e:	46bd      	mov	sp, r7
 8006530:	b004      	add	sp, #16
 8006532:	bd80      	pop	{r7, pc}
 8006534:	40000400 	.word	0x40000400
 8006538:	40010800 	.word	0x40010800
 800653c:	40011400 	.word	0x40011400

08006540 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b082      	sub	sp, #8
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d101      	bne.n	8006552 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800654e:	2301      	movs	r3, #1
 8006550:	e044      	b.n	80065dc <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006556:	2b00      	cmp	r3, #0
 8006558:	d107      	bne.n	800656a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2278      	movs	r2, #120	@ 0x78
 800655e:	2100      	movs	r1, #0
 8006560:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	0018      	movs	r0, r3
 8006566:	f7fb ffe9 	bl	800253c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2224      	movs	r2, #36	@ 0x24
 800656e:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	2101      	movs	r1, #1
 800657c:	438a      	bics	r2, r1
 800657e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006584:	2b00      	cmp	r3, #0
 8006586:	d003      	beq.n	8006590 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	0018      	movs	r0, r3
 800658c:	f001 f860 	bl	8007650 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	0018      	movs	r0, r3
 8006594:	f000 fdbe 	bl	8007114 <UART_SetConfig>
 8006598:	0003      	movs	r3, r0
 800659a:	2b01      	cmp	r3, #1
 800659c:	d101      	bne.n	80065a2 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 800659e:	2301      	movs	r3, #1
 80065a0:	e01c      	b.n	80065dc <HAL_UART_Init+0x9c>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	685a      	ldr	r2, [r3, #4]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	490d      	ldr	r1, [pc, #52]	@ (80065e4 <HAL_UART_Init+0xa4>)
 80065ae:	400a      	ands	r2, r1
 80065b0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	689a      	ldr	r2, [r3, #8]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	212a      	movs	r1, #42	@ 0x2a
 80065be:	438a      	bics	r2, r1
 80065c0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	2101      	movs	r1, #1
 80065ce:	430a      	orrs	r2, r1
 80065d0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	0018      	movs	r0, r3
 80065d6:	f001 f8ef 	bl	80077b8 <UART_CheckIdleState>
 80065da:	0003      	movs	r3, r0
}
 80065dc:	0018      	movs	r0, r3
 80065de:	46bd      	mov	sp, r7
 80065e0:	b002      	add	sp, #8
 80065e2:	bd80      	pop	{r7, pc}
 80065e4:	ffffb7ff 	.word	0xffffb7ff

080065e8 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b082      	sub	sp, #8
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d101      	bne.n	80065fa <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80065f6:	2301      	movs	r3, #1
 80065f8:	e04c      	b.n	8006694 <HAL_HalfDuplex_Init+0xac>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d107      	bne.n	8006612 <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2278      	movs	r2, #120	@ 0x78
 8006606:	2100      	movs	r1, #0
 8006608:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	0018      	movs	r0, r3
 800660e:	f7fb ff95 	bl	800253c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2224      	movs	r2, #36	@ 0x24
 8006616:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	2101      	movs	r1, #1
 8006624:	438a      	bics	r2, r1
 8006626:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800662c:	2b00      	cmp	r3, #0
 800662e:	d003      	beq.n	8006638 <HAL_HalfDuplex_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	0018      	movs	r0, r3
 8006634:	f001 f80c 	bl	8007650 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	0018      	movs	r0, r3
 800663c:	f000 fd6a 	bl	8007114 <UART_SetConfig>
 8006640:	0003      	movs	r3, r0
 8006642:	2b01      	cmp	r3, #1
 8006644:	d101      	bne.n	800664a <HAL_HalfDuplex_Init+0x62>
  {
    return HAL_ERROR;
 8006646:	2301      	movs	r3, #1
 8006648:	e024      	b.n	8006694 <HAL_HalfDuplex_Init+0xac>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	685a      	ldr	r2, [r3, #4]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4911      	ldr	r1, [pc, #68]	@ (800669c <HAL_HalfDuplex_Init+0xb4>)
 8006656:	400a      	ands	r2, r1
 8006658:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	689a      	ldr	r2, [r3, #8]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	2122      	movs	r1, #34	@ 0x22
 8006666:	438a      	bics	r2, r1
 8006668:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	689a      	ldr	r2, [r3, #8]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	2108      	movs	r1, #8
 8006676:	430a      	orrs	r2, r1
 8006678:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	2101      	movs	r1, #1
 8006686:	430a      	orrs	r2, r1
 8006688:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	0018      	movs	r0, r3
 800668e:	f001 f893 	bl	80077b8 <UART_CheckIdleState>
 8006692:	0003      	movs	r3, r0
}
 8006694:	0018      	movs	r0, r3
 8006696:	46bd      	mov	sp, r7
 8006698:	b002      	add	sp, #8
 800669a:	bd80      	pop	{r7, pc}
 800669c:	ffffb7ff 	.word	0xffffb7ff

080066a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b08a      	sub	sp, #40	@ 0x28
 80066a4:	af02      	add	r7, sp, #8
 80066a6:	60f8      	str	r0, [r7, #12]
 80066a8:	60b9      	str	r1, [r7, #8]
 80066aa:	603b      	str	r3, [r7, #0]
 80066ac:	1dbb      	adds	r3, r7, #6
 80066ae:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80066b4:	2b20      	cmp	r3, #32
 80066b6:	d000      	beq.n	80066ba <HAL_UART_Transmit+0x1a>
 80066b8:	e08c      	b.n	80067d4 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d003      	beq.n	80066c8 <HAL_UART_Transmit+0x28>
 80066c0:	1dbb      	adds	r3, r7, #6
 80066c2:	881b      	ldrh	r3, [r3, #0]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d101      	bne.n	80066cc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80066c8:	2301      	movs	r3, #1
 80066ca:	e084      	b.n	80067d6 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	689a      	ldr	r2, [r3, #8]
 80066d0:	2380      	movs	r3, #128	@ 0x80
 80066d2:	015b      	lsls	r3, r3, #5
 80066d4:	429a      	cmp	r2, r3
 80066d6:	d109      	bne.n	80066ec <HAL_UART_Transmit+0x4c>
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	691b      	ldr	r3, [r3, #16]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d105      	bne.n	80066ec <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	2201      	movs	r2, #1
 80066e4:	4013      	ands	r3, r2
 80066e6:	d001      	beq.n	80066ec <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80066e8:	2301      	movs	r3, #1
 80066ea:	e074      	b.n	80067d6 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2284      	movs	r2, #132	@ 0x84
 80066f0:	2100      	movs	r1, #0
 80066f2:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	2221      	movs	r2, #33	@ 0x21
 80066f8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80066fa:	f7fc fa53 	bl	8002ba4 <HAL_GetTick>
 80066fe:	0003      	movs	r3, r0
 8006700:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	1dba      	adds	r2, r7, #6
 8006706:	2150      	movs	r1, #80	@ 0x50
 8006708:	8812      	ldrh	r2, [r2, #0]
 800670a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	1dba      	adds	r2, r7, #6
 8006710:	2152      	movs	r1, #82	@ 0x52
 8006712:	8812      	ldrh	r2, [r2, #0]
 8006714:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	689a      	ldr	r2, [r3, #8]
 800671a:	2380      	movs	r3, #128	@ 0x80
 800671c:	015b      	lsls	r3, r3, #5
 800671e:	429a      	cmp	r2, r3
 8006720:	d108      	bne.n	8006734 <HAL_UART_Transmit+0x94>
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	691b      	ldr	r3, [r3, #16]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d104      	bne.n	8006734 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800672a:	2300      	movs	r3, #0
 800672c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	61bb      	str	r3, [r7, #24]
 8006732:	e003      	b.n	800673c <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006738:	2300      	movs	r3, #0
 800673a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800673c:	e02f      	b.n	800679e <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800673e:	697a      	ldr	r2, [r7, #20]
 8006740:	68f8      	ldr	r0, [r7, #12]
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	9300      	str	r3, [sp, #0]
 8006746:	0013      	movs	r3, r2
 8006748:	2200      	movs	r2, #0
 800674a:	2180      	movs	r1, #128	@ 0x80
 800674c:	f001 f8dc 	bl	8007908 <UART_WaitOnFlagUntilTimeout>
 8006750:	1e03      	subs	r3, r0, #0
 8006752:	d004      	beq.n	800675e <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2220      	movs	r2, #32
 8006758:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800675a:	2303      	movs	r3, #3
 800675c:	e03b      	b.n	80067d6 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 800675e:	69fb      	ldr	r3, [r7, #28]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d10b      	bne.n	800677c <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006764:	69bb      	ldr	r3, [r7, #24]
 8006766:	881b      	ldrh	r3, [r3, #0]
 8006768:	001a      	movs	r2, r3
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	05d2      	lsls	r2, r2, #23
 8006770:	0dd2      	lsrs	r2, r2, #23
 8006772:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006774:	69bb      	ldr	r3, [r7, #24]
 8006776:	3302      	adds	r3, #2
 8006778:	61bb      	str	r3, [r7, #24]
 800677a:	e007      	b.n	800678c <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800677c:	69fb      	ldr	r3, [r7, #28]
 800677e:	781a      	ldrb	r2, [r3, #0]
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006786:	69fb      	ldr	r3, [r7, #28]
 8006788:	3301      	adds	r3, #1
 800678a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2252      	movs	r2, #82	@ 0x52
 8006790:	5a9b      	ldrh	r3, [r3, r2]
 8006792:	b29b      	uxth	r3, r3
 8006794:	3b01      	subs	r3, #1
 8006796:	b299      	uxth	r1, r3
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2252      	movs	r2, #82	@ 0x52
 800679c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2252      	movs	r2, #82	@ 0x52
 80067a2:	5a9b      	ldrh	r3, [r3, r2]
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d1c9      	bne.n	800673e <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80067aa:	697a      	ldr	r2, [r7, #20]
 80067ac:	68f8      	ldr	r0, [r7, #12]
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	9300      	str	r3, [sp, #0]
 80067b2:	0013      	movs	r3, r2
 80067b4:	2200      	movs	r2, #0
 80067b6:	2140      	movs	r1, #64	@ 0x40
 80067b8:	f001 f8a6 	bl	8007908 <UART_WaitOnFlagUntilTimeout>
 80067bc:	1e03      	subs	r3, r0, #0
 80067be:	d004      	beq.n	80067ca <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	2220      	movs	r2, #32
 80067c4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80067c6:	2303      	movs	r3, #3
 80067c8:	e005      	b.n	80067d6 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2220      	movs	r2, #32
 80067ce:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80067d0:	2300      	movs	r3, #0
 80067d2:	e000      	b.n	80067d6 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80067d4:	2302      	movs	r3, #2
  }
}
 80067d6:	0018      	movs	r0, r3
 80067d8:	46bd      	mov	sp, r7
 80067da:	b008      	add	sp, #32
 80067dc:	bd80      	pop	{r7, pc}
	...

080067e0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b088      	sub	sp, #32
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	60f8      	str	r0, [r7, #12]
 80067e8:	60b9      	str	r1, [r7, #8]
 80067ea:	1dbb      	adds	r3, r7, #6
 80067ec:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80067f2:	2b20      	cmp	r3, #32
 80067f4:	d000      	beq.n	80067f8 <HAL_UART_Transmit_DMA+0x18>
 80067f6:	e077      	b.n	80068e8 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d003      	beq.n	8006806 <HAL_UART_Transmit_DMA+0x26>
 80067fe:	1dbb      	adds	r3, r7, #6
 8006800:	881b      	ldrh	r3, [r3, #0]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d101      	bne.n	800680a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006806:	2301      	movs	r3, #1
 8006808:	e06f      	b.n	80068ea <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	689a      	ldr	r2, [r3, #8]
 800680e:	2380      	movs	r3, #128	@ 0x80
 8006810:	015b      	lsls	r3, r3, #5
 8006812:	429a      	cmp	r2, r3
 8006814:	d109      	bne.n	800682a <HAL_UART_Transmit_DMA+0x4a>
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	691b      	ldr	r3, [r3, #16]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d105      	bne.n	800682a <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	2201      	movs	r2, #1
 8006822:	4013      	ands	r3, r2
 8006824:	d001      	beq.n	800682a <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	e05f      	b.n	80068ea <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	68ba      	ldr	r2, [r7, #8]
 800682e:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	1dba      	adds	r2, r7, #6
 8006834:	2150      	movs	r1, #80	@ 0x50
 8006836:	8812      	ldrh	r2, [r2, #0]
 8006838:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	1dba      	adds	r2, r7, #6
 800683e:	2152      	movs	r1, #82	@ 0x52
 8006840:	8812      	ldrh	r2, [r2, #0]
 8006842:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2284      	movs	r2, #132	@ 0x84
 8006848:	2100      	movs	r1, #0
 800684a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2221      	movs	r2, #33	@ 0x21
 8006850:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006856:	2b00      	cmp	r3, #0
 8006858:	d027      	beq.n	80068aa <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800685e:	4a25      	ldr	r2, [pc, #148]	@ (80068f4 <HAL_UART_Transmit_DMA+0x114>)
 8006860:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006866:	4a24      	ldr	r2, [pc, #144]	@ (80068f8 <HAL_UART_Transmit_DMA+0x118>)
 8006868:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800686e:	4a23      	ldr	r2, [pc, #140]	@ (80068fc <HAL_UART_Transmit_DMA+0x11c>)
 8006870:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006876:	2200      	movs	r2, #0
 8006878:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006882:	0019      	movs	r1, r3
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	3328      	adds	r3, #40	@ 0x28
 800688a:	001a      	movs	r2, r3
 800688c:	1dbb      	adds	r3, r7, #6
 800688e:	881b      	ldrh	r3, [r3, #0]
 8006890:	f7fc fbe8 	bl	8003064 <HAL_DMA_Start_IT>
 8006894:	1e03      	subs	r3, r0, #0
 8006896:	d008      	beq.n	80068aa <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2284      	movs	r2, #132	@ 0x84
 800689c:	2110      	movs	r1, #16
 800689e:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2220      	movs	r2, #32
 80068a4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 80068a6:	2301      	movs	r3, #1
 80068a8:	e01f      	b.n	80068ea <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	2240      	movs	r2, #64	@ 0x40
 80068b0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068b2:	f3ef 8310 	mrs	r3, PRIMASK
 80068b6:	613b      	str	r3, [r7, #16]
  return(result);
 80068b8:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80068ba:	61fb      	str	r3, [r7, #28]
 80068bc:	2301      	movs	r3, #1
 80068be:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	f383 8810 	msr	PRIMASK, r3
}
 80068c6:	46c0      	nop			@ (mov r8, r8)
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	689a      	ldr	r2, [r3, #8]
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	2180      	movs	r1, #128	@ 0x80
 80068d4:	430a      	orrs	r2, r1
 80068d6:	609a      	str	r2, [r3, #8]
 80068d8:	69fb      	ldr	r3, [r7, #28]
 80068da:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068dc:	69bb      	ldr	r3, [r7, #24]
 80068de:	f383 8810 	msr	PRIMASK, r3
}
 80068e2:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 80068e4:	2300      	movs	r3, #0
 80068e6:	e000      	b.n	80068ea <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80068e8:	2302      	movs	r3, #2
  }
}
 80068ea:	0018      	movs	r0, r3
 80068ec:	46bd      	mov	sp, r7
 80068ee:	b008      	add	sp, #32
 80068f0:	bd80      	pop	{r7, pc}
 80068f2:	46c0      	nop			@ (mov r8, r8)
 80068f4:	08007c39 	.word	0x08007c39
 80068f8:	08007cd1 	.word	0x08007cd1
 80068fc:	08007ed7 	.word	0x08007ed7

08006900 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b088      	sub	sp, #32
 8006904:	af00      	add	r7, sp, #0
 8006906:	60f8      	str	r0, [r7, #12]
 8006908:	60b9      	str	r1, [r7, #8]
 800690a:	1dbb      	adds	r3, r7, #6
 800690c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2280      	movs	r2, #128	@ 0x80
 8006912:	589b      	ldr	r3, [r3, r2]
 8006914:	2b20      	cmp	r3, #32
 8006916:	d14a      	bne.n	80069ae <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d003      	beq.n	8006926 <HAL_UART_Receive_DMA+0x26>
 800691e:	1dbb      	adds	r3, r7, #6
 8006920:	881b      	ldrh	r3, [r3, #0]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d101      	bne.n	800692a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	e042      	b.n	80069b0 <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	689a      	ldr	r2, [r3, #8]
 800692e:	2380      	movs	r3, #128	@ 0x80
 8006930:	015b      	lsls	r3, r3, #5
 8006932:	429a      	cmp	r2, r3
 8006934:	d109      	bne.n	800694a <HAL_UART_Receive_DMA+0x4a>
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	691b      	ldr	r3, [r3, #16]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d105      	bne.n	800694a <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	2201      	movs	r2, #1
 8006942:	4013      	ands	r3, r2
 8006944:	d001      	beq.n	800694a <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8006946:	2301      	movs	r3, #1
 8006948:	e032      	b.n	80069b0 <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2200      	movs	r2, #0
 800694e:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a18      	ldr	r2, [pc, #96]	@ (80069b8 <HAL_UART_Receive_DMA+0xb8>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d020      	beq.n	800699c <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	685a      	ldr	r2, [r3, #4]
 8006960:	2380      	movs	r3, #128	@ 0x80
 8006962:	041b      	lsls	r3, r3, #16
 8006964:	4013      	ands	r3, r2
 8006966:	d019      	beq.n	800699c <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006968:	f3ef 8310 	mrs	r3, PRIMASK
 800696c:	613b      	str	r3, [r7, #16]
  return(result);
 800696e:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006970:	61fb      	str	r3, [r7, #28]
 8006972:	2301      	movs	r3, #1
 8006974:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	f383 8810 	msr	PRIMASK, r3
}
 800697c:	46c0      	nop			@ (mov r8, r8)
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	681a      	ldr	r2, [r3, #0]
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	2180      	movs	r1, #128	@ 0x80
 800698a:	04c9      	lsls	r1, r1, #19
 800698c:	430a      	orrs	r2, r1
 800698e:	601a      	str	r2, [r3, #0]
 8006990:	69fb      	ldr	r3, [r7, #28]
 8006992:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006994:	69bb      	ldr	r3, [r7, #24]
 8006996:	f383 8810 	msr	PRIMASK, r3
}
 800699a:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800699c:	1dbb      	adds	r3, r7, #6
 800699e:	881a      	ldrh	r2, [r3, #0]
 80069a0:	68b9      	ldr	r1, [r7, #8]
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	0018      	movs	r0, r3
 80069a6:	f001 f81f 	bl	80079e8 <UART_Start_Receive_DMA>
 80069aa:	0003      	movs	r3, r0
 80069ac:	e000      	b.n	80069b0 <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 80069ae:	2302      	movs	r3, #2
  }
}
 80069b0:	0018      	movs	r0, r3
 80069b2:	46bd      	mov	sp, r7
 80069b4:	b008      	add	sp, #32
 80069b6:	bd80      	pop	{r7, pc}
 80069b8:	40004800 	.word	0x40004800

080069bc <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b08c      	sub	sp, #48	@ 0x30
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80069c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2280      	movs	r2, #128	@ 0x80
 80069ce:	589b      	ldr	r3, [r3, r2]
 80069d0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	2280      	movs	r2, #128	@ 0x80
 80069da:	4013      	ands	r3, r2
 80069dc:	2b80      	cmp	r3, #128	@ 0x80
 80069de:	d138      	bne.n	8006a52 <HAL_UART_DMAStop+0x96>
 80069e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069e2:	2b21      	cmp	r3, #33	@ 0x21
 80069e4:	d135      	bne.n	8006a52 <HAL_UART_DMAStop+0x96>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069e6:	f3ef 8310 	mrs	r3, PRIMASK
 80069ea:	617b      	str	r3, [r7, #20]
  return(result);
 80069ec:	697b      	ldr	r3, [r7, #20]
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80069ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80069f0:	2301      	movs	r3, #1
 80069f2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069f4:	69bb      	ldr	r3, [r7, #24]
 80069f6:	f383 8810 	msr	PRIMASK, r3
}
 80069fa:	46c0      	nop			@ (mov r8, r8)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	689a      	ldr	r2, [r3, #8]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	2180      	movs	r1, #128	@ 0x80
 8006a08:	438a      	bics	r2, r1
 8006a0a:	609a      	str	r2, [r3, #8]
 8006a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a0e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a10:	69fb      	ldr	r3, [r7, #28]
 8006a12:	f383 8810 	msr	PRIMASK, r3
}
 8006a16:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d014      	beq.n	8006a4a <HAL_UART_DMAStop+0x8e>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a24:	0018      	movs	r0, r3
 8006a26:	f7fc fb83 	bl	8003130 <HAL_DMA_Abort>
 8006a2a:	1e03      	subs	r3, r0, #0
 8006a2c:	d00d      	beq.n	8006a4a <HAL_UART_DMAStop+0x8e>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a32:	0018      	movs	r0, r3
 8006a34:	f7fc fcbd 	bl	80033b2 <HAL_DMA_GetError>
 8006a38:	0003      	movs	r3, r0
 8006a3a:	2b20      	cmp	r3, #32
 8006a3c:	d105      	bne.n	8006a4a <HAL_UART_DMAStop+0x8e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2284      	movs	r2, #132	@ 0x84
 8006a42:	2110      	movs	r1, #16
 8006a44:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006a46:	2303      	movs	r3, #3
 8006a48:	e044      	b.n	8006ad4 <HAL_UART_DMAStop+0x118>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	0018      	movs	r0, r3
 8006a4e:	f001 f86b 	bl	8007b28 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	2240      	movs	r2, #64	@ 0x40
 8006a5a:	4013      	ands	r3, r2
 8006a5c:	2b40      	cmp	r3, #64	@ 0x40
 8006a5e:	d138      	bne.n	8006ad2 <HAL_UART_DMAStop+0x116>
 8006a60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a62:	2b22      	cmp	r3, #34	@ 0x22
 8006a64:	d135      	bne.n	8006ad2 <HAL_UART_DMAStop+0x116>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a66:	f3ef 8310 	mrs	r3, PRIMASK
 8006a6a:	60bb      	str	r3, [r7, #8]
  return(result);
 8006a6c:	68bb      	ldr	r3, [r7, #8]
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a6e:	623b      	str	r3, [r7, #32]
 8006a70:	2301      	movs	r3, #1
 8006a72:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f383 8810 	msr	PRIMASK, r3
}
 8006a7a:	46c0      	nop			@ (mov r8, r8)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	689a      	ldr	r2, [r3, #8]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	2140      	movs	r1, #64	@ 0x40
 8006a88:	438a      	bics	r2, r1
 8006a8a:	609a      	str	r2, [r3, #8]
 8006a8c:	6a3b      	ldr	r3, [r7, #32]
 8006a8e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	f383 8810 	msr	PRIMASK, r3
}
 8006a96:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d014      	beq.n	8006aca <HAL_UART_DMAStop+0x10e>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006aa4:	0018      	movs	r0, r3
 8006aa6:	f7fc fb43 	bl	8003130 <HAL_DMA_Abort>
 8006aaa:	1e03      	subs	r3, r0, #0
 8006aac:	d00d      	beq.n	8006aca <HAL_UART_DMAStop+0x10e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ab2:	0018      	movs	r0, r3
 8006ab4:	f7fc fc7d 	bl	80033b2 <HAL_DMA_GetError>
 8006ab8:	0003      	movs	r3, r0
 8006aba:	2b20      	cmp	r3, #32
 8006abc:	d105      	bne.n	8006aca <HAL_UART_DMAStop+0x10e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2284      	movs	r2, #132	@ 0x84
 8006ac2:	2110      	movs	r1, #16
 8006ac4:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006ac6:	2303      	movs	r3, #3
 8006ac8:	e004      	b.n	8006ad4 <HAL_UART_DMAStop+0x118>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	0018      	movs	r0, r3
 8006ace:	f001 f84f 	bl	8007b70 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8006ad2:	2300      	movs	r3, #0
}
 8006ad4:	0018      	movs	r0, r3
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	b00c      	add	sp, #48	@ 0x30
 8006ada:	bd80      	pop	{r7, pc}

08006adc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006adc:	b590      	push	{r4, r7, lr}
 8006ade:	b0ab      	sub	sp, #172	@ 0xac
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	69db      	ldr	r3, [r3, #28]
 8006aea:	22a4      	movs	r2, #164	@ 0xa4
 8006aec:	18b9      	adds	r1, r7, r2
 8006aee:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	20a0      	movs	r0, #160	@ 0xa0
 8006af8:	1839      	adds	r1, r7, r0
 8006afa:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	219c      	movs	r1, #156	@ 0x9c
 8006b04:	1879      	adds	r1, r7, r1
 8006b06:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006b08:	0011      	movs	r1, r2
 8006b0a:	18bb      	adds	r3, r7, r2
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a99      	ldr	r2, [pc, #612]	@ (8006d74 <HAL_UART_IRQHandler+0x298>)
 8006b10:	4013      	ands	r3, r2
 8006b12:	2298      	movs	r2, #152	@ 0x98
 8006b14:	18bc      	adds	r4, r7, r2
 8006b16:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8006b18:	18bb      	adds	r3, r7, r2
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d114      	bne.n	8006b4a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006b20:	187b      	adds	r3, r7, r1
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	2220      	movs	r2, #32
 8006b26:	4013      	ands	r3, r2
 8006b28:	d00f      	beq.n	8006b4a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006b2a:	183b      	adds	r3, r7, r0
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	2220      	movs	r2, #32
 8006b30:	4013      	ands	r3, r2
 8006b32:	d00a      	beq.n	8006b4a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d100      	bne.n	8006b3e <HAL_UART_IRQHandler+0x62>
 8006b3c:	e2be      	b.n	80070bc <HAL_UART_IRQHandler+0x5e0>
      {
        huart->RxISR(huart);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006b42:	687a      	ldr	r2, [r7, #4]
 8006b44:	0010      	movs	r0, r2
 8006b46:	4798      	blx	r3
      }
      return;
 8006b48:	e2b8      	b.n	80070bc <HAL_UART_IRQHandler+0x5e0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006b4a:	2398      	movs	r3, #152	@ 0x98
 8006b4c:	18fb      	adds	r3, r7, r3
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d100      	bne.n	8006b56 <HAL_UART_IRQHandler+0x7a>
 8006b54:	e114      	b.n	8006d80 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006b56:	239c      	movs	r3, #156	@ 0x9c
 8006b58:	18fb      	adds	r3, r7, r3
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	2201      	movs	r2, #1
 8006b5e:	4013      	ands	r3, r2
 8006b60:	d106      	bne.n	8006b70 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006b62:	23a0      	movs	r3, #160	@ 0xa0
 8006b64:	18fb      	adds	r3, r7, r3
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a83      	ldr	r2, [pc, #524]	@ (8006d78 <HAL_UART_IRQHandler+0x29c>)
 8006b6a:	4013      	ands	r3, r2
 8006b6c:	d100      	bne.n	8006b70 <HAL_UART_IRQHandler+0x94>
 8006b6e:	e107      	b.n	8006d80 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006b70:	23a4      	movs	r3, #164	@ 0xa4
 8006b72:	18fb      	adds	r3, r7, r3
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	2201      	movs	r2, #1
 8006b78:	4013      	ands	r3, r2
 8006b7a:	d012      	beq.n	8006ba2 <HAL_UART_IRQHandler+0xc6>
 8006b7c:	23a0      	movs	r3, #160	@ 0xa0
 8006b7e:	18fb      	adds	r3, r7, r3
 8006b80:	681a      	ldr	r2, [r3, #0]
 8006b82:	2380      	movs	r3, #128	@ 0x80
 8006b84:	005b      	lsls	r3, r3, #1
 8006b86:	4013      	ands	r3, r2
 8006b88:	d00b      	beq.n	8006ba2 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2284      	movs	r2, #132	@ 0x84
 8006b96:	589b      	ldr	r3, [r3, r2]
 8006b98:	2201      	movs	r2, #1
 8006b9a:	431a      	orrs	r2, r3
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2184      	movs	r1, #132	@ 0x84
 8006ba0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ba2:	23a4      	movs	r3, #164	@ 0xa4
 8006ba4:	18fb      	adds	r3, r7, r3
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	2202      	movs	r2, #2
 8006baa:	4013      	ands	r3, r2
 8006bac:	d011      	beq.n	8006bd2 <HAL_UART_IRQHandler+0xf6>
 8006bae:	239c      	movs	r3, #156	@ 0x9c
 8006bb0:	18fb      	adds	r3, r7, r3
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	4013      	ands	r3, r2
 8006bb8:	d00b      	beq.n	8006bd2 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	2202      	movs	r2, #2
 8006bc0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2284      	movs	r2, #132	@ 0x84
 8006bc6:	589b      	ldr	r3, [r3, r2]
 8006bc8:	2204      	movs	r2, #4
 8006bca:	431a      	orrs	r2, r3
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2184      	movs	r1, #132	@ 0x84
 8006bd0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006bd2:	23a4      	movs	r3, #164	@ 0xa4
 8006bd4:	18fb      	adds	r3, r7, r3
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	2204      	movs	r2, #4
 8006bda:	4013      	ands	r3, r2
 8006bdc:	d011      	beq.n	8006c02 <HAL_UART_IRQHandler+0x126>
 8006bde:	239c      	movs	r3, #156	@ 0x9c
 8006be0:	18fb      	adds	r3, r7, r3
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	2201      	movs	r2, #1
 8006be6:	4013      	ands	r3, r2
 8006be8:	d00b      	beq.n	8006c02 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	2204      	movs	r2, #4
 8006bf0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2284      	movs	r2, #132	@ 0x84
 8006bf6:	589b      	ldr	r3, [r3, r2]
 8006bf8:	2202      	movs	r2, #2
 8006bfa:	431a      	orrs	r2, r3
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2184      	movs	r1, #132	@ 0x84
 8006c00:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006c02:	23a4      	movs	r3, #164	@ 0xa4
 8006c04:	18fb      	adds	r3, r7, r3
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	2208      	movs	r2, #8
 8006c0a:	4013      	ands	r3, r2
 8006c0c:	d017      	beq.n	8006c3e <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006c0e:	23a0      	movs	r3, #160	@ 0xa0
 8006c10:	18fb      	adds	r3, r7, r3
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	2220      	movs	r2, #32
 8006c16:	4013      	ands	r3, r2
 8006c18:	d105      	bne.n	8006c26 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006c1a:	239c      	movs	r3, #156	@ 0x9c
 8006c1c:	18fb      	adds	r3, r7, r3
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	2201      	movs	r2, #1
 8006c22:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006c24:	d00b      	beq.n	8006c3e <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	2208      	movs	r2, #8
 8006c2c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2284      	movs	r2, #132	@ 0x84
 8006c32:	589b      	ldr	r3, [r3, r2]
 8006c34:	2208      	movs	r2, #8
 8006c36:	431a      	orrs	r2, r3
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2184      	movs	r1, #132	@ 0x84
 8006c3c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006c3e:	23a4      	movs	r3, #164	@ 0xa4
 8006c40:	18fb      	adds	r3, r7, r3
 8006c42:	681a      	ldr	r2, [r3, #0]
 8006c44:	2380      	movs	r3, #128	@ 0x80
 8006c46:	011b      	lsls	r3, r3, #4
 8006c48:	4013      	ands	r3, r2
 8006c4a:	d013      	beq.n	8006c74 <HAL_UART_IRQHandler+0x198>
 8006c4c:	23a0      	movs	r3, #160	@ 0xa0
 8006c4e:	18fb      	adds	r3, r7, r3
 8006c50:	681a      	ldr	r2, [r3, #0]
 8006c52:	2380      	movs	r3, #128	@ 0x80
 8006c54:	04db      	lsls	r3, r3, #19
 8006c56:	4013      	ands	r3, r2
 8006c58:	d00c      	beq.n	8006c74 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	2280      	movs	r2, #128	@ 0x80
 8006c60:	0112      	lsls	r2, r2, #4
 8006c62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2284      	movs	r2, #132	@ 0x84
 8006c68:	589b      	ldr	r3, [r3, r2]
 8006c6a:	2220      	movs	r2, #32
 8006c6c:	431a      	orrs	r2, r3
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2184      	movs	r1, #132	@ 0x84
 8006c72:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2284      	movs	r2, #132	@ 0x84
 8006c78:	589b      	ldr	r3, [r3, r2]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d100      	bne.n	8006c80 <HAL_UART_IRQHandler+0x1a4>
 8006c7e:	e21f      	b.n	80070c0 <HAL_UART_IRQHandler+0x5e4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006c80:	23a4      	movs	r3, #164	@ 0xa4
 8006c82:	18fb      	adds	r3, r7, r3
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	2220      	movs	r2, #32
 8006c88:	4013      	ands	r3, r2
 8006c8a:	d00e      	beq.n	8006caa <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006c8c:	23a0      	movs	r3, #160	@ 0xa0
 8006c8e:	18fb      	adds	r3, r7, r3
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	2220      	movs	r2, #32
 8006c94:	4013      	ands	r3, r2
 8006c96:	d008      	beq.n	8006caa <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d004      	beq.n	8006caa <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006ca4:	687a      	ldr	r2, [r7, #4]
 8006ca6:	0010      	movs	r0, r2
 8006ca8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2284      	movs	r2, #132	@ 0x84
 8006cae:	589b      	ldr	r3, [r3, r2]
 8006cb0:	2194      	movs	r1, #148	@ 0x94
 8006cb2:	187a      	adds	r2, r7, r1
 8006cb4:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	689b      	ldr	r3, [r3, #8]
 8006cbc:	2240      	movs	r2, #64	@ 0x40
 8006cbe:	4013      	ands	r3, r2
 8006cc0:	2b40      	cmp	r3, #64	@ 0x40
 8006cc2:	d004      	beq.n	8006cce <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006cc4:	187b      	adds	r3, r7, r1
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	2228      	movs	r2, #40	@ 0x28
 8006cca:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006ccc:	d047      	beq.n	8006d5e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	0018      	movs	r0, r3
 8006cd2:	f000 ff4d 	bl	8007b70 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	2240      	movs	r2, #64	@ 0x40
 8006cde:	4013      	ands	r3, r2
 8006ce0:	2b40      	cmp	r3, #64	@ 0x40
 8006ce2:	d137      	bne.n	8006d54 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ce4:	f3ef 8310 	mrs	r3, PRIMASK
 8006ce8:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8006cea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006cec:	2090      	movs	r0, #144	@ 0x90
 8006cee:	183a      	adds	r2, r7, r0
 8006cf0:	6013      	str	r3, [r2, #0]
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cf6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006cf8:	f383 8810 	msr	PRIMASK, r3
}
 8006cfc:	46c0      	nop			@ (mov r8, r8)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	689a      	ldr	r2, [r3, #8]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	2140      	movs	r1, #64	@ 0x40
 8006d0a:	438a      	bics	r2, r1
 8006d0c:	609a      	str	r2, [r3, #8]
 8006d0e:	183b      	adds	r3, r7, r0
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d14:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006d16:	f383 8810 	msr	PRIMASK, r3
}
 8006d1a:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d012      	beq.n	8006d4a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d28:	4a14      	ldr	r2, [pc, #80]	@ (8006d7c <HAL_UART_IRQHandler+0x2a0>)
 8006d2a:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d30:	0018      	movs	r0, r3
 8006d32:	f7fc fa3d 	bl	80031b0 <HAL_DMA_Abort_IT>
 8006d36:	1e03      	subs	r3, r0, #0
 8006d38:	d01a      	beq.n	8006d70 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d3e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d44:	0018      	movs	r0, r3
 8006d46:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d48:	e012      	b.n	8006d70 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	0018      	movs	r0, r3
 8006d4e:	f001 fb2f 	bl	80083b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d52:	e00d      	b.n	8006d70 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	0018      	movs	r0, r3
 8006d58:	f001 fb2a 	bl	80083b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d5c:	e008      	b.n	8006d70 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	0018      	movs	r0, r3
 8006d62:	f001 fb25 	bl	80083b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2284      	movs	r2, #132	@ 0x84
 8006d6a:	2100      	movs	r1, #0
 8006d6c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8006d6e:	e1a7      	b.n	80070c0 <HAL_UART_IRQHandler+0x5e4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d70:	46c0      	nop			@ (mov r8, r8)
    return;
 8006d72:	e1a5      	b.n	80070c0 <HAL_UART_IRQHandler+0x5e4>
 8006d74:	0000080f 	.word	0x0000080f
 8006d78:	04000120 	.word	0x04000120
 8006d7c:	08007f5b 	.word	0x08007f5b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	d000      	beq.n	8006d8a <HAL_UART_IRQHandler+0x2ae>
 8006d88:	e159      	b.n	800703e <HAL_UART_IRQHandler+0x562>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006d8a:	23a4      	movs	r3, #164	@ 0xa4
 8006d8c:	18fb      	adds	r3, r7, r3
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	2210      	movs	r2, #16
 8006d92:	4013      	ands	r3, r2
 8006d94:	d100      	bne.n	8006d98 <HAL_UART_IRQHandler+0x2bc>
 8006d96:	e152      	b.n	800703e <HAL_UART_IRQHandler+0x562>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006d98:	23a0      	movs	r3, #160	@ 0xa0
 8006d9a:	18fb      	adds	r3, r7, r3
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	2210      	movs	r2, #16
 8006da0:	4013      	ands	r3, r2
 8006da2:	d100      	bne.n	8006da6 <HAL_UART_IRQHandler+0x2ca>
 8006da4:	e14b      	b.n	800703e <HAL_UART_IRQHandler+0x562>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	2210      	movs	r2, #16
 8006dac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	689b      	ldr	r3, [r3, #8]
 8006db4:	2240      	movs	r2, #64	@ 0x40
 8006db6:	4013      	ands	r3, r2
 8006db8:	2b40      	cmp	r3, #64	@ 0x40
 8006dba:	d000      	beq.n	8006dbe <HAL_UART_IRQHandler+0x2e2>
 8006dbc:	e0bf      	b.n	8006f3e <HAL_UART_IRQHandler+0x462>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	685a      	ldr	r2, [r3, #4]
 8006dc6:	217e      	movs	r1, #126	@ 0x7e
 8006dc8:	187b      	adds	r3, r7, r1
 8006dca:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8006dcc:	187b      	adds	r3, r7, r1
 8006dce:	881b      	ldrh	r3, [r3, #0]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d100      	bne.n	8006dd6 <HAL_UART_IRQHandler+0x2fa>
 8006dd4:	e095      	b.n	8006f02 <HAL_UART_IRQHandler+0x426>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2258      	movs	r2, #88	@ 0x58
 8006dda:	5a9b      	ldrh	r3, [r3, r2]
 8006ddc:	187a      	adds	r2, r7, r1
 8006dde:	8812      	ldrh	r2, [r2, #0]
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d300      	bcc.n	8006de6 <HAL_UART_IRQHandler+0x30a>
 8006de4:	e08d      	b.n	8006f02 <HAL_UART_IRQHandler+0x426>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	187a      	adds	r2, r7, r1
 8006dea:	215a      	movs	r1, #90	@ 0x5a
 8006dec:	8812      	ldrh	r2, [r2, #0]
 8006dee:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	2220      	movs	r2, #32
 8006dfa:	4013      	ands	r3, r2
 8006dfc:	d16f      	bne.n	8006ede <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006dfe:	f3ef 8310 	mrs	r3, PRIMASK
 8006e02:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8006e04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e06:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006e08:	2301      	movs	r3, #1
 8006e0a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e0e:	f383 8810 	msr	PRIMASK, r3
}
 8006e12:	46c0      	nop			@ (mov r8, r8)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	681a      	ldr	r2, [r3, #0]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	49ad      	ldr	r1, [pc, #692]	@ (80070d4 <HAL_UART_IRQHandler+0x5f8>)
 8006e20:	400a      	ands	r2, r1
 8006e22:	601a      	str	r2, [r3, #0]
 8006e24:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006e26:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e2a:	f383 8810 	msr	PRIMASK, r3
}
 8006e2e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e30:	f3ef 8310 	mrs	r3, PRIMASK
 8006e34:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8006e36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e38:	677b      	str	r3, [r7, #116]	@ 0x74
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e40:	f383 8810 	msr	PRIMASK, r3
}
 8006e44:	46c0      	nop			@ (mov r8, r8)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	689a      	ldr	r2, [r3, #8]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	2101      	movs	r1, #1
 8006e52:	438a      	bics	r2, r1
 8006e54:	609a      	str	r2, [r3, #8]
 8006e56:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006e58:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e5c:	f383 8810 	msr	PRIMASK, r3
}
 8006e60:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e62:	f3ef 8310 	mrs	r3, PRIMASK
 8006e66:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8006e68:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e6a:	673b      	str	r3, [r7, #112]	@ 0x70
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e72:	f383 8810 	msr	PRIMASK, r3
}
 8006e76:	46c0      	nop			@ (mov r8, r8)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	689a      	ldr	r2, [r3, #8]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	2140      	movs	r1, #64	@ 0x40
 8006e84:	438a      	bics	r2, r1
 8006e86:	609a      	str	r2, [r3, #8]
 8006e88:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006e8a:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e8e:	f383 8810 	msr	PRIMASK, r3
}
 8006e92:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2280      	movs	r2, #128	@ 0x80
 8006e98:	2120      	movs	r1, #32
 8006e9a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ea2:	f3ef 8310 	mrs	r3, PRIMASK
 8006ea6:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8006ea8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006eaa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006eac:	2301      	movs	r3, #1
 8006eae:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006eb0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006eb2:	f383 8810 	msr	PRIMASK, r3
}
 8006eb6:	46c0      	nop			@ (mov r8, r8)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	681a      	ldr	r2, [r3, #0]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	2110      	movs	r1, #16
 8006ec4:	438a      	bics	r2, r1
 8006ec6:	601a      	str	r2, [r3, #0]
 8006ec8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006eca:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ecc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006ece:	f383 8810 	msr	PRIMASK, r3
}
 8006ed2:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ed8:	0018      	movs	r0, r3
 8006eda:	f7fc f929 	bl	8003130 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2202      	movs	r2, #2
 8006ee2:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2258      	movs	r2, #88	@ 0x58
 8006ee8:	5a9a      	ldrh	r2, [r3, r2]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	215a      	movs	r1, #90	@ 0x5a
 8006eee:	5a5b      	ldrh	r3, [r3, r1]
 8006ef0:	b29b      	uxth	r3, r3
 8006ef2:	1ad3      	subs	r3, r2, r3
 8006ef4:	b29a      	uxth	r2, r3
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	0011      	movs	r1, r2
 8006efa:	0018      	movs	r0, r3
 8006efc:	f000 f8fe 	bl	80070fc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006f00:	e0e0      	b.n	80070c4 <HAL_UART_IRQHandler+0x5e8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2258      	movs	r2, #88	@ 0x58
 8006f06:	5a9b      	ldrh	r3, [r3, r2]
 8006f08:	227e      	movs	r2, #126	@ 0x7e
 8006f0a:	18ba      	adds	r2, r7, r2
 8006f0c:	8812      	ldrh	r2, [r2, #0]
 8006f0e:	429a      	cmp	r2, r3
 8006f10:	d000      	beq.n	8006f14 <HAL_UART_IRQHandler+0x438>
 8006f12:	e0d7      	b.n	80070c4 <HAL_UART_IRQHandler+0x5e8>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	2220      	movs	r2, #32
 8006f1e:	4013      	ands	r3, r2
 8006f20:	2b20      	cmp	r3, #32
 8006f22:	d000      	beq.n	8006f26 <HAL_UART_IRQHandler+0x44a>
 8006f24:	e0ce      	b.n	80070c4 <HAL_UART_IRQHandler+0x5e8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2202      	movs	r2, #2
 8006f2a:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2258      	movs	r2, #88	@ 0x58
 8006f30:	5a9a      	ldrh	r2, [r3, r2]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	0011      	movs	r1, r2
 8006f36:	0018      	movs	r0, r3
 8006f38:	f000 f8e0 	bl	80070fc <HAL_UARTEx_RxEventCallback>
      return;
 8006f3c:	e0c2      	b.n	80070c4 <HAL_UART_IRQHandler+0x5e8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2258      	movs	r2, #88	@ 0x58
 8006f42:	5a99      	ldrh	r1, [r3, r2]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	225a      	movs	r2, #90	@ 0x5a
 8006f48:	5a9b      	ldrh	r3, [r3, r2]
 8006f4a:	b29a      	uxth	r2, r3
 8006f4c:	208e      	movs	r0, #142	@ 0x8e
 8006f4e:	183b      	adds	r3, r7, r0
 8006f50:	1a8a      	subs	r2, r1, r2
 8006f52:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	225a      	movs	r2, #90	@ 0x5a
 8006f58:	5a9b      	ldrh	r3, [r3, r2]
 8006f5a:	b29b      	uxth	r3, r3
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d100      	bne.n	8006f62 <HAL_UART_IRQHandler+0x486>
 8006f60:	e0b2      	b.n	80070c8 <HAL_UART_IRQHandler+0x5ec>
          && (nb_rx_data > 0U))
 8006f62:	183b      	adds	r3, r7, r0
 8006f64:	881b      	ldrh	r3, [r3, #0]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d100      	bne.n	8006f6c <HAL_UART_IRQHandler+0x490>
 8006f6a:	e0ad      	b.n	80070c8 <HAL_UART_IRQHandler+0x5ec>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f6c:	f3ef 8310 	mrs	r3, PRIMASK
 8006f70:	60fb      	str	r3, [r7, #12]
  return(result);
 8006f72:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f74:	2488      	movs	r4, #136	@ 0x88
 8006f76:	193a      	adds	r2, r7, r4
 8006f78:	6013      	str	r3, [r2, #0]
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	f383 8810 	msr	PRIMASK, r3
}
 8006f84:	46c0      	nop			@ (mov r8, r8)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	681a      	ldr	r2, [r3, #0]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4951      	ldr	r1, [pc, #324]	@ (80070d8 <HAL_UART_IRQHandler+0x5fc>)
 8006f92:	400a      	ands	r2, r1
 8006f94:	601a      	str	r2, [r3, #0]
 8006f96:	193b      	adds	r3, r7, r4
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	f383 8810 	msr	PRIMASK, r3
}
 8006fa2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006fa4:	f3ef 8310 	mrs	r3, PRIMASK
 8006fa8:	61bb      	str	r3, [r7, #24]
  return(result);
 8006faa:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fac:	2484      	movs	r4, #132	@ 0x84
 8006fae:	193a      	adds	r2, r7, r4
 8006fb0:	6013      	str	r3, [r2, #0]
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fb6:	69fb      	ldr	r3, [r7, #28]
 8006fb8:	f383 8810 	msr	PRIMASK, r3
}
 8006fbc:	46c0      	nop			@ (mov r8, r8)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	689a      	ldr	r2, [r3, #8]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	2101      	movs	r1, #1
 8006fca:	438a      	bics	r2, r1
 8006fcc:	609a      	str	r2, [r3, #8]
 8006fce:	193b      	adds	r3, r7, r4
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fd4:	6a3b      	ldr	r3, [r7, #32]
 8006fd6:	f383 8810 	msr	PRIMASK, r3
}
 8006fda:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2280      	movs	r2, #128	@ 0x80
 8006fe0:	2120      	movs	r1, #32
 8006fe2:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2200      	movs	r2, #0
 8006fee:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ff0:	f3ef 8310 	mrs	r3, PRIMASK
 8006ff4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8006ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ff8:	2480      	movs	r4, #128	@ 0x80
 8006ffa:	193a      	adds	r2, r7, r4
 8006ffc:	6013      	str	r3, [r2, #0]
 8006ffe:	2301      	movs	r3, #1
 8007000:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007004:	f383 8810 	msr	PRIMASK, r3
}
 8007008:	46c0      	nop			@ (mov r8, r8)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	681a      	ldr	r2, [r3, #0]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	2110      	movs	r1, #16
 8007016:	438a      	bics	r2, r1
 8007018:	601a      	str	r2, [r3, #0]
 800701a:	193b      	adds	r3, r7, r4
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007020:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007022:	f383 8810 	msr	PRIMASK, r3
}
 8007026:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2202      	movs	r2, #2
 800702c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800702e:	183b      	adds	r3, r7, r0
 8007030:	881a      	ldrh	r2, [r3, #0]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	0011      	movs	r1, r2
 8007036:	0018      	movs	r0, r3
 8007038:	f000 f860 	bl	80070fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800703c:	e044      	b.n	80070c8 <HAL_UART_IRQHandler+0x5ec>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800703e:	23a4      	movs	r3, #164	@ 0xa4
 8007040:	18fb      	adds	r3, r7, r3
 8007042:	681a      	ldr	r2, [r3, #0]
 8007044:	2380      	movs	r3, #128	@ 0x80
 8007046:	035b      	lsls	r3, r3, #13
 8007048:	4013      	ands	r3, r2
 800704a:	d010      	beq.n	800706e <HAL_UART_IRQHandler+0x592>
 800704c:	239c      	movs	r3, #156	@ 0x9c
 800704e:	18fb      	adds	r3, r7, r3
 8007050:	681a      	ldr	r2, [r3, #0]
 8007052:	2380      	movs	r3, #128	@ 0x80
 8007054:	03db      	lsls	r3, r3, #15
 8007056:	4013      	ands	r3, r2
 8007058:	d009      	beq.n	800706e <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	2280      	movs	r2, #128	@ 0x80
 8007060:	0352      	lsls	r2, r2, #13
 8007062:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	0018      	movs	r0, r3
 8007068:	f000 ffb5 	bl	8007fd6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800706c:	e02f      	b.n	80070ce <HAL_UART_IRQHandler+0x5f2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800706e:	23a4      	movs	r3, #164	@ 0xa4
 8007070:	18fb      	adds	r3, r7, r3
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	2280      	movs	r2, #128	@ 0x80
 8007076:	4013      	ands	r3, r2
 8007078:	d00f      	beq.n	800709a <HAL_UART_IRQHandler+0x5be>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800707a:	23a0      	movs	r3, #160	@ 0xa0
 800707c:	18fb      	adds	r3, r7, r3
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	2280      	movs	r2, #128	@ 0x80
 8007082:	4013      	ands	r3, r2
 8007084:	d009      	beq.n	800709a <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800708a:	2b00      	cmp	r3, #0
 800708c:	d01e      	beq.n	80070cc <HAL_UART_IRQHandler+0x5f0>
    {
      huart->TxISR(huart);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007092:	687a      	ldr	r2, [r7, #4]
 8007094:	0010      	movs	r0, r2
 8007096:	4798      	blx	r3
    }
    return;
 8007098:	e018      	b.n	80070cc <HAL_UART_IRQHandler+0x5f0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800709a:	23a4      	movs	r3, #164	@ 0xa4
 800709c:	18fb      	adds	r3, r7, r3
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	2240      	movs	r2, #64	@ 0x40
 80070a2:	4013      	ands	r3, r2
 80070a4:	d013      	beq.n	80070ce <HAL_UART_IRQHandler+0x5f2>
 80070a6:	23a0      	movs	r3, #160	@ 0xa0
 80070a8:	18fb      	adds	r3, r7, r3
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	2240      	movs	r2, #64	@ 0x40
 80070ae:	4013      	ands	r3, r2
 80070b0:	d00d      	beq.n	80070ce <HAL_UART_IRQHandler+0x5f2>
  {
    UART_EndTransmit_IT(huart);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	0018      	movs	r0, r3
 80070b6:	f000 ff63 	bl	8007f80 <UART_EndTransmit_IT>
    return;
 80070ba:	e008      	b.n	80070ce <HAL_UART_IRQHandler+0x5f2>
      return;
 80070bc:	46c0      	nop			@ (mov r8, r8)
 80070be:	e006      	b.n	80070ce <HAL_UART_IRQHandler+0x5f2>
    return;
 80070c0:	46c0      	nop			@ (mov r8, r8)
 80070c2:	e004      	b.n	80070ce <HAL_UART_IRQHandler+0x5f2>
      return;
 80070c4:	46c0      	nop			@ (mov r8, r8)
 80070c6:	e002      	b.n	80070ce <HAL_UART_IRQHandler+0x5f2>
      return;
 80070c8:	46c0      	nop			@ (mov r8, r8)
 80070ca:	e000      	b.n	80070ce <HAL_UART_IRQHandler+0x5f2>
    return;
 80070cc:	46c0      	nop			@ (mov r8, r8)
  }

}
 80070ce:	46bd      	mov	sp, r7
 80070d0:	b02b      	add	sp, #172	@ 0xac
 80070d2:	bd90      	pop	{r4, r7, pc}
 80070d4:	fffffeff 	.word	0xfffffeff
 80070d8:	fffffedf 	.word	0xfffffedf

080070dc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b082      	sub	sp, #8
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80070e4:	46c0      	nop			@ (mov r8, r8)
 80070e6:	46bd      	mov	sp, r7
 80070e8:	b002      	add	sp, #8
 80070ea:	bd80      	pop	{r7, pc}

080070ec <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b082      	sub	sp, #8
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80070f4:	46c0      	nop			@ (mov r8, r8)
 80070f6:	46bd      	mov	sp, r7
 80070f8:	b002      	add	sp, #8
 80070fa:	bd80      	pop	{r7, pc}

080070fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b082      	sub	sp, #8
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	000a      	movs	r2, r1
 8007106:	1cbb      	adds	r3, r7, #2
 8007108:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800710a:	46c0      	nop			@ (mov r8, r8)
 800710c:	46bd      	mov	sp, r7
 800710e:	b002      	add	sp, #8
 8007110:	bd80      	pop	{r7, pc}
	...

08007114 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007114:	b5b0      	push	{r4, r5, r7, lr}
 8007116:	b08e      	sub	sp, #56	@ 0x38
 8007118:	af00      	add	r7, sp, #0
 800711a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800711c:	231a      	movs	r3, #26
 800711e:	2218      	movs	r2, #24
 8007120:	189b      	adds	r3, r3, r2
 8007122:	19db      	adds	r3, r3, r7
 8007124:	2200      	movs	r2, #0
 8007126:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007128:	69fb      	ldr	r3, [r7, #28]
 800712a:	689a      	ldr	r2, [r3, #8]
 800712c:	69fb      	ldr	r3, [r7, #28]
 800712e:	691b      	ldr	r3, [r3, #16]
 8007130:	431a      	orrs	r2, r3
 8007132:	69fb      	ldr	r3, [r7, #28]
 8007134:	695b      	ldr	r3, [r3, #20]
 8007136:	431a      	orrs	r2, r3
 8007138:	69fb      	ldr	r3, [r7, #28]
 800713a:	69db      	ldr	r3, [r3, #28]
 800713c:	4313      	orrs	r3, r2
 800713e:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007140:	69fb      	ldr	r3, [r7, #28]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4ac3      	ldr	r2, [pc, #780]	@ (8007454 <UART_SetConfig+0x340>)
 8007148:	4013      	ands	r3, r2
 800714a:	0019      	movs	r1, r3
 800714c:	69fb      	ldr	r3, [r7, #28]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007152:	430a      	orrs	r2, r1
 8007154:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007156:	69fb      	ldr	r3, [r7, #28]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	4abe      	ldr	r2, [pc, #760]	@ (8007458 <UART_SetConfig+0x344>)
 800715e:	4013      	ands	r3, r2
 8007160:	0019      	movs	r1, r3
 8007162:	69fb      	ldr	r3, [r7, #28]
 8007164:	68da      	ldr	r2, [r3, #12]
 8007166:	69fb      	ldr	r3, [r7, #28]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	430a      	orrs	r2, r1
 800716c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800716e:	69fb      	ldr	r3, [r7, #28]
 8007170:	699b      	ldr	r3, [r3, #24]
 8007172:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007174:	69fb      	ldr	r3, [r7, #28]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4ab8      	ldr	r2, [pc, #736]	@ (800745c <UART_SetConfig+0x348>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d004      	beq.n	8007188 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800717e:	69fb      	ldr	r3, [r7, #28]
 8007180:	6a1b      	ldr	r3, [r3, #32]
 8007182:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007184:	4313      	orrs	r3, r2
 8007186:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007188:	69fb      	ldr	r3, [r7, #28]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	689b      	ldr	r3, [r3, #8]
 800718e:	4ab4      	ldr	r2, [pc, #720]	@ (8007460 <UART_SetConfig+0x34c>)
 8007190:	4013      	ands	r3, r2
 8007192:	0019      	movs	r1, r3
 8007194:	69fb      	ldr	r3, [r7, #28]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800719a:	430a      	orrs	r2, r1
 800719c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800719e:	69fb      	ldr	r3, [r7, #28]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4ab0      	ldr	r2, [pc, #704]	@ (8007464 <UART_SetConfig+0x350>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d131      	bne.n	800720c <UART_SetConfig+0xf8>
 80071a8:	4baf      	ldr	r3, [pc, #700]	@ (8007468 <UART_SetConfig+0x354>)
 80071aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071ac:	2203      	movs	r2, #3
 80071ae:	4013      	ands	r3, r2
 80071b0:	2b03      	cmp	r3, #3
 80071b2:	d01d      	beq.n	80071f0 <UART_SetConfig+0xdc>
 80071b4:	d823      	bhi.n	80071fe <UART_SetConfig+0xea>
 80071b6:	2b02      	cmp	r3, #2
 80071b8:	d00c      	beq.n	80071d4 <UART_SetConfig+0xc0>
 80071ba:	d820      	bhi.n	80071fe <UART_SetConfig+0xea>
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d002      	beq.n	80071c6 <UART_SetConfig+0xb2>
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	d00e      	beq.n	80071e2 <UART_SetConfig+0xce>
 80071c4:	e01b      	b.n	80071fe <UART_SetConfig+0xea>
 80071c6:	231b      	movs	r3, #27
 80071c8:	2218      	movs	r2, #24
 80071ca:	189b      	adds	r3, r3, r2
 80071cc:	19db      	adds	r3, r3, r7
 80071ce:	2201      	movs	r2, #1
 80071d0:	701a      	strb	r2, [r3, #0]
 80071d2:	e0b4      	b.n	800733e <UART_SetConfig+0x22a>
 80071d4:	231b      	movs	r3, #27
 80071d6:	2218      	movs	r2, #24
 80071d8:	189b      	adds	r3, r3, r2
 80071da:	19db      	adds	r3, r3, r7
 80071dc:	2202      	movs	r2, #2
 80071de:	701a      	strb	r2, [r3, #0]
 80071e0:	e0ad      	b.n	800733e <UART_SetConfig+0x22a>
 80071e2:	231b      	movs	r3, #27
 80071e4:	2218      	movs	r2, #24
 80071e6:	189b      	adds	r3, r3, r2
 80071e8:	19db      	adds	r3, r3, r7
 80071ea:	2204      	movs	r2, #4
 80071ec:	701a      	strb	r2, [r3, #0]
 80071ee:	e0a6      	b.n	800733e <UART_SetConfig+0x22a>
 80071f0:	231b      	movs	r3, #27
 80071f2:	2218      	movs	r2, #24
 80071f4:	189b      	adds	r3, r3, r2
 80071f6:	19db      	adds	r3, r3, r7
 80071f8:	2208      	movs	r2, #8
 80071fa:	701a      	strb	r2, [r3, #0]
 80071fc:	e09f      	b.n	800733e <UART_SetConfig+0x22a>
 80071fe:	231b      	movs	r3, #27
 8007200:	2218      	movs	r2, #24
 8007202:	189b      	adds	r3, r3, r2
 8007204:	19db      	adds	r3, r3, r7
 8007206:	2210      	movs	r2, #16
 8007208:	701a      	strb	r2, [r3, #0]
 800720a:	e098      	b.n	800733e <UART_SetConfig+0x22a>
 800720c:	69fb      	ldr	r3, [r7, #28]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a96      	ldr	r2, [pc, #600]	@ (800746c <UART_SetConfig+0x358>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d131      	bne.n	800727a <UART_SetConfig+0x166>
 8007216:	4b94      	ldr	r3, [pc, #592]	@ (8007468 <UART_SetConfig+0x354>)
 8007218:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800721a:	220c      	movs	r2, #12
 800721c:	4013      	ands	r3, r2
 800721e:	2b0c      	cmp	r3, #12
 8007220:	d01d      	beq.n	800725e <UART_SetConfig+0x14a>
 8007222:	d823      	bhi.n	800726c <UART_SetConfig+0x158>
 8007224:	2b08      	cmp	r3, #8
 8007226:	d00c      	beq.n	8007242 <UART_SetConfig+0x12e>
 8007228:	d820      	bhi.n	800726c <UART_SetConfig+0x158>
 800722a:	2b00      	cmp	r3, #0
 800722c:	d002      	beq.n	8007234 <UART_SetConfig+0x120>
 800722e:	2b04      	cmp	r3, #4
 8007230:	d00e      	beq.n	8007250 <UART_SetConfig+0x13c>
 8007232:	e01b      	b.n	800726c <UART_SetConfig+0x158>
 8007234:	231b      	movs	r3, #27
 8007236:	2218      	movs	r2, #24
 8007238:	189b      	adds	r3, r3, r2
 800723a:	19db      	adds	r3, r3, r7
 800723c:	2200      	movs	r2, #0
 800723e:	701a      	strb	r2, [r3, #0]
 8007240:	e07d      	b.n	800733e <UART_SetConfig+0x22a>
 8007242:	231b      	movs	r3, #27
 8007244:	2218      	movs	r2, #24
 8007246:	189b      	adds	r3, r3, r2
 8007248:	19db      	adds	r3, r3, r7
 800724a:	2202      	movs	r2, #2
 800724c:	701a      	strb	r2, [r3, #0]
 800724e:	e076      	b.n	800733e <UART_SetConfig+0x22a>
 8007250:	231b      	movs	r3, #27
 8007252:	2218      	movs	r2, #24
 8007254:	189b      	adds	r3, r3, r2
 8007256:	19db      	adds	r3, r3, r7
 8007258:	2204      	movs	r2, #4
 800725a:	701a      	strb	r2, [r3, #0]
 800725c:	e06f      	b.n	800733e <UART_SetConfig+0x22a>
 800725e:	231b      	movs	r3, #27
 8007260:	2218      	movs	r2, #24
 8007262:	189b      	adds	r3, r3, r2
 8007264:	19db      	adds	r3, r3, r7
 8007266:	2208      	movs	r2, #8
 8007268:	701a      	strb	r2, [r3, #0]
 800726a:	e068      	b.n	800733e <UART_SetConfig+0x22a>
 800726c:	231b      	movs	r3, #27
 800726e:	2218      	movs	r2, #24
 8007270:	189b      	adds	r3, r3, r2
 8007272:	19db      	adds	r3, r3, r7
 8007274:	2210      	movs	r2, #16
 8007276:	701a      	strb	r2, [r3, #0]
 8007278:	e061      	b.n	800733e <UART_SetConfig+0x22a>
 800727a:	69fb      	ldr	r3, [r7, #28]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4a7c      	ldr	r2, [pc, #496]	@ (8007470 <UART_SetConfig+0x35c>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d106      	bne.n	8007292 <UART_SetConfig+0x17e>
 8007284:	231b      	movs	r3, #27
 8007286:	2218      	movs	r2, #24
 8007288:	189b      	adds	r3, r3, r2
 800728a:	19db      	adds	r3, r3, r7
 800728c:	2200      	movs	r2, #0
 800728e:	701a      	strb	r2, [r3, #0]
 8007290:	e055      	b.n	800733e <UART_SetConfig+0x22a>
 8007292:	69fb      	ldr	r3, [r7, #28]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a77      	ldr	r2, [pc, #476]	@ (8007474 <UART_SetConfig+0x360>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d106      	bne.n	80072aa <UART_SetConfig+0x196>
 800729c:	231b      	movs	r3, #27
 800729e:	2218      	movs	r2, #24
 80072a0:	189b      	adds	r3, r3, r2
 80072a2:	19db      	adds	r3, r3, r7
 80072a4:	2200      	movs	r2, #0
 80072a6:	701a      	strb	r2, [r3, #0]
 80072a8:	e049      	b.n	800733e <UART_SetConfig+0x22a>
 80072aa:	69fb      	ldr	r3, [r7, #28]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a6b      	ldr	r2, [pc, #428]	@ (800745c <UART_SetConfig+0x348>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d13e      	bne.n	8007332 <UART_SetConfig+0x21e>
 80072b4:	4b6c      	ldr	r3, [pc, #432]	@ (8007468 <UART_SetConfig+0x354>)
 80072b6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80072b8:	23c0      	movs	r3, #192	@ 0xc0
 80072ba:	011b      	lsls	r3, r3, #4
 80072bc:	4013      	ands	r3, r2
 80072be:	22c0      	movs	r2, #192	@ 0xc0
 80072c0:	0112      	lsls	r2, r2, #4
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d027      	beq.n	8007316 <UART_SetConfig+0x202>
 80072c6:	22c0      	movs	r2, #192	@ 0xc0
 80072c8:	0112      	lsls	r2, r2, #4
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d82a      	bhi.n	8007324 <UART_SetConfig+0x210>
 80072ce:	2280      	movs	r2, #128	@ 0x80
 80072d0:	0112      	lsls	r2, r2, #4
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d011      	beq.n	80072fa <UART_SetConfig+0x1e6>
 80072d6:	2280      	movs	r2, #128	@ 0x80
 80072d8:	0112      	lsls	r2, r2, #4
 80072da:	4293      	cmp	r3, r2
 80072dc:	d822      	bhi.n	8007324 <UART_SetConfig+0x210>
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d004      	beq.n	80072ec <UART_SetConfig+0x1d8>
 80072e2:	2280      	movs	r2, #128	@ 0x80
 80072e4:	00d2      	lsls	r2, r2, #3
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d00e      	beq.n	8007308 <UART_SetConfig+0x1f4>
 80072ea:	e01b      	b.n	8007324 <UART_SetConfig+0x210>
 80072ec:	231b      	movs	r3, #27
 80072ee:	2218      	movs	r2, #24
 80072f0:	189b      	adds	r3, r3, r2
 80072f2:	19db      	adds	r3, r3, r7
 80072f4:	2200      	movs	r2, #0
 80072f6:	701a      	strb	r2, [r3, #0]
 80072f8:	e021      	b.n	800733e <UART_SetConfig+0x22a>
 80072fa:	231b      	movs	r3, #27
 80072fc:	2218      	movs	r2, #24
 80072fe:	189b      	adds	r3, r3, r2
 8007300:	19db      	adds	r3, r3, r7
 8007302:	2202      	movs	r2, #2
 8007304:	701a      	strb	r2, [r3, #0]
 8007306:	e01a      	b.n	800733e <UART_SetConfig+0x22a>
 8007308:	231b      	movs	r3, #27
 800730a:	2218      	movs	r2, #24
 800730c:	189b      	adds	r3, r3, r2
 800730e:	19db      	adds	r3, r3, r7
 8007310:	2204      	movs	r2, #4
 8007312:	701a      	strb	r2, [r3, #0]
 8007314:	e013      	b.n	800733e <UART_SetConfig+0x22a>
 8007316:	231b      	movs	r3, #27
 8007318:	2218      	movs	r2, #24
 800731a:	189b      	adds	r3, r3, r2
 800731c:	19db      	adds	r3, r3, r7
 800731e:	2208      	movs	r2, #8
 8007320:	701a      	strb	r2, [r3, #0]
 8007322:	e00c      	b.n	800733e <UART_SetConfig+0x22a>
 8007324:	231b      	movs	r3, #27
 8007326:	2218      	movs	r2, #24
 8007328:	189b      	adds	r3, r3, r2
 800732a:	19db      	adds	r3, r3, r7
 800732c:	2210      	movs	r2, #16
 800732e:	701a      	strb	r2, [r3, #0]
 8007330:	e005      	b.n	800733e <UART_SetConfig+0x22a>
 8007332:	231b      	movs	r3, #27
 8007334:	2218      	movs	r2, #24
 8007336:	189b      	adds	r3, r3, r2
 8007338:	19db      	adds	r3, r3, r7
 800733a:	2210      	movs	r2, #16
 800733c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800733e:	69fb      	ldr	r3, [r7, #28]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a46      	ldr	r2, [pc, #280]	@ (800745c <UART_SetConfig+0x348>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d000      	beq.n	800734a <UART_SetConfig+0x236>
 8007348:	e09a      	b.n	8007480 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800734a:	231b      	movs	r3, #27
 800734c:	2218      	movs	r2, #24
 800734e:	189b      	adds	r3, r3, r2
 8007350:	19db      	adds	r3, r3, r7
 8007352:	781b      	ldrb	r3, [r3, #0]
 8007354:	2b08      	cmp	r3, #8
 8007356:	d01d      	beq.n	8007394 <UART_SetConfig+0x280>
 8007358:	dc20      	bgt.n	800739c <UART_SetConfig+0x288>
 800735a:	2b04      	cmp	r3, #4
 800735c:	d015      	beq.n	800738a <UART_SetConfig+0x276>
 800735e:	dc1d      	bgt.n	800739c <UART_SetConfig+0x288>
 8007360:	2b00      	cmp	r3, #0
 8007362:	d002      	beq.n	800736a <UART_SetConfig+0x256>
 8007364:	2b02      	cmp	r3, #2
 8007366:	d005      	beq.n	8007374 <UART_SetConfig+0x260>
 8007368:	e018      	b.n	800739c <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800736a:	f7fe fa07 	bl	800577c <HAL_RCC_GetPCLK1Freq>
 800736e:	0003      	movs	r3, r0
 8007370:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007372:	e01c      	b.n	80073ae <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007374:	4b3c      	ldr	r3, [pc, #240]	@ (8007468 <UART_SetConfig+0x354>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	2210      	movs	r2, #16
 800737a:	4013      	ands	r3, r2
 800737c:	d002      	beq.n	8007384 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800737e:	4b3e      	ldr	r3, [pc, #248]	@ (8007478 <UART_SetConfig+0x364>)
 8007380:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007382:	e014      	b.n	80073ae <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8007384:	4b3d      	ldr	r3, [pc, #244]	@ (800747c <UART_SetConfig+0x368>)
 8007386:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007388:	e011      	b.n	80073ae <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800738a:	f7fe f967 	bl	800565c <HAL_RCC_GetSysClockFreq>
 800738e:	0003      	movs	r3, r0
 8007390:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007392:	e00c      	b.n	80073ae <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007394:	2380      	movs	r3, #128	@ 0x80
 8007396:	021b      	lsls	r3, r3, #8
 8007398:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800739a:	e008      	b.n	80073ae <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 800739c:	2300      	movs	r3, #0
 800739e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80073a0:	231a      	movs	r3, #26
 80073a2:	2218      	movs	r2, #24
 80073a4:	189b      	adds	r3, r3, r2
 80073a6:	19db      	adds	r3, r3, r7
 80073a8:	2201      	movs	r2, #1
 80073aa:	701a      	strb	r2, [r3, #0]
        break;
 80073ac:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80073ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d100      	bne.n	80073b6 <UART_SetConfig+0x2a2>
 80073b4:	e133      	b.n	800761e <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80073b6:	69fb      	ldr	r3, [r7, #28]
 80073b8:	685a      	ldr	r2, [r3, #4]
 80073ba:	0013      	movs	r3, r2
 80073bc:	005b      	lsls	r3, r3, #1
 80073be:	189b      	adds	r3, r3, r2
 80073c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80073c2:	429a      	cmp	r2, r3
 80073c4:	d305      	bcc.n	80073d2 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 80073c6:	69fb      	ldr	r3, [r7, #28]
 80073c8:	685b      	ldr	r3, [r3, #4]
 80073ca:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80073cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d906      	bls.n	80073e0 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 80073d2:	231a      	movs	r3, #26
 80073d4:	2218      	movs	r2, #24
 80073d6:	189b      	adds	r3, r3, r2
 80073d8:	19db      	adds	r3, r3, r7
 80073da:	2201      	movs	r2, #1
 80073dc:	701a      	strb	r2, [r3, #0]
 80073de:	e11e      	b.n	800761e <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80073e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073e2:	613b      	str	r3, [r7, #16]
 80073e4:	2300      	movs	r3, #0
 80073e6:	617b      	str	r3, [r7, #20]
 80073e8:	6939      	ldr	r1, [r7, #16]
 80073ea:	697a      	ldr	r2, [r7, #20]
 80073ec:	000b      	movs	r3, r1
 80073ee:	0e1b      	lsrs	r3, r3, #24
 80073f0:	0010      	movs	r0, r2
 80073f2:	0205      	lsls	r5, r0, #8
 80073f4:	431d      	orrs	r5, r3
 80073f6:	000b      	movs	r3, r1
 80073f8:	021c      	lsls	r4, r3, #8
 80073fa:	69fb      	ldr	r3, [r7, #28]
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	085b      	lsrs	r3, r3, #1
 8007400:	60bb      	str	r3, [r7, #8]
 8007402:	2300      	movs	r3, #0
 8007404:	60fb      	str	r3, [r7, #12]
 8007406:	68b8      	ldr	r0, [r7, #8]
 8007408:	68f9      	ldr	r1, [r7, #12]
 800740a:	1900      	adds	r0, r0, r4
 800740c:	4169      	adcs	r1, r5
 800740e:	69fb      	ldr	r3, [r7, #28]
 8007410:	685b      	ldr	r3, [r3, #4]
 8007412:	603b      	str	r3, [r7, #0]
 8007414:	2300      	movs	r3, #0
 8007416:	607b      	str	r3, [r7, #4]
 8007418:	683a      	ldr	r2, [r7, #0]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f7f9 f82a 	bl	8000474 <__aeabi_uldivmod>
 8007420:	0002      	movs	r2, r0
 8007422:	000b      	movs	r3, r1
 8007424:	0013      	movs	r3, r2
 8007426:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007428:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800742a:	23c0      	movs	r3, #192	@ 0xc0
 800742c:	009b      	lsls	r3, r3, #2
 800742e:	429a      	cmp	r2, r3
 8007430:	d309      	bcc.n	8007446 <UART_SetConfig+0x332>
 8007432:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007434:	2380      	movs	r3, #128	@ 0x80
 8007436:	035b      	lsls	r3, r3, #13
 8007438:	429a      	cmp	r2, r3
 800743a:	d204      	bcs.n	8007446 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 800743c:	69fb      	ldr	r3, [r7, #28]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007442:	60da      	str	r2, [r3, #12]
 8007444:	e0eb      	b.n	800761e <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8007446:	231a      	movs	r3, #26
 8007448:	2218      	movs	r2, #24
 800744a:	189b      	adds	r3, r3, r2
 800744c:	19db      	adds	r3, r3, r7
 800744e:	2201      	movs	r2, #1
 8007450:	701a      	strb	r2, [r3, #0]
 8007452:	e0e4      	b.n	800761e <UART_SetConfig+0x50a>
 8007454:	efff69f3 	.word	0xefff69f3
 8007458:	ffffcfff 	.word	0xffffcfff
 800745c:	40004800 	.word	0x40004800
 8007460:	fffff4ff 	.word	0xfffff4ff
 8007464:	40013800 	.word	0x40013800
 8007468:	40021000 	.word	0x40021000
 800746c:	40004400 	.word	0x40004400
 8007470:	40004c00 	.word	0x40004c00
 8007474:	40005000 	.word	0x40005000
 8007478:	003d0900 	.word	0x003d0900
 800747c:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007480:	69fb      	ldr	r3, [r7, #28]
 8007482:	69da      	ldr	r2, [r3, #28]
 8007484:	2380      	movs	r3, #128	@ 0x80
 8007486:	021b      	lsls	r3, r3, #8
 8007488:	429a      	cmp	r2, r3
 800748a:	d000      	beq.n	800748e <UART_SetConfig+0x37a>
 800748c:	e070      	b.n	8007570 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 800748e:	231b      	movs	r3, #27
 8007490:	2218      	movs	r2, #24
 8007492:	189b      	adds	r3, r3, r2
 8007494:	19db      	adds	r3, r3, r7
 8007496:	781b      	ldrb	r3, [r3, #0]
 8007498:	2b08      	cmp	r3, #8
 800749a:	d822      	bhi.n	80074e2 <UART_SetConfig+0x3ce>
 800749c:	009a      	lsls	r2, r3, #2
 800749e:	4b67      	ldr	r3, [pc, #412]	@ (800763c <UART_SetConfig+0x528>)
 80074a0:	18d3      	adds	r3, r2, r3
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074a6:	f7fe f969 	bl	800577c <HAL_RCC_GetPCLK1Freq>
 80074aa:	0003      	movs	r3, r0
 80074ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80074ae:	e021      	b.n	80074f4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80074b0:	f7fe f97a 	bl	80057a8 <HAL_RCC_GetPCLK2Freq>
 80074b4:	0003      	movs	r3, r0
 80074b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80074b8:	e01c      	b.n	80074f4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80074ba:	4b61      	ldr	r3, [pc, #388]	@ (8007640 <UART_SetConfig+0x52c>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	2210      	movs	r2, #16
 80074c0:	4013      	ands	r3, r2
 80074c2:	d002      	beq.n	80074ca <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80074c4:	4b5f      	ldr	r3, [pc, #380]	@ (8007644 <UART_SetConfig+0x530>)
 80074c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80074c8:	e014      	b.n	80074f4 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 80074ca:	4b5f      	ldr	r3, [pc, #380]	@ (8007648 <UART_SetConfig+0x534>)
 80074cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80074ce:	e011      	b.n	80074f4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80074d0:	f7fe f8c4 	bl	800565c <HAL_RCC_GetSysClockFreq>
 80074d4:	0003      	movs	r3, r0
 80074d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80074d8:	e00c      	b.n	80074f4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074da:	2380      	movs	r3, #128	@ 0x80
 80074dc:	021b      	lsls	r3, r3, #8
 80074de:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80074e0:	e008      	b.n	80074f4 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 80074e2:	2300      	movs	r3, #0
 80074e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80074e6:	231a      	movs	r3, #26
 80074e8:	2218      	movs	r2, #24
 80074ea:	189b      	adds	r3, r3, r2
 80074ec:	19db      	adds	r3, r3, r7
 80074ee:	2201      	movs	r2, #1
 80074f0:	701a      	strb	r2, [r3, #0]
        break;
 80074f2:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80074f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d100      	bne.n	80074fc <UART_SetConfig+0x3e8>
 80074fa:	e090      	b.n	800761e <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80074fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074fe:	005a      	lsls	r2, r3, #1
 8007500:	69fb      	ldr	r3, [r7, #28]
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	085b      	lsrs	r3, r3, #1
 8007506:	18d2      	adds	r2, r2, r3
 8007508:	69fb      	ldr	r3, [r7, #28]
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	0019      	movs	r1, r3
 800750e:	0010      	movs	r0, r2
 8007510:	f7f8 fe16 	bl	8000140 <__udivsi3>
 8007514:	0003      	movs	r3, r0
 8007516:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800751a:	2b0f      	cmp	r3, #15
 800751c:	d921      	bls.n	8007562 <UART_SetConfig+0x44e>
 800751e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007520:	2380      	movs	r3, #128	@ 0x80
 8007522:	025b      	lsls	r3, r3, #9
 8007524:	429a      	cmp	r2, r3
 8007526:	d21c      	bcs.n	8007562 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007528:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800752a:	b29a      	uxth	r2, r3
 800752c:	200e      	movs	r0, #14
 800752e:	2418      	movs	r4, #24
 8007530:	1903      	adds	r3, r0, r4
 8007532:	19db      	adds	r3, r3, r7
 8007534:	210f      	movs	r1, #15
 8007536:	438a      	bics	r2, r1
 8007538:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800753a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800753c:	085b      	lsrs	r3, r3, #1
 800753e:	b29b      	uxth	r3, r3
 8007540:	2207      	movs	r2, #7
 8007542:	4013      	ands	r3, r2
 8007544:	b299      	uxth	r1, r3
 8007546:	1903      	adds	r3, r0, r4
 8007548:	19db      	adds	r3, r3, r7
 800754a:	1902      	adds	r2, r0, r4
 800754c:	19d2      	adds	r2, r2, r7
 800754e:	8812      	ldrh	r2, [r2, #0]
 8007550:	430a      	orrs	r2, r1
 8007552:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007554:	69fb      	ldr	r3, [r7, #28]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	1902      	adds	r2, r0, r4
 800755a:	19d2      	adds	r2, r2, r7
 800755c:	8812      	ldrh	r2, [r2, #0]
 800755e:	60da      	str	r2, [r3, #12]
 8007560:	e05d      	b.n	800761e <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8007562:	231a      	movs	r3, #26
 8007564:	2218      	movs	r2, #24
 8007566:	189b      	adds	r3, r3, r2
 8007568:	19db      	adds	r3, r3, r7
 800756a:	2201      	movs	r2, #1
 800756c:	701a      	strb	r2, [r3, #0]
 800756e:	e056      	b.n	800761e <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007570:	231b      	movs	r3, #27
 8007572:	2218      	movs	r2, #24
 8007574:	189b      	adds	r3, r3, r2
 8007576:	19db      	adds	r3, r3, r7
 8007578:	781b      	ldrb	r3, [r3, #0]
 800757a:	2b08      	cmp	r3, #8
 800757c:	d822      	bhi.n	80075c4 <UART_SetConfig+0x4b0>
 800757e:	009a      	lsls	r2, r3, #2
 8007580:	4b32      	ldr	r3, [pc, #200]	@ (800764c <UART_SetConfig+0x538>)
 8007582:	18d3      	adds	r3, r2, r3
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007588:	f7fe f8f8 	bl	800577c <HAL_RCC_GetPCLK1Freq>
 800758c:	0003      	movs	r3, r0
 800758e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007590:	e021      	b.n	80075d6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007592:	f7fe f909 	bl	80057a8 <HAL_RCC_GetPCLK2Freq>
 8007596:	0003      	movs	r3, r0
 8007598:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800759a:	e01c      	b.n	80075d6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800759c:	4b28      	ldr	r3, [pc, #160]	@ (8007640 <UART_SetConfig+0x52c>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	2210      	movs	r2, #16
 80075a2:	4013      	ands	r3, r2
 80075a4:	d002      	beq.n	80075ac <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80075a6:	4b27      	ldr	r3, [pc, #156]	@ (8007644 <UART_SetConfig+0x530>)
 80075a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80075aa:	e014      	b.n	80075d6 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 80075ac:	4b26      	ldr	r3, [pc, #152]	@ (8007648 <UART_SetConfig+0x534>)
 80075ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80075b0:	e011      	b.n	80075d6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80075b2:	f7fe f853 	bl	800565c <HAL_RCC_GetSysClockFreq>
 80075b6:	0003      	movs	r3, r0
 80075b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80075ba:	e00c      	b.n	80075d6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075bc:	2380      	movs	r3, #128	@ 0x80
 80075be:	021b      	lsls	r3, r3, #8
 80075c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80075c2:	e008      	b.n	80075d6 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 80075c4:	2300      	movs	r3, #0
 80075c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80075c8:	231a      	movs	r3, #26
 80075ca:	2218      	movs	r2, #24
 80075cc:	189b      	adds	r3, r3, r2
 80075ce:	19db      	adds	r3, r3, r7
 80075d0:	2201      	movs	r2, #1
 80075d2:	701a      	strb	r2, [r3, #0]
        break;
 80075d4:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80075d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d020      	beq.n	800761e <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80075dc:	69fb      	ldr	r3, [r7, #28]
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	085a      	lsrs	r2, r3, #1
 80075e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075e4:	18d2      	adds	r2, r2, r3
 80075e6:	69fb      	ldr	r3, [r7, #28]
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	0019      	movs	r1, r3
 80075ec:	0010      	movs	r0, r2
 80075ee:	f7f8 fda7 	bl	8000140 <__udivsi3>
 80075f2:	0003      	movs	r3, r0
 80075f4:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80075f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075f8:	2b0f      	cmp	r3, #15
 80075fa:	d90a      	bls.n	8007612 <UART_SetConfig+0x4fe>
 80075fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80075fe:	2380      	movs	r3, #128	@ 0x80
 8007600:	025b      	lsls	r3, r3, #9
 8007602:	429a      	cmp	r2, r3
 8007604:	d205      	bcs.n	8007612 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007608:	b29a      	uxth	r2, r3
 800760a:	69fb      	ldr	r3, [r7, #28]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	60da      	str	r2, [r3, #12]
 8007610:	e005      	b.n	800761e <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8007612:	231a      	movs	r3, #26
 8007614:	2218      	movs	r2, #24
 8007616:	189b      	adds	r3, r3, r2
 8007618:	19db      	adds	r3, r3, r7
 800761a:	2201      	movs	r2, #1
 800761c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800761e:	69fb      	ldr	r3, [r7, #28]
 8007620:	2200      	movs	r2, #0
 8007622:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007624:	69fb      	ldr	r3, [r7, #28]
 8007626:	2200      	movs	r2, #0
 8007628:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800762a:	231a      	movs	r3, #26
 800762c:	2218      	movs	r2, #24
 800762e:	189b      	adds	r3, r3, r2
 8007630:	19db      	adds	r3, r3, r7
 8007632:	781b      	ldrb	r3, [r3, #0]
}
 8007634:	0018      	movs	r0, r3
 8007636:	46bd      	mov	sp, r7
 8007638:	b00e      	add	sp, #56	@ 0x38
 800763a:	bdb0      	pop	{r4, r5, r7, pc}
 800763c:	0800e140 	.word	0x0800e140
 8007640:	40021000 	.word	0x40021000
 8007644:	003d0900 	.word	0x003d0900
 8007648:	00f42400 	.word	0x00f42400
 800764c:	0800e164 	.word	0x0800e164

08007650 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b082      	sub	sp, #8
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800765c:	2208      	movs	r2, #8
 800765e:	4013      	ands	r3, r2
 8007660:	d00b      	beq.n	800767a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	4a4a      	ldr	r2, [pc, #296]	@ (8007794 <UART_AdvFeatureConfig+0x144>)
 800766a:	4013      	ands	r3, r2
 800766c:	0019      	movs	r1, r3
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	430a      	orrs	r2, r1
 8007678:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800767e:	2201      	movs	r2, #1
 8007680:	4013      	ands	r3, r2
 8007682:	d00b      	beq.n	800769c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	685b      	ldr	r3, [r3, #4]
 800768a:	4a43      	ldr	r2, [pc, #268]	@ (8007798 <UART_AdvFeatureConfig+0x148>)
 800768c:	4013      	ands	r3, r2
 800768e:	0019      	movs	r1, r3
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	430a      	orrs	r2, r1
 800769a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076a0:	2202      	movs	r2, #2
 80076a2:	4013      	ands	r3, r2
 80076a4:	d00b      	beq.n	80076be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	4a3b      	ldr	r2, [pc, #236]	@ (800779c <UART_AdvFeatureConfig+0x14c>)
 80076ae:	4013      	ands	r3, r2
 80076b0:	0019      	movs	r1, r3
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	430a      	orrs	r2, r1
 80076bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076c2:	2204      	movs	r2, #4
 80076c4:	4013      	ands	r3, r2
 80076c6:	d00b      	beq.n	80076e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	685b      	ldr	r3, [r3, #4]
 80076ce:	4a34      	ldr	r2, [pc, #208]	@ (80077a0 <UART_AdvFeatureConfig+0x150>)
 80076d0:	4013      	ands	r3, r2
 80076d2:	0019      	movs	r1, r3
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	430a      	orrs	r2, r1
 80076de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076e4:	2210      	movs	r2, #16
 80076e6:	4013      	ands	r3, r2
 80076e8:	d00b      	beq.n	8007702 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	689b      	ldr	r3, [r3, #8]
 80076f0:	4a2c      	ldr	r2, [pc, #176]	@ (80077a4 <UART_AdvFeatureConfig+0x154>)
 80076f2:	4013      	ands	r3, r2
 80076f4:	0019      	movs	r1, r3
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	430a      	orrs	r2, r1
 8007700:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007706:	2220      	movs	r2, #32
 8007708:	4013      	ands	r3, r2
 800770a:	d00b      	beq.n	8007724 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	689b      	ldr	r3, [r3, #8]
 8007712:	4a25      	ldr	r2, [pc, #148]	@ (80077a8 <UART_AdvFeatureConfig+0x158>)
 8007714:	4013      	ands	r3, r2
 8007716:	0019      	movs	r1, r3
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	430a      	orrs	r2, r1
 8007722:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007728:	2240      	movs	r2, #64	@ 0x40
 800772a:	4013      	ands	r3, r2
 800772c:	d01d      	beq.n	800776a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	4a1d      	ldr	r2, [pc, #116]	@ (80077ac <UART_AdvFeatureConfig+0x15c>)
 8007736:	4013      	ands	r3, r2
 8007738:	0019      	movs	r1, r3
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	430a      	orrs	r2, r1
 8007744:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800774a:	2380      	movs	r3, #128	@ 0x80
 800774c:	035b      	lsls	r3, r3, #13
 800774e:	429a      	cmp	r2, r3
 8007750:	d10b      	bne.n	800776a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	685b      	ldr	r3, [r3, #4]
 8007758:	4a15      	ldr	r2, [pc, #84]	@ (80077b0 <UART_AdvFeatureConfig+0x160>)
 800775a:	4013      	ands	r3, r2
 800775c:	0019      	movs	r1, r3
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	430a      	orrs	r2, r1
 8007768:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800776e:	2280      	movs	r2, #128	@ 0x80
 8007770:	4013      	ands	r3, r2
 8007772:	d00b      	beq.n	800778c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	685b      	ldr	r3, [r3, #4]
 800777a:	4a0e      	ldr	r2, [pc, #56]	@ (80077b4 <UART_AdvFeatureConfig+0x164>)
 800777c:	4013      	ands	r3, r2
 800777e:	0019      	movs	r1, r3
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	430a      	orrs	r2, r1
 800778a:	605a      	str	r2, [r3, #4]
  }
}
 800778c:	46c0      	nop			@ (mov r8, r8)
 800778e:	46bd      	mov	sp, r7
 8007790:	b002      	add	sp, #8
 8007792:	bd80      	pop	{r7, pc}
 8007794:	ffff7fff 	.word	0xffff7fff
 8007798:	fffdffff 	.word	0xfffdffff
 800779c:	fffeffff 	.word	0xfffeffff
 80077a0:	fffbffff 	.word	0xfffbffff
 80077a4:	ffffefff 	.word	0xffffefff
 80077a8:	ffffdfff 	.word	0xffffdfff
 80077ac:	ffefffff 	.word	0xffefffff
 80077b0:	ff9fffff 	.word	0xff9fffff
 80077b4:	fff7ffff 	.word	0xfff7ffff

080077b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b092      	sub	sp, #72	@ 0x48
 80077bc:	af02      	add	r7, sp, #8
 80077be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2284      	movs	r2, #132	@ 0x84
 80077c4:	2100      	movs	r1, #0
 80077c6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80077c8:	f7fb f9ec 	bl	8002ba4 <HAL_GetTick>
 80077cc:	0003      	movs	r3, r0
 80077ce:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	2208      	movs	r2, #8
 80077d8:	4013      	ands	r3, r2
 80077da:	2b08      	cmp	r3, #8
 80077dc:	d12c      	bne.n	8007838 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80077de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077e0:	2280      	movs	r2, #128	@ 0x80
 80077e2:	0391      	lsls	r1, r2, #14
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	4a46      	ldr	r2, [pc, #280]	@ (8007900 <UART_CheckIdleState+0x148>)
 80077e8:	9200      	str	r2, [sp, #0]
 80077ea:	2200      	movs	r2, #0
 80077ec:	f000 f88c 	bl	8007908 <UART_WaitOnFlagUntilTimeout>
 80077f0:	1e03      	subs	r3, r0, #0
 80077f2:	d021      	beq.n	8007838 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077f4:	f3ef 8310 	mrs	r3, PRIMASK
 80077f8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80077fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80077fc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80077fe:	2301      	movs	r3, #1
 8007800:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007804:	f383 8810 	msr	PRIMASK, r3
}
 8007808:	46c0      	nop			@ (mov r8, r8)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	681a      	ldr	r2, [r3, #0]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	2180      	movs	r1, #128	@ 0x80
 8007816:	438a      	bics	r2, r1
 8007818:	601a      	str	r2, [r3, #0]
 800781a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800781c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800781e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007820:	f383 8810 	msr	PRIMASK, r3
}
 8007824:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2220      	movs	r2, #32
 800782a:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2278      	movs	r2, #120	@ 0x78
 8007830:	2100      	movs	r1, #0
 8007832:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007834:	2303      	movs	r3, #3
 8007836:	e05f      	b.n	80078f8 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	2204      	movs	r2, #4
 8007840:	4013      	ands	r3, r2
 8007842:	2b04      	cmp	r3, #4
 8007844:	d146      	bne.n	80078d4 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007846:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007848:	2280      	movs	r2, #128	@ 0x80
 800784a:	03d1      	lsls	r1, r2, #15
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	4a2c      	ldr	r2, [pc, #176]	@ (8007900 <UART_CheckIdleState+0x148>)
 8007850:	9200      	str	r2, [sp, #0]
 8007852:	2200      	movs	r2, #0
 8007854:	f000 f858 	bl	8007908 <UART_WaitOnFlagUntilTimeout>
 8007858:	1e03      	subs	r3, r0, #0
 800785a:	d03b      	beq.n	80078d4 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800785c:	f3ef 8310 	mrs	r3, PRIMASK
 8007860:	60fb      	str	r3, [r7, #12]
  return(result);
 8007862:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007864:	637b      	str	r3, [r7, #52]	@ 0x34
 8007866:	2301      	movs	r3, #1
 8007868:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	f383 8810 	msr	PRIMASK, r3
}
 8007870:	46c0      	nop			@ (mov r8, r8)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	681a      	ldr	r2, [r3, #0]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4921      	ldr	r1, [pc, #132]	@ (8007904 <UART_CheckIdleState+0x14c>)
 800787e:	400a      	ands	r2, r1
 8007880:	601a      	str	r2, [r3, #0]
 8007882:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007884:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	f383 8810 	msr	PRIMASK, r3
}
 800788c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800788e:	f3ef 8310 	mrs	r3, PRIMASK
 8007892:	61bb      	str	r3, [r7, #24]
  return(result);
 8007894:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007896:	633b      	str	r3, [r7, #48]	@ 0x30
 8007898:	2301      	movs	r3, #1
 800789a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800789c:	69fb      	ldr	r3, [r7, #28]
 800789e:	f383 8810 	msr	PRIMASK, r3
}
 80078a2:	46c0      	nop			@ (mov r8, r8)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	689a      	ldr	r2, [r3, #8]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	2101      	movs	r1, #1
 80078b0:	438a      	bics	r2, r1
 80078b2:	609a      	str	r2, [r3, #8]
 80078b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078b6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078b8:	6a3b      	ldr	r3, [r7, #32]
 80078ba:	f383 8810 	msr	PRIMASK, r3
}
 80078be:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2280      	movs	r2, #128	@ 0x80
 80078c4:	2120      	movs	r1, #32
 80078c6:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2278      	movs	r2, #120	@ 0x78
 80078cc:	2100      	movs	r1, #0
 80078ce:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80078d0:	2303      	movs	r3, #3
 80078d2:	e011      	b.n	80078f8 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2220      	movs	r2, #32
 80078d8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2280      	movs	r2, #128	@ 0x80
 80078de:	2120      	movs	r1, #32
 80078e0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2200      	movs	r2, #0
 80078e6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2200      	movs	r2, #0
 80078ec:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2278      	movs	r2, #120	@ 0x78
 80078f2:	2100      	movs	r1, #0
 80078f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80078f6:	2300      	movs	r3, #0
}
 80078f8:	0018      	movs	r0, r3
 80078fa:	46bd      	mov	sp, r7
 80078fc:	b010      	add	sp, #64	@ 0x40
 80078fe:	bd80      	pop	{r7, pc}
 8007900:	01ffffff 	.word	0x01ffffff
 8007904:	fffffedf 	.word	0xfffffedf

08007908 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b084      	sub	sp, #16
 800790c:	af00      	add	r7, sp, #0
 800790e:	60f8      	str	r0, [r7, #12]
 8007910:	60b9      	str	r1, [r7, #8]
 8007912:	603b      	str	r3, [r7, #0]
 8007914:	1dfb      	adds	r3, r7, #7
 8007916:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007918:	e051      	b.n	80079be <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800791a:	69bb      	ldr	r3, [r7, #24]
 800791c:	3301      	adds	r3, #1
 800791e:	d04e      	beq.n	80079be <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007920:	f7fb f940 	bl	8002ba4 <HAL_GetTick>
 8007924:	0002      	movs	r2, r0
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	1ad3      	subs	r3, r2, r3
 800792a:	69ba      	ldr	r2, [r7, #24]
 800792c:	429a      	cmp	r2, r3
 800792e:	d302      	bcc.n	8007936 <UART_WaitOnFlagUntilTimeout+0x2e>
 8007930:	69bb      	ldr	r3, [r7, #24]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d101      	bne.n	800793a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8007936:	2303      	movs	r3, #3
 8007938:	e051      	b.n	80079de <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	2204      	movs	r2, #4
 8007942:	4013      	ands	r3, r2
 8007944:	d03b      	beq.n	80079be <UART_WaitOnFlagUntilTimeout+0xb6>
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	2b80      	cmp	r3, #128	@ 0x80
 800794a:	d038      	beq.n	80079be <UART_WaitOnFlagUntilTimeout+0xb6>
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	2b40      	cmp	r3, #64	@ 0x40
 8007950:	d035      	beq.n	80079be <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	69db      	ldr	r3, [r3, #28]
 8007958:	2208      	movs	r2, #8
 800795a:	4013      	ands	r3, r2
 800795c:	2b08      	cmp	r3, #8
 800795e:	d111      	bne.n	8007984 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	2208      	movs	r2, #8
 8007966:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	0018      	movs	r0, r3
 800796c:	f000 f900 	bl	8007b70 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	2284      	movs	r2, #132	@ 0x84
 8007974:	2108      	movs	r1, #8
 8007976:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	2278      	movs	r2, #120	@ 0x78
 800797c:	2100      	movs	r1, #0
 800797e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8007980:	2301      	movs	r3, #1
 8007982:	e02c      	b.n	80079de <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	69da      	ldr	r2, [r3, #28]
 800798a:	2380      	movs	r3, #128	@ 0x80
 800798c:	011b      	lsls	r3, r3, #4
 800798e:	401a      	ands	r2, r3
 8007990:	2380      	movs	r3, #128	@ 0x80
 8007992:	011b      	lsls	r3, r3, #4
 8007994:	429a      	cmp	r2, r3
 8007996:	d112      	bne.n	80079be <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	2280      	movs	r2, #128	@ 0x80
 800799e:	0112      	lsls	r2, r2, #4
 80079a0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	0018      	movs	r0, r3
 80079a6:	f000 f8e3 	bl	8007b70 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2284      	movs	r2, #132	@ 0x84
 80079ae:	2120      	movs	r1, #32
 80079b0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	2278      	movs	r2, #120	@ 0x78
 80079b6:	2100      	movs	r1, #0
 80079b8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80079ba:	2303      	movs	r3, #3
 80079bc:	e00f      	b.n	80079de <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	69db      	ldr	r3, [r3, #28]
 80079c4:	68ba      	ldr	r2, [r7, #8]
 80079c6:	4013      	ands	r3, r2
 80079c8:	68ba      	ldr	r2, [r7, #8]
 80079ca:	1ad3      	subs	r3, r2, r3
 80079cc:	425a      	negs	r2, r3
 80079ce:	4153      	adcs	r3, r2
 80079d0:	b2db      	uxtb	r3, r3
 80079d2:	001a      	movs	r2, r3
 80079d4:	1dfb      	adds	r3, r7, #7
 80079d6:	781b      	ldrb	r3, [r3, #0]
 80079d8:	429a      	cmp	r2, r3
 80079da:	d09e      	beq.n	800791a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80079dc:	2300      	movs	r3, #0
}
 80079de:	0018      	movs	r0, r3
 80079e0:	46bd      	mov	sp, r7
 80079e2:	b004      	add	sp, #16
 80079e4:	bd80      	pop	{r7, pc}
	...

080079e8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b090      	sub	sp, #64	@ 0x40
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	60f8      	str	r0, [r7, #12]
 80079f0:	60b9      	str	r1, [r7, #8]
 80079f2:	1dbb      	adds	r3, r7, #6
 80079f4:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	68ba      	ldr	r2, [r7, #8]
 80079fa:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	1dba      	adds	r2, r7, #6
 8007a00:	2158      	movs	r1, #88	@ 0x58
 8007a02:	8812      	ldrh	r2, [r2, #0]
 8007a04:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	2284      	movs	r2, #132	@ 0x84
 8007a0a:	2100      	movs	r1, #0
 8007a0c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2280      	movs	r2, #128	@ 0x80
 8007a12:	2122      	movs	r1, #34	@ 0x22
 8007a14:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d028      	beq.n	8007a70 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a22:	4a3e      	ldr	r2, [pc, #248]	@ (8007b1c <UART_Start_Receive_DMA+0x134>)
 8007a24:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a2a:	4a3d      	ldr	r2, [pc, #244]	@ (8007b20 <UART_Start_Receive_DMA+0x138>)
 8007a2c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a32:	4a3c      	ldr	r2, [pc, #240]	@ (8007b24 <UART_Start_Receive_DMA+0x13c>)
 8007a34:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	3324      	adds	r3, #36	@ 0x24
 8007a48:	0019      	movs	r1, r3
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a4e:	001a      	movs	r2, r3
 8007a50:	1dbb      	adds	r3, r7, #6
 8007a52:	881b      	ldrh	r3, [r3, #0]
 8007a54:	f7fb fb06 	bl	8003064 <HAL_DMA_Start_IT>
 8007a58:	1e03      	subs	r3, r0, #0
 8007a5a:	d009      	beq.n	8007a70 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	2284      	movs	r2, #132	@ 0x84
 8007a60:	2110      	movs	r1, #16
 8007a62:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	2280      	movs	r2, #128	@ 0x80
 8007a68:	2120      	movs	r1, #32
 8007a6a:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	e050      	b.n	8007b12 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	691b      	ldr	r3, [r3, #16]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d019      	beq.n	8007aac <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a78:	f3ef 8310 	mrs	r3, PRIMASK
 8007a7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8007a7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a80:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a82:	2301      	movs	r3, #1
 8007a84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a88:	f383 8810 	msr	PRIMASK, r3
}
 8007a8c:	46c0      	nop			@ (mov r8, r8)
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	681a      	ldr	r2, [r3, #0]
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	2180      	movs	r1, #128	@ 0x80
 8007a9a:	0049      	lsls	r1, r1, #1
 8007a9c:	430a      	orrs	r2, r1
 8007a9e:	601a      	str	r2, [r3, #0]
 8007aa0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007aa2:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aa6:	f383 8810 	msr	PRIMASK, r3
}
 8007aaa:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007aac:	f3ef 8310 	mrs	r3, PRIMASK
 8007ab0:	613b      	str	r3, [r7, #16]
  return(result);
 8007ab2:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ab4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	f383 8810 	msr	PRIMASK, r3
}
 8007ac0:	46c0      	nop			@ (mov r8, r8)
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	689a      	ldr	r2, [r3, #8]
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	2101      	movs	r1, #1
 8007ace:	430a      	orrs	r2, r1
 8007ad0:	609a      	str	r2, [r3, #8]
 8007ad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ad4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ad6:	69bb      	ldr	r3, [r7, #24]
 8007ad8:	f383 8810 	msr	PRIMASK, r3
}
 8007adc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ade:	f3ef 8310 	mrs	r3, PRIMASK
 8007ae2:	61fb      	str	r3, [r7, #28]
  return(result);
 8007ae4:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ae6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ae8:	2301      	movs	r3, #1
 8007aea:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007aec:	6a3b      	ldr	r3, [r7, #32]
 8007aee:	f383 8810 	msr	PRIMASK, r3
}
 8007af2:	46c0      	nop			@ (mov r8, r8)
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	689a      	ldr	r2, [r3, #8]
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	2140      	movs	r1, #64	@ 0x40
 8007b00:	430a      	orrs	r2, r1
 8007b02:	609a      	str	r2, [r3, #8]
 8007b04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b06:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b0a:	f383 8810 	msr	PRIMASK, r3
}
 8007b0e:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8007b10:	2300      	movs	r3, #0
}
 8007b12:	0018      	movs	r0, r3
 8007b14:	46bd      	mov	sp, r7
 8007b16:	b010      	add	sp, #64	@ 0x40
 8007b18:	bd80      	pop	{r7, pc}
 8007b1a:	46c0      	nop			@ (mov r8, r8)
 8007b1c:	08007cf1 	.word	0x08007cf1
 8007b20:	08007e59 	.word	0x08007e59
 8007b24:	08007ed7 	.word	0x08007ed7

08007b28 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b086      	sub	sp, #24
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b30:	f3ef 8310 	mrs	r3, PRIMASK
 8007b34:	60bb      	str	r3, [r7, #8]
  return(result);
 8007b36:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007b38:	617b      	str	r3, [r7, #20]
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	f383 8810 	msr	PRIMASK, r3
}
 8007b44:	46c0      	nop			@ (mov r8, r8)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	681a      	ldr	r2, [r3, #0]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	21c0      	movs	r1, #192	@ 0xc0
 8007b52:	438a      	bics	r2, r1
 8007b54:	601a      	str	r2, [r3, #0]
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b5a:	693b      	ldr	r3, [r7, #16]
 8007b5c:	f383 8810 	msr	PRIMASK, r3
}
 8007b60:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2220      	movs	r2, #32
 8007b66:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8007b68:	46c0      	nop			@ (mov r8, r8)
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	b006      	add	sp, #24
 8007b6e:	bd80      	pop	{r7, pc}

08007b70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b08e      	sub	sp, #56	@ 0x38
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b78:	f3ef 8310 	mrs	r3, PRIMASK
 8007b7c:	617b      	str	r3, [r7, #20]
  return(result);
 8007b7e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b80:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b82:	2301      	movs	r3, #1
 8007b84:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b86:	69bb      	ldr	r3, [r7, #24]
 8007b88:	f383 8810 	msr	PRIMASK, r3
}
 8007b8c:	46c0      	nop			@ (mov r8, r8)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	681a      	ldr	r2, [r3, #0]
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4926      	ldr	r1, [pc, #152]	@ (8007c34 <UART_EndRxTransfer+0xc4>)
 8007b9a:	400a      	ands	r2, r1
 8007b9c:	601a      	str	r2, [r3, #0]
 8007b9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ba0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ba2:	69fb      	ldr	r3, [r7, #28]
 8007ba4:	f383 8810 	msr	PRIMASK, r3
}
 8007ba8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007baa:	f3ef 8310 	mrs	r3, PRIMASK
 8007bae:	623b      	str	r3, [r7, #32]
  return(result);
 8007bb0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bb2:	633b      	str	r3, [r7, #48]	@ 0x30
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bba:	f383 8810 	msr	PRIMASK, r3
}
 8007bbe:	46c0      	nop			@ (mov r8, r8)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	689a      	ldr	r2, [r3, #8]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	2101      	movs	r1, #1
 8007bcc:	438a      	bics	r2, r1
 8007bce:	609a      	str	r2, [r3, #8]
 8007bd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bd2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bd6:	f383 8810 	msr	PRIMASK, r3
}
 8007bda:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007be0:	2b01      	cmp	r3, #1
 8007be2:	d118      	bne.n	8007c16 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007be4:	f3ef 8310 	mrs	r3, PRIMASK
 8007be8:	60bb      	str	r3, [r7, #8]
  return(result);
 8007bea:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007bee:	2301      	movs	r3, #1
 8007bf0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	f383 8810 	msr	PRIMASK, r3
}
 8007bf8:	46c0      	nop			@ (mov r8, r8)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	681a      	ldr	r2, [r3, #0]
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	2110      	movs	r1, #16
 8007c06:	438a      	bics	r2, r1
 8007c08:	601a      	str	r2, [r3, #0]
 8007c0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c0c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c0e:	693b      	ldr	r3, [r7, #16]
 8007c10:	f383 8810 	msr	PRIMASK, r3
}
 8007c14:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2280      	movs	r2, #128	@ 0x80
 8007c1a:	2120      	movs	r1, #32
 8007c1c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2200      	movs	r2, #0
 8007c22:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2200      	movs	r2, #0
 8007c28:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007c2a:	46c0      	nop			@ (mov r8, r8)
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	b00e      	add	sp, #56	@ 0x38
 8007c30:	bd80      	pop	{r7, pc}
 8007c32:	46c0      	nop			@ (mov r8, r8)
 8007c34:	fffffedf 	.word	0xfffffedf

08007c38 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b08c      	sub	sp, #48	@ 0x30
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c44:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	2220      	movs	r2, #32
 8007c4e:	4013      	ands	r3, r2
 8007c50:	d135      	bne.n	8007cbe <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8007c52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c54:	2252      	movs	r2, #82	@ 0x52
 8007c56:	2100      	movs	r1, #0
 8007c58:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c5a:	f3ef 8310 	mrs	r3, PRIMASK
 8007c5e:	60fb      	str	r3, [r7, #12]
  return(result);
 8007c60:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007c62:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007c64:	2301      	movs	r3, #1
 8007c66:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c68:	693b      	ldr	r3, [r7, #16]
 8007c6a:	f383 8810 	msr	PRIMASK, r3
}
 8007c6e:	46c0      	nop			@ (mov r8, r8)
 8007c70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	689a      	ldr	r2, [r3, #8]
 8007c76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	2180      	movs	r1, #128	@ 0x80
 8007c7c:	438a      	bics	r2, r1
 8007c7e:	609a      	str	r2, [r3, #8]
 8007c80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c82:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	f383 8810 	msr	PRIMASK, r3
}
 8007c8a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c8c:	f3ef 8310 	mrs	r3, PRIMASK
 8007c90:	61bb      	str	r3, [r7, #24]
  return(result);
 8007c92:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007c94:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c96:	2301      	movs	r3, #1
 8007c98:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c9a:	69fb      	ldr	r3, [r7, #28]
 8007c9c:	f383 8810 	msr	PRIMASK, r3
}
 8007ca0:	46c0      	nop			@ (mov r8, r8)
 8007ca2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	681a      	ldr	r2, [r3, #0]
 8007ca8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	2140      	movs	r1, #64	@ 0x40
 8007cae:	430a      	orrs	r2, r1
 8007cb0:	601a      	str	r2, [r3, #0]
 8007cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cb4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007cb6:	6a3b      	ldr	r3, [r7, #32]
 8007cb8:	f383 8810 	msr	PRIMASK, r3
}
 8007cbc:	e004      	b.n	8007cc8 <UART_DMATransmitCplt+0x90>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 8007cbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cc0:	0018      	movs	r0, r3
 8007cc2:	f000 fb27 	bl	8008314 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007cc6:	46c0      	nop			@ (mov r8, r8)
 8007cc8:	46c0      	nop			@ (mov r8, r8)
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	b00c      	add	sp, #48	@ 0x30
 8007cce:	bd80      	pop	{r7, pc}

08007cd0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b084      	sub	sp, #16
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cdc:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	0018      	movs	r0, r3
 8007ce2:	f7ff f9fb 	bl	80070dc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ce6:	46c0      	nop			@ (mov r8, r8)
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	b004      	add	sp, #16
 8007cec:	bd80      	pop	{r7, pc}
	...

08007cf0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b094      	sub	sp, #80	@ 0x50
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cfc:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	2220      	movs	r2, #32
 8007d06:	4013      	ands	r3, r2
 8007d08:	d16f      	bne.n	8007dea <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8007d0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d0c:	225a      	movs	r2, #90	@ 0x5a
 8007d0e:	2100      	movs	r1, #0
 8007d10:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d12:	f3ef 8310 	mrs	r3, PRIMASK
 8007d16:	617b      	str	r3, [r7, #20]
  return(result);
 8007d18:	697b      	ldr	r3, [r7, #20]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d1a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d20:	69bb      	ldr	r3, [r7, #24]
 8007d22:	f383 8810 	msr	PRIMASK, r3
}
 8007d26:	46c0      	nop			@ (mov r8, r8)
 8007d28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	681a      	ldr	r2, [r3, #0]
 8007d2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	4948      	ldr	r1, [pc, #288]	@ (8007e54 <UART_DMAReceiveCplt+0x164>)
 8007d34:	400a      	ands	r2, r1
 8007d36:	601a      	str	r2, [r3, #0]
 8007d38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d3a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d3c:	69fb      	ldr	r3, [r7, #28]
 8007d3e:	f383 8810 	msr	PRIMASK, r3
}
 8007d42:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d44:	f3ef 8310 	mrs	r3, PRIMASK
 8007d48:	623b      	str	r3, [r7, #32]
  return(result);
 8007d4a:	6a3b      	ldr	r3, [r7, #32]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d4e:	2301      	movs	r3, #1
 8007d50:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d54:	f383 8810 	msr	PRIMASK, r3
}
 8007d58:	46c0      	nop			@ (mov r8, r8)
 8007d5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	689a      	ldr	r2, [r3, #8]
 8007d60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	2101      	movs	r1, #1
 8007d66:	438a      	bics	r2, r1
 8007d68:	609a      	str	r2, [r3, #8]
 8007d6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d70:	f383 8810 	msr	PRIMASK, r3
}
 8007d74:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d76:	f3ef 8310 	mrs	r3, PRIMASK
 8007d7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8007d7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d7e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007d80:	2301      	movs	r3, #1
 8007d82:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d86:	f383 8810 	msr	PRIMASK, r3
}
 8007d8a:	46c0      	nop			@ (mov r8, r8)
 8007d8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	689a      	ldr	r2, [r3, #8]
 8007d92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	2140      	movs	r1, #64	@ 0x40
 8007d98:	438a      	bics	r2, r1
 8007d9a:	609a      	str	r2, [r3, #8]
 8007d9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d9e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007da0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007da2:	f383 8810 	msr	PRIMASK, r3
}
 8007da6:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007da8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007daa:	2280      	movs	r2, #128	@ 0x80
 8007dac:	2120      	movs	r1, #32
 8007dae:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007db0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007db2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007db4:	2b01      	cmp	r3, #1
 8007db6:	d118      	bne.n	8007dea <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007db8:	f3ef 8310 	mrs	r3, PRIMASK
 8007dbc:	60bb      	str	r3, [r7, #8]
  return(result);
 8007dbe:	68bb      	ldr	r3, [r7, #8]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007dc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	f383 8810 	msr	PRIMASK, r3
}
 8007dcc:	46c0      	nop			@ (mov r8, r8)
 8007dce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	681a      	ldr	r2, [r3, #0]
 8007dd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	2110      	movs	r1, #16
 8007dda:	438a      	bics	r2, r1
 8007ddc:	601a      	str	r2, [r3, #0]
 8007dde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007de0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007de2:	693b      	ldr	r3, [r7, #16]
 8007de4:	f383 8810 	msr	PRIMASK, r3
}
 8007de8:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007dea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007dec:	2200      	movs	r2, #0
 8007dee:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007df0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007df2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007df4:	2b01      	cmp	r3, #1
 8007df6:	d124      	bne.n	8007e42 <UART_DMAReceiveCplt+0x152>
  {
    huart->RxXferCount = 0;
 8007df8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007dfa:	225a      	movs	r2, #90	@ 0x5a
 8007dfc:	2100      	movs	r1, #0
 8007dfe:	5299      	strh	r1, [r3, r2]

    /* Check current nb of data still to be received on DMA side.
       DMA Normal mode, remaining nb of data will be 0
       DMA Circular mode, remaining nb of data is reset to RxXferSize */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	685a      	ldr	r2, [r3, #4]
 8007e06:	213a      	movs	r1, #58	@ 0x3a
 8007e08:	187b      	adds	r3, r7, r1
 8007e0a:	801a      	strh	r2, [r3, #0]
    if (nb_remaining_rx_data < huart->RxXferSize)
 8007e0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e0e:	2258      	movs	r2, #88	@ 0x58
 8007e10:	5a9b      	ldrh	r3, [r3, r2]
 8007e12:	187a      	adds	r2, r7, r1
 8007e14:	8812      	ldrh	r2, [r2, #0]
 8007e16:	429a      	cmp	r2, r3
 8007e18:	d204      	bcs.n	8007e24 <UART_DMAReceiveCplt+0x134>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 8007e1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e1c:	187a      	adds	r2, r7, r1
 8007e1e:	215a      	movs	r1, #90	@ 0x5a
 8007e20:	8812      	ldrh	r2, [r2, #0]
 8007e22:	525a      	strh	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007e24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e26:	2258      	movs	r2, #88	@ 0x58
 8007e28:	5a9a      	ldrh	r2, [r3, r2]
 8007e2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e2c:	215a      	movs	r1, #90	@ 0x5a
 8007e2e:	5a5b      	ldrh	r3, [r3, r1]
 8007e30:	b29b      	uxth	r3, r3
 8007e32:	1ad3      	subs	r3, r2, r3
 8007e34:	b29a      	uxth	r2, r3
 8007e36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e38:	0011      	movs	r1, r2
 8007e3a:	0018      	movs	r0, r3
 8007e3c:	f7ff f95e 	bl	80070fc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007e40:	e003      	b.n	8007e4a <UART_DMAReceiveCplt+0x15a>
    HAL_UART_RxCpltCallback(huart);
 8007e42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e44:	0018      	movs	r0, r3
 8007e46:	f000 faab 	bl	80083a0 <HAL_UART_RxCpltCallback>
}
 8007e4a:	46c0      	nop			@ (mov r8, r8)
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	b014      	add	sp, #80	@ 0x50
 8007e50:	bd80      	pop	{r7, pc}
 8007e52:	46c0      	nop			@ (mov r8, r8)
 8007e54:	fffffeff 	.word	0xfffffeff

08007e58 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b084      	sub	sp, #16
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e64:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	2201      	movs	r2, #1
 8007e6a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007e70:	2b01      	cmp	r3, #1
 8007e72:	d128      	bne.n	8007ec6 <UART_DMARxHalfCplt+0x6e>
  {
    huart->RxXferCount = huart->RxXferSize / 2U;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	2258      	movs	r2, #88	@ 0x58
 8007e78:	5a9b      	ldrh	r3, [r3, r2]
 8007e7a:	085b      	lsrs	r3, r3, #1
 8007e7c:	b299      	uxth	r1, r3
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	225a      	movs	r2, #90	@ 0x5a
 8007e82:	5299      	strh	r1, [r3, r2]

    /* Check current nb of data still to be received on DMA side. */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	685a      	ldr	r2, [r3, #4]
 8007e8a:	210a      	movs	r1, #10
 8007e8c:	187b      	adds	r3, r7, r1
 8007e8e:	801a      	strh	r2, [r3, #0]
    if (nb_remaining_rx_data <= huart->RxXferSize)
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	2258      	movs	r2, #88	@ 0x58
 8007e94:	5a9b      	ldrh	r3, [r3, r2]
 8007e96:	187a      	adds	r2, r7, r1
 8007e98:	8812      	ldrh	r2, [r2, #0]
 8007e9a:	429a      	cmp	r2, r3
 8007e9c:	d804      	bhi.n	8007ea8 <UART_DMARxHalfCplt+0x50>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	187a      	adds	r2, r7, r1
 8007ea2:	215a      	movs	r1, #90	@ 0x5a
 8007ea4:	8812      	ldrh	r2, [r2, #0]
 8007ea6:	525a      	strh	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	2258      	movs	r2, #88	@ 0x58
 8007eac:	5a9a      	ldrh	r2, [r3, r2]
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	215a      	movs	r1, #90	@ 0x5a
 8007eb2:	5a5b      	ldrh	r3, [r3, r1]
 8007eb4:	b29b      	uxth	r3, r3
 8007eb6:	1ad3      	subs	r3, r2, r3
 8007eb8:	b29a      	uxth	r2, r3
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	0011      	movs	r1, r2
 8007ebe:	0018      	movs	r0, r3
 8007ec0:	f7ff f91c 	bl	80070fc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007ec4:	e003      	b.n	8007ece <UART_DMARxHalfCplt+0x76>
    HAL_UART_RxHalfCpltCallback(huart);
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	0018      	movs	r0, r3
 8007eca:	f7ff f90f 	bl	80070ec <HAL_UART_RxHalfCpltCallback>
}
 8007ece:	46c0      	nop			@ (mov r8, r8)
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	b004      	add	sp, #16
 8007ed4:	bd80      	pop	{r7, pc}

08007ed6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007ed6:	b580      	push	{r7, lr}
 8007ed8:	b086      	sub	sp, #24
 8007eda:	af00      	add	r7, sp, #0
 8007edc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ee2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007ee4:	697b      	ldr	r3, [r7, #20]
 8007ee6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007ee8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	2280      	movs	r2, #128	@ 0x80
 8007eee:	589b      	ldr	r3, [r3, r2]
 8007ef0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007ef2:	697b      	ldr	r3, [r7, #20]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	689b      	ldr	r3, [r3, #8]
 8007ef8:	2280      	movs	r2, #128	@ 0x80
 8007efa:	4013      	ands	r3, r2
 8007efc:	2b80      	cmp	r3, #128	@ 0x80
 8007efe:	d10a      	bne.n	8007f16 <UART_DMAError+0x40>
 8007f00:	693b      	ldr	r3, [r7, #16]
 8007f02:	2b21      	cmp	r3, #33	@ 0x21
 8007f04:	d107      	bne.n	8007f16 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	2252      	movs	r2, #82	@ 0x52
 8007f0a:	2100      	movs	r1, #0
 8007f0c:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	0018      	movs	r0, r3
 8007f12:	f7ff fe09 	bl	8007b28 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	689b      	ldr	r3, [r3, #8]
 8007f1c:	2240      	movs	r2, #64	@ 0x40
 8007f1e:	4013      	ands	r3, r2
 8007f20:	2b40      	cmp	r3, #64	@ 0x40
 8007f22:	d10a      	bne.n	8007f3a <UART_DMAError+0x64>
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	2b22      	cmp	r3, #34	@ 0x22
 8007f28:	d107      	bne.n	8007f3a <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	225a      	movs	r2, #90	@ 0x5a
 8007f2e:	2100      	movs	r1, #0
 8007f30:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	0018      	movs	r0, r3
 8007f36:	f7ff fe1b 	bl	8007b70 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	2284      	movs	r2, #132	@ 0x84
 8007f3e:	589b      	ldr	r3, [r3, r2]
 8007f40:	2210      	movs	r2, #16
 8007f42:	431a      	orrs	r2, r3
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	2184      	movs	r1, #132	@ 0x84
 8007f48:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	0018      	movs	r0, r3
 8007f4e:	f000 fa2f 	bl	80083b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f52:	46c0      	nop			@ (mov r8, r8)
 8007f54:	46bd      	mov	sp, r7
 8007f56:	b006      	add	sp, #24
 8007f58:	bd80      	pop	{r7, pc}

08007f5a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007f5a:	b580      	push	{r7, lr}
 8007f5c:	b084      	sub	sp, #16
 8007f5e:	af00      	add	r7, sp, #0
 8007f60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f66:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	225a      	movs	r2, #90	@ 0x5a
 8007f6c:	2100      	movs	r1, #0
 8007f6e:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	0018      	movs	r0, r3
 8007f74:	f000 fa1c 	bl	80083b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f78:	46c0      	nop			@ (mov r8, r8)
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	b004      	add	sp, #16
 8007f7e:	bd80      	pop	{r7, pc}

08007f80 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b086      	sub	sp, #24
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f88:	f3ef 8310 	mrs	r3, PRIMASK
 8007f8c:	60bb      	str	r3, [r7, #8]
  return(result);
 8007f8e:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007f90:	617b      	str	r3, [r7, #20]
 8007f92:	2301      	movs	r3, #1
 8007f94:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	f383 8810 	msr	PRIMASK, r3
}
 8007f9c:	46c0      	nop			@ (mov r8, r8)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	681a      	ldr	r2, [r3, #0]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	2140      	movs	r1, #64	@ 0x40
 8007faa:	438a      	bics	r2, r1
 8007fac:	601a      	str	r2, [r3, #0]
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fb2:	693b      	ldr	r3, [r7, #16]
 8007fb4:	f383 8810 	msr	PRIMASK, r3
}
 8007fb8:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2220      	movs	r2, #32
 8007fbe:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	0018      	movs	r0, r3
 8007fca:	f000 f9a3 	bl	8008314 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007fce:	46c0      	nop			@ (mov r8, r8)
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	b006      	add	sp, #24
 8007fd4:	bd80      	pop	{r7, pc}

08007fd6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007fd6:	b580      	push	{r7, lr}
 8007fd8:	b082      	sub	sp, #8
 8007fda:	af00      	add	r7, sp, #0
 8007fdc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007fde:	46c0      	nop			@ (mov r8, r8)
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	b002      	add	sp, #8
 8007fe4:	bd80      	pop	{r7, pc}
	...

08007fe8 <Init_DMA_UART>:
static int Number_Of_UARTs = 0;

void UART_Thread(void * thread_input);

void Init_DMA_UART(UART * uart, UART_HandleTypeDef * UART_Handle, uint8_t * TX_Buff, uint32_t TX_Buff_Size, uint8_t * RX_Buff, uint32_t RX_Buff_Size)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b084      	sub	sp, #16
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	60f8      	str	r0, [r7, #12]
 8007ff0:	60b9      	str	r1, [r7, #8]
 8007ff2:	607a      	str	r2, [r7, #4]
 8007ff4:	603b      	str	r3, [r7, #0]
	uart->UART_Handle = UART_Handle;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	68ba      	ldr	r2, [r7, #8]
 8007ffa:	601a      	str	r2, [r3, #0]
	uart->TX_Buffer = TX_Buff;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	687a      	ldr	r2, [r7, #4]
 8008000:	605a      	str	r2, [r3, #4]
	uart->TX_Buffer_Size = TX_Buff_Size;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	683a      	ldr	r2, [r7, #0]
 8008006:	611a      	str	r2, [r3, #16]
	// Initialize TX indices to a known state
	uart->TX_Buffer_Head = 0;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	2200      	movs	r2, #0
 800800c:	609a      	str	r2, [r3, #8]
	uart->TX_Buffer_Tail = 0;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	2200      	movs	r2, #0
 8008012:	60da      	str	r2, [r3, #12]
	uart->Transmitting = false;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	2200      	movs	r2, #0
 8008018:	751a      	strb	r2, [r3, #20]
	uart->RX_Buffer = RX_Buff;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	69ba      	ldr	r2, [r7, #24]
 800801e:	619a      	str	r2, [r3, #24]
	uart->RX_Buffer_Tail = 0;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	2200      	movs	r2, #0
 8008024:	61da      	str	r2, [r3, #28]
	uart->RX_Buffer_Size = RX_Buff_Size;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	69fa      	ldr	r2, [r7, #28]
 800802a:	621a      	str	r2, [r3, #32]

	// Register callback handle with bounds check
	if(Number_Of_UARTs < NUMBER_OF_UARTS)
 800802c:	4b13      	ldr	r3, [pc, #76]	@ (800807c <Init_DMA_UART+0x94>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	2b01      	cmp	r3, #1
 8008032:	dc08      	bgt.n	8008046 <Init_DMA_UART+0x5e>
	{
		UART_Callback_Handles[Number_Of_UARTs++] = uart;
 8008034:	4b11      	ldr	r3, [pc, #68]	@ (800807c <Init_DMA_UART+0x94>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	1c59      	adds	r1, r3, #1
 800803a:	4a10      	ldr	r2, [pc, #64]	@ (800807c <Init_DMA_UART+0x94>)
 800803c:	6011      	str	r1, [r2, #0]
 800803e:	4a10      	ldr	r2, [pc, #64]	@ (8008080 <Init_DMA_UART+0x98>)
 8008040:	009b      	lsls	r3, r3, #2
 8008042:	68f9      	ldr	r1, [r7, #12]
 8008044:	5099      	str	r1, [r3, r2]
		// Too many UARTs registered - ignore additional registrations
		// Caller may handle error; for now we avoid overflow.
	}

	// Start the receiver DMA
	HAL_UART_Receive_DMA(UART_Handle, RX_Buff, RX_Buff_Size);
 8008046:	69fb      	ldr	r3, [r7, #28]
 8008048:	b29a      	uxth	r2, r3
 800804a:	69b9      	ldr	r1, [r7, #24]
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	0018      	movs	r0, r3
 8008050:	f7fe fc56 	bl	8006900 <HAL_UART_Receive_DMA>

	uart->UART_Task_ID = Start_Task(UART_Thread, (void*)uart, 1);
 8008054:	68f9      	ldr	r1, [r7, #12]
 8008056:	4b0b      	ldr	r3, [pc, #44]	@ (8008084 <Init_DMA_UART+0x9c>)
 8008058:	2201      	movs	r2, #1
 800805a:	0018      	movs	r0, r3
 800805c:	f7f9 fd42 	bl	8001ae4 <Start_Task>
 8008060:	0002      	movs	r2, r0
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	62da      	str	r2, [r3, #44]	@ 0x2c
	Set_Task_Name(uart->UART_Task_ID, "UART");
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800806a:	4a07      	ldr	r2, [pc, #28]	@ (8008088 <Init_DMA_UART+0xa0>)
 800806c:	0011      	movs	r1, r2
 800806e:	0018      	movs	r0, r3
 8008070:	f7f9 fdc6 	bl	8001c00 <Set_Task_Name>
}
 8008074:	46c0      	nop			@ (mov r8, r8)
 8008076:	46bd      	mov	sp, r7
 8008078:	b004      	add	sp, #16
 800807a:	bd80      	pop	{r7, pc}
 800807c:	20000a50 	.word	0x20000a50
 8008080:	20000a48 	.word	0x20000a48
 8008084:	08008275 	.word	0x08008275
 8008088:	0800d8ac 	.word	0x0800d8ac

0800808c <Modify_UART_Baudrate>:

void Modify_UART_Baudrate(UART * uart, uint32_t New_Baudrate)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b084      	sub	sp, #16
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
 8008094:	6039      	str	r1, [r7, #0]
	// Wait for all the current data to be transmitted with timeout (ms)
	uint32_t start = HAL_GetTick();
 8008096:	f7fa fd85 	bl	8002ba4 <HAL_GetTick>
 800809a:	0003      	movs	r3, r0
 800809c:	60fb      	str	r3, [r7, #12]
	uint32_t timeout_ms = 1000; // 1 second timeout
 800809e:	23fa      	movs	r3, #250	@ 0xfa
 80080a0:	009b      	lsls	r3, r3, #2
 80080a2:	60bb      	str	r3, [r7, #8]
	while(uart->Transmitting)
 80080a4:	e007      	b.n	80080b6 <Modify_UART_Baudrate+0x2a>
	{
		if((HAL_GetTick() - start) > timeout_ms)
 80080a6:	f7fa fd7d 	bl	8002ba4 <HAL_GetTick>
 80080aa:	0002      	movs	r2, r0
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	1ad3      	subs	r3, r2, r3
 80080b0:	68ba      	ldr	r2, [r7, #8]
 80080b2:	429a      	cmp	r2, r3
 80080b4:	d305      	bcc.n	80080c2 <Modify_UART_Baudrate+0x36>
	while(uart->Transmitting)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	7d1b      	ldrb	r3, [r3, #20]
 80080ba:	b2db      	uxtb	r3, r3
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d1f2      	bne.n	80080a6 <Modify_UART_Baudrate+0x1a>
 80080c0:	e000      	b.n	80080c4 <Modify_UART_Baudrate+0x38>
		{
			// timeout waiting for transmit to complete; proceed to re-init anyway
			break;
 80080c2:	46c0      	nop			@ (mov r8, r8)
		// small busy-wait here; keep short to avoid long blocking
	}

	// Change the UART init baudrate data field
	// Stop the receiver DMA
	HAL_UART_DMAStop(uart->UART_Handle);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	0018      	movs	r0, r3
 80080ca:	f7fe fc77 	bl	80069bc <HAL_UART_DMAStop>
	uart->RX_Buffer_Tail = 0;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2200      	movs	r2, #0
 80080d2:	61da      	str	r2, [r3, #28]

	// Change the UART init baudrate data field
	uart->UART_Handle->Init.BaudRate = New_Baudrate;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	683a      	ldr	r2, [r7, #0]
 80080da:	605a      	str	r2, [r3, #4]

	// Init the UART
	HAL_UART_Init(uart->UART_Handle);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	0018      	movs	r0, r3
 80080e2:	f7fe fa2d 	bl	8006540 <HAL_UART_Init>

	// restart the receiver DMA
	HAL_UART_Receive_DMA(uart->UART_Handle, uart->RX_Buffer, uart->RX_Buffer_Size);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6818      	ldr	r0, [r3, #0]
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6999      	ldr	r1, [r3, #24]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6a1b      	ldr	r3, [r3, #32]
 80080f2:	b29b      	uxth	r3, r3
 80080f4:	001a      	movs	r2, r3
 80080f6:	f7fe fc03 	bl	8006900 <HAL_UART_Receive_DMA>
}
 80080fa:	46c0      	nop			@ (mov r8, r8)
 80080fc:	46bd      	mov	sp, r7
 80080fe:	b004      	add	sp, #16
 8008100:	bd80      	pop	{r7, pc}

08008102 <UART_Transmit>:

int32_t UART_Transmit(UART * uart, uint8_t * Data, uint16_t Data_Size)
{
 8008102:	b590      	push	{r4, r7, lr}
 8008104:	b087      	sub	sp, #28
 8008106:	af00      	add	r7, sp, #0
 8008108:	60f8      	str	r0, [r7, #12]
 800810a:	60b9      	str	r1, [r7, #8]
 800810c:	1dbb      	adds	r3, r7, #6
 800810e:	801a      	strh	r2, [r3, #0]
	// Fill the TX Buffer with the data that needs to be transmitted, return the amount of data that was able to be put in the buffer
	int32_t return_value = 0;
 8008110:	2300      	movs	r3, #0
 8008112:	617b      	str	r3, [r7, #20]
	for(; return_value < Data_Size; return_value++)
 8008114:	e046      	b.n	80081a4 <UART_Transmit+0xa2>
	{
		// Check the special case when the tail == 0, every buffer can have a different wrap around size
		if(uart->TX_Buffer_Tail == 0)
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	68db      	ldr	r3, [r3, #12]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d11f      	bne.n	800815e <UART_Transmit+0x5c>
		{
			if(uart->TX_Buffer_Head != (uart->TX_Buffer_Size - 1))
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	689a      	ldr	r2, [r3, #8]
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	691b      	ldr	r3, [r3, #16]
 8008126:	3b01      	subs	r3, #1
 8008128:	429a      	cmp	r2, r3
 800812a:	d016      	beq.n	800815a <UART_Transmit+0x58>
			{
				// We have room to save the byte
				uart->TX_Buffer[uart->TX_Buffer_Head++] = Data[return_value];
 800812c:	697b      	ldr	r3, [r7, #20]
 800812e:	68ba      	ldr	r2, [r7, #8]
 8008130:	18d1      	adds	r1, r2, r3
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	6858      	ldr	r0, [r3, #4]
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	689b      	ldr	r3, [r3, #8]
 800813a:	1c5c      	adds	r4, r3, #1
 800813c:	68fa      	ldr	r2, [r7, #12]
 800813e:	6094      	str	r4, [r2, #8]
 8008140:	18c3      	adds	r3, r0, r3
 8008142:	780a      	ldrb	r2, [r1, #0]
 8008144:	701a      	strb	r2, [r3, #0]
				if(uart->TX_Buffer_Head == uart->TX_Buffer_Size)
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	689a      	ldr	r2, [r3, #8]
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	691b      	ldr	r3, [r3, #16]
 800814e:	429a      	cmp	r2, r3
 8008150:	d125      	bne.n	800819e <UART_Transmit+0x9c>
					uart->TX_Buffer_Head = 0;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	2200      	movs	r2, #0
 8008156:	609a      	str	r2, [r3, #8]
 8008158:	e021      	b.n	800819e <UART_Transmit+0x9c>

			}
			else
			{
				// There is no more room
				return return_value;
 800815a:	697b      	ldr	r3, [r7, #20]
 800815c:	e028      	b.n	80081b0 <UART_Transmit+0xae>
			}
		}
		else if(uart->TX_Buffer_Head != (uart->TX_Buffer_Tail - 1))
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	689a      	ldr	r2, [r3, #8]
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	68db      	ldr	r3, [r3, #12]
 8008166:	3b01      	subs	r3, #1
 8008168:	429a      	cmp	r2, r3
 800816a:	d016      	beq.n	800819a <UART_Transmit+0x98>
		{
			// We have room to save the byte
			uart->TX_Buffer[uart->TX_Buffer_Head++] = Data[return_value];
 800816c:	697b      	ldr	r3, [r7, #20]
 800816e:	68ba      	ldr	r2, [r7, #8]
 8008170:	18d1      	adds	r1, r2, r3
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	6858      	ldr	r0, [r3, #4]
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	689b      	ldr	r3, [r3, #8]
 800817a:	1c5c      	adds	r4, r3, #1
 800817c:	68fa      	ldr	r2, [r7, #12]
 800817e:	6094      	str	r4, [r2, #8]
 8008180:	18c3      	adds	r3, r0, r3
 8008182:	780a      	ldrb	r2, [r1, #0]
 8008184:	701a      	strb	r2, [r3, #0]
			if(uart->TX_Buffer_Head == uart->TX_Buffer_Size)
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	689a      	ldr	r2, [r3, #8]
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	691b      	ldr	r3, [r3, #16]
 800818e:	429a      	cmp	r2, r3
 8008190:	d105      	bne.n	800819e <UART_Transmit+0x9c>
				uart->TX_Buffer_Head = 0;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	2200      	movs	r2, #0
 8008196:	609a      	str	r2, [r3, #8]
 8008198:	e001      	b.n	800819e <UART_Transmit+0x9c>
		}
		else
		{
			// There is no more room
			return return_value;
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	e008      	b.n	80081b0 <UART_Transmit+0xae>
	for(; return_value < Data_Size; return_value++)
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	3301      	adds	r3, #1
 80081a2:	617b      	str	r3, [r7, #20]
 80081a4:	1dbb      	adds	r3, r7, #6
 80081a6:	881b      	ldrh	r3, [r3, #0]
 80081a8:	697a      	ldr	r2, [r7, #20]
 80081aa:	429a      	cmp	r2, r3
 80081ac:	dbb3      	blt.n	8008116 <UART_Transmit+0x14>
		}
	}

	return return_value;
 80081ae:	697b      	ldr	r3, [r7, #20]
}
 80081b0:	0018      	movs	r0, r3
 80081b2:	46bd      	mov	sp, r7
 80081b4:	b007      	add	sp, #28
 80081b6:	bd90      	pop	{r4, r7, pc}

080081b8 <UART_Transmit_Blocking>:

	return return_value;
}

int32_t UART_Transmit_Blocking(UART * uart, uint8_t * Data, uint16_t Data_Size)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b084      	sub	sp, #16
 80081bc:	af00      	add	r7, sp, #0
 80081be:	60f8      	str	r0, [r7, #12]
 80081c0:	60b9      	str	r1, [r7, #8]
 80081c2:	1dbb      	adds	r3, r7, #6
 80081c4:	801a      	strh	r2, [r3, #0]
	return HAL_UART_Transmit(uart->UART_Handle, Data, Data_Size, 100);
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	6818      	ldr	r0, [r3, #0]
 80081ca:	1dbb      	adds	r3, r7, #6
 80081cc:	881a      	ldrh	r2, [r3, #0]
 80081ce:	68b9      	ldr	r1, [r7, #8]
 80081d0:	2364      	movs	r3, #100	@ 0x64
 80081d2:	f7fe fa65 	bl	80066a0 <HAL_UART_Transmit>
 80081d6:	0003      	movs	r3, r0
}
 80081d8:	0018      	movs	r0, r3
 80081da:	46bd      	mov	sp, r7
 80081dc:	b004      	add	sp, #16
 80081de:	bd80      	pop	{r7, pc}

080081e0 <UART_Receive>:

int32_t UART_Receive(UART * uart, uint8_t * Data, uint16_t * Data_Size)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b086      	sub	sp, #24
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	60f8      	str	r0, [r7, #12]
 80081e8:	60b9      	str	r1, [r7, #8]
 80081ea:	607a      	str	r2, [r7, #4]
	uint16_t max_size = *Data_Size;  // Save max buffer size
 80081ec:	2316      	movs	r3, #22
 80081ee:	18fb      	adds	r3, r7, r3
 80081f0:	687a      	ldr	r2, [r7, #4]
 80081f2:	8812      	ldrh	r2, [r2, #0]
 80081f4:	801a      	strh	r2, [r3, #0]
	*Data_Size = 0;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2200      	movs	r2, #0
 80081fa:	801a      	strh	r2, [r3, #0]

	if(uart->UART_Handle->RxState == HAL_UART_STATE_BUSY_RX)
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	2280      	movs	r2, #128	@ 0x80
 8008202:	589b      	ldr	r3, [r3, r2]
 8008204:	2b22      	cmp	r3, #34	@ 0x22
 8008206:	d12f      	bne.n	8008268 <UART_Receive+0x88>
	{
		while((uart->RX_Buffer_Tail != (uart->RX_Buffer_Size - uart->UART_Handle->hdmarx->Instance->CNDTR)) && (*Data_Size < max_size))
 8008208:	e01b      	b.n	8008242 <UART_Receive+0x62>
		{
			Data[(*Data_Size)++] = uart->RX_Buffer[uart->RX_Buffer_Tail++];
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	6999      	ldr	r1, [r3, #24]
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	69db      	ldr	r3, [r3, #28]
 8008212:	1c58      	adds	r0, r3, #1
 8008214:	68fa      	ldr	r2, [r7, #12]
 8008216:	61d0      	str	r0, [r2, #28]
 8008218:	18ca      	adds	r2, r1, r3
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	881b      	ldrh	r3, [r3, #0]
 800821e:	1c59      	adds	r1, r3, #1
 8008220:	b288      	uxth	r0, r1
 8008222:	6879      	ldr	r1, [r7, #4]
 8008224:	8008      	strh	r0, [r1, #0]
 8008226:	0019      	movs	r1, r3
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	185b      	adds	r3, r3, r1
 800822c:	7812      	ldrb	r2, [r2, #0]
 800822e:	701a      	strb	r2, [r3, #0]

			if(uart->RX_Buffer_Tail >= uart->RX_Buffer_Size)
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	69da      	ldr	r2, [r3, #28]
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	6a1b      	ldr	r3, [r3, #32]
 8008238:	429a      	cmp	r2, r3
 800823a:	d302      	bcc.n	8008242 <UART_Receive+0x62>
				uart->RX_Buffer_Tail = 0;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	2200      	movs	r2, #0
 8008240:	61da      	str	r2, [r3, #28]
		while((uart->RX_Buffer_Tail != (uart->RX_Buffer_Size - uart->UART_Handle->hdmarx->Instance->CNDTR)) && (*Data_Size < max_size))
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	69da      	ldr	r2, [r3, #28]
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	6a19      	ldr	r1, [r3, #32]
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	685b      	ldr	r3, [r3, #4]
 8008254:	1acb      	subs	r3, r1, r3
 8008256:	429a      	cmp	r2, r3
 8008258:	d006      	beq.n	8008268 <UART_Receive+0x88>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	881b      	ldrh	r3, [r3, #0]
 800825e:	2216      	movs	r2, #22
 8008260:	18ba      	adds	r2, r7, r2
 8008262:	8812      	ldrh	r2, [r2, #0]
 8008264:	429a      	cmp	r2, r3
 8008266:	d8d0      	bhi.n	800820a <UART_Receive+0x2a>
		}
	}

	return (int32_t)*Data_Size;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	881b      	ldrh	r3, [r3, #0]
}
 800826c:	0018      	movs	r0, r3
 800826e:	46bd      	mov	sp, r7
 8008270:	b006      	add	sp, #24
 8008272:	bd80      	pop	{r7, pc}

08008274 <UART_Thread>:

void UART_Thread(void * thread_input)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b084      	sub	sp, #16
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
	UART * uart = (UART *)thread_input;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	60fb      	str	r3, [r7, #12]

	// Test if we are currently not transmitting
	if(!uart->Transmitting)
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	7d1b      	ldrb	r3, [r3, #20]
 8008284:	b2db      	uxtb	r3, r3
 8008286:	2201      	movs	r2, #1
 8008288:	4053      	eors	r3, r2
 800828a:	b2db      	uxtb	r3, r3
 800828c:	2b00      	cmp	r3, #0
 800828e:	d03d      	beq.n	800830c <UART_Thread+0x98>
	{
		// Test if there is any data that needs to be transmitted
		if(uart->TX_Buffer_Tail != uart->TX_Buffer_Head)
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	68da      	ldr	r2, [r3, #12]
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	689b      	ldr	r3, [r3, #8]
 8008298:	429a      	cmp	r2, r3
 800829a:	d037      	beq.n	800830c <UART_Thread+0x98>
		{
			// Determine if the buffer has wrapped around or not
			if(uart->TX_Buffer_Tail < uart->TX_Buffer_Head)
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	68da      	ldr	r2, [r3, #12]
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	689b      	ldr	r3, [r3, #8]
 80082a4:	429a      	cmp	r2, r3
 80082a6:	d219      	bcs.n	80082dc <UART_Thread+0x68>
			{
				// We can transmit everything in one go
				uart->Transmitting = true;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	2201      	movs	r2, #1
 80082ac:	751a      	strb	r2, [r3, #20]
				HAL_UART_Transmit_DMA(uart->UART_Handle, &uart->TX_Buffer[uart->TX_Buffer_Tail], uart->TX_Buffer_Head - uart->TX_Buffer_Tail);
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	6818      	ldr	r0, [r3, #0]
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	685a      	ldr	r2, [r3, #4]
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	68db      	ldr	r3, [r3, #12]
 80082ba:	18d1      	adds	r1, r2, r3
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	689b      	ldr	r3, [r3, #8]
 80082c0:	b29a      	uxth	r2, r3
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	68db      	ldr	r3, [r3, #12]
 80082c6:	b29b      	uxth	r3, r3
 80082c8:	1ad3      	subs	r3, r2, r3
 80082ca:	b29b      	uxth	r3, r3
 80082cc:	001a      	movs	r2, r3
 80082ce:	f7fe fa87 	bl	80067e0 <HAL_UART_Transmit_DMA>

				uart->TX_Buffer_Tail = uart->TX_Buffer_Head;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	689a      	ldr	r2, [r3, #8]
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	60da      	str	r2, [r3, #12]

				uart->TX_Buffer_Tail = 0;
			}
		}
	}
}
 80082da:	e017      	b.n	800830c <UART_Thread+0x98>
				uart->Transmitting = true;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	2201      	movs	r2, #1
 80082e0:	751a      	strb	r2, [r3, #20]
				HAL_UART_Transmit_DMA(uart->UART_Handle, &uart->TX_Buffer[uart->TX_Buffer_Tail], uart->TX_Buffer_Size - uart->TX_Buffer_Tail);
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	6818      	ldr	r0, [r3, #0]
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	685a      	ldr	r2, [r3, #4]
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	68db      	ldr	r3, [r3, #12]
 80082ee:	18d1      	adds	r1, r2, r3
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	691b      	ldr	r3, [r3, #16]
 80082f4:	b29a      	uxth	r2, r3
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	68db      	ldr	r3, [r3, #12]
 80082fa:	b29b      	uxth	r3, r3
 80082fc:	1ad3      	subs	r3, r2, r3
 80082fe:	b29b      	uxth	r3, r3
 8008300:	001a      	movs	r2, r3
 8008302:	f7fe fa6d 	bl	80067e0 <HAL_UART_Transmit_DMA>
				uart->TX_Buffer_Tail = 0;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	2200      	movs	r2, #0
 800830a:	60da      	str	r2, [r3, #12]
}
 800830c:	46c0      	nop			@ (mov r8, r8)
 800830e:	46bd      	mov	sp, r7
 8008310:	b004      	add	sp, #16
 8008312:	bd80      	pop	{r7, pc}

08008314 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b084      	sub	sp, #16
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
	// Find who the callback is for
	for(int c = 0; c < Number_Of_UARTs; c++)
 800831c:	2300      	movs	r3, #0
 800831e:	60fb      	str	r3, [r7, #12]
 8008320:	e030      	b.n	8008384 <HAL_UART_TxCpltCallback+0x70>
	{
		if(UART_Callback_Handles[c] && UART_Callback_Handles[c]->UART_Handle == huart)
 8008322:	4b1d      	ldr	r3, [pc, #116]	@ (8008398 <HAL_UART_TxCpltCallback+0x84>)
 8008324:	68fa      	ldr	r2, [r7, #12]
 8008326:	0092      	lsls	r2, r2, #2
 8008328:	58d3      	ldr	r3, [r2, r3]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d027      	beq.n	800837e <HAL_UART_TxCpltCallback+0x6a>
 800832e:	4b1a      	ldr	r3, [pc, #104]	@ (8008398 <HAL_UART_TxCpltCallback+0x84>)
 8008330:	68fa      	ldr	r2, [r7, #12]
 8008332:	0092      	lsls	r2, r2, #2
 8008334:	58d3      	ldr	r3, [r2, r3]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	687a      	ldr	r2, [r7, #4]
 800833a:	429a      	cmp	r2, r3
 800833c:	d11f      	bne.n	800837e <HAL_UART_TxCpltCallback+0x6a>
		{
			UART_Callback_Handles[c]->Transmitting = false;
 800833e:	4b16      	ldr	r3, [pc, #88]	@ (8008398 <HAL_UART_TxCpltCallback+0x84>)
 8008340:	68fa      	ldr	r2, [r7, #12]
 8008342:	0092      	lsls	r2, r2, #2
 8008344:	58d3      	ldr	r3, [r2, r3]
 8008346:	2200      	movs	r2, #0
 8008348:	751a      	strb	r2, [r3, #20]
			if(UART_Callback_Handles[c]->TX_Complete_Callback)
 800834a:	4b13      	ldr	r3, [pc, #76]	@ (8008398 <HAL_UART_TxCpltCallback+0x84>)
 800834c:	68fa      	ldr	r2, [r7, #12]
 800834e:	0092      	lsls	r2, r2, #2
 8008350:	58d3      	ldr	r3, [r2, r3]
 8008352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008354:	2b00      	cmp	r3, #0
 8008356:	d01b      	beq.n	8008390 <HAL_UART_TxCpltCallback+0x7c>
			{
				UART_Callback_Handles[c]->TX_Complete_Callback(UART_Callback_Handles[c]->Callback_Data);
 8008358:	4b0f      	ldr	r3, [pc, #60]	@ (8008398 <HAL_UART_TxCpltCallback+0x84>)
 800835a:	68fa      	ldr	r2, [r7, #12]
 800835c:	0092      	lsls	r2, r2, #2
 800835e:	58d3      	ldr	r3, [r2, r3]
 8008360:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008362:	4b0d      	ldr	r3, [pc, #52]	@ (8008398 <HAL_UART_TxCpltCallback+0x84>)
 8008364:	68f9      	ldr	r1, [r7, #12]
 8008366:	0089      	lsls	r1, r1, #2
 8008368:	58cb      	ldr	r3, [r1, r3]
 800836a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800836c:	0018      	movs	r0, r3
 800836e:	4790      	blx	r2

				// We are done with the callback
				UART_Callback_Handles[c]->TX_Complete_Callback = NULL;
 8008370:	4b09      	ldr	r3, [pc, #36]	@ (8008398 <HAL_UART_TxCpltCallback+0x84>)
 8008372:	68fa      	ldr	r2, [r7, #12]
 8008374:	0092      	lsls	r2, r2, #2
 8008376:	58d3      	ldr	r3, [r2, r3]
 8008378:	2200      	movs	r2, #0
 800837a:	625a      	str	r2, [r3, #36]	@ 0x24
			}
			return;
 800837c:	e008      	b.n	8008390 <HAL_UART_TxCpltCallback+0x7c>
	for(int c = 0; c < Number_Of_UARTs; c++)
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	3301      	adds	r3, #1
 8008382:	60fb      	str	r3, [r7, #12]
 8008384:	4b05      	ldr	r3, [pc, #20]	@ (800839c <HAL_UART_TxCpltCallback+0x88>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	68fa      	ldr	r2, [r7, #12]
 800838a:	429a      	cmp	r2, r3
 800838c:	dbc9      	blt.n	8008322 <HAL_UART_TxCpltCallback+0xe>
 800838e:	e000      	b.n	8008392 <HAL_UART_TxCpltCallback+0x7e>
			return;
 8008390:	46c0      	nop			@ (mov r8, r8)
		}
	}
}
 8008392:	46bd      	mov	sp, r7
 8008394:	b004      	add	sp, #16
 8008396:	bd80      	pop	{r7, pc}
 8008398:	20000a48 	.word	0x20000a48
 800839c:	20000a50 	.word	0x20000a50

080083a0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b082      	sub	sp, #8
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
	UNUSED(huart);
}
 80083a8:	46c0      	nop			@ (mov r8, r8)
 80083aa:	46bd      	mov	sp, r7
 80083ac:	b002      	add	sp, #8
 80083ae:	bd80      	pop	{r7, pc}

080083b0 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b084      	sub	sp, #16
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
	// Find who the callback is for
	for(int c = 0; c < Number_Of_UARTs; c++)
 80083b8:	2300      	movs	r3, #0
 80083ba:	60fb      	str	r3, [r7, #12]
 80083bc:	e035      	b.n	800842a <HAL_UART_ErrorCallback+0x7a>
	{
		if(UART_Callback_Handles[c] && UART_Callback_Handles[c]->UART_Handle == huart)
 80083be:	4b1f      	ldr	r3, [pc, #124]	@ (800843c <HAL_UART_ErrorCallback+0x8c>)
 80083c0:	68fa      	ldr	r2, [r7, #12]
 80083c2:	0092      	lsls	r2, r2, #2
 80083c4:	58d3      	ldr	r3, [r2, r3]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d02c      	beq.n	8008424 <HAL_UART_ErrorCallback+0x74>
 80083ca:	4b1c      	ldr	r3, [pc, #112]	@ (800843c <HAL_UART_ErrorCallback+0x8c>)
 80083cc:	68fa      	ldr	r2, [r7, #12]
 80083ce:	0092      	lsls	r2, r2, #2
 80083d0:	58d3      	ldr	r3, [r2, r3]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	687a      	ldr	r2, [r7, #4]
 80083d6:	429a      	cmp	r2, r3
 80083d8:	d124      	bne.n	8008424 <HAL_UART_ErrorCallback+0x74>
		{
			UART_Callback_Handles[c]->RX_Buffer_Tail = 0;
 80083da:	4b18      	ldr	r3, [pc, #96]	@ (800843c <HAL_UART_ErrorCallback+0x8c>)
 80083dc:	68fa      	ldr	r2, [r7, #12]
 80083de:	0092      	lsls	r2, r2, #2
 80083e0:	58d3      	ldr	r3, [r2, r3]
 80083e2:	2200      	movs	r2, #0
 80083e4:	61da      	str	r2, [r3, #28]
			UART_Callback_Handles[c]->Transmitting = false;
 80083e6:	4b15      	ldr	r3, [pc, #84]	@ (800843c <HAL_UART_ErrorCallback+0x8c>)
 80083e8:	68fa      	ldr	r2, [r7, #12]
 80083ea:	0092      	lsls	r2, r2, #2
 80083ec:	58d3      	ldr	r3, [r2, r3]
 80083ee:	2200      	movs	r2, #0
 80083f0:	751a      	strb	r2, [r3, #20]
			HAL_DMA_Abort_IT(huart->hdmarx);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80083f6:	0018      	movs	r0, r3
 80083f8:	f7fa feda 	bl	80031b0 <HAL_DMA_Abort_IT>
			HAL_UART_DMAStop(huart);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	0018      	movs	r0, r3
 8008400:	f7fe fadc 	bl	80069bc <HAL_UART_DMAStop>
			HAL_UART_Receive_DMA(huart, UART_Callback_Handles[c]->RX_Buffer, UART_Callback_Handles[c]->RX_Buffer_Size);
 8008404:	4b0d      	ldr	r3, [pc, #52]	@ (800843c <HAL_UART_ErrorCallback+0x8c>)
 8008406:	68fa      	ldr	r2, [r7, #12]
 8008408:	0092      	lsls	r2, r2, #2
 800840a:	58d3      	ldr	r3, [r2, r3]
 800840c:	6999      	ldr	r1, [r3, #24]
 800840e:	4b0b      	ldr	r3, [pc, #44]	@ (800843c <HAL_UART_ErrorCallback+0x8c>)
 8008410:	68fa      	ldr	r2, [r7, #12]
 8008412:	0092      	lsls	r2, r2, #2
 8008414:	58d3      	ldr	r3, [r2, r3]
 8008416:	6a1b      	ldr	r3, [r3, #32]
 8008418:	b29a      	uxth	r2, r3
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	0018      	movs	r0, r3
 800841e:	f7fe fa6f 	bl	8006900 <HAL_UART_Receive_DMA>
			return;
 8008422:	e007      	b.n	8008434 <HAL_UART_ErrorCallback+0x84>
	for(int c = 0; c < Number_Of_UARTs; c++)
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	3301      	adds	r3, #1
 8008428:	60fb      	str	r3, [r7, #12]
 800842a:	4b05      	ldr	r3, [pc, #20]	@ (8008440 <HAL_UART_ErrorCallback+0x90>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	68fa      	ldr	r2, [r7, #12]
 8008430:	429a      	cmp	r2, r3
 8008432:	dbc4      	blt.n	80083be <HAL_UART_ErrorCallback+0xe>
		}
	}
}
 8008434:	46bd      	mov	sp, r7
 8008436:	b004      	add	sp, #16
 8008438:	bd80      	pop	{r7, pc}
 800843a:	46c0      	nop			@ (mov r8, r8)
 800843c:	20000a48 	.word	0x20000a48
 8008440:	20000a50 	.word	0x20000a50

08008444 <Init_HumPRO_900>:
void HumPRO_900_RX_Complete(HumPRO_900_t * Device, uint8_t * Source_Address, uint8_t * Data, uint8_t Data_Size);
void HumPRO_900_TX_Complete(HumPRO_900_t * Device);

void Init_HumPRO_900(HumPRO_900_t * Device, UART * UART_Bus, GPIO * Power_Down_GPIO, GPIO * Reset_GPIO,
		GPIO * CMD_GPIO, GPIO * BE_GPIO, GPIO * EX_GPIO, GPIO * CRESP_GPIO)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b084      	sub	sp, #16
 8008448:	af00      	add	r7, sp, #0
 800844a:	60f8      	str	r0, [r7, #12]
 800844c:	60b9      	str	r1, [r7, #8]
 800844e:	607a      	str	r2, [r7, #4]
 8008450:	603b      	str	r3, [r7, #0]
	Device->BE_GPIO = BE_GPIO;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	69fa      	ldr	r2, [r7, #28]
 8008456:	60da      	str	r2, [r3, #12]
	Device->CMD_GPIO = CMD_GPIO;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	69ba      	ldr	r2, [r7, #24]
 800845c:	609a      	str	r2, [r3, #8]
	Device->CRESP_GPIO = CRESP_GPIO;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008462:	615a      	str	r2, [r3, #20]
	Device->EX_GPIO = EX_GPIO;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	6a3a      	ldr	r2, [r7, #32]
 8008468:	611a      	str	r2, [r3, #16]
	Device->Power_Down_GPIO = Power_Down_GPIO;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	687a      	ldr	r2, [r7, #4]
 800846e:	601a      	str	r2, [r3, #0]
	Device->Reset_GPIO = Reset_GPIO;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	683a      	ldr	r2, [r7, #0]
 8008474:	605a      	str	r2, [r3, #4]
	Device->UART_Bus = UART_Bus;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	68ba      	ldr	r2, [r7, #8]
 800847a:	619a      	str	r2, [r3, #24]
	Device->Current_State = eHumPRO_Booting;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	2200      	movs	r2, #0
 8008480:	771a      	strb	r2, [r3, #28]
	Device->TX_Buff_Size = 0;
 8008482:	68fa      	ldr	r2, [r7, #12]
 8008484:	23d6      	movs	r3, #214	@ 0xd6
 8008486:	009b      	lsls	r3, r3, #2
 8008488:	2100      	movs	r1, #0
 800848a:	54d1      	strb	r1, [r2, r3]
	Device->TX_Ready = false;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	4a1c      	ldr	r2, [pc, #112]	@ (8008500 <Init_HumPRO_900+0xbc>)
 8008490:	2100      	movs	r1, #0
 8008492:	5499      	strb	r1, [r3, r2]
	Device->TX_Complete = false;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	4a1b      	ldr	r2, [pc, #108]	@ (8008504 <Init_HumPRO_900+0xc0>)
 8008498:	2100      	movs	r1, #0
 800849a:	5499      	strb	r1, [r3, r2]

	Set_GPIO_State_High(Reset_GPIO);
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	0018      	movs	r0, r3
 80084a0:	f7fa faec 	bl	8002a7c <Set_GPIO_State_High>
	Set_GPIO_State_High(Power_Down_GPIO);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	0018      	movs	r0, r3
 80084a8:	f7fa fae8 	bl	8002a7c <Set_GPIO_State_High>

	Prep_Queue(&Device->Receiver.RX_Queue);
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	228e      	movs	r2, #142	@ 0x8e
 80084b0:	0092      	lsls	r2, r2, #2
 80084b2:	4694      	mov	ip, r2
 80084b4:	4463      	add	r3, ip
 80084b6:	0018      	movs	r0, r3
 80084b8:	f7f9 f9b4 	bl	8001824 <Prep_Queue>

	Init_HumPRO_900_Receiver(&Device->Receiver, UART_Bus, CMD_GPIO, EX_GPIO); // changes to expecting_data state
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	3324      	adds	r3, #36	@ 0x24
 80084c0:	0018      	movs	r0, r3
 80084c2:	6a3b      	ldr	r3, [r7, #32]
 80084c4:	69ba      	ldr	r2, [r7, #24]
 80084c6:	68b9      	ldr	r1, [r7, #8]
 80084c8:	f000 fa0e 	bl	80088e8 <Init_HumPRO_900_Receiver>

	Device->TaskID = Start_Task(HumPRO_900_Task, Device, BOOT_DELAY_MS);
 80084cc:	23fa      	movs	r3, #250	@ 0xfa
 80084ce:	009a      	lsls	r2, r3, #2
 80084d0:	68f9      	ldr	r1, [r7, #12]
 80084d2:	4b0d      	ldr	r3, [pc, #52]	@ (8008508 <Init_HumPRO_900+0xc4>)
 80084d4:	0018      	movs	r0, r3
 80084d6:	f7f9 fb05 	bl	8001ae4 <Start_Task>
 80084da:	0001      	movs	r1, r0
 80084dc:	68fa      	ldr	r2, [r7, #12]
 80084de:	2395      	movs	r3, #149	@ 0x95
 80084e0:	009b      	lsls	r3, r3, #2
 80084e2:	50d1      	str	r1, [r2, r3]
	Set_Task_Name(Device->TaskID, "HumPRO-900");
 80084e4:	68fa      	ldr	r2, [r7, #12]
 80084e6:	2395      	movs	r3, #149	@ 0x95
 80084e8:	009b      	lsls	r3, r3, #2
 80084ea:	58d3      	ldr	r3, [r2, r3]
 80084ec:	4a07      	ldr	r2, [pc, #28]	@ (800850c <Init_HumPRO_900+0xc8>)
 80084ee:	0011      	movs	r1, r2
 80084f0:	0018      	movs	r0, r3
 80084f2:	f7f9 fb85 	bl	8001c00 <Set_Task_Name>
}
 80084f6:	46c0      	nop			@ (mov r8, r8)
 80084f8:	46bd      	mov	sp, r7
 80084fa:	b004      	add	sp, #16
 80084fc:	bd80      	pop	{r7, pc}
 80084fe:	46c0      	nop			@ (mov r8, r8)
 8008500:	0000035d 	.word	0x0000035d
 8008504:	0000035e 	.word	0x0000035e
 8008508:	08008511 	.word	0x08008511
 800850c:	0800d8b4 	.word	0x0800d8b4

08008510 <HumPRO_900_Task>:
		Device->TX_Ready = true;
	}
}

void HumPRO_900_Task(void * thread_input)
{
 8008510:	b5b0      	push	{r4, r5, r7, lr}
 8008512:	b08a      	sub	sp, #40	@ 0x28
 8008514:	af02      	add	r7, sp, #8
 8008516:	6078      	str	r0, [r7, #4]
	HumPRO_900_t * Device = (HumPRO_900_t *)thread_input;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	617b      	str	r3, [r7, #20]
	uint8_t message[4];
	uint32_t message_timeout = BOOT_DELAY_MS;
 800851c:	23fa      	movs	r3, #250	@ 0xfa
 800851e:	009b      	lsls	r3, r3, #2
 8008520:	61fb      	str	r3, [r7, #28]
	HumPRO_Result result;

	uint8_t * queued = (uint8_t*)Dequeue(&Device->Receiver.RX_Queue);
 8008522:	697b      	ldr	r3, [r7, #20]
 8008524:	228e      	movs	r2, #142	@ 0x8e
 8008526:	0092      	lsls	r2, r2, #2
 8008528:	4694      	mov	ip, r2
 800852a:	4463      	add	r3, ip
 800852c:	0018      	movs	r0, r3
 800852e:	f7f9 f9c3 	bl	80018b8 <Dequeue>
 8008532:	0003      	movs	r3, r0
 8008534:	613b      	str	r3, [r7, #16]
	if (queued) {
 8008536:	693b      	ldr	r3, [r7, #16]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d011      	beq.n	8008560 <HumPRO_900_Task+0x50>
		memcpy(message, queued, 4);
 800853c:	230c      	movs	r3, #12
 800853e:	18fa      	adds	r2, r7, r3
 8008540:	693b      	ldr	r3, [r7, #16]
 8008542:	0010      	movs	r0, r2
 8008544:	0019      	movs	r1, r3
 8008546:	2304      	movs	r3, #4
 8008548:	001a      	movs	r2, r3
 800854a:	f003 fe88 	bl	800c25e <memcpy>
		free(queued);
 800854e:	693b      	ldr	r3, [r7, #16]
 8008550:	0018      	movs	r0, r3
 8008552:	f002 fc3b 	bl	800adcc <free>
		result = HUMPRO_SUCCESS;
 8008556:	231b      	movs	r3, #27
 8008558:	18fb      	adds	r3, r7, r3
 800855a:	2201      	movs	r2, #1
 800855c:	701a      	strb	r2, [r3, #0]
 800855e:	e003      	b.n	8008568 <HumPRO_900_Task+0x58>
	} else {
		result = HUMPRO_FAIL;
 8008560:	231b      	movs	r3, #27
 8008562:	18fb      	adds	r3, r7, r3
 8008564:	2200      	movs	r2, #0
 8008566:	701a      	strb	r2, [r3, #0]
	}

	switch(Device->Current_State)
 8008568:	697b      	ldr	r3, [r7, #20]
 800856a:	7f1b      	ldrb	r3, [r3, #28]
 800856c:	b2db      	uxtb	r3, r3
 800856e:	2b09      	cmp	r3, #9
 8008570:	d900      	bls.n	8008574 <HumPRO_900_Task+0x64>
 8008572:	e153      	b.n	800881c <HumPRO_900_Task+0x30c>
 8008574:	009a      	lsls	r2, r3, #2
 8008576:	4bb0      	ldr	r3, [pc, #704]	@ (8008838 <HumPRO_900_Task+0x328>)
 8008578:	18d3      	adds	r3, r2, r3
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	469f      	mov	pc, r3
	{
	case eHumPRO_Booting:

		message_timeout = 10*TICK_PERIOD_MS;
 800857e:	2364      	movs	r3, #100	@ 0x64
 8008580:	61fb      	str	r3, [r7, #28]
		Device->Current_State = eHumPRO_Config_BAUD;
 8008582:	697b      	ldr	r3, [r7, #20]
 8008584:	2201      	movs	r2, #1
 8008586:	771a      	strb	r2, [r3, #28]

		break;
 8008588:	e148      	b.n	800881c <HumPRO_900_Task+0x30c>
	case eHumPRO_Config_BAUD:

		if(result == HUMPRO_SUCCESS && message[1] == 0x06)
 800858a:	231b      	movs	r3, #27
 800858c:	18fb      	adds	r3, r7, r3
 800858e:	781b      	ldrb	r3, [r3, #0]
 8008590:	2b01      	cmp	r3, #1
 8008592:	d110      	bne.n	80085b6 <HumPRO_900_Task+0xa6>
 8008594:	230c      	movs	r3, #12
 8008596:	18fb      	adds	r3, r7, r3
 8008598:	785b      	ldrb	r3, [r3, #1]
 800859a:	2b06      	cmp	r3, #6
 800859c:	d10b      	bne.n	80085b6 <HumPRO_900_Task+0xa6>
		{
			// We have received a response
			Device->Current_State = eHumPRO_Configuring_PKTOPT;
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	2202      	movs	r2, #2
 80085a2:	771a      	strb	r2, [r3, #28]
			Modify_UART_Baudrate(Device->UART_Bus, 115200);
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	699b      	ldr	r3, [r3, #24]
 80085a8:	22e1      	movs	r2, #225	@ 0xe1
 80085aa:	0252      	lsls	r2, r2, #9
 80085ac:	0011      	movs	r1, r2
 80085ae:	0018      	movs	r0, r3
 80085b0:	f7ff fd6c 	bl	800808c <Modify_UART_Baudrate>
		}
		else
			HumPRO_900_Write_Register(&Device->Receiver, 0x4E, 0x05, true);

		break;
 80085b4:	e132      	b.n	800881c <HumPRO_900_Task+0x30c>
			HumPRO_900_Write_Register(&Device->Receiver, 0x4E, 0x05, true);
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	3324      	adds	r3, #36	@ 0x24
 80085ba:	0018      	movs	r0, r3
 80085bc:	2301      	movs	r3, #1
 80085be:	2205      	movs	r2, #5
 80085c0:	214e      	movs	r1, #78	@ 0x4e
 80085c2:	f000 fa51 	bl	8008a68 <HumPRO_900_Write_Register>
		break;
 80085c6:	e129      	b.n	800881c <HumPRO_900_Task+0x30c>
	case eHumPRO_Configuring_PKTOPT:

		if(result == HUMPRO_SUCCESS && message[1] == 0x06)
 80085c8:	231b      	movs	r3, #27
 80085ca:	18fb      	adds	r3, r7, r3
 80085cc:	781b      	ldrb	r3, [r3, #0]
 80085ce:	2b01      	cmp	r3, #1
 80085d0:	d108      	bne.n	80085e4 <HumPRO_900_Task+0xd4>
 80085d2:	230c      	movs	r3, #12
 80085d4:	18fb      	adds	r3, r7, r3
 80085d6:	785b      	ldrb	r3, [r3, #1]
 80085d8:	2b06      	cmp	r3, #6
 80085da:	d103      	bne.n	80085e4 <HumPRO_900_Task+0xd4>
		{
			// We have received a response
			Device->Current_State = eHumPRO_Configuring_ADDMODE;
 80085dc:	697b      	ldr	r3, [r7, #20]
 80085de:	2203      	movs	r2, #3
 80085e0:	771a      	strb	r2, [r3, #28]
		}
		else
			HumPRO_900_Write_Register(&Device->Receiver, PKOPT_ADDRESS, PKOPT_VALUE, true);


		break;
 80085e2:	e11b      	b.n	800881c <HumPRO_900_Task+0x30c>
			HumPRO_900_Write_Register(&Device->Receiver, PKOPT_ADDRESS, PKOPT_VALUE, true);
 80085e4:	697b      	ldr	r3, [r7, #20]
 80085e6:	3324      	adds	r3, #36	@ 0x24
 80085e8:	0018      	movs	r0, r3
 80085ea:	2301      	movs	r3, #1
 80085ec:	2204      	movs	r2, #4
 80085ee:	21d3      	movs	r1, #211	@ 0xd3
 80085f0:	f000 fa3a 	bl	8008a68 <HumPRO_900_Write_Register>
		break;
 80085f4:	e112      	b.n	800881c <HumPRO_900_Task+0x30c>
	case eHumPRO_Configuring_ADDMODE:

		if(result == HUMPRO_SUCCESS && message[1] == 0x06)
 80085f6:	231b      	movs	r3, #27
 80085f8:	18fb      	adds	r3, r7, r3
 80085fa:	781b      	ldrb	r3, [r3, #0]
 80085fc:	2b01      	cmp	r3, #1
 80085fe:	d108      	bne.n	8008612 <HumPRO_900_Task+0x102>
 8008600:	230c      	movs	r3, #12
 8008602:	18fb      	adds	r3, r7, r3
 8008604:	785b      	ldrb	r3, [r3, #1]
 8008606:	2b06      	cmp	r3, #6
 8008608:	d103      	bne.n	8008612 <HumPRO_900_Task+0x102>
		{
			// We have received a response
			Device->Current_State = eHumPRO_Configuring_Exceptions;
 800860a:	697b      	ldr	r3, [r7, #20]
 800860c:	2204      	movs	r2, #4
 800860e:	771a      	strb	r2, [r3, #28]
		}
		else
			HumPRO_900_Write_Register(&Device->Receiver, ADDMODE_ADDRESS, ADDMODE_VALUE, true);

		break;
 8008610:	e104      	b.n	800881c <HumPRO_900_Task+0x30c>
			HumPRO_900_Write_Register(&Device->Receiver, ADDMODE_ADDRESS, ADDMODE_VALUE, true);
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	3324      	adds	r3, #36	@ 0x24
 8008616:	0018      	movs	r0, r3
 8008618:	2301      	movs	r3, #1
 800861a:	2207      	movs	r2, #7
 800861c:	214f      	movs	r1, #79	@ 0x4f
 800861e:	f000 fa23 	bl	8008a68 <HumPRO_900_Write_Register>
		break;
 8008622:	e0fb      	b.n	800881c <HumPRO_900_Task+0x30c>
	case eHumPRO_Configuring_Exceptions:

		if(result == HUMPRO_SUCCESS && message[1] == 0x06)
 8008624:	231b      	movs	r3, #27
 8008626:	18fb      	adds	r3, r7, r3
 8008628:	781b      	ldrb	r3, [r3, #0]
 800862a:	2b01      	cmp	r3, #1
 800862c:	d108      	bne.n	8008640 <HumPRO_900_Task+0x130>
 800862e:	230c      	movs	r3, #12
 8008630:	18fb      	adds	r3, r7, r3
 8008632:	785b      	ldrb	r3, [r3, #1]
 8008634:	2b06      	cmp	r3, #6
 8008636:	d103      	bne.n	8008640 <HumPRO_900_Task+0x130>
		{
			// We have received a response
			Device->Current_State = eHumPRO_Setting_Device_Address;
 8008638:	697b      	ldr	r3, [r7, #20]
 800863a:	2205      	movs	r2, #5
 800863c:	771a      	strb	r2, [r3, #28]
		}
		else
			HumPRO_900_Write_Register(&Device->Receiver, EX_ADDRESS, EX_VALUE, true);

		break;
 800863e:	e0ed      	b.n	800881c <HumPRO_900_Task+0x30c>
			HumPRO_900_Write_Register(&Device->Receiver, EX_ADDRESS, EX_VALUE, true);
 8008640:	697b      	ldr	r3, [r7, #20]
 8008642:	3324      	adds	r3, #36	@ 0x24
 8008644:	0018      	movs	r0, r3
 8008646:	2301      	movs	r3, #1
 8008648:	2202      	movs	r2, #2
 800864a:	21d1      	movs	r1, #209	@ 0xd1
 800864c:	f000 fa0c 	bl	8008a68 <HumPRO_900_Write_Register>
		break;
 8008650:	e0e4      	b.n	800881c <HumPRO_900_Task+0x30c>
	case eHumPRO_Setting_Device_Address:

		// Read the 4 byte serial number and set that as our device unique address
		static int count = 0;

		if(result == HUMPRO_SUCCESS && message[0] == 3)
 8008652:	231b      	movs	r3, #27
 8008654:	18fb      	adds	r3, r7, r3
 8008656:	781b      	ldrb	r3, [r3, #0]
 8008658:	2b01      	cmp	r3, #1
 800865a:	d13e      	bne.n	80086da <HumPRO_900_Task+0x1ca>
 800865c:	240c      	movs	r4, #12
 800865e:	193b      	adds	r3, r7, r4
 8008660:	781b      	ldrb	r3, [r3, #0]
 8008662:	2b03      	cmp	r3, #3
 8008664:	d139      	bne.n	80086da <HumPRO_900_Task+0x1ca>
		{
			if(count < 4)  // Check bounds before writing
 8008666:	4b75      	ldr	r3, [pc, #468]	@ (800883c <HumPRO_900_Task+0x32c>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	2b03      	cmp	r3, #3
 800866c:	dc19      	bgt.n	80086a2 <HumPRO_900_Task+0x192>
			{
				Device->Device_Address[count] = message[3];
 800866e:	4b73      	ldr	r3, [pc, #460]	@ (800883c <HumPRO_900_Task+0x32c>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	193a      	adds	r2, r7, r4
 8008674:	78d1      	ldrb	r1, [r2, #3]
 8008676:	697a      	ldr	r2, [r7, #20]
 8008678:	18d3      	adds	r3, r2, r3
 800867a:	1c0a      	adds	r2, r1, #0
 800867c:	775a      	strb	r2, [r3, #29]
				HumPRO_900_Write_Register(&Device->Receiver, 0x5E + count, message[3], true);
 800867e:	697b      	ldr	r3, [r7, #20]
 8008680:	3324      	adds	r3, #36	@ 0x24
 8008682:	0018      	movs	r0, r3
 8008684:	4b6d      	ldr	r3, [pc, #436]	@ (800883c <HumPRO_900_Task+0x32c>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	b2db      	uxtb	r3, r3
 800868a:	335e      	adds	r3, #94	@ 0x5e
 800868c:	b2d9      	uxtb	r1, r3
 800868e:	193b      	adds	r3, r7, r4
 8008690:	78da      	ldrb	r2, [r3, #3]
 8008692:	2301      	movs	r3, #1
 8008694:	f000 f9e8 	bl	8008a68 <HumPRO_900_Write_Register>
				count++;
 8008698:	4b68      	ldr	r3, [pc, #416]	@ (800883c <HumPRO_900_Task+0x32c>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	1c5a      	adds	r2, r3, #1
 800869e:	4b67      	ldr	r3, [pc, #412]	@ (800883c <HumPRO_900_Task+0x32c>)
 80086a0:	601a      	str	r2, [r3, #0]
			}
			
			if(count >= 4)
 80086a2:	4b66      	ldr	r3, [pc, #408]	@ (800883c <HumPRO_900_Task+0x32c>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	2b03      	cmp	r3, #3
 80086a8:	dd24      	ble.n	80086f4 <HumPRO_900_Task+0x1e4>
			{
				// We have set the entire address
				printf("Address: %02X:%02X:%02X:%02X\r\n", Device->Device_Address[0], Device->Device_Address[1],Device->Device_Address[2],Device->Device_Address[3]);
 80086aa:	697b      	ldr	r3, [r7, #20]
 80086ac:	7f5b      	ldrb	r3, [r3, #29]
 80086ae:	0019      	movs	r1, r3
 80086b0:	697b      	ldr	r3, [r7, #20]
 80086b2:	7f9b      	ldrb	r3, [r3, #30]
 80086b4:	001c      	movs	r4, r3
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	7fdb      	ldrb	r3, [r3, #31]
 80086ba:	001d      	movs	r5, r3
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	2220      	movs	r2, #32
 80086c0:	5c9b      	ldrb	r3, [r3, r2]
 80086c2:	485f      	ldr	r0, [pc, #380]	@ (8008840 <HumPRO_900_Task+0x330>)
 80086c4:	9300      	str	r3, [sp, #0]
 80086c6:	002b      	movs	r3, r5
 80086c8:	0022      	movs	r2, r4
 80086ca:	f002 fd09 	bl	800b0e0 <iprintf>
				message_timeout = 1*TICK_PERIOD_MS;
 80086ce:	230a      	movs	r3, #10
 80086d0:	61fb      	str	r3, [r7, #28]
				Device->Current_State = eHumPRO_Idle;
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	2206      	movs	r2, #6
 80086d6:	771a      	strb	r2, [r3, #28]
				break;
 80086d8:	e0a0      	b.n	800881c <HumPRO_900_Task+0x30c>
			}
		}
		else
			HumPRO_900_Read_Register(&Device->Receiver, 0x34 + count);
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	3324      	adds	r3, #36	@ 0x24
 80086de:	001a      	movs	r2, r3
 80086e0:	4b56      	ldr	r3, [pc, #344]	@ (800883c <HumPRO_900_Task+0x32c>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	b2db      	uxtb	r3, r3
 80086e6:	3334      	adds	r3, #52	@ 0x34
 80086e8:	b2db      	uxtb	r3, r3
 80086ea:	0019      	movs	r1, r3
 80086ec:	0010      	movs	r0, r2
 80086ee:	f000 fa6b 	bl	8008bc8 <HumPRO_900_Read_Register>

		break;
 80086f2:	e093      	b.n	800881c <HumPRO_900_Task+0x30c>
 80086f4:	e092      	b.n	800881c <HumPRO_900_Task+0x30c>
	case eHumPRO_Idle:

		// Test if the EX line has gone high
		if(Read_GPIO_State(Device->EX_GPIO) == eGPIO_High)
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	691b      	ldr	r3, [r3, #16]
 80086fa:	0018      	movs	r0, r3
 80086fc:	f7fa f9a3 	bl	8002a46 <Read_GPIO_State>
 8008700:	0003      	movs	r3, r0
 8008702:	2b01      	cmp	r3, #1
 8008704:	d10b      	bne.n	800871e <HumPRO_900_Task+0x20e>
		{
			// Issue the Read command
			Device->Current_State = eHumPRO_Read_EX_Register;
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	2207      	movs	r2, #7
 800870a:	771a      	strb	r2, [r3, #28]
			message_timeout = 3*TICK_PERIOD_MS;
 800870c:	231e      	movs	r3, #30
 800870e:	61fb      	str	r3, [r7, #28]
			HumPRO_900_Read_Register(&Device->Receiver, 0xCE);
 8008710:	697b      	ldr	r3, [r7, #20]
 8008712:	3324      	adds	r3, #36	@ 0x24
 8008714:	21ce      	movs	r1, #206	@ 0xce
 8008716:	0018      	movs	r0, r3
 8008718:	f000 fa56 	bl	8008bc8 <HumPRO_900_Read_Register>
//			static uint8_t buff[7] = "Hello\r\n";
//
//			Set_GPIO_State_High(Device->CMD_GPIO);
//			UART_Transmit_With_Callback(Device->UART_Bus, buff, 7, HumPRO_900_TX_Complete, (void *)Device);

		break;
 800871c:	e07d      	b.n	800881a <HumPRO_900_Task+0x30a>
		else if(Device->TX_Ready)
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	4a48      	ldr	r2, [pc, #288]	@ (8008844 <HumPRO_900_Task+0x334>)
 8008722:	5c9b      	ldrb	r3, [r3, r2]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d024      	beq.n	8008772 <HumPRO_900_Task+0x262>
			Set_GPIO_State_High(Device->CMD_GPIO);
 8008728:	697b      	ldr	r3, [r7, #20]
 800872a:	689b      	ldr	r3, [r3, #8]
 800872c:	0018      	movs	r0, r3
 800872e:	f7fa f9a5 	bl	8002a7c <Set_GPIO_State_High>
			UART_Transmit_Blocking(Device->UART_Bus, Device->TX_Buff, Device->TX_Buff_Size);
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	6998      	ldr	r0, [r3, #24]
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	2296      	movs	r2, #150	@ 0x96
 800873a:	0092      	lsls	r2, r2, #2
 800873c:	1899      	adds	r1, r3, r2
 800873e:	697a      	ldr	r2, [r7, #20]
 8008740:	23d6      	movs	r3, #214	@ 0xd6
 8008742:	009b      	lsls	r3, r3, #2
 8008744:	5cd3      	ldrb	r3, [r2, r3]
 8008746:	001a      	movs	r2, r3
 8008748:	f7ff fd36 	bl	80081b8 <UART_Transmit_Blocking>
			Set_GPIO_State_Low(Device->CMD_GPIO);
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	689b      	ldr	r3, [r3, #8]
 8008750:	0018      	movs	r0, r3
 8008752:	f7fa f9aa 	bl	8002aaa <Set_GPIO_State_Low>
			Device->TX_Ready = false;
 8008756:	697b      	ldr	r3, [r7, #20]
 8008758:	4a3a      	ldr	r2, [pc, #232]	@ (8008844 <HumPRO_900_Task+0x334>)
 800875a:	2100      	movs	r1, #0
 800875c:	5499      	strb	r1, [r3, r2]
			Device->TX_Complete = false;
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	4a39      	ldr	r2, [pc, #228]	@ (8008848 <HumPRO_900_Task+0x338>)
 8008762:	2100      	movs	r1, #0
 8008764:	5499      	strb	r1, [r3, r2]
			Device->Current_State = eHumPRO_Idle;
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	2206      	movs	r2, #6
 800876a:	771a      	strb	r2, [r3, #28]
			message_timeout = 1*TICK_PERIOD_MS;
 800876c:	230a      	movs	r3, #10
 800876e:	61fb      	str	r3, [r7, #28]
		break;
 8008770:	e053      	b.n	800881a <HumPRO_900_Task+0x30a>
		else if(Device->TX_Complete)
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	4a34      	ldr	r2, [pc, #208]	@ (8008848 <HumPRO_900_Task+0x338>)
 8008776:	5c9b      	ldrb	r3, [r3, r2]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d04e      	beq.n	800881a <HumPRO_900_Task+0x30a>
			Set_GPIO_State_Low(Device->CMD_GPIO);
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	689b      	ldr	r3, [r3, #8]
 8008780:	0018      	movs	r0, r3
 8008782:	f7fa f992 	bl	8002aaa <Set_GPIO_State_Low>
			Device->TX_Complete = false;
 8008786:	697b      	ldr	r3, [r7, #20]
 8008788:	4a2f      	ldr	r2, [pc, #188]	@ (8008848 <HumPRO_900_Task+0x338>)
 800878a:	2100      	movs	r1, #0
 800878c:	5499      	strb	r1, [r3, r2]
		break;
 800878e:	e044      	b.n	800881a <HumPRO_900_Task+0x30a>
	case eHumPRO_Read_EX_Register:

		if(result == HUMPRO_SUCCESS && message[1] == 0x06)
 8008790:	231b      	movs	r3, #27
 8008792:	18fb      	adds	r3, r7, r3
 8008794:	781b      	ldrb	r3, [r3, #0]
 8008796:	2b01      	cmp	r3, #1
 8008798:	d117      	bne.n	80087ca <HumPRO_900_Task+0x2ba>
 800879a:	220c      	movs	r2, #12
 800879c:	18bb      	adds	r3, r7, r2
 800879e:	785b      	ldrb	r3, [r3, #1]
 80087a0:	2b06      	cmp	r3, #6
 80087a2:	d112      	bne.n	80087ca <HumPRO_900_Task+0x2ba>
		{
			if(message[3] & 0x02)
 80087a4:	18bb      	adds	r3, r7, r2
 80087a6:	78db      	ldrb	r3, [r3, #3]
 80087a8:	001a      	movs	r2, r3
 80087aa:	2302      	movs	r3, #2
 80087ac:	4013      	ands	r3, r2
 80087ae:	d013      	beq.n	80087d8 <HumPRO_900_Task+0x2c8>
			{
				// We have received a response
				HumPRO_900_Read_Received_Data(&Device->Receiver, HumPRO_900_RX_Complete, (void *)Device);
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	3324      	adds	r3, #36	@ 0x24
 80087b4:	697a      	ldr	r2, [r7, #20]
 80087b6:	4925      	ldr	r1, [pc, #148]	@ (800884c <HumPRO_900_Task+0x33c>)
 80087b8:	0018      	movs	r0, r3
 80087ba:	f000 fa55 	bl	8008c68 <HumPRO_900_Read_Received_Data>
				message_timeout = 7*TICK_PERIOD_MS;
 80087be:	2346      	movs	r3, #70	@ 0x46
 80087c0:	61fb      	str	r3, [r7, #28]
				Device->Current_State = eHumPRO_Idle;
 80087c2:	697b      	ldr	r3, [r7, #20]
 80087c4:	2206      	movs	r2, #6
 80087c6:	771a      	strb	r2, [r3, #28]
			if(message[3] & 0x02)
 80087c8:	e006      	b.n	80087d8 <HumPRO_900_Task+0x2c8>
				//Device->Current_State = eHumPRO_Get_RX_Packet; //do we need this?
			}
		}
		else
			HumPRO_900_Read_Register(&Device->Receiver, 0xCE);
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	3324      	adds	r3, #36	@ 0x24
 80087ce:	21ce      	movs	r1, #206	@ 0xce
 80087d0:	0018      	movs	r0, r3
 80087d2:	f000 f9f9 	bl	8008bc8 <HumPRO_900_Read_Register>

		break;
 80087d6:	e021      	b.n	800881c <HumPRO_900_Task+0x30c>
 80087d8:	e020      	b.n	800881c <HumPRO_900_Task+0x30c>

	case eHumPRO_Get_RX_Packet:
		if (result == HUMPRO_SUCCESS && message[1] == 0x06) {
 80087da:	231b      	movs	r3, #27
 80087dc:	18fb      	adds	r3, r7, r3
 80087de:	781b      	ldrb	r3, [r3, #0]
 80087e0:	2b01      	cmp	r3, #1
 80087e2:	d10a      	bne.n	80087fa <HumPRO_900_Task+0x2ea>
 80087e4:	230c      	movs	r3, #12
 80087e6:	18fb      	adds	r3, r7, r3
 80087e8:	785b      	ldrb	r3, [r3, #1]
 80087ea:	2b06      	cmp	r3, #6
 80087ec:	d105      	bne.n	80087fa <HumPRO_900_Task+0x2ea>
			Device->Current_State = eHumPRO_Idle;
 80087ee:	697b      	ldr	r3, [r7, #20]
 80087f0:	2206      	movs	r2, #6
 80087f2:	771a      	strb	r2, [r3, #28]
			message_timeout = 1*TICK_PERIOD_MS;
 80087f4:	230a      	movs	r3, #10
 80087f6:	61fb      	str	r3, [r7, #28]
		} else {
			HumPRO_900_Write_Register(&Device->Receiver, 0xC7, 0x04, true);
			Set_GPIO_State_High(Device->CMD_GPIO);
		}
		break;
 80087f8:	e010      	b.n	800881c <HumPRO_900_Task+0x30c>
			HumPRO_900_Write_Register(&Device->Receiver, 0xC7, 0x04, true);
 80087fa:	697b      	ldr	r3, [r7, #20]
 80087fc:	3324      	adds	r3, #36	@ 0x24
 80087fe:	0018      	movs	r0, r3
 8008800:	2301      	movs	r3, #1
 8008802:	2204      	movs	r2, #4
 8008804:	21c7      	movs	r1, #199	@ 0xc7
 8008806:	f000 f92f 	bl	8008a68 <HumPRO_900_Write_Register>
			Set_GPIO_State_High(Device->CMD_GPIO);
 800880a:	697b      	ldr	r3, [r7, #20]
 800880c:	689b      	ldr	r3, [r3, #8]
 800880e:	0018      	movs	r0, r3
 8008810:	f7fa f934 	bl	8002a7c <Set_GPIO_State_High>
		break;
 8008814:	e002      	b.n	800881c <HumPRO_900_Task+0x30c>

	case eHumPRO_Transmitting_Packet:
		break;
 8008816:	46c0      	nop			@ (mov r8, r8)
 8008818:	e000      	b.n	800881c <HumPRO_900_Task+0x30c>
		break;
 800881a:	46c0      	nop			@ (mov r8, r8)
	}

	Modify_Task_Timeout(Device->TaskID, message_timeout);
 800881c:	697a      	ldr	r2, [r7, #20]
 800881e:	2395      	movs	r3, #149	@ 0x95
 8008820:	009b      	lsls	r3, r3, #2
 8008822:	58d3      	ldr	r3, [r2, r3]
 8008824:	69fa      	ldr	r2, [r7, #28]
 8008826:	0011      	movs	r1, r2
 8008828:	0018      	movs	r0, r3
 800882a:	f7f9 f9bd 	bl	8001ba8 <Modify_Task_Timeout>
}
 800882e:	46c0      	nop			@ (mov r8, r8)
 8008830:	46bd      	mov	sp, r7
 8008832:	b008      	add	sp, #32
 8008834:	bdb0      	pop	{r4, r5, r7, pc}
 8008836:	46c0      	nop			@ (mov r8, r8)
 8008838:	0800e188 	.word	0x0800e188
 800883c:	20000a54 	.word	0x20000a54
 8008840:	0800d8c0 	.word	0x0800d8c0
 8008844:	0000035d 	.word	0x0000035d
 8008848:	0000035e 	.word	0x0000035e
 800884c:	08008851 	.word	0x08008851

08008850 <HumPRO_900_RX_Complete>:


void HumPRO_900_RX_Complete(HumPRO_900_t * Device, uint8_t * Source_Address, uint8_t * Data, uint8_t Data_Size)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b086      	sub	sp, #24
 8008854:	af00      	add	r7, sp, #0
 8008856:	60f8      	str	r0, [r7, #12]
 8008858:	60b9      	str	r1, [r7, #8]
 800885a:	607a      	str	r2, [r7, #4]
 800885c:	001a      	movs	r2, r3
 800885e:	1cfb      	adds	r3, r7, #3
 8008860:	701a      	strb	r2, [r3, #0]
	printf("Received Message:\r\n\t");
 8008862:	4b1d      	ldr	r3, [pc, #116]	@ (80088d8 <HumPRO_900_RX_Complete+0x88>)
 8008864:	0018      	movs	r0, r3
 8008866:	f002 fc3b 	bl	800b0e0 <iprintf>

	for(int c = 0; c < 3; c++)
 800886a:	2300      	movs	r3, #0
 800886c:	617b      	str	r3, [r7, #20]
 800886e:	e00c      	b.n	800888a <HumPRO_900_RX_Complete+0x3a>
		printf("%02X:", Source_Address[c]);
 8008870:	697b      	ldr	r3, [r7, #20]
 8008872:	68ba      	ldr	r2, [r7, #8]
 8008874:	18d3      	adds	r3, r2, r3
 8008876:	781b      	ldrb	r3, [r3, #0]
 8008878:	001a      	movs	r2, r3
 800887a:	4b18      	ldr	r3, [pc, #96]	@ (80088dc <HumPRO_900_RX_Complete+0x8c>)
 800887c:	0011      	movs	r1, r2
 800887e:	0018      	movs	r0, r3
 8008880:	f002 fc2e 	bl	800b0e0 <iprintf>
	for(int c = 0; c < 3; c++)
 8008884:	697b      	ldr	r3, [r7, #20]
 8008886:	3301      	adds	r3, #1
 8008888:	617b      	str	r3, [r7, #20]
 800888a:	697b      	ldr	r3, [r7, #20]
 800888c:	2b02      	cmp	r3, #2
 800888e:	ddef      	ble.n	8008870 <HumPRO_900_RX_Complete+0x20>
	printf("%02X -> ", Source_Address[3]);
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	3303      	adds	r3, #3
 8008894:	781b      	ldrb	r3, [r3, #0]
 8008896:	001a      	movs	r2, r3
 8008898:	4b11      	ldr	r3, [pc, #68]	@ (80088e0 <HumPRO_900_RX_Complete+0x90>)
 800889a:	0011      	movs	r1, r2
 800889c:	0018      	movs	r0, r3
 800889e:	f002 fc1f 	bl	800b0e0 <iprintf>

	for(int c = 0; c < Data_Size; c++)
 80088a2:	2300      	movs	r3, #0
 80088a4:	613b      	str	r3, [r7, #16]
 80088a6:	e009      	b.n	80088bc <HumPRO_900_RX_Complete+0x6c>
		printf("%c", Data[c]);
 80088a8:	693b      	ldr	r3, [r7, #16]
 80088aa:	687a      	ldr	r2, [r7, #4]
 80088ac:	18d3      	adds	r3, r2, r3
 80088ae:	781b      	ldrb	r3, [r3, #0]
 80088b0:	0018      	movs	r0, r3
 80088b2:	f002 fc25 	bl	800b100 <putchar>
	for(int c = 0; c < Data_Size; c++)
 80088b6:	693b      	ldr	r3, [r7, #16]
 80088b8:	3301      	adds	r3, #1
 80088ba:	613b      	str	r3, [r7, #16]
 80088bc:	1cfb      	adds	r3, r7, #3
 80088be:	781b      	ldrb	r3, [r3, #0]
 80088c0:	693a      	ldr	r2, [r7, #16]
 80088c2:	429a      	cmp	r2, r3
 80088c4:	dbf0      	blt.n	80088a8 <HumPRO_900_RX_Complete+0x58>

	printf("\r\n");
 80088c6:	4b07      	ldr	r3, [pc, #28]	@ (80088e4 <HumPRO_900_RX_Complete+0x94>)
 80088c8:	0018      	movs	r0, r3
 80088ca:	f002 fc79 	bl	800b1c0 <puts>
}
 80088ce:	46c0      	nop			@ (mov r8, r8)
 80088d0:	46bd      	mov	sp, r7
 80088d2:	b006      	add	sp, #24
 80088d4:	bd80      	pop	{r7, pc}
 80088d6:	46c0      	nop			@ (mov r8, r8)
 80088d8:	0800d8e0 	.word	0x0800d8e0
 80088dc:	0800d8f8 	.word	0x0800d8f8
 80088e0:	0800d900 	.word	0x0800d900
 80088e4:	0800d90c 	.word	0x0800d90c

080088e8 <Init_HumPRO_900_Receiver>:
void HumPRO_900_Receiver_Task(void * task_input);
static void HumPRO_900_Process_RX_Data(HumPRO_900_Receiver_t * Receiver);
static void HumPRO_900_Request_Data_TX_Complete(HumPRO_900_Receiver_t * Receiver);

void Init_HumPRO_900_Receiver(HumPRO_900_Receiver_t * Receiver, UART * Bus, GPIO * CMD, GPIO * EX)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b084      	sub	sp, #16
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	60f8      	str	r0, [r7, #12]
 80088f0:	60b9      	str	r1, [r7, #8]
 80088f2:	607a      	str	r2, [r7, #4]
 80088f4:	603b      	str	r3, [r7, #0]
	Receiver->Bus = Bus;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	68ba      	ldr	r2, [r7, #8]
 80088fa:	601a      	str	r2, [r3, #0]
	Receiver->CMD = CMD;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	687a      	ldr	r2, [r7, #4]
 8008900:	605a      	str	r2, [r3, #4]
	Receiver->EX = EX;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	683a      	ldr	r2, [r7, #0]
 8008906:	609a      	str	r2, [r3, #8]
	/* initialize buffers and flags to safe defaults */
	Receiver->DMA_Buff_Size = 0;
 8008908:	68fa      	ldr	r2, [r7, #12]
 800890a:	2386      	movs	r3, #134	@ 0x86
 800890c:	005b      	lsls	r3, r3, #1
 800890e:	2100      	movs	r1, #0
 8008910:	52d1      	strh	r1, [r2, r3]
	Receiver->RX_Buff_Size = 0;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	4a32      	ldr	r2, [pc, #200]	@ (80089e0 <Init_HumPRO_900_Receiver+0xf8>)
 8008916:	2100      	movs	r1, #0
 8008918:	5499      	strb	r1, [r3, r2]
	Receiver->Receiving_Command = true;
 800891a:	68fa      	ldr	r2, [r7, #12]
 800891c:	2384      	movs	r3, #132	@ 0x84
 800891e:	009b      	lsls	r3, r3, #2
 8008920:	2101      	movs	r1, #1
 8008922:	54d1      	strb	r1, [r2, r3]
	Receiver->Receiving_Header = true;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	4a2f      	ldr	r2, [pc, #188]	@ (80089e4 <Init_HumPRO_900_Receiver+0xfc>)
 8008928:	2101      	movs	r1, #1
 800892a:	5499      	strb	r1, [r3, r2]
	Receiver->Receiving_Data = false;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	4a2e      	ldr	r2, [pc, #184]	@ (80089e8 <Init_HumPRO_900_Receiver+0x100>)
 8008930:	2100      	movs	r1, #0
 8008932:	5499      	strb	r1, [r3, r2]
	Receiver->Expected_Return = eExpecting_Nothing;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	4a2d      	ldr	r2, [pc, #180]	@ (80089ec <Init_HumPRO_900_Receiver+0x104>)
 8008938:	2100      	movs	r1, #0
 800893a:	5499      	strb	r1, [r3, r2]
	Receiver->RX_Complete_Callback = NULL;
 800893c:	68fa      	ldr	r2, [r7, #12]
 800893e:	238a      	movs	r3, #138	@ 0x8a
 8008940:	009b      	lsls	r3, r3, #2
 8008942:	2100      	movs	r1, #0
 8008944:	50d1      	str	r1, [r2, r3]
	Receiver->Callback_Data = NULL;
 8008946:	68fa      	ldr	r2, [r7, #12]
 8008948:	238b      	movs	r3, #139	@ 0x8b
 800894a:	009b      	lsls	r3, r3, #2
 800894c:	2100      	movs	r1, #0
 800894e:	50d1      	str	r1, [r2, r3]
	Receiver->RX_Que_Message[0] = Receiver->RX_Que_Message[1] = Receiver->RX_Que_Message[2] = Receiver->RX_Que_Message[3] = 0;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	4a27      	ldr	r2, [pc, #156]	@ (80089f0 <Init_HumPRO_900_Receiver+0x108>)
 8008954:	2100      	movs	r1, #0
 8008956:	5499      	strb	r1, [r3, r2]
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	4a25      	ldr	r2, [pc, #148]	@ (80089f0 <Init_HumPRO_900_Receiver+0x108>)
 800895c:	5c99      	ldrb	r1, [r3, r2]
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	4a24      	ldr	r2, [pc, #144]	@ (80089f4 <Init_HumPRO_900_Receiver+0x10c>)
 8008962:	5499      	strb	r1, [r3, r2]
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	4a23      	ldr	r2, [pc, #140]	@ (80089f4 <Init_HumPRO_900_Receiver+0x10c>)
 8008968:	5c99      	ldrb	r1, [r3, r2]
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	4a22      	ldr	r2, [pc, #136]	@ (80089f8 <Init_HumPRO_900_Receiver+0x110>)
 800896e:	5499      	strb	r1, [r3, r2]
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	4a21      	ldr	r2, [pc, #132]	@ (80089f8 <Init_HumPRO_900_Receiver+0x110>)
 8008974:	5c99      	ldrb	r1, [r3, r2]
 8008976:	68fa      	ldr	r2, [r7, #12]
 8008978:	2388      	movs	r3, #136	@ 0x88
 800897a:	009b      	lsls	r3, r3, #2
 800897c:	54d1      	strb	r1, [r2, r3]

	/* clear buffers (optional but safer) */
	memset(Receiver->DMA_Buff, 0, sizeof(Receiver->DMA_Buff));
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	330c      	adds	r3, #12
 8008982:	2280      	movs	r2, #128	@ 0x80
 8008984:	0052      	lsls	r2, r2, #1
 8008986:	2100      	movs	r1, #0
 8008988:	0018      	movs	r0, r3
 800898a:	f002 fd1f 	bl	800b3cc <memset>
	memset(Receiver->RX_Buff, 0, sizeof(Receiver->RX_Buff));
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	330f      	adds	r3, #15
 8008992:	33ff      	adds	r3, #255	@ 0xff
 8008994:	2280      	movs	r2, #128	@ 0x80
 8008996:	0052      	lsls	r2, r2, #1
 8008998:	2100      	movs	r1, #0
 800899a:	0018      	movs	r0, r3
 800899c:	f002 fd16 	bl	800b3cc <memset>

	Prep_Queue(&Receiver->RX_Queue);
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	2285      	movs	r2, #133	@ 0x85
 80089a4:	0092      	lsls	r2, r2, #2
 80089a6:	4694      	mov	ip, r2
 80089a8:	4463      	add	r3, ip
 80089aa:	0018      	movs	r0, r3
 80089ac:	f7f8 ff3a 	bl	8001824 <Prep_Queue>

	Receiver->TaskID = Start_Task(HumPRO_900_Receiver_Task, Receiver, 1);
 80089b0:	68f9      	ldr	r1, [r7, #12]
 80089b2:	4b12      	ldr	r3, [pc, #72]	@ (80089fc <Init_HumPRO_900_Receiver+0x114>)
 80089b4:	2201      	movs	r2, #1
 80089b6:	0018      	movs	r0, r3
 80089b8:	f7f9 f894 	bl	8001ae4 <Start_Task>
 80089bc:	0001      	movs	r1, r0
 80089be:	68fa      	ldr	r2, [r7, #12]
 80089c0:	2389      	movs	r3, #137	@ 0x89
 80089c2:	009b      	lsls	r3, r3, #2
 80089c4:	50d1      	str	r1, [r2, r3]
	Set_Task_Name(Receiver->TaskID, "HumPRO-900-RX");
 80089c6:	68fa      	ldr	r2, [r7, #12]
 80089c8:	2389      	movs	r3, #137	@ 0x89
 80089ca:	009b      	lsls	r3, r3, #2
 80089cc:	58d3      	ldr	r3, [r2, r3]
 80089ce:	4a0c      	ldr	r2, [pc, #48]	@ (8008a00 <Init_HumPRO_900_Receiver+0x118>)
 80089d0:	0011      	movs	r1, r2
 80089d2:	0018      	movs	r0, r3
 80089d4:	f7f9 f914 	bl	8001c00 <Set_Task_Name>
}
 80089d8:	46c0      	nop			@ (mov r8, r8)
 80089da:	46bd      	mov	sp, r7
 80089dc:	b004      	add	sp, #16
 80089de:	bd80      	pop	{r7, pc}
 80089e0:	0000020e 	.word	0x0000020e
 80089e4:	00000211 	.word	0x00000211
 80089e8:	00000212 	.word	0x00000212
 80089ec:	0000020f 	.word	0x0000020f
 80089f0:	00000223 	.word	0x00000223
 80089f4:	00000222 	.word	0x00000222
 80089f8:	00000221 	.word	0x00000221
 80089fc:	08008a05 	.word	0x08008a05
 8008a00:	0800d910 	.word	0x0800d910

08008a04 <HumPRO_900_Receiver_Task>:

void HumPRO_900_Receiver_Task(void * task_input)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b084      	sub	sp, #16
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
	HumPRO_900_Receiver_t * Receiver = (HumPRO_900_Receiver_t *)task_input;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	60fb      	str	r3, [r7, #12]

	// Set buffer size before calling UART_Receive (input/output parameter)
	Receiver->DMA_Buff_Size = sizeof(Receiver->DMA_Buff);
 8008a10:	68fa      	ldr	r2, [r7, #12]
 8008a12:	2386      	movs	r3, #134	@ 0x86
 8008a14:	005b      	lsls	r3, r3, #1
 8008a16:	2180      	movs	r1, #128	@ 0x80
 8008a18:	0049      	lsls	r1, r1, #1
 8008a1a:	52d1      	strh	r1, [r2, r3]
	UART_Receive(Receiver->Bus, Receiver->DMA_Buff, &Receiver->DMA_Buff_Size);
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	6818      	ldr	r0, [r3, #0]
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	330c      	adds	r3, #12
 8008a24:	0019      	movs	r1, r3
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	330d      	adds	r3, #13
 8008a2a:	33ff      	adds	r3, #255	@ 0xff
 8008a2c:	001a      	movs	r2, r3
 8008a2e:	f7ff fbd7 	bl	80081e0 <UART_Receive>

	if(Receiver->DMA_Buff_Size)
 8008a32:	68fa      	ldr	r2, [r7, #12]
 8008a34:	2386      	movs	r3, #134	@ 0x86
 8008a36:	005b      	lsls	r3, r3, #1
 8008a38:	5ad3      	ldrh	r3, [r2, r3]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d008      	beq.n	8008a50 <HumPRO_900_Receiver_Task+0x4c>
	{
		HumPRO_900_Process_RX_Data(Receiver);
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	0018      	movs	r0, r3
 8008a42:	f000 f959 	bl	8008cf8 <HumPRO_900_Process_RX_Data>
		// Reset for next iteration
		Receiver->DMA_Buff_Size = 0;
 8008a46:	68fa      	ldr	r2, [r7, #12]
 8008a48:	2386      	movs	r3, #134	@ 0x86
 8008a4a:	005b      	lsls	r3, r3, #1
 8008a4c:	2100      	movs	r1, #0
 8008a4e:	52d1      	strh	r1, [r2, r3]
	}
	Modify_Task_Timeout(Receiver->TaskID, TICK_PERIOD_MS);
 8008a50:	68fa      	ldr	r2, [r7, #12]
 8008a52:	2389      	movs	r3, #137	@ 0x89
 8008a54:	009b      	lsls	r3, r3, #2
 8008a56:	58d3      	ldr	r3, [r2, r3]
 8008a58:	210a      	movs	r1, #10
 8008a5a:	0018      	movs	r0, r3
 8008a5c:	f7f9 f8a4 	bl	8001ba8 <Modify_Task_Timeout>
}
 8008a60:	46c0      	nop			@ (mov r8, r8)
 8008a62:	46bd      	mov	sp, r7
 8008a64:	b004      	add	sp, #16
 8008a66:	bd80      	pop	{r7, pc}

08008a68 <HumPRO_900_Write_Register>:

void HumPRO_900_Write_Register(HumPRO_900_Receiver_t * Receiver, uint8_t Register, uint8_t Value, bool Request_ACK)
{
 8008a68:	b590      	push	{r4, r7, lr}
 8008a6a:	b085      	sub	sp, #20
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
 8008a70:	000c      	movs	r4, r1
 8008a72:	0010      	movs	r0, r2
 8008a74:	0019      	movs	r1, r3
 8008a76:	1cfb      	adds	r3, r7, #3
 8008a78:	1c22      	adds	r2, r4, #0
 8008a7a:	701a      	strb	r2, [r3, #0]
 8008a7c:	1cbb      	adds	r3, r7, #2
 8008a7e:	1c02      	adds	r2, r0, #0
 8008a80:	701a      	strb	r2, [r3, #0]
 8008a82:	1c7b      	adds	r3, r7, #1
 8008a84:	1c0a      	adds	r2, r1, #0
 8008a86:	701a      	strb	r2, [r3, #0]
	uint8_t buff[6] = {0xFF};
 8008a88:	2108      	movs	r1, #8
 8008a8a:	187b      	adds	r3, r7, r1
 8008a8c:	22ff      	movs	r2, #255	@ 0xff
 8008a8e:	601a      	str	r2, [r3, #0]
 8008a90:	2200      	movs	r2, #0
 8008a92:	809a      	strh	r2, [r3, #4]

	// A different action is needed if either the Register or the Value is >= 0x80
	if((Register & 0x80) && (Value & 0x80))
 8008a94:	1cfb      	adds	r3, r7, #3
 8008a96:	781b      	ldrb	r3, [r3, #0]
 8008a98:	b25b      	sxtb	r3, r3
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	da27      	bge.n	8008aee <HumPRO_900_Write_Register+0x86>
 8008a9e:	1cbb      	adds	r3, r7, #2
 8008aa0:	781b      	ldrb	r3, [r3, #0]
 8008aa2:	b25b      	sxtb	r3, r3
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	da22      	bge.n	8008aee <HumPRO_900_Write_Register+0x86>
	{
		buff[1] = 0x04;
 8008aa8:	000c      	movs	r4, r1
 8008aaa:	193b      	adds	r3, r7, r4
 8008aac:	2204      	movs	r2, #4
 8008aae:	705a      	strb	r2, [r3, #1]
		buff[2] = 0xFE;
 8008ab0:	193b      	adds	r3, r7, r4
 8008ab2:	22fe      	movs	r2, #254	@ 0xfe
 8008ab4:	709a      	strb	r2, [r3, #2]
		buff[3] = Register - 0x80;
 8008ab6:	1cfb      	adds	r3, r7, #3
 8008ab8:	781b      	ldrb	r3, [r3, #0]
 8008aba:	3b80      	subs	r3, #128	@ 0x80
 8008abc:	b2da      	uxtb	r2, r3
 8008abe:	193b      	adds	r3, r7, r4
 8008ac0:	70da      	strb	r2, [r3, #3]
		buff[4] = 0xFE;
 8008ac2:	193b      	adds	r3, r7, r4
 8008ac4:	22fe      	movs	r2, #254	@ 0xfe
 8008ac6:	711a      	strb	r2, [r3, #4]
		buff[5] = Value - 0x80;
 8008ac8:	1cbb      	adds	r3, r7, #2
 8008aca:	781b      	ldrb	r3, [r3, #0]
 8008acc:	3b80      	subs	r3, #128	@ 0x80
 8008ace:	b2da      	uxtb	r2, r3
 8008ad0:	193b      	adds	r3, r7, r4
 8008ad2:	715a      	strb	r2, [r3, #5]

		Set_GPIO_State_Low(Receiver->CMD);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	685b      	ldr	r3, [r3, #4]
 8008ad8:	0018      	movs	r0, r3
 8008ada:	f7f9 ffe6 	bl	8002aaa <Set_GPIO_State_Low>
		UART_Transmit(Receiver->Bus, buff, 6);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	1939      	adds	r1, r7, r4
 8008ae4:	2206      	movs	r2, #6
 8008ae6:	0018      	movs	r0, r3
 8008ae8:	f7ff fb0b 	bl	8008102 <UART_Transmit>
 8008aec:	e05d      	b.n	8008baa <HumPRO_900_Write_Register+0x142>
	}
	else if(Register & 0x80)
 8008aee:	1cfb      	adds	r3, r7, #3
 8008af0:	781b      	ldrb	r3, [r3, #0]
 8008af2:	b25b      	sxtb	r3, r3
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	da1d      	bge.n	8008b34 <HumPRO_900_Write_Register+0xcc>
	{
		buff[1] = 0x03;
 8008af8:	2408      	movs	r4, #8
 8008afa:	193b      	adds	r3, r7, r4
 8008afc:	2203      	movs	r2, #3
 8008afe:	705a      	strb	r2, [r3, #1]
		buff[2] = 0xFE;
 8008b00:	193b      	adds	r3, r7, r4
 8008b02:	22fe      	movs	r2, #254	@ 0xfe
 8008b04:	709a      	strb	r2, [r3, #2]
		buff[3] = Register - 0x80;
 8008b06:	1cfb      	adds	r3, r7, #3
 8008b08:	781b      	ldrb	r3, [r3, #0]
 8008b0a:	3b80      	subs	r3, #128	@ 0x80
 8008b0c:	b2da      	uxtb	r2, r3
 8008b0e:	193b      	adds	r3, r7, r4
 8008b10:	70da      	strb	r2, [r3, #3]
		buff[4] = Value;
 8008b12:	193b      	adds	r3, r7, r4
 8008b14:	1cba      	adds	r2, r7, #2
 8008b16:	7812      	ldrb	r2, [r2, #0]
 8008b18:	711a      	strb	r2, [r3, #4]

		Set_GPIO_State_Low(Receiver->CMD);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	685b      	ldr	r3, [r3, #4]
 8008b1e:	0018      	movs	r0, r3
 8008b20:	f7f9 ffc3 	bl	8002aaa <Set_GPIO_State_Low>
		UART_Transmit(Receiver->Bus, buff, 5);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	1939      	adds	r1, r7, r4
 8008b2a:	2205      	movs	r2, #5
 8008b2c:	0018      	movs	r0, r3
 8008b2e:	f7ff fae8 	bl	8008102 <UART_Transmit>
 8008b32:	e03a      	b.n	8008baa <HumPRO_900_Write_Register+0x142>
	}
	else if(Value & 0x80)
 8008b34:	1cbb      	adds	r3, r7, #2
 8008b36:	781b      	ldrb	r3, [r3, #0]
 8008b38:	b25b      	sxtb	r3, r3
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	da1d      	bge.n	8008b7a <HumPRO_900_Write_Register+0x112>
	{
		buff[1] = 0x03;
 8008b3e:	2408      	movs	r4, #8
 8008b40:	193b      	adds	r3, r7, r4
 8008b42:	2203      	movs	r2, #3
 8008b44:	705a      	strb	r2, [r3, #1]
		buff[2] = Register;
 8008b46:	193b      	adds	r3, r7, r4
 8008b48:	1cfa      	adds	r2, r7, #3
 8008b4a:	7812      	ldrb	r2, [r2, #0]
 8008b4c:	709a      	strb	r2, [r3, #2]
		buff[3] = 0xFE;
 8008b4e:	193b      	adds	r3, r7, r4
 8008b50:	22fe      	movs	r2, #254	@ 0xfe
 8008b52:	70da      	strb	r2, [r3, #3]
		buff[4] = Value - 0x80;
 8008b54:	1cbb      	adds	r3, r7, #2
 8008b56:	781b      	ldrb	r3, [r3, #0]
 8008b58:	3b80      	subs	r3, #128	@ 0x80
 8008b5a:	b2da      	uxtb	r2, r3
 8008b5c:	193b      	adds	r3, r7, r4
 8008b5e:	711a      	strb	r2, [r3, #4]

		Set_GPIO_State_Low(Receiver->CMD);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	685b      	ldr	r3, [r3, #4]
 8008b64:	0018      	movs	r0, r3
 8008b66:	f7f9 ffa0 	bl	8002aaa <Set_GPIO_State_Low>
		UART_Transmit(Receiver->Bus, buff, 5);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	1939      	adds	r1, r7, r4
 8008b70:	2205      	movs	r2, #5
 8008b72:	0018      	movs	r0, r3
 8008b74:	f7ff fac5 	bl	8008102 <UART_Transmit>
 8008b78:	e017      	b.n	8008baa <HumPRO_900_Write_Register+0x142>
	}
	else
	{
		buff[1] = 0x02;
 8008b7a:	2408      	movs	r4, #8
 8008b7c:	193b      	adds	r3, r7, r4
 8008b7e:	2202      	movs	r2, #2
 8008b80:	705a      	strb	r2, [r3, #1]
		buff[2] = Register;
 8008b82:	193b      	adds	r3, r7, r4
 8008b84:	1cfa      	adds	r2, r7, #3
 8008b86:	7812      	ldrb	r2, [r2, #0]
 8008b88:	709a      	strb	r2, [r3, #2]
		buff[3] = Value;
 8008b8a:	193b      	adds	r3, r7, r4
 8008b8c:	1cba      	adds	r2, r7, #2
 8008b8e:	7812      	ldrb	r2, [r2, #0]
 8008b90:	70da      	strb	r2, [r3, #3]

		Set_GPIO_State_Low(Receiver->CMD);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	685b      	ldr	r3, [r3, #4]
 8008b96:	0018      	movs	r0, r3
 8008b98:	f7f9 ff87 	bl	8002aaa <Set_GPIO_State_Low>
		UART_Transmit(Receiver->Bus, buff, 4);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	1939      	adds	r1, r7, r4
 8008ba2:	2204      	movs	r2, #4
 8008ba4:	0018      	movs	r0, r3
 8008ba6:	f7ff faac 	bl	8008102 <UART_Transmit>
	}

	if(Request_ACK)
 8008baa:	1c7b      	adds	r3, r7, #1
 8008bac:	781b      	ldrb	r3, [r3, #0]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d003      	beq.n	8008bba <HumPRO_900_Write_Register+0x152>
		Receiver->Expected_Return = eExpecting_ACK_NACK;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	4a03      	ldr	r2, [pc, #12]	@ (8008bc4 <HumPRO_900_Write_Register+0x15c>)
 8008bb6:	2101      	movs	r1, #1
 8008bb8:	5499      	strb	r1, [r3, r2]
}
 8008bba:	46c0      	nop			@ (mov r8, r8)
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	b005      	add	sp, #20
 8008bc0:	bd90      	pop	{r4, r7, pc}
 8008bc2:	46c0      	nop			@ (mov r8, r8)
 8008bc4:	0000020f 	.word	0x0000020f

08008bc8 <HumPRO_900_Read_Register>:

void HumPRO_900_Read_Register(HumPRO_900_Receiver_t * Receiver, uint8_t Register)
{
 8008bc8:	b590      	push	{r4, r7, lr}
 8008bca:	b085      	sub	sp, #20
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
 8008bd0:	000a      	movs	r2, r1
 8008bd2:	1cfb      	adds	r3, r7, #3
 8008bd4:	701a      	strb	r2, [r3, #0]
	uint8_t buff[5] = {0xFF};
 8008bd6:	2408      	movs	r4, #8
 8008bd8:	193b      	adds	r3, r7, r4
 8008bda:	22ff      	movs	r2, #255	@ 0xff
 8008bdc:	601a      	str	r2, [r3, #0]
 8008bde:	2200      	movs	r2, #0
 8008be0:	711a      	strb	r2, [r3, #4]

	if(Register & 0x80)
 8008be2:	1cfb      	adds	r3, r7, #3
 8008be4:	781b      	ldrb	r3, [r3, #0]
 8008be6:	b25b      	sxtb	r3, r3
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	da1b      	bge.n	8008c24 <HumPRO_900_Read_Register+0x5c>
	{
		buff[1] = 0x03;
 8008bec:	193b      	adds	r3, r7, r4
 8008bee:	2203      	movs	r2, #3
 8008bf0:	705a      	strb	r2, [r3, #1]
		buff[2] = 0xFE;
 8008bf2:	193b      	adds	r3, r7, r4
 8008bf4:	22fe      	movs	r2, #254	@ 0xfe
 8008bf6:	709a      	strb	r2, [r3, #2]
		buff[3] = 0xFE;
 8008bf8:	193b      	adds	r3, r7, r4
 8008bfa:	22fe      	movs	r2, #254	@ 0xfe
 8008bfc:	70da      	strb	r2, [r3, #3]
		buff[4] = Register - 0x80;
 8008bfe:	1cfb      	adds	r3, r7, #3
 8008c00:	781b      	ldrb	r3, [r3, #0]
 8008c02:	3b80      	subs	r3, #128	@ 0x80
 8008c04:	b2da      	uxtb	r2, r3
 8008c06:	193b      	adds	r3, r7, r4
 8008c08:	711a      	strb	r2, [r3, #4]

		Set_GPIO_State_Low(Receiver->CMD);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	685b      	ldr	r3, [r3, #4]
 8008c0e:	0018      	movs	r0, r3
 8008c10:	f7f9 ff4b 	bl	8002aaa <Set_GPIO_State_Low>
		UART_Transmit(Receiver->Bus, buff, 5);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	1939      	adds	r1, r7, r4
 8008c1a:	2205      	movs	r2, #5
 8008c1c:	0018      	movs	r0, r3
 8008c1e:	f7ff fa70 	bl	8008102 <UART_Transmit>
 8008c22:	e016      	b.n	8008c52 <HumPRO_900_Read_Register+0x8a>
	}
	else
	{
		buff[1] = 0x02;
 8008c24:	2408      	movs	r4, #8
 8008c26:	193b      	adds	r3, r7, r4
 8008c28:	2202      	movs	r2, #2
 8008c2a:	705a      	strb	r2, [r3, #1]
		buff[2] = 0xFE;
 8008c2c:	193b      	adds	r3, r7, r4
 8008c2e:	22fe      	movs	r2, #254	@ 0xfe
 8008c30:	709a      	strb	r2, [r3, #2]
		buff[3] = Register;
 8008c32:	193b      	adds	r3, r7, r4
 8008c34:	1cfa      	adds	r2, r7, #3
 8008c36:	7812      	ldrb	r2, [r2, #0]
 8008c38:	70da      	strb	r2, [r3, #3]

		Set_GPIO_State_Low(Receiver->CMD);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	685b      	ldr	r3, [r3, #4]
 8008c3e:	0018      	movs	r0, r3
 8008c40:	f7f9 ff33 	bl	8002aaa <Set_GPIO_State_Low>
		UART_Transmit(Receiver->Bus, buff, 4);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	1939      	adds	r1, r7, r4
 8008c4a:	2204      	movs	r2, #4
 8008c4c:	0018      	movs	r0, r3
 8008c4e:	f7ff fa58 	bl	8008102 <UART_Transmit>
	}

	Receiver->Expected_Return = eExpecting_Register_Return;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	4a03      	ldr	r2, [pc, #12]	@ (8008c64 <HumPRO_900_Read_Register+0x9c>)
 8008c56:	2102      	movs	r1, #2
 8008c58:	5499      	strb	r1, [r3, r2]
}
 8008c5a:	46c0      	nop			@ (mov r8, r8)
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	b005      	add	sp, #20
 8008c60:	bd90      	pop	{r4, r7, pc}
 8008c62:	46c0      	nop			@ (mov r8, r8)
 8008c64:	0000020f 	.word	0x0000020f

08008c68 <HumPRO_900_Read_Received_Data>:

void HumPRO_900_Read_Received_Data(HumPRO_900_Receiver_t * Receiver, void * RX_Callback, void * Callback_Data)
{
 8008c68:	b590      	push	{r4, r7, lr}
 8008c6a:	b087      	sub	sp, #28
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	60f8      	str	r0, [r7, #12]
 8008c70:	60b9      	str	r1, [r7, #8]
 8008c72:	607a      	str	r2, [r7, #4]
	uint8_t buff[5] = {0xFF, 0x03, 0xFE, 0x47, 0x04};
 8008c74:	2410      	movs	r4, #16
 8008c76:	193b      	adds	r3, r7, r4
 8008c78:	4a1b      	ldr	r2, [pc, #108]	@ (8008ce8 <HumPRO_900_Read_Received_Data+0x80>)
 8008c7a:	6811      	ldr	r1, [r2, #0]
 8008c7c:	6019      	str	r1, [r3, #0]
 8008c7e:	7912      	ldrb	r2, [r2, #4]
 8008c80:	711a      	strb	r2, [r3, #4]
	Set_GPIO_State_Low(Receiver->CMD);
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	685b      	ldr	r3, [r3, #4]
 8008c86:	0018      	movs	r0, r3
 8008c88:	f7f9 ff0f 	bl	8002aaa <Set_GPIO_State_Low>
	UART_Transmit_Blocking(Receiver->Bus, buff, 5);
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	1939      	adds	r1, r7, r4
 8008c92:	2205      	movs	r2, #5
 8008c94:	0018      	movs	r0, r3
 8008c96:	f7ff fa8f 	bl	80081b8 <UART_Transmit_Blocking>

//	UART_Transmit_With_Callback(Receiver->Bus, buff, 5, HumPRO_900_Request_Data_TX_Complete, (void *)Receiver);
//	HumPRO_900_Write_Register(Receiver, 0xC7, 0x04, false);
	Receiver->Expected_Return = eExpecting_Received_Data;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	4a13      	ldr	r2, [pc, #76]	@ (8008cec <HumPRO_900_Read_Received_Data+0x84>)
 8008c9e:	2103      	movs	r1, #3
 8008ca0:	5499      	strb	r1, [r3, r2]
	Receiver->Receiving_Header = true;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	4a12      	ldr	r2, [pc, #72]	@ (8008cf0 <HumPRO_900_Read_Received_Data+0x88>)
 8008ca6:	2101      	movs	r1, #1
 8008ca8:	5499      	strb	r1, [r3, r2]
	Receiver->Receiving_Data = true;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	4a11      	ldr	r2, [pc, #68]	@ (8008cf4 <HumPRO_900_Read_Received_Data+0x8c>)
 8008cae:	2101      	movs	r1, #1
 8008cb0:	5499      	strb	r1, [r3, r2]
	Modify_Task_Timeout(Receiver->TaskID, TICK_PERIOD_MS);
 8008cb2:	68fa      	ldr	r2, [r7, #12]
 8008cb4:	2389      	movs	r3, #137	@ 0x89
 8008cb6:	009b      	lsls	r3, r3, #2
 8008cb8:	58d3      	ldr	r3, [r2, r3]
 8008cba:	210a      	movs	r1, #10
 8008cbc:	0018      	movs	r0, r3
 8008cbe:	f7f8 ff73 	bl	8001ba8 <Modify_Task_Timeout>
	Set_GPIO_State_High(Receiver->CMD);
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	685b      	ldr	r3, [r3, #4]
 8008cc6:	0018      	movs	r0, r3
 8008cc8:	f7f9 fed8 	bl	8002a7c <Set_GPIO_State_High>

		// Store callback info for when data reception completes
	Receiver->RX_Complete_Callback = RX_Callback;
 8008ccc:	68b9      	ldr	r1, [r7, #8]
 8008cce:	68fa      	ldr	r2, [r7, #12]
 8008cd0:	238a      	movs	r3, #138	@ 0x8a
 8008cd2:	009b      	lsls	r3, r3, #2
 8008cd4:	50d1      	str	r1, [r2, r3]
	Receiver->Callback_Data = Callback_Data;
 8008cd6:	68fa      	ldr	r2, [r7, #12]
 8008cd8:	238b      	movs	r3, #139	@ 0x8b
 8008cda:	009b      	lsls	r3, r3, #2
 8008cdc:	6879      	ldr	r1, [r7, #4]
 8008cde:	50d1      	str	r1, [r2, r3]
	
	// Don't block - let receiver task handle data parsing and callback when ready
//	TX_THREAD_SLEEP(1);
//	SET_GPIO_State_High(Receiver->CMD);
}
 8008ce0:	46c0      	nop			@ (mov r8, r8)
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	b007      	add	sp, #28
 8008ce6:	bd90      	pop	{r4, r7, pc}
 8008ce8:	0800d920 	.word	0x0800d920
 8008cec:	0000020f 	.word	0x0000020f
 8008cf0:	00000211 	.word	0x00000211
 8008cf4:	00000212 	.word	0x00000212

08008cf8 <HumPRO_900_Process_RX_Data>:

static void HumPRO_900_Process_RX_Data(HumPRO_900_Receiver_t * Receiver)
{
 8008cf8:	b5b0      	push	{r4, r5, r7, lr}
 8008cfa:	b08a      	sub	sp, #40	@ 0x28
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
	// Ignore data if we are not expecting any
	if(Receiver->Expected_Return == eExpecting_Nothing)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	4ac3      	ldr	r2, [pc, #780]	@ (8009010 <HumPRO_900_Process_RX_Data+0x318>)
 8008d04:	5c9b      	ldrb	r3, [r3, r2]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d100      	bne.n	8008d0c <HumPRO_900_Process_RX_Data+0x14>
 8008d0a:	e17c      	b.n	8009006 <HumPRO_900_Process_RX_Data+0x30e>
		return;

	for(int i = 0; i < Receiver->DMA_Buff_Size; i++)
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008d10:	e16f      	b.n	8008ff2 <HumPRO_900_Process_RX_Data+0x2fa>
	{
		// Handle the data differently if we are receiving a command response vs. receiving data from the network
		if(Receiver->Receiving_Command)
 8008d12:	687a      	ldr	r2, [r7, #4]
 8008d14:	2384      	movs	r3, #132	@ 0x84
 8008d16:	009b      	lsls	r3, r3, #2
 8008d18:	5cd3      	ldrb	r3, [r2, r3]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d100      	bne.n	8008d20 <HumPRO_900_Process_RX_Data+0x28>
 8008d1e:	e0bb      	b.n	8008e98 <HumPRO_900_Process_RX_Data+0x1a0>
		{
			if(Receiver->RX_Buff_Size == 0)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	4abc      	ldr	r2, [pc, #752]	@ (8009014 <HumPRO_900_Process_RX_Data+0x31c>)
 8008d24:	5c9b      	ldrb	r3, [r3, r2]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d15d      	bne.n	8008de6 <HumPRO_900_Process_RX_Data+0xee>
			{
				// This needs to be either a 0x06(ACK) or 0x15(NACK)
				if(Receiver->DMA_Buff[i] == 0x06 || Receiver->DMA_Buff[i] == 0x15)
 8008d2a:	687a      	ldr	r2, [r7, #4]
 8008d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d2e:	18d3      	adds	r3, r2, r3
 8008d30:	330c      	adds	r3, #12
 8008d32:	781b      	ldrb	r3, [r3, #0]
 8008d34:	2b06      	cmp	r3, #6
 8008d36:	d007      	beq.n	8008d48 <HumPRO_900_Process_RX_Data+0x50>
 8008d38:	687a      	ldr	r2, [r7, #4]
 8008d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d3c:	18d3      	adds	r3, r2, r3
 8008d3e:	330c      	adds	r3, #12
 8008d40:	781b      	ldrb	r3, [r3, #0]
 8008d42:	2b15      	cmp	r3, #21
 8008d44:	d000      	beq.n	8008d48 <HumPRO_900_Process_RX_Data+0x50>
 8008d46:	e151      	b.n	8008fec <HumPRO_900_Process_RX_Data+0x2f4>
				{
					if(Receiver->RX_Buff_Size < sizeof(Receiver->RX_Buff))
						Receiver->RX_Buff[Receiver->RX_Buff_Size++] = Receiver->DMA_Buff[i];
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	4ab2      	ldr	r2, [pc, #712]	@ (8009014 <HumPRO_900_Process_RX_Data+0x31c>)
 8008d4c:	5c9b      	ldrb	r3, [r3, r2]
 8008d4e:	1c5a      	adds	r2, r3, #1
 8008d50:	b2d0      	uxtb	r0, r2
 8008d52:	687a      	ldr	r2, [r7, #4]
 8008d54:	49af      	ldr	r1, [pc, #700]	@ (8009014 <HumPRO_900_Process_RX_Data+0x31c>)
 8008d56:	5450      	strb	r0, [r2, r1]
 8008d58:	0018      	movs	r0, r3
 8008d5a:	687a      	ldr	r2, [r7, #4]
 8008d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d5e:	18d3      	adds	r3, r2, r3
 8008d60:	330c      	adds	r3, #12
 8008d62:	7819      	ldrb	r1, [r3, #0]
 8008d64:	687a      	ldr	r2, [r7, #4]
 8008d66:	2387      	movs	r3, #135	@ 0x87
 8008d68:	005b      	lsls	r3, r3, #1
 8008d6a:	1812      	adds	r2, r2, r0
 8008d6c:	18d3      	adds	r3, r2, r3
 8008d6e:	1c0a      	adds	r2, r1, #0
 8008d70:	701a      	strb	r2, [r3, #0]

					// This can either be a ACK/NACK or can be a response to a register request
					if(Receiver->Expected_Return == eExpecting_ACK_NACK)
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	4aa6      	ldr	r2, [pc, #664]	@ (8009010 <HumPRO_900_Process_RX_Data+0x318>)
 8008d76:	5c9b      	ldrb	r3, [r3, r2]
 8008d78:	2b01      	cmp	r3, #1
 8008d7a:	d128      	bne.n	8008dce <HumPRO_900_Process_RX_Data+0xd6>
					{
						/* We have received the complete return. Allocate a small message and enqueue; if enqueue fails, free. */
						uint8_t * message = malloc(4);
 8008d7c:	2004      	movs	r0, #4
 8008d7e:	f002 f81b 	bl	800adb8 <malloc>
 8008d82:	0003      	movs	r3, r0
 8008d84:	60fb      	str	r3, [r7, #12]
						if(message)
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d01b      	beq.n	8008dc4 <HumPRO_900_Process_RX_Data+0xcc>
						{
							message[0] = Receiver->RX_Buff_Size;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	4aa1      	ldr	r2, [pc, #644]	@ (8009014 <HumPRO_900_Process_RX_Data+0x31c>)
 8008d90:	5c9a      	ldrb	r2, [r3, r2]
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	701a      	strb	r2, [r3, #0]
							message[1] = Receiver->RX_Buff[0];
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	3301      	adds	r3, #1
 8008d9a:	6879      	ldr	r1, [r7, #4]
 8008d9c:	2287      	movs	r2, #135	@ 0x87
 8008d9e:	0052      	lsls	r2, r2, #1
 8008da0:	5c8a      	ldrb	r2, [r1, r2]
 8008da2:	701a      	strb	r2, [r3, #0]
							if(!Enqueue(&Receiver->RX_Queue, message))
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2285      	movs	r2, #133	@ 0x85
 8008da8:	0092      	lsls	r2, r2, #2
 8008daa:	4694      	mov	ip, r2
 8008dac:	4463      	add	r3, ip
 8008dae:	68fa      	ldr	r2, [r7, #12]
 8008db0:	0011      	movs	r1, r2
 8008db2:	0018      	movs	r0, r3
 8008db4:	f7f8 fd48 	bl	8001848 <Enqueue>
 8008db8:	1e03      	subs	r3, r0, #0
 8008dba:	d103      	bne.n	8008dc4 <HumPRO_900_Process_RX_Data+0xcc>
							{
								/* Enqueue failed — free to avoid leak */
								free(message);
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	0018      	movs	r0, r3
 8008dc0:	f002 f804 	bl	800adcc <free>
							}
						}
						Receiver->RX_Buff_Size = 0;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	4a93      	ldr	r2, [pc, #588]	@ (8009014 <HumPRO_900_Process_RX_Data+0x31c>)
 8008dc8:	2100      	movs	r1, #0
 8008dca:	5499      	strb	r1, [r3, r2]
 8008dcc:	e10e      	b.n	8008fec <HumPRO_900_Process_RX_Data+0x2f4>
					}
					else if(Receiver->Expected_Return == eExpecting_Received_Data)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	4a8f      	ldr	r2, [pc, #572]	@ (8009010 <HumPRO_900_Process_RX_Data+0x318>)
 8008dd2:	5c9b      	ldrb	r3, [r3, r2]
 8008dd4:	2b03      	cmp	r3, #3
 8008dd6:	d000      	beq.n	8008dda <HumPRO_900_Process_RX_Data+0xe2>
 8008dd8:	e108      	b.n	8008fec <HumPRO_900_Process_RX_Data+0x2f4>
					{
						Receiver->Receiving_Command = false;
 8008dda:	687a      	ldr	r2, [r7, #4]
 8008ddc:	2384      	movs	r3, #132	@ 0x84
 8008dde:	009b      	lsls	r3, r3, #2
 8008de0:	2100      	movs	r1, #0
 8008de2:	54d1      	strb	r1, [r2, r3]
 8008de4:	e102      	b.n	8008fec <HumPRO_900_Process_RX_Data+0x2f4>
			}
			else
			{
				// Save the data until we have the three bytes total
				if(Receiver->RX_Buff_Size < sizeof(Receiver->RX_Buff))
					Receiver->RX_Buff[Receiver->RX_Buff_Size++] = Receiver->DMA_Buff[i];
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	4a8a      	ldr	r2, [pc, #552]	@ (8009014 <HumPRO_900_Process_RX_Data+0x31c>)
 8008dea:	5c9b      	ldrb	r3, [r3, r2]
 8008dec:	1c5a      	adds	r2, r3, #1
 8008dee:	b2d0      	uxtb	r0, r2
 8008df0:	687a      	ldr	r2, [r7, #4]
 8008df2:	4988      	ldr	r1, [pc, #544]	@ (8009014 <HumPRO_900_Process_RX_Data+0x31c>)
 8008df4:	5450      	strb	r0, [r2, r1]
 8008df6:	0018      	movs	r0, r3
 8008df8:	687a      	ldr	r2, [r7, #4]
 8008dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dfc:	18d3      	adds	r3, r2, r3
 8008dfe:	330c      	adds	r3, #12
 8008e00:	7819      	ldrb	r1, [r3, #0]
 8008e02:	687a      	ldr	r2, [r7, #4]
 8008e04:	2387      	movs	r3, #135	@ 0x87
 8008e06:	005b      	lsls	r3, r3, #1
 8008e08:	1812      	adds	r2, r2, r0
 8008e0a:	18d3      	adds	r3, r2, r3
 8008e0c:	1c0a      	adds	r2, r1, #0
 8008e0e:	701a      	strb	r2, [r3, #0]

				if(Receiver->Expected_Return == eExpecting_Register_Return && Receiver->RX_Buff_Size >= 3)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	4a7f      	ldr	r2, [pc, #508]	@ (8009010 <HumPRO_900_Process_RX_Data+0x318>)
 8008e14:	5c9b      	ldrb	r3, [r3, r2]
 8008e16:	2b02      	cmp	r3, #2
 8008e18:	d000      	beq.n	8008e1c <HumPRO_900_Process_RX_Data+0x124>
 8008e1a:	e0e7      	b.n	8008fec <HumPRO_900_Process_RX_Data+0x2f4>
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	4a7d      	ldr	r2, [pc, #500]	@ (8009014 <HumPRO_900_Process_RX_Data+0x31c>)
 8008e20:	5c9b      	ldrb	r3, [r3, r2]
 8008e22:	2b02      	cmp	r3, #2
 8008e24:	d800      	bhi.n	8008e28 <HumPRO_900_Process_RX_Data+0x130>
 8008e26:	e0e1      	b.n	8008fec <HumPRO_900_Process_RX_Data+0x2f4>
				{
					/* We have the full command response. Allocate and enqueue; free on failure. */
					uint8_t * message = malloc(4);
 8008e28:	2004      	movs	r0, #4
 8008e2a:	f001 ffc5 	bl	800adb8 <malloc>
 8008e2e:	0003      	movs	r3, r0
 8008e30:	617b      	str	r3, [r7, #20]
					if(message)
 8008e32:	697b      	ldr	r3, [r7, #20]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d02a      	beq.n	8008e8e <HumPRO_900_Process_RX_Data+0x196>
					{
						message[0] = Receiver->RX_Buff_Size;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	4a76      	ldr	r2, [pc, #472]	@ (8009014 <HumPRO_900_Process_RX_Data+0x31c>)
 8008e3c:	5c9a      	ldrb	r2, [r3, r2]
 8008e3e:	697b      	ldr	r3, [r7, #20]
 8008e40:	701a      	strb	r2, [r3, #0]
						// Bounds check: only copy max 3 bytes to avoid buffer overflow
						uint8_t copy_size = (Receiver->RX_Buff_Size > 3) ? 3 : Receiver->RX_Buff_Size;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	4a73      	ldr	r2, [pc, #460]	@ (8009014 <HumPRO_900_Process_RX_Data+0x31c>)
 8008e46:	5c9b      	ldrb	r3, [r3, r2]
 8008e48:	2213      	movs	r2, #19
 8008e4a:	18ba      	adds	r2, r7, r2
 8008e4c:	b2d9      	uxtb	r1, r3
 8008e4e:	2903      	cmp	r1, #3
 8008e50:	d900      	bls.n	8008e54 <HumPRO_900_Process_RX_Data+0x15c>
 8008e52:	2303      	movs	r3, #3
 8008e54:	7013      	strb	r3, [r2, #0]
						memcpy(&message[1], Receiver->RX_Buff, copy_size);
 8008e56:	697b      	ldr	r3, [r7, #20]
 8008e58:	1c58      	adds	r0, r3, #1
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	330f      	adds	r3, #15
 8008e5e:	33ff      	adds	r3, #255	@ 0xff
 8008e60:	0019      	movs	r1, r3
 8008e62:	2313      	movs	r3, #19
 8008e64:	18fb      	adds	r3, r7, r3
 8008e66:	781b      	ldrb	r3, [r3, #0]
 8008e68:	001a      	movs	r2, r3
 8008e6a:	f003 f9f8 	bl	800c25e <memcpy>
						if(!Enqueue(&Receiver->RX_Queue, message))
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2285      	movs	r2, #133	@ 0x85
 8008e72:	0092      	lsls	r2, r2, #2
 8008e74:	4694      	mov	ip, r2
 8008e76:	4463      	add	r3, ip
 8008e78:	697a      	ldr	r2, [r7, #20]
 8008e7a:	0011      	movs	r1, r2
 8008e7c:	0018      	movs	r0, r3
 8008e7e:	f7f8 fce3 	bl	8001848 <Enqueue>
 8008e82:	1e03      	subs	r3, r0, #0
 8008e84:	d103      	bne.n	8008e8e <HumPRO_900_Process_RX_Data+0x196>
						{
							free(message);
 8008e86:	697b      	ldr	r3, [r7, #20]
 8008e88:	0018      	movs	r0, r3
 8008e8a:	f001 ff9f 	bl	800adcc <free>
						}
					}
					Receiver->RX_Buff_Size = 0;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	4a60      	ldr	r2, [pc, #384]	@ (8009014 <HumPRO_900_Process_RX_Data+0x31c>)
 8008e92:	2100      	movs	r1, #0
 8008e94:	5499      	strb	r1, [r3, r2]
 8008e96:	e0a9      	b.n	8008fec <HumPRO_900_Process_RX_Data+0x2f4>
		}
		else
		{
			// Save the data until we have the three bytes total
			if(Receiver->RX_Buff_Size < sizeof(Receiver->RX_Buff))
				Receiver->RX_Buff[Receiver->RX_Buff_Size++] = Receiver->DMA_Buff[i];
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	4a5e      	ldr	r2, [pc, #376]	@ (8009014 <HumPRO_900_Process_RX_Data+0x31c>)
 8008e9c:	5c9b      	ldrb	r3, [r3, r2]
 8008e9e:	1c5a      	adds	r2, r3, #1
 8008ea0:	b2d0      	uxtb	r0, r2
 8008ea2:	687a      	ldr	r2, [r7, #4]
 8008ea4:	495b      	ldr	r1, [pc, #364]	@ (8009014 <HumPRO_900_Process_RX_Data+0x31c>)
 8008ea6:	5450      	strb	r0, [r2, r1]
 8008ea8:	0018      	movs	r0, r3
 8008eaa:	687a      	ldr	r2, [r7, #4]
 8008eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eae:	18d3      	adds	r3, r2, r3
 8008eb0:	330c      	adds	r3, #12
 8008eb2:	7819      	ldrb	r1, [r3, #0]
 8008eb4:	687a      	ldr	r2, [r7, #4]
 8008eb6:	2387      	movs	r3, #135	@ 0x87
 8008eb8:	005b      	lsls	r3, r3, #1
 8008eba:	1812      	adds	r2, r2, r0
 8008ebc:	18d3      	adds	r3, r2, r3
 8008ebe:	1c0a      	adds	r2, r1, #0
 8008ec0:	701a      	strb	r2, [r3, #0]

			if(Receiver->Receiving_Header)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	4a54      	ldr	r2, [pc, #336]	@ (8009018 <HumPRO_900_Process_RX_Data+0x320>)
 8008ec6:	5c9b      	ldrb	r3, [r3, r2]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d018      	beq.n	8008efe <HumPRO_900_Process_RX_Data+0x206>
			{
				// In this receiver we always request the packet header and packet data to be transmitted together, so this handler needs to handle both packet types
				// We need at least 3 bytes received before we can make any decisions
				if(Receiver->RX_Buff_Size >= 3)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	4a51      	ldr	r2, [pc, #324]	@ (8009014 <HumPRO_900_Process_RX_Data+0x31c>)
 8008ed0:	5c9b      	ldrb	r3, [r3, r2]
 8008ed2:	2b02      	cmp	r3, #2
 8008ed4:	d800      	bhi.n	8008ed8 <HumPRO_900_Process_RX_Data+0x1e0>
 8008ed6:	e089      	b.n	8008fec <HumPRO_900_Process_RX_Data+0x2f4>
				{
					// Byte 2 will tell us the length of the packet minus the first 2 bytes
					uint8_t * Packet_Size = &Receiver->RX_Buff[2];
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	3311      	adds	r3, #17
 8008edc:	33ff      	adds	r3, #255	@ 0xff
 8008ede:	61bb      	str	r3, [r7, #24]

					// Wait until we have received all of our data, we add 3 to account for the start ACK(0x06) and the first to packet bytes
					if(Receiver->RX_Buff_Size == (*Packet_Size + 3))
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	4a4c      	ldr	r2, [pc, #304]	@ (8009014 <HumPRO_900_Process_RX_Data+0x31c>)
 8008ee4:	5c9b      	ldrb	r3, [r3, r2]
 8008ee6:	001a      	movs	r2, r3
 8008ee8:	69bb      	ldr	r3, [r7, #24]
 8008eea:	781b      	ldrb	r3, [r3, #0]
 8008eec:	3303      	adds	r3, #3
 8008eee:	429a      	cmp	r2, r3
 8008ef0:	d000      	beq.n	8008ef4 <HumPRO_900_Process_RX_Data+0x1fc>
 8008ef2:	e07b      	b.n	8008fec <HumPRO_900_Process_RX_Data+0x2f4>
					{
						// We have received all the data for this header
						Receiver->Receiving_Header = false;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	4a48      	ldr	r2, [pc, #288]	@ (8009018 <HumPRO_900_Process_RX_Data+0x320>)
 8008ef8:	2100      	movs	r1, #0
 8008efa:	5499      	strb	r1, [r3, r2]
 8008efc:	e076      	b.n	8008fec <HumPRO_900_Process_RX_Data+0x2f4>
			else
			{
				// We are receiving the data portion of this packet

				// Byte 2 will tell us the length of the packet header minus the first 2 bytes and the ACK(0x06)
				uint8_t Header_Size = Receiver->RX_Buff[2] + 3;
 8008efe:	687a      	ldr	r2, [r7, #4]
 8008f00:	2388      	movs	r3, #136	@ 0x88
 8008f02:	005b      	lsls	r3, r3, #1
 8008f04:	5cd2      	ldrb	r2, [r2, r3]
 8008f06:	2023      	movs	r0, #35	@ 0x23
 8008f08:	183b      	adds	r3, r7, r0
 8008f0a:	3203      	adds	r2, #3
 8008f0c:	701a      	strb	r2, [r3, #0]

				// Wait until we have received the header portion of the data section
				if(Receiver->RX_Buff_Size >= Header_Size + 2)
 8008f0e:	183b      	adds	r3, r7, r0
 8008f10:	781b      	ldrb	r3, [r3, #0]
 8008f12:	3301      	adds	r3, #1
 8008f14:	687a      	ldr	r2, [r7, #4]
 8008f16:	493f      	ldr	r1, [pc, #252]	@ (8009014 <HumPRO_900_Process_RX_Data+0x31c>)
 8008f18:	5c52      	ldrb	r2, [r2, r1]
 8008f1a:	4293      	cmp	r3, r2
 8008f1c:	da66      	bge.n	8008fec <HumPRO_900_Process_RX_Data+0x2f4>
				{
					uint8_t Data_Size = Receiver->RX_Buff[Header_Size + 1] + 2;
 8008f1e:	183b      	adds	r3, r7, r0
 8008f20:	781b      	ldrb	r3, [r3, #0]
 8008f22:	1c5a      	adds	r2, r3, #1
 8008f24:	6879      	ldr	r1, [r7, #4]
 8008f26:	2387      	movs	r3, #135	@ 0x87
 8008f28:	005b      	lsls	r3, r3, #1
 8008f2a:	188a      	adds	r2, r1, r2
 8008f2c:	18d3      	adds	r3, r2, r3
 8008f2e:	781a      	ldrb	r2, [r3, #0]
 8008f30:	2422      	movs	r4, #34	@ 0x22
 8008f32:	193b      	adds	r3, r7, r4
 8008f34:	3202      	adds	r2, #2
 8008f36:	701a      	strb	r2, [r3, #0]
					// We now know how much data is being passed in the data portion of the packet
					uint8_t Packet_Size = Header_Size + Data_Size;
 8008f38:	2521      	movs	r5, #33	@ 0x21
 8008f3a:	197b      	adds	r3, r7, r5
 8008f3c:	1839      	adds	r1, r7, r0
 8008f3e:	193a      	adds	r2, r7, r4
 8008f40:	7809      	ldrb	r1, [r1, #0]
 8008f42:	7812      	ldrb	r2, [r2, #0]
 8008f44:	188a      	adds	r2, r1, r2
 8008f46:	701a      	strb	r2, [r3, #0]

					// Wait until we have received Data_Size worth of data
					if(Receiver->RX_Buff_Size >= Packet_Size)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	4a32      	ldr	r2, [pc, #200]	@ (8009014 <HumPRO_900_Process_RX_Data+0x31c>)
 8008f4c:	5c9b      	ldrb	r3, [r3, r2]
 8008f4e:	197a      	adds	r2, r7, r5
 8008f50:	7812      	ldrb	r2, [r2, #0]
 8008f52:	429a      	cmp	r2, r3
 8008f54:	d84a      	bhi.n	8008fec <HumPRO_900_Process_RX_Data+0x2f4>
					{
						// We have received the entire packet - call callback if set
						if(Receiver->RX_Complete_Callback)
 8008f56:	687a      	ldr	r2, [r7, #4]
 8008f58:	238a      	movs	r3, #138	@ 0x8a
 8008f5a:	009b      	lsls	r3, r3, #2
 8008f5c:	58d3      	ldr	r3, [r2, r3]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d033      	beq.n	8008fca <HumPRO_900_Process_RX_Data+0x2d2>
						{
							uint8_t Header_Size = Receiver->RX_Buff[2] + 3;
 8008f62:	687a      	ldr	r2, [r7, #4]
 8008f64:	2388      	movs	r3, #136	@ 0x88
 8008f66:	005b      	lsls	r3, r3, #1
 8008f68:	5cd2      	ldrb	r2, [r2, r3]
 8008f6a:	2120      	movs	r1, #32
 8008f6c:	187b      	adds	r3, r7, r1
 8008f6e:	3203      	adds	r2, #3
 8008f70:	701a      	strb	r2, [r3, #0]
							uint8_t Data_Size = Receiver->RX_Buff[Header_Size + 1] + 2;
 8008f72:	187b      	adds	r3, r7, r1
 8008f74:	781b      	ldrb	r3, [r3, #0]
 8008f76:	1c5a      	adds	r2, r3, #1
 8008f78:	6879      	ldr	r1, [r7, #4]
 8008f7a:	2387      	movs	r3, #135	@ 0x87
 8008f7c:	005b      	lsls	r3, r3, #1
 8008f7e:	188a      	adds	r2, r1, r2
 8008f80:	18d3      	adds	r3, r2, r3
 8008f82:	781a      	ldrb	r2, [r3, #0]
 8008f84:	251f      	movs	r5, #31
 8008f86:	197b      	adds	r3, r7, r5
 8008f88:	3202      	adds	r2, #2
 8008f8a:	701a      	strb	r2, [r3, #0]
							Receiver->RX_Complete_Callback(Receiver->Callback_Data, &Receiver->RX_Buff[16], &Receiver->RX_Buff[23], Data_Size - 2);
 8008f8c:	687a      	ldr	r2, [r7, #4]
 8008f8e:	238a      	movs	r3, #138	@ 0x8a
 8008f90:	009b      	lsls	r3, r3, #2
 8008f92:	58d4      	ldr	r4, [r2, r3]
 8008f94:	687a      	ldr	r2, [r7, #4]
 8008f96:	238b      	movs	r3, #139	@ 0x8b
 8008f98:	009b      	lsls	r3, r3, #2
 8008f9a:	58d0      	ldr	r0, [r2, r3]
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	331f      	adds	r3, #31
 8008fa0:	33ff      	adds	r3, #255	@ 0xff
 8008fa2:	0019      	movs	r1, r3
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	3326      	adds	r3, #38	@ 0x26
 8008fa8:	33ff      	adds	r3, #255	@ 0xff
 8008faa:	001a      	movs	r2, r3
 8008fac:	197b      	adds	r3, r7, r5
 8008fae:	781b      	ldrb	r3, [r3, #0]
 8008fb0:	3b02      	subs	r3, #2
 8008fb2:	b2db      	uxtb	r3, r3
 8008fb4:	47a0      	blx	r4
							Receiver->RX_Complete_Callback = NULL;
 8008fb6:	687a      	ldr	r2, [r7, #4]
 8008fb8:	238a      	movs	r3, #138	@ 0x8a
 8008fba:	009b      	lsls	r3, r3, #2
 8008fbc:	2100      	movs	r1, #0
 8008fbe:	50d1      	str	r1, [r2, r3]
							Receiver->Callback_Data = NULL;
 8008fc0:	687a      	ldr	r2, [r7, #4]
 8008fc2:	238b      	movs	r3, #139	@ 0x8b
 8008fc4:	009b      	lsls	r3, r3, #2
 8008fc6:	2100      	movs	r1, #0
 8008fc8:	50d1      	str	r1, [r2, r3]
						}

						Receiver->Expected_Return = eExpecting_Nothing;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	4a10      	ldr	r2, [pc, #64]	@ (8009010 <HumPRO_900_Process_RX_Data+0x318>)
 8008fce:	2100      	movs	r1, #0
 8008fd0:	5499      	strb	r1, [r3, r2]
						Receiver->Receiving_Command = true;
 8008fd2:	687a      	ldr	r2, [r7, #4]
 8008fd4:	2384      	movs	r3, #132	@ 0x84
 8008fd6:	009b      	lsls	r3, r3, #2
 8008fd8:	2101      	movs	r1, #1
 8008fda:	54d1      	strb	r1, [r2, r3]
						Receiver->Receiving_Data = false;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	4a0f      	ldr	r2, [pc, #60]	@ (800901c <HumPRO_900_Process_RX_Data+0x324>)
 8008fe0:	2100      	movs	r1, #0
 8008fe2:	5499      	strb	r1, [r3, r2]
						Receiver->RX_Buff_Size = 0;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	4a0b      	ldr	r2, [pc, #44]	@ (8009014 <HumPRO_900_Process_RX_Data+0x31c>)
 8008fe8:	2100      	movs	r1, #0
 8008fea:	5499      	strb	r1, [r3, r2]
	for(int i = 0; i < Receiver->DMA_Buff_Size; i++)
 8008fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fee:	3301      	adds	r3, #1
 8008ff0:	627b      	str	r3, [r7, #36]	@ 0x24
 8008ff2:	687a      	ldr	r2, [r7, #4]
 8008ff4:	2386      	movs	r3, #134	@ 0x86
 8008ff6:	005b      	lsls	r3, r3, #1
 8008ff8:	5ad3      	ldrh	r3, [r2, r3]
 8008ffa:	001a      	movs	r2, r3
 8008ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ffe:	4293      	cmp	r3, r2
 8009000:	da00      	bge.n	8009004 <HumPRO_900_Process_RX_Data+0x30c>
 8009002:	e686      	b.n	8008d12 <HumPRO_900_Process_RX_Data+0x1a>
 8009004:	e000      	b.n	8009008 <HumPRO_900_Process_RX_Data+0x310>
		return;
 8009006:	46c0      	nop			@ (mov r8, r8)
					}
				}
			}
		}
	}
}
 8009008:	46bd      	mov	sp, r7
 800900a:	b00a      	add	sp, #40	@ 0x28
 800900c:	bdb0      	pop	{r4, r5, r7, pc}
 800900e:	46c0      	nop			@ (mov r8, r8)
 8009010:	0000020f 	.word	0x0000020f
 8009014:	0000020e 	.word	0x0000020e
 8009018:	00000211 	.word	0x00000211
 800901c:	00000212 	.word	0x00000212

08009020 <FBAlloc_Create>:
void FBAlloc_Free(Allocator_t *alloc, uint8_t *buf);
uint8_t FBAlloc_GetNumBlocks(Allocator_t *alloc);
uint8_t FBAlloc_GetNumFreeBlocks(Allocator_t *alloc);

Allocator_t *FBAlloc_Create(uint16_t max_block_size, uint8_t max_num_blocks)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b086      	sub	sp, #24
 8009024:	af00      	add	r7, sp, #0
 8009026:	0002      	movs	r2, r0
 8009028:	1dbb      	adds	r3, r7, #6
 800902a:	801a      	strh	r2, [r3, #0]
 800902c:	1d7b      	adds	r3, r7, #5
 800902e:	1c0a      	adds	r2, r1, #0
 8009030:	701a      	strb	r2, [r3, #0]
	FBAllocator_t *fballoc = (FBAllocator_t*)pmdMalloc(sizeof(FBAllocator_t));
 8009032:	2200      	movs	r2, #0
 8009034:	212d      	movs	r1, #45	@ 0x2d
 8009036:	201c      	movs	r0, #28
 8009038:	f001 fdca 	bl	800abd0 <dbg_malloc>
 800903c:	0003      	movs	r3, r0
 800903e:	613b      	str	r3, [r7, #16]

	fballoc->Alloc = FBAlloc_Alloc;
 8009040:	693b      	ldr	r3, [r7, #16]
 8009042:	4a35      	ldr	r2, [pc, #212]	@ (8009118 <FBAlloc_Create+0xf8>)
 8009044:	601a      	str	r2, [r3, #0]
	fballoc->Free = FBAlloc_Free;
 8009046:	693b      	ldr	r3, [r7, #16]
 8009048:	4a34      	ldr	r2, [pc, #208]	@ (800911c <FBAlloc_Create+0xfc>)
 800904a:	605a      	str	r2, [r3, #4]
	fballoc->GetNumBlocks = FBAlloc_GetNumBlocks;
 800904c:	693b      	ldr	r3, [r7, #16]
 800904e:	4a34      	ldr	r2, [pc, #208]	@ (8009120 <FBAlloc_Create+0x100>)
 8009050:	609a      	str	r2, [r3, #8]
	fballoc->GetNumFreeBlocks = FBAlloc_GetNumFreeBlocks;
 8009052:	693b      	ldr	r3, [r7, #16]
 8009054:	4a33      	ldr	r2, [pc, #204]	@ (8009124 <FBAlloc_Create+0x104>)
 8009056:	60da      	str	r2, [r3, #12]

	// Make sure that block size is a multiple of 4
	uint16_t mbs_words = max_block_size / 4;
 8009058:	210e      	movs	r1, #14
 800905a:	187b      	adds	r3, r7, r1
 800905c:	1dba      	adds	r2, r7, #6
 800905e:	8812      	ldrh	r2, [r2, #0]
 8009060:	0892      	lsrs	r2, r2, #2
 8009062:	801a      	strh	r2, [r3, #0]
	if(mbs_words * 4 != max_block_size)
 8009064:	187b      	adds	r3, r7, r1
 8009066:	881b      	ldrh	r3, [r3, #0]
 8009068:	009a      	lsls	r2, r3, #2
 800906a:	1dbb      	adds	r3, r7, #6
 800906c:	881b      	ldrh	r3, [r3, #0]
 800906e:	429a      	cmp	r2, r3
 8009070:	d006      	beq.n	8009080 <FBAlloc_Create+0x60>
	{
		max_block_size = (mbs_words + 1) * 4;
 8009072:	187b      	adds	r3, r7, r1
 8009074:	881b      	ldrh	r3, [r3, #0]
 8009076:	3301      	adds	r3, #1
 8009078:	b29a      	uxth	r2, r3
 800907a:	1dbb      	adds	r3, r7, #6
 800907c:	0092      	lsls	r2, r2, #2
 800907e:	801a      	strh	r2, [r3, #0]
	}
	fballoc->MaxBlockSize = max_block_size;
 8009080:	693b      	ldr	r3, [r7, #16]
 8009082:	1dba      	adds	r2, r7, #6
 8009084:	8812      	ldrh	r2, [r2, #0]
 8009086:	821a      	strh	r2, [r3, #16]
	fballoc->MaxNumBlocks = max_num_blocks;
 8009088:	693b      	ldr	r3, [r7, #16]
 800908a:	1d7a      	adds	r2, r7, #5
 800908c:	7812      	ldrb	r2, [r2, #0]
 800908e:	759a      	strb	r2, [r3, #22]
	fballoc->BufTotalSize = (max_block_size + BLOCK_HEADER_SIZE) * max_num_blocks;
 8009090:	1dbb      	adds	r3, r7, #6
 8009092:	881b      	ldrh	r3, [r3, #0]
 8009094:	3304      	adds	r3, #4
 8009096:	b29b      	uxth	r3, r3
 8009098:	1d7a      	adds	r2, r7, #5
 800909a:	7812      	ldrb	r2, [r2, #0]
 800909c:	b292      	uxth	r2, r2
 800909e:	4353      	muls	r3, r2
 80090a0:	b29a      	uxth	r2, r3
 80090a2:	693b      	ldr	r3, [r7, #16]
 80090a4:	829a      	strh	r2, [r3, #20]
	fballoc->NumBlocks = 0;
 80090a6:	693b      	ldr	r3, [r7, #16]
 80090a8:	2200      	movs	r2, #0
 80090aa:	75da      	strb	r2, [r3, #23]
	fballoc->Buffer = pmdMalloc(fballoc->BufTotalSize);
 80090ac:	693b      	ldr	r3, [r7, #16]
 80090ae:	8a9b      	ldrh	r3, [r3, #20]
 80090b0:	2200      	movs	r2, #0
 80090b2:	213e      	movs	r1, #62	@ 0x3e
 80090b4:	0018      	movs	r0, r3
 80090b6:	f001 fd8b 	bl	800abd0 <dbg_malloc>
 80090ba:	0002      	movs	r2, r0
 80090bc:	693b      	ldr	r3, [r7, #16]
 80090be:	619a      	str	r2, [r3, #24]
	fballoc->HeaderBlockSpacing = fballoc->MaxBlockSize + BLOCK_HEADER_SIZE;
 80090c0:	693b      	ldr	r3, [r7, #16]
 80090c2:	8a1b      	ldrh	r3, [r3, #16]
 80090c4:	3304      	adds	r3, #4
 80090c6:	b29a      	uxth	r2, r3
 80090c8:	693b      	ldr	r3, [r7, #16]
 80090ca:	825a      	strh	r2, [r3, #18]

	// The top 12 bits of status should always match BLOCK_HEADER_MAGIC_NUMBER
	for(uint8_t i=0; i<fballoc->MaxNumBlocks; ++i)
 80090cc:	2317      	movs	r3, #23
 80090ce:	18fb      	adds	r3, r7, r3
 80090d0:	2200      	movs	r2, #0
 80090d2:	701a      	strb	r2, [r3, #0]
 80090d4:	e014      	b.n	8009100 <FBAlloc_Create+0xe0>
	{
		Block_Header_t *pbh = (Block_Header_t *)&fballoc->Buffer[i * fballoc->HeaderBlockSpacing];
 80090d6:	693b      	ldr	r3, [r7, #16]
 80090d8:	699b      	ldr	r3, [r3, #24]
 80090da:	2017      	movs	r0, #23
 80090dc:	183a      	adds	r2, r7, r0
 80090de:	7812      	ldrb	r2, [r2, #0]
 80090e0:	6939      	ldr	r1, [r7, #16]
 80090e2:	8a49      	ldrh	r1, [r1, #18]
 80090e4:	434a      	muls	r2, r1
 80090e6:	189b      	adds	r3, r3, r2
 80090e8:	60bb      	str	r3, [r7, #8]
		pbh->status = HEADER_MAGIC_NUMBER;
 80090ea:	68bb      	ldr	r3, [r7, #8]
 80090ec:	4a0e      	ldr	r2, [pc, #56]	@ (8009128 <FBAlloc_Create+0x108>)
 80090ee:	801a      	strh	r2, [r3, #0]
		pbh->size = 0;
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	2200      	movs	r2, #0
 80090f4:	805a      	strh	r2, [r3, #2]
	for(uint8_t i=0; i<fballoc->MaxNumBlocks; ++i)
 80090f6:	183b      	adds	r3, r7, r0
 80090f8:	183a      	adds	r2, r7, r0
 80090fa:	7812      	ldrb	r2, [r2, #0]
 80090fc:	3201      	adds	r2, #1
 80090fe:	701a      	strb	r2, [r3, #0]
 8009100:	693b      	ldr	r3, [r7, #16]
 8009102:	7d9b      	ldrb	r3, [r3, #22]
 8009104:	2217      	movs	r2, #23
 8009106:	18ba      	adds	r2, r7, r2
 8009108:	7812      	ldrb	r2, [r2, #0]
 800910a:	429a      	cmp	r2, r3
 800910c:	d3e3      	bcc.n	80090d6 <FBAlloc_Create+0xb6>
	}

	return (Allocator_t*)fballoc;
 800910e:	693b      	ldr	r3, [r7, #16]
}
 8009110:	0018      	movs	r0, r3
 8009112:	46bd      	mov	sp, r7
 8009114:	b006      	add	sp, #24
 8009116:	bd80      	pop	{r7, pc}
 8009118:	0800912d 	.word	0x0800912d
 800911c:	080091b1 	.word	0x080091b1
 8009120:	08009219 	.word	0x08009219
 8009124:	0800922d 	.word	0x0800922d
 8009128:	ffffa5a0 	.word	0xffffa5a0

0800912c <FBAlloc_Alloc>:
 * @brief	Each block of memory is preceded by a header block of 4 bytes.  When we
 * 			allocate memory, we will pass a pointer to the block after the header.
 *
 *****************************************************************************************/
uint8_t *FBAlloc_Alloc(Allocator_t *alloc, uint16_t size)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b086      	sub	sp, #24
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
 8009134:	000a      	movs	r2, r1
 8009136:	1cbb      	adds	r3, r7, #2
 8009138:	801a      	strh	r2, [r3, #0]
	uint8_t *result = NULL;
 800913a:	2300      	movs	r3, #0
 800913c:	617b      	str	r3, [r7, #20]
	FBAllocator_t *fballoc = (FBAllocator_t*)alloc;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	60fb      	str	r3, [r7, #12]

	CritSect_Push();
 8009142:	f001 fe07 	bl	800ad54 <CritSect_Push>

	for(uint8_t i=0; i<fballoc->MaxNumBlocks; ++i)
 8009146:	2313      	movs	r3, #19
 8009148:	18fb      	adds	r3, r7, r3
 800914a:	2200      	movs	r2, #0
 800914c:	701a      	strb	r2, [r3, #0]
 800914e:	e01e      	b.n	800918e <FBAlloc_Alloc+0x62>
	{
		Block_Header_t *pbh = (Block_Header_t *)&fballoc->Buffer[i * fballoc->HeaderBlockSpacing];
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	699b      	ldr	r3, [r3, #24]
 8009154:	2213      	movs	r2, #19
 8009156:	18ba      	adds	r2, r7, r2
 8009158:	7812      	ldrb	r2, [r2, #0]
 800915a:	68f9      	ldr	r1, [r7, #12]
 800915c:	8a49      	ldrh	r1, [r1, #18]
 800915e:	434a      	muls	r2, r1
 8009160:	189b      	adds	r3, r3, r2
 8009162:	60bb      	str	r3, [r7, #8]

		if(pbh->size == 0)
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	885b      	ldrh	r3, [r3, #2]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d10a      	bne.n	8009182 <FBAlloc_Alloc+0x56>
		{
			pbh->size = size;
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	1cba      	adds	r2, r7, #2
 8009170:	8812      	ldrh	r2, [r2, #0]
 8009172:	805a      	strh	r2, [r3, #2]
			pbh->status = HEADER_MAGIC_NUMBER | 0x01;			// Set flag to 1 to indicate block is in use
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	4a0d      	ldr	r2, [pc, #52]	@ (80091ac <FBAlloc_Alloc+0x80>)
 8009178:	801a      	strh	r2, [r3, #0]
			result = ((uint8_t*)pbh) + BLOCK_HEADER_SIZE;
 800917a:	68bb      	ldr	r3, [r7, #8]
 800917c:	3304      	adds	r3, #4
 800917e:	617b      	str	r3, [r7, #20]
			break;
 8009180:	e00c      	b.n	800919c <FBAlloc_Alloc+0x70>
	for(uint8_t i=0; i<fballoc->MaxNumBlocks; ++i)
 8009182:	2213      	movs	r2, #19
 8009184:	18bb      	adds	r3, r7, r2
 8009186:	18ba      	adds	r2, r7, r2
 8009188:	7812      	ldrb	r2, [r2, #0]
 800918a:	3201      	adds	r2, #1
 800918c:	701a      	strb	r2, [r3, #0]
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	7d9b      	ldrb	r3, [r3, #22]
 8009192:	2213      	movs	r2, #19
 8009194:	18ba      	adds	r2, r7, r2
 8009196:	7812      	ldrb	r2, [r2, #0]
 8009198:	429a      	cmp	r2, r3
 800919a:	d3d9      	bcc.n	8009150 <FBAlloc_Alloc+0x24>
		}
	}

	CritSect_Pop();
 800919c:	f001 fdf6 	bl	800ad8c <CritSect_Pop>

	return result;
 80091a0:	697b      	ldr	r3, [r7, #20]
}
 80091a2:	0018      	movs	r0, r3
 80091a4:	46bd      	mov	sp, r7
 80091a6:	b006      	add	sp, #24
 80091a8:	bd80      	pop	{r7, pc}
 80091aa:	46c0      	nop			@ (mov r8, r8)
 80091ac:	ffffa5a1 	.word	0xffffa5a1

080091b0 <FBAlloc_Free>:

void FBAlloc_Free(Allocator_t *alloc, uint8_t *buf)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b086      	sub	sp, #24
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
 80091b8:	6039      	str	r1, [r7, #0]
	FBAllocator_t *fballoc = (FBAllocator_t*)alloc;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	617b      	str	r3, [r7, #20]

	CritSect_Push();
 80091be:	f001 fdc9 	bl	800ad54 <CritSect_Push>

	// Verify that buf was allocated from this allocator
	uint32_t 	offset = buf - BLOCK_HEADER_SIZE - fballoc->Buffer;
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	1f1a      	subs	r2, r3, #4
 80091c6:	697b      	ldr	r3, [r7, #20]
 80091c8:	699b      	ldr	r3, [r3, #24]
 80091ca:	1ad3      	subs	r3, r2, r3
 80091cc:	613b      	str	r3, [r7, #16]

	if(offset < (fballoc->BufTotalSize - fballoc->MaxBlockSize - BLOCK_HEADER_SIZE) &&
 80091ce:	697b      	ldr	r3, [r7, #20]
 80091d0:	8a9b      	ldrh	r3, [r3, #20]
 80091d2:	001a      	movs	r2, r3
 80091d4:	697b      	ldr	r3, [r7, #20]
 80091d6:	8a1b      	ldrh	r3, [r3, #16]
 80091d8:	1ad3      	subs	r3, r2, r3
 80091da:	3b04      	subs	r3, #4
 80091dc:	693a      	ldr	r2, [r7, #16]
 80091de:	429a      	cmp	r2, r3
 80091e0:	d212      	bcs.n	8009208 <FBAlloc_Free+0x58>
			offset % fballoc->HeaderBlockSpacing == 0)
 80091e2:	697b      	ldr	r3, [r7, #20]
 80091e4:	8a5b      	ldrh	r3, [r3, #18]
 80091e6:	001a      	movs	r2, r3
 80091e8:	693b      	ldr	r3, [r7, #16]
 80091ea:	0011      	movs	r1, r2
 80091ec:	0018      	movs	r0, r3
 80091ee:	f7f7 f82d 	bl	800024c <__aeabi_uidivmod>
 80091f2:	1e0b      	subs	r3, r1, #0
	if(offset < (fballoc->BufTotalSize - fballoc->MaxBlockSize - BLOCK_HEADER_SIZE) &&
 80091f4:	d108      	bne.n	8009208 <FBAlloc_Free+0x58>
	{
		Block_Header_t *pbh = (Block_Header_t *)(buf - BLOCK_HEADER_SIZE);
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	3b04      	subs	r3, #4
 80091fa:	60fb      	str	r3, [r7, #12]

		pbh->size = 0;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	2200      	movs	r2, #0
 8009200:	805a      	strh	r2, [r3, #2]
		pbh->status = HEADER_MAGIC_NUMBER;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	4a03      	ldr	r2, [pc, #12]	@ (8009214 <FBAlloc_Free+0x64>)
 8009206:	801a      	strh	r2, [r3, #0]
	}

	CritSect_Pop();
 8009208:	f001 fdc0 	bl	800ad8c <CritSect_Pop>
}
 800920c:	46c0      	nop			@ (mov r8, r8)
 800920e:	46bd      	mov	sp, r7
 8009210:	b006      	add	sp, #24
 8009212:	bd80      	pop	{r7, pc}
 8009214:	ffffa5a0 	.word	0xffffa5a0

08009218 <FBAlloc_GetNumBlocks>:

uint8_t FBAlloc_GetNumBlocks(Allocator_t *alloc)
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b082      	sub	sp, #8
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
	return ((FBAllocator_t*)alloc)->NumBlocks;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	7ddb      	ldrb	r3, [r3, #23]
}
 8009224:	0018      	movs	r0, r3
 8009226:	46bd      	mov	sp, r7
 8009228:	b002      	add	sp, #8
 800922a:	bd80      	pop	{r7, pc}

0800922c <FBAlloc_GetNumFreeBlocks>:

uint8_t FBAlloc_GetNumFreeBlocks(Allocator_t *alloc)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b084      	sub	sp, #16
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
	FBAllocator_t *fballoc = (FBAllocator_t*)alloc;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	60fb      	str	r3, [r7, #12]

	return fballoc->MaxNumBlocks - fballoc->NumBlocks;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	7d9a      	ldrb	r2, [r3, #22]
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	7ddb      	ldrb	r3, [r3, #23]
 8009240:	1ad3      	subs	r3, r2, r3
 8009242:	b2db      	uxtb	r3, r3
}
 8009244:	0018      	movs	r0, r3
 8009246:	46bd      	mov	sp, r7
 8009248:	b004      	add	sp, #16
 800924a:	bd80      	pop	{r7, pc}

0800924c <IMsgQ_Init>:

/***********************************************************************************
 * This function must never be called from an interrupt handler!
 ***********************************************************************************/
void IMsgQ_Init(IMSG_QUEUE *pq, uint8_t MaxNumPackets, uint16_t MaxPacketSize, Allocator_Creator_t AllocCreator)
{
 800924c:	b5b0      	push	{r4, r5, r7, lr}
 800924e:	b084      	sub	sp, #16
 8009250:	af00      	add	r7, sp, #0
 8009252:	60f8      	str	r0, [r7, #12]
 8009254:	0008      	movs	r0, r1
 8009256:	0011      	movs	r1, r2
 8009258:	607b      	str	r3, [r7, #4]
 800925a:	240b      	movs	r4, #11
 800925c:	193b      	adds	r3, r7, r4
 800925e:	1c02      	adds	r2, r0, #0
 8009260:	701a      	strb	r2, [r3, #0]
 8009262:	2508      	movs	r5, #8
 8009264:	197b      	adds	r3, r7, r5
 8009266:	1c0a      	adds	r2, r1, #0
 8009268:	801a      	strh	r2, [r3, #0]
	pq->Max_Packet_Count = MaxNumPackets;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	193a      	adds	r2, r7, r4
 800926e:	7812      	ldrb	r2, [r2, #0]
 8009270:	701a      	strb	r2, [r3, #0]
	pq->Packet_Count = 0;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	2200      	movs	r2, #0
 8009276:	705a      	strb	r2, [r3, #1]
	pq->Front = NULL;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	2200      	movs	r2, #0
 800927c:	605a      	str	r2, [r3, #4]
	pq->Rear = NULL;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	2200      	movs	r2, #0
 8009282:	609a      	str	r2, [r3, #8]
	pq->NodeBuf = (IMSG_QUEUE_NODE*)pmdMalloc(MaxNumPackets * sizeof(IMSG_QUEUE_NODE));
 8009284:	193b      	adds	r3, r7, r4
 8009286:	781b      	ldrb	r3, [r3, #0]
 8009288:	011b      	lsls	r3, r3, #4
 800928a:	2200      	movs	r2, #0
 800928c:	2120      	movs	r1, #32
 800928e:	0018      	movs	r0, r3
 8009290:	f001 fc9e 	bl	800abd0 <dbg_malloc>
 8009294:	0002      	movs	r2, r0
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	60da      	str	r2, [r3, #12]
	memset((uint8_t*)pq->NodeBuf, 0, MaxNumPackets * sizeof(IMSG_QUEUE_NODE));
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	68d8      	ldr	r0, [r3, #12]
 800929e:	193b      	adds	r3, r7, r4
 80092a0:	781b      	ldrb	r3, [r3, #0]
 80092a2:	011b      	lsls	r3, r3, #4
 80092a4:	001a      	movs	r2, r3
 80092a6:	2100      	movs	r1, #0
 80092a8:	f002 f890 	bl	800b3cc <memset>
	pq->alloc = AllocCreator(MaxPacketSize, MaxNumPackets);
 80092ac:	193b      	adds	r3, r7, r4
 80092ae:	7819      	ldrb	r1, [r3, #0]
 80092b0:	197b      	adds	r3, r7, r5
 80092b2:	881a      	ldrh	r2, [r3, #0]
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	0010      	movs	r0, r2
 80092b8:	4798      	blx	r3
 80092ba:	0002      	movs	r2, r0
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	611a      	str	r2, [r3, #16]
}
 80092c0:	46c0      	nop			@ (mov r8, r8)
 80092c2:	46bd      	mov	sp, r7
 80092c4:	b004      	add	sp, #16
 80092c6:	bdb0      	pop	{r4, r5, r7, pc}

080092c8 <FreeNode>:

/***********************************************************************************
 * This function may be called from an interrupt handler.
 ***********************************************************************************/
static inline void FreeNode(IMSG_QUEUE *pq, IMSG_QUEUE_NODE *node)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b082      	sub	sp, #8
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
 80092d0:	6039      	str	r1, [r7, #0]
	pq->alloc->Free(pq->alloc, (uint8_t*)node->Packet);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	691b      	ldr	r3, [r3, #16]
 80092d6:	685a      	ldr	r2, [r3, #4]
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	6918      	ldr	r0, [r3, #16]
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	0019      	movs	r1, r3
 80092e2:	4790      	blx	r2
	node->Packet = NULL;
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	2200      	movs	r2, #0
 80092e8:	601a      	str	r2, [r3, #0]
	node->Next = NULL;
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	2200      	movs	r2, #0
 80092ee:	605a      	str	r2, [r3, #4]
	node->Prev = NULL;
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	2200      	movs	r2, #0
 80092f4:	609a      	str	r2, [r3, #8]
	node->PktSize = 0;
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	2200      	movs	r2, #0
 80092fa:	731a      	strb	r2, [r3, #12]
}
 80092fc:	46c0      	nop			@ (mov r8, r8)
 80092fe:	46bd      	mov	sp, r7
 8009300:	b002      	add	sp, #8
 8009302:	bd80      	pop	{r7, pc}

08009304 <IMsgQ_Peek>:

/***********************************************************************************
 * This function may be called from an interrupt handler.
 ***********************************************************************************/
MODULE_BUS_PACKET *IMsgQ_Peek(IMSG_QUEUE *pq)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b082      	sub	sp, #8
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
	return pq->Front->Packet;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	685b      	ldr	r3, [r3, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
}
 8009312:	0018      	movs	r0, r3
 8009314:	46bd      	mov	sp, r7
 8009316:	b002      	add	sp, #8
 8009318:	bd80      	pop	{r7, pc}

0800931a <IMsgQ_Pop>:

/***********************************************************************************
 * This function may be called from an interrupt handler.
 ***********************************************************************************/
void IMsgQ_Pop(IMSG_QUEUE *pq)
{
 800931a:	b580      	push	{r7, lr}
 800931c:	b084      	sub	sp, #16
 800931e:	af00      	add	r7, sp, #0
 8009320:	6078      	str	r0, [r7, #4]
	IMSG_QUEUE_NODE * node = NULL;
 8009322:	2300      	movs	r3, #0
 8009324:	60fb      	str	r3, [r7, #12]

	CritSect_Push();
 8009326:	f001 fd15 	bl	800ad54 <CritSect_Push>
	
	if(pq->Packet_Count != 0)
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	785b      	ldrb	r3, [r3, #1]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d01f      	beq.n	8009372 <IMsgQ_Pop+0x58>
	{
		node = pq->Front;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	685b      	ldr	r3, [r3, #4]
 8009336:	60fb      	str	r3, [r7, #12]
		if(pq->Packet_Count == 1)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	785b      	ldrb	r3, [r3, #1]
 800933c:	2b01      	cmp	r3, #1
 800933e:	d109      	bne.n	8009354 <IMsgQ_Pop+0x3a>
		{
			pq->Packet_Count = 0;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2200      	movs	r2, #0
 8009344:	705a      	strb	r2, [r3, #1]
			pq->Front = NULL;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2200      	movs	r2, #0
 800934a:	605a      	str	r2, [r3, #4]
			pq->Rear = NULL;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2200      	movs	r2, #0
 8009350:	609a      	str	r2, [r3, #8]
 8009352:	e00e      	b.n	8009372 <IMsgQ_Pop+0x58>
		}
		else
		{
			--pq->Packet_Count;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	785b      	ldrb	r3, [r3, #1]
 8009358:	3b01      	subs	r3, #1
 800935a:	b2da      	uxtb	r2, r3
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	705a      	strb	r2, [r3, #1]
			pq->Front = (IMSG_QUEUE_NODE *)pq->Front->Next;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	685b      	ldr	r3, [r3, #4]
 8009364:	685a      	ldr	r2, [r3, #4]
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	605a      	str	r2, [r3, #4]
			pq->Front->Prev = NULL;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	685b      	ldr	r3, [r3, #4]
 800936e:	2200      	movs	r2, #0
 8009370:	609a      	str	r2, [r3, #8]
		}
	}

	if(node)
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d005      	beq.n	8009384 <IMsgQ_Pop+0x6a>
	{
		FreeNode(pq, node);
 8009378:	68fa      	ldr	r2, [r7, #12]
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	0011      	movs	r1, r2
 800937e:	0018      	movs	r0, r3
 8009380:	f7ff ffa2 	bl	80092c8 <FreeNode>
	}
	
	CritSect_Pop();
 8009384:	f001 fd02 	bl	800ad8c <CritSect_Pop>
}
 8009388:	46c0      	nop			@ (mov r8, r8)
 800938a:	46bd      	mov	sp, r7
 800938c:	b004      	add	sp, #16
 800938e:	bd80      	pop	{r7, pc}

08009390 <IMsgQ_Get_Num_Packets>:

/***********************************************************************************
 * This function may be called from an interrupt handler.
 ***********************************************************************************/
uint8_t IMsgQ_Get_Num_Packets(IMSG_QUEUE *pq)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b082      	sub	sp, #8
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
	return pq->Packet_Count;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	785b      	ldrb	r3, [r3, #1]
}
 800939c:	0018      	movs	r0, r3
 800939e:	46bd      	mov	sp, r7
 80093a0:	b002      	add	sp, #8
 80093a2:	bd80      	pop	{r7, pc}

080093a4 <Init_Module_Info>:
		Module_Test_Operation_Mode = 1;
	}
}

void Init_Module_Info(void)
{
 80093a4:	b590      	push	{r4, r7, lr}
 80093a6:	b095      	sub	sp, #84	@ 0x54
 80093a8:	af00      	add	r7, sp, #0
	if(pmsb)
 80093aa:	4b4e      	ldr	r3, [pc, #312]	@ (80094e4 <Init_Module_Info+0x140>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d100      	bne.n	80093b4 <Init_Module_Info+0x10>
 80093b2:	e093      	b.n	80094dc <Init_Module_Info+0x138>
	{
		unsigned char Module_Info_Major_Version;
		unsigned char Module_Info_Minor_Version;

		Module_Lib_EEPROM_Read(MODULE_INFO_MAJOR_VERSION_ADDRESS, &Module_Info_Major_Version, 1);
 80093b4:	2447      	movs	r4, #71	@ 0x47
 80093b6:	193b      	adds	r3, r7, r4
 80093b8:	484b      	ldr	r0, [pc, #300]	@ (80094e8 <Init_Module_Info+0x144>)
 80093ba:	2201      	movs	r2, #1
 80093bc:	0019      	movs	r1, r3
 80093be:	f000 fc9f 	bl	8009d00 <Module_Lib_EEPROM_Read>
		Module_Lib_EEPROM_Read(MODULE_INFO_MINOR_VERSION_ADDRESS, &Module_Info_Minor_Version, 1);
 80093c2:	2346      	movs	r3, #70	@ 0x46
 80093c4:	18fb      	adds	r3, r7, r3
 80093c6:	4849      	ldr	r0, [pc, #292]	@ (80094ec <Init_Module_Info+0x148>)
 80093c8:	2201      	movs	r2, #1
 80093ca:	0019      	movs	r1, r3
 80093cc:	f000 fc98 	bl	8009d00 <Module_Lib_EEPROM_Read>

		// Temporary buffer to hold all of the module info data
		unsigned char Temp_Module_Data[MODULE_INFO_DATA_SIZE];
		Module_Lib_EEPROM_Read(MODULE_INFO_BASE_ADDRESS, Temp_Module_Data, MODULE_INFO_DATA_SIZE);
 80093d0:	1d3b      	adds	r3, r7, #4
 80093d2:	4847      	ldr	r0, [pc, #284]	@ (80094f0 <Init_Module_Info+0x14c>)
 80093d4:	2238      	movs	r2, #56	@ 0x38
 80093d6:	0019      	movs	r1, r3
 80093d8:	f000 fc92 	bl	8009d00 <Module_Lib_EEPROM_Read>

		switch(Module_Info_Major_Version)
 80093dc:	193b      	adds	r3, r7, r4
 80093de:	781b      	ldrb	r3, [r3, #0]
 80093e0:	2b01      	cmp	r3, #1
 80093e2:	d108      	bne.n	80093f6 <Init_Module_Info+0x52>
		{
		case MODULE_INFO_MAJOR_VERSION:
			memcpy((unsigned char *)&Module_Info, Temp_Module_Data, sizeof(MODULE_INFO));
 80093e4:	4a43      	ldr	r2, [pc, #268]	@ (80094f4 <Init_Module_Info+0x150>)
 80093e6:	1d3b      	adds	r3, r7, #4
 80093e8:	0010      	movs	r0, r2
 80093ea:	0019      	movs	r1, r3
 80093ec:	2338      	movs	r3, #56	@ 0x38
 80093ee:	001a      	movs	r2, r3
 80093f0:	f002 ff35 	bl	800c25e <memcpy>
			break;
 80093f4:	e000      	b.n	80093f8 <Init_Module_Info+0x54>
		// Catch an invalid structure and restore defaults,
		case 255:
		default:
//			Set_Default_Module_Info();
			break;
 80093f6:	46c0      	nop			@ (mov r8, r8)
		}

		if(!Is_Bootloader_Module)
 80093f8:	4b3f      	ldr	r3, [pc, #252]	@ (80094f8 <Init_Module_Info+0x154>)
 80093fa:	781b      	ldrb	r3, [r3, #0]
 80093fc:	2201      	movs	r2, #1
 80093fe:	4053      	eors	r3, r2
 8009400:	b2db      	uxtb	r3, r3
 8009402:	2b00      	cmp	r3, #0
 8009404:	d06a      	beq.n	80094dc <Init_Module_Info+0x138>
		{
			// Check that the firmware versions match
			if( Module_Info.Module_Firmware_Version[0] != pmsb->FW_Ver.Major ||
 8009406:	4b3b      	ldr	r3, [pc, #236]	@ (80094f4 <Init_Module_Info+0x150>)
 8009408:	2224      	movs	r2, #36	@ 0x24
 800940a:	5c9a      	ldrb	r2, [r3, r2]
 800940c:	4b35      	ldr	r3, [pc, #212]	@ (80094e4 <Init_Module_Info+0x140>)
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	7a9b      	ldrb	r3, [r3, #10]
 8009412:	429a      	cmp	r2, r3
 8009414:	d117      	bne.n	8009446 <Init_Module_Info+0xa2>
				Module_Info.Module_Firmware_Version[1] != pmsb->FW_Ver.Minor ||
 8009416:	4b37      	ldr	r3, [pc, #220]	@ (80094f4 <Init_Module_Info+0x150>)
 8009418:	2225      	movs	r2, #37	@ 0x25
 800941a:	5c9a      	ldrb	r2, [r3, r2]
 800941c:	4b31      	ldr	r3, [pc, #196]	@ (80094e4 <Init_Module_Info+0x140>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	7adb      	ldrb	r3, [r3, #11]
			if( Module_Info.Module_Firmware_Version[0] != pmsb->FW_Ver.Major ||
 8009422:	429a      	cmp	r2, r3
 8009424:	d10f      	bne.n	8009446 <Init_Module_Info+0xa2>
				Module_Info.Module_Firmware_Version[2] != pmsb->FW_Ver.Sub ||
 8009426:	4b33      	ldr	r3, [pc, #204]	@ (80094f4 <Init_Module_Info+0x150>)
 8009428:	2226      	movs	r2, #38	@ 0x26
 800942a:	5c9a      	ldrb	r2, [r3, r2]
 800942c:	4b2d      	ldr	r3, [pc, #180]	@ (80094e4 <Init_Module_Info+0x140>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	7b1b      	ldrb	r3, [r3, #12]
				Module_Info.Module_Firmware_Version[1] != pmsb->FW_Ver.Minor ||
 8009432:	429a      	cmp	r2, r3
 8009434:	d107      	bne.n	8009446 <Init_Module_Info+0xa2>
				Module_Info.Module_Firmware_Version[3] != pmsb->FW_Ver.Test )
 8009436:	4b2f      	ldr	r3, [pc, #188]	@ (80094f4 <Init_Module_Info+0x150>)
 8009438:	2227      	movs	r2, #39	@ 0x27
 800943a:	5c9a      	ldrb	r2, [r3, r2]
 800943c:	4b29      	ldr	r3, [pc, #164]	@ (80094e4 <Init_Module_Info+0x140>)
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	7b5b      	ldrb	r3, [r3, #13]
				Module_Info.Module_Firmware_Version[2] != pmsb->FW_Ver.Sub ||
 8009442:	429a      	cmp	r2, r3
 8009444:	d023      	beq.n	800948e <Init_Module_Info+0xea>
			{
				uint32_t FwVerOffset = (uint8_t*)&Module_Info.Module_Firmware_Version - (uint8_t*)&Module_Info;
 8009446:	2324      	movs	r3, #36	@ 0x24
 8009448:	64fb      	str	r3, [r7, #76]	@ 0x4c
				uint8_t fwver[] = {pmsb->FW_Ver.Major, pmsb->FW_Ver.Minor, pmsb->FW_Ver.Sub, pmsb->FW_Ver.Test};
 800944a:	4b26      	ldr	r3, [pc, #152]	@ (80094e4 <Init_Module_Info+0x140>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	7a9a      	ldrb	r2, [r3, #10]
 8009450:	2440      	movs	r4, #64	@ 0x40
 8009452:	193b      	adds	r3, r7, r4
 8009454:	701a      	strb	r2, [r3, #0]
 8009456:	4b23      	ldr	r3, [pc, #140]	@ (80094e4 <Init_Module_Info+0x140>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	7ada      	ldrb	r2, [r3, #11]
 800945c:	193b      	adds	r3, r7, r4
 800945e:	705a      	strb	r2, [r3, #1]
 8009460:	4b20      	ldr	r3, [pc, #128]	@ (80094e4 <Init_Module_Info+0x140>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	7b1a      	ldrb	r2, [r3, #12]
 8009466:	193b      	adds	r3, r7, r4
 8009468:	709a      	strb	r2, [r3, #2]
 800946a:	4b1e      	ldr	r3, [pc, #120]	@ (80094e4 <Init_Module_Info+0x140>)
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	7b5a      	ldrb	r2, [r3, #13]
 8009470:	193b      	adds	r3, r7, r4
 8009472:	70da      	strb	r2, [r3, #3]

				printf("\r\nWARNING:  Module Firmware Version Mismatch.\r\nRewriting Module Firmware Version.\r\n");
 8009474:	4b21      	ldr	r3, [pc, #132]	@ (80094fc <Init_Module_Info+0x158>)
 8009476:	0018      	movs	r0, r3
 8009478:	f001 fea2 	bl	800b1c0 <puts>
				Module_Lib_EEPROM_Safe_Write(MODULE_INFO_BASE_ADDRESS + FwVerOffset, (unsigned char *)fwver, sizeof(fwver));
 800947c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800947e:	4a1c      	ldr	r2, [pc, #112]	@ (80094f0 <Init_Module_Info+0x14c>)
 8009480:	4694      	mov	ip, r2
 8009482:	4463      	add	r3, ip
 8009484:	1939      	adds	r1, r7, r4
 8009486:	2204      	movs	r2, #4
 8009488:	0018      	movs	r0, r3
 800948a:	f000 fbba 	bl	8009c02 <Module_Lib_EEPROM_Safe_Write>
			}

			// Check that the module lib firmware versions match
			if(	Module_Info.ModuleLib_FW_Version[0] != MODULE_LIB_MAJOR_FW_VERSION ||
 800948e:	4b19      	ldr	r3, [pc, #100]	@ (80094f4 <Init_Module_Info+0x150>)
 8009490:	2231      	movs	r2, #49	@ 0x31
 8009492:	5c9b      	ldrb	r3, [r3, r2]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d10e      	bne.n	80094b6 <Init_Module_Info+0x112>
				Module_Info.ModuleLib_FW_Version[1] != MODULE_LIB_MINOR_FW_VERSION ||
 8009498:	4b16      	ldr	r3, [pc, #88]	@ (80094f4 <Init_Module_Info+0x150>)
 800949a:	2232      	movs	r2, #50	@ 0x32
 800949c:	5c9b      	ldrb	r3, [r3, r2]
			if(	Module_Info.ModuleLib_FW_Version[0] != MODULE_LIB_MAJOR_FW_VERSION ||
 800949e:	2b0e      	cmp	r3, #14
 80094a0:	d109      	bne.n	80094b6 <Init_Module_Info+0x112>
				Module_Info.ModuleLib_FW_Version[2] != MODULE_LIB_SUB_FW_VERSION ||
 80094a2:	4b14      	ldr	r3, [pc, #80]	@ (80094f4 <Init_Module_Info+0x150>)
 80094a4:	2233      	movs	r2, #51	@ 0x33
 80094a6:	5c9b      	ldrb	r3, [r3, r2]
				Module_Info.ModuleLib_FW_Version[1] != MODULE_LIB_MINOR_FW_VERSION ||
 80094a8:	2b02      	cmp	r3, #2
 80094aa:	d104      	bne.n	80094b6 <Init_Module_Info+0x112>
				Module_Info.ModuleLib_FW_Version[3] != MODULE_LIB_TEST_FW_VERSION )
 80094ac:	4b11      	ldr	r3, [pc, #68]	@ (80094f4 <Init_Module_Info+0x150>)
 80094ae:	2234      	movs	r2, #52	@ 0x34
 80094b0:	5c9b      	ldrb	r3, [r3, r2]
				Module_Info.ModuleLib_FW_Version[2] != MODULE_LIB_SUB_FW_VERSION ||
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d012      	beq.n	80094dc <Init_Module_Info+0x138>
			{
				uint32_t ModFwVerOffset = (uint8_t*)&Module_Info.ModuleLib_FW_Version - (uint8_t*)&Module_Info;
 80094b6:	2331      	movs	r3, #49	@ 0x31
 80094b8:	64bb      	str	r3, [r7, #72]	@ 0x48
				uint8_t fwver[] = {MODULE_LIB_MAJOR_FW_VERSION, MODULE_LIB_MINOR_FW_VERSION, MODULE_LIB_SUB_FW_VERSION, MODULE_LIB_TEST_FW_VERSION};
 80094ba:	243c      	movs	r4, #60	@ 0x3c
 80094bc:	193b      	adds	r3, r7, r4
 80094be:	4a10      	ldr	r2, [pc, #64]	@ (8009500 <Init_Module_Info+0x15c>)
 80094c0:	601a      	str	r2, [r3, #0]

				printf("\r\nWARNING:  ModuleLib Firmware Version Mismatch.\r\nRewriting ModuleLib Firmware Version.\r\n");
 80094c2:	4b10      	ldr	r3, [pc, #64]	@ (8009504 <Init_Module_Info+0x160>)
 80094c4:	0018      	movs	r0, r3
 80094c6:	f001 fe7b 	bl	800b1c0 <puts>
				Module_Lib_EEPROM_Safe_Write(MODULE_INFO_BASE_ADDRESS + ModFwVerOffset, (unsigned char *)fwver, sizeof(fwver));
 80094ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80094cc:	4a08      	ldr	r2, [pc, #32]	@ (80094f0 <Init_Module_Info+0x14c>)
 80094ce:	4694      	mov	ip, r2
 80094d0:	4463      	add	r3, ip
 80094d2:	1939      	adds	r1, r7, r4
 80094d4:	2204      	movs	r2, #4
 80094d6:	0018      	movs	r0, r3
 80094d8:	f000 fb93 	bl	8009c02 <Module_Lib_EEPROM_Safe_Write>
			}
		}
	}
}
 80094dc:	46c0      	nop			@ (mov r8, r8)
 80094de:	46bd      	mov	sp, r7
 80094e0:	b015      	add	sp, #84	@ 0x54
 80094e2:	bd90      	pop	{r4, r7, pc}
 80094e4:	20000afc 	.word	0x20000afc
 80094e8:	08080000 	.word	0x08080000
 80094ec:	08080001 	.word	0x08080001
 80094f0:	08080002 	.word	0x08080002
 80094f4:	20000a58 	.word	0x20000a58
 80094f8:	20000a90 	.word	0x20000a90
 80094fc:	0800d928 	.word	0x0800d928
 8009500:	00020e00 	.word	0x00020e00
 8009504:	0800d97c 	.word	0x0800d97c

08009508 <Write_Module_Info>:
		Module_Lib_EEPROM_Safe_Write(MODULE_INFO_BASE_ADDRESS, (unsigned char *)&Module_Info, sizeof(MODULE_INFO));
	}
}

void Write_Module_Info(void)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b082      	sub	sp, #8
 800950c:	af00      	add	r7, sp, #0
	unsigned char Major_Version = MODULE_INFO_MAJOR_VERSION;
 800950e:	1dfb      	adds	r3, r7, #7
 8009510:	2201      	movs	r2, #1
 8009512:	701a      	strb	r2, [r3, #0]
	unsigned char Minor_Version = MODULE_INFO_MINOR_VERSION;
 8009514:	1dbb      	adds	r3, r7, #6
 8009516:	2202      	movs	r2, #2
 8009518:	701a      	strb	r2, [r3, #0]

	if(Module_Info.Module_Type != 0)
 800951a:	4b0f      	ldr	r3, [pc, #60]	@ (8009558 <Write_Module_Info+0x50>)
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d012      	beq.n	8009548 <Write_Module_Info+0x40>
	{
		// Write out the version info
		Module_Lib_EEPROM_Safe_Write(MODULE_INFO_MAJOR_VERSION_ADDRESS, &Major_Version, 1);
 8009522:	1dfb      	adds	r3, r7, #7
 8009524:	480d      	ldr	r0, [pc, #52]	@ (800955c <Write_Module_Info+0x54>)
 8009526:	2201      	movs	r2, #1
 8009528:	0019      	movs	r1, r3
 800952a:	f000 fb6a 	bl	8009c02 <Module_Lib_EEPROM_Safe_Write>
		Module_Lib_EEPROM_Safe_Write(MODULE_INFO_MINOR_VERSION_ADDRESS, &Minor_Version, 1);
 800952e:	1dbb      	adds	r3, r7, #6
 8009530:	480b      	ldr	r0, [pc, #44]	@ (8009560 <Write_Module_Info+0x58>)
 8009532:	2201      	movs	r2, #1
 8009534:	0019      	movs	r1, r3
 8009536:	f000 fb64 	bl	8009c02 <Module_Lib_EEPROM_Safe_Write>

		Module_Lib_EEPROM_Safe_Write(MODULE_INFO_BASE_ADDRESS, (unsigned char *)&Module_Info, sizeof(MODULE_INFO));
 800953a:	4b07      	ldr	r3, [pc, #28]	@ (8009558 <Write_Module_Info+0x50>)
 800953c:	4809      	ldr	r0, [pc, #36]	@ (8009564 <Write_Module_Info+0x5c>)
 800953e:	2238      	movs	r2, #56	@ 0x38
 8009540:	0019      	movs	r1, r3
 8009542:	f000 fb5e 	bl	8009c02 <Module_Lib_EEPROM_Safe_Write>
	}
	else
	{
		printf("\r\nERROR:  Attempt to write Module Info with Module_Type == 0!\r\n");
	}
}
 8009546:	e003      	b.n	8009550 <Write_Module_Info+0x48>
		printf("\r\nERROR:  Attempt to write Module Info with Module_Type == 0!\r\n");
 8009548:	4b07      	ldr	r3, [pc, #28]	@ (8009568 <Write_Module_Info+0x60>)
 800954a:	0018      	movs	r0, r3
 800954c:	f001 fe38 	bl	800b1c0 <puts>
}
 8009550:	46c0      	nop			@ (mov r8, r8)
 8009552:	46bd      	mov	sp, r7
 8009554:	b002      	add	sp, #8
 8009556:	bd80      	pop	{r7, pc}
 8009558:	20000a58 	.word	0x20000a58
 800955c:	08080000 	.word	0x08080000
 8009560:	08080001 	.word	0x08080001
 8009564:	08080002 	.word	0x08080002
 8009568:	0800d9d8 	.word	0x0800d9d8

0800956c <__NVIC_SystemReset>:
{
 800956c:	b580      	push	{r7, lr}
 800956e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8009570:	f3bf 8f4f 	dsb	sy
}
 8009574:	46c0      	nop			@ (mov r8, r8)
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009576:	4b04      	ldr	r3, [pc, #16]	@ (8009588 <__NVIC_SystemReset+0x1c>)
 8009578:	4a04      	ldr	r2, [pc, #16]	@ (800958c <__NVIC_SystemReset+0x20>)
 800957a:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800957c:	f3bf 8f4f 	dsb	sy
}
 8009580:	46c0      	nop			@ (mov r8, r8)
    __NOP();
 8009582:	46c0      	nop			@ (mov r8, r8)
 8009584:	e7fd      	b.n	8009582 <__NVIC_SystemReset+0x16>
 8009586:	46c0      	nop			@ (mov r8, r8)
 8009588:	e000ed00 	.word	0xe000ed00
 800958c:	05fa0004 	.word	0x05fa0004

08009590 <Parser_Module_Command>:
// Flag for signaling bootloader to start firmware update
#define OFFSET_ADDR_BOOT_LAUNCH		((uint32_t*)0x08080400)			/**< ADDR OFFSET OF WHERE BOOT LOADER LOOKS TO RUN ITSLELF OR RUN APPLICATION */
#define	BOOT_LOADER_LAUNCH_CODE		((uint32_t)0x504D4744)			/**< PMGD IN ASCII - SOMEWHAT RANDOM VALUE **/
void Clear_Module_Bus_INT(void);
void Parser_Module_Command(MODULE_BUS_RX_PACKET * packet)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b088      	sub	sp, #32
 8009594:	af02      	add	r7, sp, #8
 8009596:	6078      	str	r0, [r7, #4]
	switch(packet->RX_Packet.Formatted_Data.Packet_Header.Formatted_Packet_Header.Command)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	781b      	ldrb	r3, [r3, #0]
 800959c:	2b09      	cmp	r3, #9
 800959e:	d900      	bls.n	80095a2 <Parser_Module_Command+0x12>
 80095a0:	e082      	b.n	80096a8 <Parser_Module_Command+0x118>
 80095a2:	009a      	lsls	r2, r3, #2
 80095a4:	4b45      	ldr	r3, [pc, #276]	@ (80096bc <Parser_Module_Command+0x12c>)
 80095a6:	18d3      	adds	r3, r2, r3
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	469f      	mov	pc, r3
	{
	case CommonModCmd_Enumerate:
		{
			MODULE_BUS_PACKET * packet = Create_Module_Bus_Packet(0x00, 0x01, 0x01, sizeof(MODULE_INFO), (unsigned char *)&Module_Info);
 80095ac:	4b44      	ldr	r3, [pc, #272]	@ (80096c0 <Parser_Module_Command+0x130>)
 80095ae:	9300      	str	r3, [sp, #0]
 80095b0:	2338      	movs	r3, #56	@ 0x38
 80095b2:	2201      	movs	r2, #1
 80095b4:	2101      	movs	r1, #1
 80095b6:	2000      	movs	r0, #0
 80095b8:	f000 fae2 	bl	8009b80 <Create_Module_Bus_Packet>
 80095bc:	0003      	movs	r3, r0
 80095be:	60fb      	str	r3, [r7, #12]
			Module_Bus_Immediate_Send(packet, 0);
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	2100      	movs	r1, #0
 80095c4:	0018      	movs	r0, r3
 80095c6:	f000 f9cf 	bl	8009968 <Module_Bus_Immediate_Send>
		}
		break;
 80095ca:	e06d      	b.n	80096a8 <Parser_Module_Command+0x118>
	case CommonModCmd_Configure:
		{
			// Cast away constness
			MODULE_INFO *pncmi = (MODULE_INFO*)&Module_Info;
 80095cc:	4b3c      	ldr	r3, [pc, #240]	@ (80096c0 <Parser_Module_Command+0x130>)
 80095ce:	613b      	str	r3, [r7, #16]

			// Save the data to the temporary structure
			memcpy((unsigned char *)&New_Module_Data, packet->RX_Packet.Formatted_Data.Data, sizeof(MODULE_INFO));
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	1d19      	adds	r1, r3, #4
 80095d4:	4b3b      	ldr	r3, [pc, #236]	@ (80096c4 <Parser_Module_Command+0x134>)
 80095d6:	2238      	movs	r2, #56	@ 0x38
 80095d8:	0018      	movs	r0, r3
 80095da:	f002 fe40 	bl	800c25e <memcpy>

			// Save the module type
			pncmi->Module_Type = New_Module_Data.Module_Type;
 80095de:	4b39      	ldr	r3, [pc, #228]	@ (80096c4 <Parser_Module_Command+0x134>)
 80095e0:	681a      	ldr	r2, [r3, #0]
 80095e2:	693b      	ldr	r3, [r7, #16]
 80095e4:	601a      	str	r2, [r3, #0]

			// Save the module sub type
			pncmi->Module_Sub_Type = New_Module_Data.Module_Sub_Type;
 80095e6:	4b37      	ldr	r3, [pc, #220]	@ (80096c4 <Parser_Module_Command+0x134>)
 80095e8:	685a      	ldr	r2, [r3, #4]
 80095ea:	693b      	ldr	r3, [r7, #16]
 80095ec:	605a      	str	r2, [r3, #4]

			// Save the module I2C address
			pncmi->Module_I2C_Address = New_Module_Data.Module_I2C_Address;
 80095ee:	4b35      	ldr	r3, [pc, #212]	@ (80096c4 <Parser_Module_Command+0x134>)
 80095f0:	7a1a      	ldrb	r2, [r3, #8]
 80095f2:	693b      	ldr	r3, [r7, #16]
 80095f4:	721a      	strb	r2, [r3, #8]

			// Save the module name
			memcpy(&pncmi->Module_Name, &New_Module_Data.Module_Name, sizeof(pncmi->Module_Name));
 80095f6:	693b      	ldr	r3, [r7, #16]
 80095f8:	3309      	adds	r3, #9
 80095fa:	0019      	movs	r1, r3
 80095fc:	4b31      	ldr	r3, [pc, #196]	@ (80096c4 <Parser_Module_Command+0x134>)
 80095fe:	2209      	movs	r2, #9
 8009600:	0008      	movs	r0, r1
 8009602:	189b      	adds	r3, r3, r2
 8009604:	2218      	movs	r2, #24
 8009606:	0019      	movs	r1, r3
 8009608:	f002 fe29 	bl	800c25e <memcpy>

			// Save the hardware revision
			memcpy(&pncmi->Module_Hardware_Revision, &New_Module_Data.Module_Hardware_Revision, sizeof(pncmi->Module_Hardware_Revision));
 800960c:	693b      	ldr	r3, [r7, #16]
 800960e:	3321      	adds	r3, #33	@ 0x21
 8009610:	0019      	movs	r1, r3
 8009612:	4b2c      	ldr	r3, [pc, #176]	@ (80096c4 <Parser_Module_Command+0x134>)
 8009614:	2221      	movs	r2, #33	@ 0x21
 8009616:	0008      	movs	r0, r1
 8009618:	189b      	adds	r3, r3, r2
 800961a:	2203      	movs	r2, #3
 800961c:	0019      	movs	r1, r3
 800961e:	f002 fe1e 	bl	800c25e <memcpy>

			// Save the module serial number
			memcpy(&pncmi->Module_Serial_Number, &New_Module_Data.Module_Serial_Number, sizeof(Module_Info.Module_Serial_Number));
 8009622:	693b      	ldr	r3, [r7, #16]
 8009624:	3328      	adds	r3, #40	@ 0x28
 8009626:	001a      	movs	r2, r3
 8009628:	4b26      	ldr	r3, [pc, #152]	@ (80096c4 <Parser_Module_Command+0x134>)
 800962a:	0010      	movs	r0, r2
 800962c:	3328      	adds	r3, #40	@ 0x28
 800962e:	2209      	movs	r2, #9
 8009630:	0019      	movs	r1, r3
 8009632:	f002 fe14 	bl	800c25e <memcpy>

			Write_Module_Info();
 8009636:	f7ff ff67 	bl	8009508 <Write_Module_Info>
		}
		break;
 800963a:	e035      	b.n	80096a8 <Parser_Module_Command+0x118>
	case CommonModCmd_Interrupt_Response:
		{
			Clear_Module_Bus_INT();
 800963c:	f000 fa26 	bl	8009a8c <Clear_Module_Bus_INT>
//				MODULE_BUS_PACKET * packet = Create_Module_Bus_Packet(&hcrc, 0x02, 0x01, 0x01, 0x01, &value);
//				Module_Bus_Buffered_Send(packet);
//			}
			// Do nothing because the module should have queued it's response already
		}
		break;
 8009640:	e032      	b.n	80096a8 <Parser_Module_Command+0x118>
	case CommonModCmd_Enable:
		{
			Enable_Module();
 8009642:	f000 f849 	bl	80096d8 <Enable_Module>
		}
		break;
 8009646:	e02f      	b.n	80096a8 <Parser_Module_Command+0x118>
	case CommonModCmd_Disable:
		{
			Disable_Module();
 8009648:	f000 f84b 	bl	80096e2 <Disable_Module>
		}
		break;
 800964c:	e02c      	b.n	80096a8 <Parser_Module_Command+0x118>
	case CommonModCmd_Enum_Success:
		{
			Enumeration_Complete_Flag = true;
 800964e:	4b1e      	ldr	r3, [pc, #120]	@ (80096c8 <Parser_Module_Command+0x138>)
 8009650:	2201      	movs	r2, #1
 8009652:	701a      	strb	r2, [r3, #0]
			led_blink_fast();
 8009654:	f001 fa28 	bl	800aaa8 <led_blink_fast>
			Enumeration_Complete();
 8009658:	f000 f848 	bl	80096ec <Enumeration_Complete>
		}
		break;
 800965c:	e024      	b.n	80096a8 <Parser_Module_Command+0x118>
	case CommonModCmd_Initiate_FW_Update:
#ifndef BYPASS_BOOTLOADER_START_COMMAND
		// Start Firmware Update
		// Set Firmware Update flag in EEPROM
		HAL_FLASH_Unlock();
 800965e:	f7f9 fee1 	bl	8003424 <HAL_FLASH_Unlock>
		while(HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PRGLOCK)) {/* wait*/};
 8009662:	46c0      	nop			@ (mov r8, r8)
 8009664:	4b19      	ldr	r3, [pc, #100]	@ (80096cc <Parser_Module_Command+0x13c>)
 8009666:	685b      	ldr	r3, [r3, #4]
 8009668:	2202      	movs	r2, #2
 800966a:	4013      	ands	r3, r2
 800966c:	2b02      	cmp	r3, #2
 800966e:	d0f9      	beq.n	8009664 <Parser_Module_Command+0xd4>
		*OFFSET_ADDR_BOOT_LAUNCH = BOOT_LOADER_LAUNCH_CODE;
 8009670:	4b17      	ldr	r3, [pc, #92]	@ (80096d0 <Parser_Module_Command+0x140>)
 8009672:	4a18      	ldr	r2, [pc, #96]	@ (80096d4 <Parser_Module_Command+0x144>)
 8009674:	601a      	str	r2, [r3, #0]
		HAL_Delay(3);
 8009676:	2003      	movs	r0, #3
 8009678:	f7f9 fa9e 	bl	8002bb8 <HAL_Delay>
		HAL_FLASH_Lock();
 800967c:	f7f9 ff26 	bl	80034cc <HAL_FLASH_Lock>
		while(!HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PRGLOCK)) {/* wait*/};
 8009680:	46c0      	nop			@ (mov r8, r8)
 8009682:	4b12      	ldr	r3, [pc, #72]	@ (80096cc <Parser_Module_Command+0x13c>)
 8009684:	685b      	ldr	r3, [r3, #4]
 8009686:	2202      	movs	r2, #2
 8009688:	4013      	ands	r3, r2
 800968a:	2b02      	cmp	r3, #2
 800968c:	d1f9      	bne.n	8009682 <Parser_Module_Command+0xf2>

		// Restart
		NVIC_SystemReset();
 800968e:	f7ff ff6d 	bl	800956c <__NVIC_SystemReset>
		Module_Bus_Immediate_Send(packet, 1);
#endif
		break;
	case CommonModCmd_Timestamp:
		{
			time_t *pnow = (time_t*)&(packet->RX_Packet.Formatted_Data.Data[4]);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	3308      	adds	r3, #8
 8009696:	617b      	str	r3, [r7, #20]
			Set_Current_Time(*pnow);
 8009698:	697b      	ldr	r3, [r7, #20]
 800969a:	681a      	ldr	r2, [r3, #0]
 800969c:	685b      	ldr	r3, [r3, #4]
 800969e:	0010      	movs	r0, r2
 80096a0:	0019      	movs	r1, r3
 80096a2:	f000 fe91 	bl	800a3c8 <Set_Current_Time>
		}
		break;
 80096a6:	46c0      	nop			@ (mov r8, r8)
	case CommonModCmd_Empty_Packet:
		break;
	}

	pmdFree(packet);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2200      	movs	r2, #0
 80096ac:	2182      	movs	r1, #130	@ 0x82
 80096ae:	0018      	movs	r0, r3
 80096b0:	f001 fad0 	bl	800ac54 <dbg_free>
}
 80096b4:	46c0      	nop			@ (mov r8, r8)
 80096b6:	46bd      	mov	sp, r7
 80096b8:	b006      	add	sp, #24
 80096ba:	bd80      	pop	{r7, pc}
 80096bc:	0800e1b0 	.word	0x0800e1b0
 80096c0:	20000a58 	.word	0x20000a58
 80096c4:	20000a94 	.word	0x20000a94
 80096c8:	20000acc 	.word	0x20000acc
 80096cc:	40022000 	.word	0x40022000
 80096d0:	08080400 	.word	0x08080400
 80096d4:	504d4744 	.word	0x504d4744

080096d8 <Enable_Module>:

__weak void Enable_Module(void){}
 80096d8:	b580      	push	{r7, lr}
 80096da:	af00      	add	r7, sp, #0
 80096dc:	46c0      	nop			@ (mov r8, r8)
 80096de:	46bd      	mov	sp, r7
 80096e0:	bd80      	pop	{r7, pc}

080096e2 <Disable_Module>:
__weak void Disable_Module(void){}
 80096e2:	b580      	push	{r7, lr}
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	46c0      	nop			@ (mov r8, r8)
 80096e8:	46bd      	mov	sp, r7
 80096ea:	bd80      	pop	{r7, pc}

080096ec <Enumeration_Complete>:
__weak void Enumeration_Complete(void){}
 80096ec:	b580      	push	{r7, lr}
 80096ee:	af00      	add	r7, sp, #0
 80096f0:	46c0      	nop			@ (mov r8, r8)
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}

080096f6 <IsValidModuleCommand>:
		unsigned char Data[I2C_MAX_PAYLOAD_SIZE]; 			// Max data size is I2C_MSG_MAX_SIZE, but need additional byte for CRC
	}Formatted_Data;
}MODULE_BUS_PACKET;

static inline uint8_t IsValidModuleCommand(Packet_Header_Type *hdr)
{
 80096f6:	b580      	push	{r7, lr}
 80096f8:	b082      	sub	sp, #8
 80096fa:	af00      	add	r7, sp, #0
 80096fc:	6078      	str	r0, [r7, #4]
	return (hdr->Formatted_Packet_Header.Command >= 0) && (hdr->Formatted_Packet_Header.Command <= 0x10);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	781a      	ldrb	r2, [r3, #0]
 8009702:	2110      	movs	r1, #16
 8009704:	2300      	movs	r3, #0
 8009706:	4291      	cmp	r1, r2
 8009708:	415b      	adcs	r3, r3
 800970a:	b2db      	uxtb	r3, r3
}
 800970c:	0018      	movs	r0, r3
 800970e:	46bd      	mov	sp, r7
 8009710:	b002      	add	sp, #8
 8009712:	bd80      	pop	{r7, pc}

08009714 <pmdGetMsTicks>:

void pmdCheckHeapValid(void);
void PetWatchdog(void);

static inline uint32_t pmdGetMsTicks(void)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	af00      	add	r7, sp, #0
	extern volatile uint32_t uwTick;
	return uwTick;
 8009718:	4b02      	ldr	r3, [pc, #8]	@ (8009724 <pmdGetMsTicks+0x10>)
 800971a:	681b      	ldr	r3, [r3, #0]
}
 800971c:	0018      	movs	r0, r3
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}
 8009722:	46c0      	nop			@ (mov r8, r8)
 8009724:	20000a2c 	.word	0x20000a2c

08009728 <TimesUp>:


// TimesUp works because when the left side becomes negative (when time is up) the uint32_t
// value jumps from zero to ULONG_MAX and continues counting down.
static inline bool TimesUp(uint32_t end)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b082      	sub	sp, #8
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
  return (end - pmdGetMsTicks()) > (ULONG_MAX >> 1);
 8009730:	f7ff fff0 	bl	8009714 <pmdGetMsTicks>
 8009734:	0002      	movs	r2, r0
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	1a9b      	subs	r3, r3, r2
 800973a:	0fdb      	lsrs	r3, r3, #31
 800973c:	b2db      	uxtb	r3, r3
}
 800973e:	0018      	movs	r0, r3
 8009740:	46bd      	mov	sp, r7
 8009742:	b002      	add	sp, #8
 8009744:	bd80      	pop	{r7, pc}

08009746 <Log_Packet>:
void Update_I2C_State_Machine(void);

int __io_putchar(int ch);

void Log_Packet(MODULE_BUS_PACKET *packet)
{
 8009746:	b580      	push	{r7, lr}
 8009748:	b082      	sub	sp, #8
 800974a:	af00      	add	r7, sp, #0
 800974c:	6078      	str	r0, [r7, #4]
		}
		printf("%02X ", packet->Raw_Data[i]);
	}
	printf("\r\n<TX>-------------------------------------------------------<TX>\r\n    ");
#endif
}
 800974e:	46c0      	nop			@ (mov r8, r8)
 8009750:	46bd      	mov	sp, r7
 8009752:	b002      	add	sp, #8
 8009754:	bd80      	pop	{r7, pc}
	...

08009758 <Init_Module_Bus>:


const Module_Slave_Bus_t *Init_Module_Bus(I2C_TypeDef *pi2c, GPIO_TypeDef *Int_Out_Port, uint16_t Int_Out_Pin, const Firmware_Version *FW_Ver)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b086      	sub	sp, #24
 800975c:	af02      	add	r7, sp, #8
 800975e:	60f8      	str	r0, [r7, #12]
 8009760:	60b9      	str	r1, [r7, #8]
 8009762:	603b      	str	r3, [r7, #0]
 8009764:	1dbb      	adds	r3, r7, #6
 8009766:	801a      	strh	r2, [r3, #0]
	Startup_Sync_Time = GetMsTicks()+SYSTEM_STARTUP_DELAY_MS;
 8009768:	f7ff ffd4 	bl	8009714 <pmdGetMsTicks>
 800976c:	0003      	movs	r3, r0
 800976e:	22fa      	movs	r2, #250	@ 0xfa
 8009770:	0092      	lsls	r2, r2, #2
 8009772:	189a      	adds	r2, r3, r2
 8009774:	4b09      	ldr	r3, [pc, #36]	@ (800979c <Init_Module_Bus+0x44>)
 8009776:	601a      	str	r2, [r3, #0]
	return Init_Module_BusEx(pi2c, 16, 8, Int_Out_Port, Int_Out_Pin, FW_Ver);
 8009778:	68ba      	ldr	r2, [r7, #8]
 800977a:	68f8      	ldr	r0, [r7, #12]
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	9301      	str	r3, [sp, #4]
 8009780:	1dbb      	adds	r3, r7, #6
 8009782:	881b      	ldrh	r3, [r3, #0]
 8009784:	9300      	str	r3, [sp, #0]
 8009786:	0013      	movs	r3, r2
 8009788:	2208      	movs	r2, #8
 800978a:	2110      	movs	r1, #16
 800978c:	f000 f808 	bl	80097a0 <Init_Module_BusEx>
 8009790:	0003      	movs	r3, r0
}
 8009792:	0018      	movs	r0, r3
 8009794:	46bd      	mov	sp, r7
 8009796:	b004      	add	sp, #16
 8009798:	bd80      	pop	{r7, pc}
 800979a:	46c0      	nop			@ (mov r8, r8)
 800979c:	20000038 	.word	0x20000038

080097a0 <Init_Module_BusEx>:

const Module_Slave_Bus_t *Init_Module_BusEx(I2C_TypeDef *pi2c, uint8_t NumTXQueueEntries, uint8_t NumRXQueueEntries, GPIO_TypeDef *Int_Out_Port, uint16_t Int_Out_Pin, const Firmware_Version *FW_Ver)
{
 80097a0:	b5b0      	push	{r4, r5, r7, lr}
 80097a2:	b084      	sub	sp, #16
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	60f8      	str	r0, [r7, #12]
 80097a8:	0008      	movs	r0, r1
 80097aa:	0011      	movs	r1, r2
 80097ac:	607b      	str	r3, [r7, #4]
 80097ae:	240b      	movs	r4, #11
 80097b0:	193b      	adds	r3, r7, r4
 80097b2:	1c02      	adds	r2, r0, #0
 80097b4:	701a      	strb	r2, [r3, #0]
 80097b6:	250a      	movs	r5, #10
 80097b8:	197b      	adds	r3, r7, r5
 80097ba:	1c0a      	adds	r2, r1, #0
 80097bc:	701a      	strb	r2, [r3, #0]
	pmsb = pmdMalloc(sizeof(Module_Slave_Bus_t));
 80097be:	2200      	movs	r2, #0
 80097c0:	2147      	movs	r1, #71	@ 0x47
 80097c2:	2010      	movs	r0, #16
 80097c4:	f001 fa04 	bl	800abd0 <dbg_malloc>
 80097c8:	0002      	movs	r2, r0
 80097ca:	4b23      	ldr	r3, [pc, #140]	@ (8009858 <Init_Module_BusEx+0xb8>)
 80097cc:	601a      	str	r2, [r3, #0]

	Max_Num_Tx_Queue_Packets = NumTXQueueEntries;
 80097ce:	4b23      	ldr	r3, [pc, #140]	@ (800985c <Init_Module_BusEx+0xbc>)
 80097d0:	193a      	adds	r2, r7, r4
 80097d2:	7812      	ldrb	r2, [r2, #0]
 80097d4:	701a      	strb	r2, [r3, #0]
	Max_Num_Rx_Queue_Packets = NumRXQueueEntries;
 80097d6:	4b22      	ldr	r3, [pc, #136]	@ (8009860 <Init_Module_BusEx+0xc0>)
 80097d8:	197a      	adds	r2, r7, r5
 80097da:	7812      	ldrb	r2, [r2, #0]
 80097dc:	701a      	strb	r2, [r3, #0]

	pmsb->pi2c = pi2c;
 80097de:	4b1e      	ldr	r3, [pc, #120]	@ (8009858 <Init_Module_BusEx+0xb8>)
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	68fa      	ldr	r2, [r7, #12]
 80097e4:	601a      	str	r2, [r3, #0]
	pmsb->Int_Out_Port = Int_Out_Port;
 80097e6:	4b1c      	ldr	r3, [pc, #112]	@ (8009858 <Init_Module_BusEx+0xb8>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	687a      	ldr	r2, [r7, #4]
 80097ec:	605a      	str	r2, [r3, #4]
	pmsb->Int_Out_Pin = Int_Out_Pin;
 80097ee:	4b1a      	ldr	r3, [pc, #104]	@ (8009858 <Init_Module_BusEx+0xb8>)
 80097f0:	681a      	ldr	r2, [r3, #0]
 80097f2:	2318      	movs	r3, #24
 80097f4:	2108      	movs	r1, #8
 80097f6:	185b      	adds	r3, r3, r1
 80097f8:	19db      	adds	r3, r3, r7
 80097fa:	881b      	ldrh	r3, [r3, #0]
 80097fc:	8113      	strh	r3, [r2, #8]
	memcpy(&pmsb->FW_Ver, FW_Ver, 4);
 80097fe:	4b16      	ldr	r3, [pc, #88]	@ (8009858 <Init_Module_BusEx+0xb8>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	330a      	adds	r3, #10
 8009804:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009806:	2204      	movs	r2, #4
 8009808:	0018      	movs	r0, r3
 800980a:	f002 fd28 	bl	800c25e <memcpy>

	MsgQ_Init(&TX_Que, Max_Num_Tx_Queue_Packets);
 800980e:	4b13      	ldr	r3, [pc, #76]	@ (800985c <Init_Module_BusEx+0xbc>)
 8009810:	781a      	ldrb	r2, [r3, #0]
 8009812:	4b14      	ldr	r3, [pc, #80]	@ (8009864 <Init_Module_BusEx+0xc4>)
 8009814:	0011      	movs	r1, r2
 8009816:	0018      	movs	r0, r3
 8009818:	f000 faba 	bl	8009d90 <MsgQ_Init>
	IMsgQ_Init(&RX_Que, Max_Num_Rx_Queue_Packets, I2C_MAX_PACKET_SIZE, FBAlloc_Create);
 800981c:	4b10      	ldr	r3, [pc, #64]	@ (8009860 <Init_Module_BusEx+0xc0>)
 800981e:	7819      	ldrb	r1, [r3, #0]
 8009820:	4b11      	ldr	r3, [pc, #68]	@ (8009868 <Init_Module_BusEx+0xc8>)
 8009822:	4812      	ldr	r0, [pc, #72]	@ (800986c <Init_Module_BusEx+0xcc>)
 8009824:	22ff      	movs	r2, #255	@ 0xff
 8009826:	f7ff fd11 	bl	800924c <IMsgQ_Init>

	Init_Module_I2C_Driver();
 800982a:	f000 fa9f 	bl	8009d6c <Init_Module_I2C_Driver>

	Module_Bus.State = eWAIT_FOR_ENUM;
 800982e:	4b10      	ldr	r3, [pc, #64]	@ (8009870 <Init_Module_BusEx+0xd0>)
 8009830:	2200      	movs	r2, #0
 8009832:	711a      	strb	r2, [r3, #4]
	Module_Bus.Is_Module_Bus_INT_Set = false;
 8009834:	4b0e      	ldr	r3, [pc, #56]	@ (8009870 <Init_Module_BusEx+0xd0>)
 8009836:	2200      	movs	r2, #0
 8009838:	715a      	strb	r2, [r3, #5]
	Module_Bus.Free_To_Send = false;
 800983a:	4b0d      	ldr	r3, [pc, #52]	@ (8009870 <Init_Module_BusEx+0xd0>)
 800983c:	2200      	movs	r2, #0
 800983e:	719a      	strb	r2, [r3, #6]

	Init_Module_Info();
 8009840:	f7ff fdb0 	bl	80093a4 <Init_Module_Info>

	Init_I2C_Slave();
 8009844:	f000 ff64 	bl	800a710 <Init_I2C_Slave>

	Init_RTC();
 8009848:	f000 fc46 	bl	800a0d8 <Init_RTC>

	return pmsb;
 800984c:	4b02      	ldr	r3, [pc, #8]	@ (8009858 <Init_Module_BusEx+0xb8>)
 800984e:	681b      	ldr	r3, [r3, #0]
}
 8009850:	0018      	movs	r0, r3
 8009852:	46bd      	mov	sp, r7
 8009854:	b004      	add	sp, #16
 8009856:	bdb0      	pop	{r4, r5, r7, pc}
 8009858:	20000afc 	.word	0x20000afc
 800985c:	2000003d 	.word	0x2000003d
 8009860:	2000003c 	.word	0x2000003c
 8009864:	20000ad8 	.word	0x20000ad8
 8009868:	08009021 	.word	0x08009021
 800986c:	20000ae8 	.word	0x20000ae8
 8009870:	20000ad0 	.word	0x20000ad0

08009874 <Module_Bus_Tasks>:
 *
 * @brief:	Must be called in the mainloop to update the bus.
 *
 ****************************************************************************************/
void Module_Bus_Tasks(void)
{
 8009874:	b580      	push	{r7, lr}
 8009876:	af00      	add	r7, sp, #0
	Update_I2C_State_Machine();
 8009878:	f001 f806 	bl	800a888 <Update_I2C_State_Machine>
	g_i2c_state_changed_flag = 0;
 800987c:	4b33      	ldr	r3, [pc, #204]	@ (800994c <Module_Bus_Tasks+0xd8>)
 800987e:	2200      	movs	r2, #0
 8009880:	701a      	strb	r2, [r3, #0]

	switch(System_Startup_Status)
 8009882:	4b33      	ldr	r3, [pc, #204]	@ (8009950 <Module_Bus_Tasks+0xdc>)
 8009884:	781b      	ldrb	r3, [r3, #0]
 8009886:	2b02      	cmp	r3, #2
 8009888:	d04c      	beq.n	8009924 <Module_Bus_Tasks+0xb0>
 800988a:	dc55      	bgt.n	8009938 <Module_Bus_Tasks+0xc4>
 800988c:	2b00      	cmp	r3, #0
 800988e:	d002      	beq.n	8009896 <Module_Bus_Tasks+0x22>
 8009890:	2b01      	cmp	r3, #1
 8009892:	d01d      	beq.n	80098d0 <Module_Bus_Tasks+0x5c>
				System_Startup_Status = SysSu_TimeSyncComplete;
			}
			break;
		case SysSu_TimeSyncComplete:
		default:
			break;
 8009894:	e050      	b.n	8009938 <Module_Bus_Tasks+0xc4>
			if(Enumeration_Complete_Flag)
 8009896:	4b2f      	ldr	r3, [pc, #188]	@ (8009954 <Module_Bus_Tasks+0xe0>)
 8009898:	781b      	ldrb	r3, [r3, #0]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d003      	beq.n	80098a6 <Module_Bus_Tasks+0x32>
				System_Startup_Status = SysSy_WaitForEnum;
 800989e:	4b2c      	ldr	r3, [pc, #176]	@ (8009950 <Module_Bus_Tasks+0xdc>)
 80098a0:	2201      	movs	r2, #1
 80098a2:	701a      	strb	r2, [r3, #0]
			break;
 80098a4:	e04a      	b.n	800993c <Module_Bus_Tasks+0xc8>
			else if(TimesUp(Startup_Sync_Time))
 80098a6:	4b2c      	ldr	r3, [pc, #176]	@ (8009958 <Module_Bus_Tasks+0xe4>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	0018      	movs	r0, r3
 80098ac:	f7ff ff3c 	bl	8009728 <TimesUp>
 80098b0:	1e03      	subs	r3, r0, #0
 80098b2:	d043      	beq.n	800993c <Module_Bus_Tasks+0xc8>
				Send_Enum_Request_Message();
 80098b4:	f000 f94e 	bl	8009b54 <Send_Enum_Request_Message>
				Startup_Sync_Time = GetMsTicks()+SYSTEM_STARTUP_DELAY_MS;
 80098b8:	f7ff ff2c 	bl	8009714 <pmdGetMsTicks>
 80098bc:	0003      	movs	r3, r0
 80098be:	22fa      	movs	r2, #250	@ 0xfa
 80098c0:	0092      	lsls	r2, r2, #2
 80098c2:	189a      	adds	r2, r3, r2
 80098c4:	4b24      	ldr	r3, [pc, #144]	@ (8009958 <Module_Bus_Tasks+0xe4>)
 80098c6:	601a      	str	r2, [r3, #0]
				System_Startup_Status = SysSy_WaitForEnum;
 80098c8:	4b21      	ldr	r3, [pc, #132]	@ (8009950 <Module_Bus_Tasks+0xdc>)
 80098ca:	2201      	movs	r2, #1
 80098cc:	701a      	strb	r2, [r3, #0]
			break;
 80098ce:	e035      	b.n	800993c <Module_Bus_Tasks+0xc8>
			if(Enumeration_Complete_Flag)
 80098d0:	4b20      	ldr	r3, [pc, #128]	@ (8009954 <Module_Bus_Tasks+0xe0>)
 80098d2:	781b      	ldrb	r3, [r3, #0]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d010      	beq.n	80098fa <Module_Bus_Tasks+0x86>
				printf("\r\nSend the Controller Timestamp Request\r\n");
 80098d8:	4b20      	ldr	r3, [pc, #128]	@ (800995c <Module_Bus_Tasks+0xe8>)
 80098da:	0018      	movs	r0, r3
 80098dc:	f001 fc70 	bl	800b1c0 <puts>
				Request_Controller_Time_Sync();
 80098e0:	f000 fe8a 	bl	800a5f8 <Request_Controller_Time_Sync>
				Startup_Sync_Time = GetMsTicks()+SYS_STARTUP_RETRY_DELAY_MS;
 80098e4:	f7ff ff16 	bl	8009714 <pmdGetMsTicks>
 80098e8:	0003      	movs	r3, r0
 80098ea:	4a1d      	ldr	r2, [pc, #116]	@ (8009960 <Module_Bus_Tasks+0xec>)
 80098ec:	189a      	adds	r2, r3, r2
 80098ee:	4b1a      	ldr	r3, [pc, #104]	@ (8009958 <Module_Bus_Tasks+0xe4>)
 80098f0:	601a      	str	r2, [r3, #0]
				System_Startup_Status = SysSu_WaitForSync;
 80098f2:	4b17      	ldr	r3, [pc, #92]	@ (8009950 <Module_Bus_Tasks+0xdc>)
 80098f4:	2202      	movs	r2, #2
 80098f6:	701a      	strb	r2, [r3, #0]
			break;
 80098f8:	e022      	b.n	8009940 <Module_Bus_Tasks+0xcc>
			else if(TimesUp(Startup_Sync_Time))
 80098fa:	4b17      	ldr	r3, [pc, #92]	@ (8009958 <Module_Bus_Tasks+0xe4>)
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	0018      	movs	r0, r3
 8009900:	f7ff ff12 	bl	8009728 <TimesUp>
 8009904:	1e03      	subs	r3, r0, #0
 8009906:	d01b      	beq.n	8009940 <Module_Bus_Tasks+0xcc>
				Send_Enum_Request_Message();
 8009908:	f000 f924 	bl	8009b54 <Send_Enum_Request_Message>
				Startup_Sync_Time = GetMsTicks()+SYSTEM_STARTUP_DELAY_MS;
 800990c:	f7ff ff02 	bl	8009714 <pmdGetMsTicks>
 8009910:	0003      	movs	r3, r0
 8009912:	22fa      	movs	r2, #250	@ 0xfa
 8009914:	0092      	lsls	r2, r2, #2
 8009916:	189a      	adds	r2, r3, r2
 8009918:	4b0f      	ldr	r3, [pc, #60]	@ (8009958 <Module_Bus_Tasks+0xe4>)
 800991a:	601a      	str	r2, [r3, #0]
				System_Startup_Status = SysSy_WaitForEnum;
 800991c:	4b0c      	ldr	r3, [pc, #48]	@ (8009950 <Module_Bus_Tasks+0xdc>)
 800991e:	2201      	movs	r2, #1
 8009920:	701a      	strb	r2, [r3, #0]
			break;
 8009922:	e00d      	b.n	8009940 <Module_Bus_Tasks+0xcc>
			if((RTC->DR & (RTC_DR_YT | RTC_DR_YU)))
 8009924:	4b0f      	ldr	r3, [pc, #60]	@ (8009964 <Module_Bus_Tasks+0xf0>)
 8009926:	685a      	ldr	r2, [r3, #4]
 8009928:	23ff      	movs	r3, #255	@ 0xff
 800992a:	041b      	lsls	r3, r3, #16
 800992c:	4013      	ands	r3, r2
 800992e:	d009      	beq.n	8009944 <Module_Bus_Tasks+0xd0>
				System_Startup_Status = SysSu_TimeSyncComplete;
 8009930:	4b07      	ldr	r3, [pc, #28]	@ (8009950 <Module_Bus_Tasks+0xdc>)
 8009932:	2203      	movs	r2, #3
 8009934:	701a      	strb	r2, [r3, #0]
			break;
 8009936:	e005      	b.n	8009944 <Module_Bus_Tasks+0xd0>
			break;
 8009938:	46c0      	nop			@ (mov r8, r8)
 800993a:	e004      	b.n	8009946 <Module_Bus_Tasks+0xd2>
			break;
 800993c:	46c0      	nop			@ (mov r8, r8)
 800993e:	e002      	b.n	8009946 <Module_Bus_Tasks+0xd2>
			break;
 8009940:	46c0      	nop			@ (mov r8, r8)
 8009942:	e000      	b.n	8009946 <Module_Bus_Tasks+0xd2>
			break;
 8009944:	46c0      	nop			@ (mov r8, r8)
	}
}
 8009946:	46c0      	nop			@ (mov r8, r8)
 8009948:	46bd      	mov	sp, r7
 800994a:	bd80      	pop	{r7, pc}
 800994c:	20000e10 	.word	0x20000e10
 8009950:	20000acd 	.word	0x20000acd
 8009954:	20000acc 	.word	0x20000acc
 8009958:	20000038 	.word	0x20000038
 800995c:	0800dc50 	.word	0x0800dc50
 8009960:	00001770 	.word	0x00001770
 8009964:	40002800 	.word	0x40002800

08009968 <Module_Bus_Immediate_Send>:
 * 			does not already expect this message in response to a messege it sent to this
 * 			module.
 *
 ****************************************************************************************/
void Module_Bus_Immediate_Send(MODULE_BUS_PACKET *packet, bool interrupt)
{
 8009968:	b590      	push	{r4, r7, lr}
 800996a:	b085      	sub	sp, #20
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
 8009970:	000a      	movs	r2, r1
 8009972:	1cfb      	adds	r3, r7, #3
 8009974:	701a      	strb	r2, [r3, #0]
	// Calculate CRC
	uint8_t data_length = packet->Formatted_Data.Packet_Header.Formatted_Packet_Header.Data_Length;
 8009976:	200f      	movs	r0, #15
 8009978:	183b      	adds	r3, r7, r0
 800997a:	687a      	ldr	r2, [r7, #4]
 800997c:	78d2      	ldrb	r2, [r2, #3]
 800997e:	701a      	strb	r2, [r3, #0]
	packet->Formatted_Data.Data[data_length] = Get_CRC8(packet->Raw_Data, data_length + PACKET_HEADER_SIZE);
 8009980:	687a      	ldr	r2, [r7, #4]
 8009982:	183b      	adds	r3, r7, r0
 8009984:	781b      	ldrb	r3, [r3, #0]
 8009986:	b29b      	uxth	r3, r3
 8009988:	3304      	adds	r3, #4
 800998a:	b299      	uxth	r1, r3
 800998c:	183b      	adds	r3, r7, r0
 800998e:	781c      	ldrb	r4, [r3, #0]
 8009990:	0010      	movs	r0, r2
 8009992:	f001 f9a3 	bl	800acdc <Get_CRC8>
 8009996:	0003      	movs	r3, r0
 8009998:	001a      	movs	r2, r3
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	191b      	adds	r3, r3, r4
 800999e:	711a      	strb	r2, [r3, #4]

	Log_Packet(packet);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	0018      	movs	r0, r3
 80099a4:	f7ff fecf 	bl	8009746 <Log_Packet>

	MsgQ_PushFront(&TX_Que, packet);
 80099a8:	687a      	ldr	r2, [r7, #4]
 80099aa:	4b07      	ldr	r3, [pc, #28]	@ (80099c8 <Module_Bus_Immediate_Send+0x60>)
 80099ac:	0011      	movs	r1, r2
 80099ae:	0018      	movs	r0, r3
 80099b0:	f000 fac0 	bl	8009f34 <MsgQ_PushFront>

	if(interrupt)
 80099b4:	1cfb      	adds	r3, r7, #3
 80099b6:	781b      	ldrb	r3, [r3, #0]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d001      	beq.n	80099c0 <Module_Bus_Immediate_Send+0x58>
	{
//		aci_print("\r\nSet Module Bus INT 2\r\n");
		Set_Module_Bus_INT();
 80099bc:	f000 f838 	bl	8009a30 <Set_Module_Bus_INT>
	}
}
 80099c0:	46c0      	nop			@ (mov r8, r8)
 80099c2:	46bd      	mov	sp, r7
 80099c4:	b005      	add	sp, #20
 80099c6:	bd90      	pop	{r4, r7, pc}
 80099c8:	20000ad8 	.word	0x20000ad8

080099cc <Module_Bus_Buffered_Send>:
 * 			does not already expect this message in response to a messege it sent to this
 * 			module.
 *
 ****************************************************************************************/
void Module_Bus_Buffered_Send(MODULE_BUS_PACKET *packet, bool interrupt)
{
 80099cc:	b590      	push	{r4, r7, lr}
 80099ce:	b085      	sub	sp, #20
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
 80099d4:	000a      	movs	r2, r1
 80099d6:	1cfb      	adds	r3, r7, #3
 80099d8:	701a      	strb	r2, [r3, #0]
	// Calculate CRC
	uint8_t data_length = packet->Formatted_Data.Packet_Header.Formatted_Packet_Header.Data_Length;
 80099da:	200f      	movs	r0, #15
 80099dc:	183b      	adds	r3, r7, r0
 80099de:	687a      	ldr	r2, [r7, #4]
 80099e0:	78d2      	ldrb	r2, [r2, #3]
 80099e2:	701a      	strb	r2, [r3, #0]
	packet->Formatted_Data.Data[data_length] = Get_CRC8(packet->Raw_Data, data_length + PACKET_HEADER_SIZE);
 80099e4:	687a      	ldr	r2, [r7, #4]
 80099e6:	183b      	adds	r3, r7, r0
 80099e8:	781b      	ldrb	r3, [r3, #0]
 80099ea:	b29b      	uxth	r3, r3
 80099ec:	3304      	adds	r3, #4
 80099ee:	b299      	uxth	r1, r3
 80099f0:	183b      	adds	r3, r7, r0
 80099f2:	781c      	ldrb	r4, [r3, #0]
 80099f4:	0010      	movs	r0, r2
 80099f6:	f001 f971 	bl	800acdc <Get_CRC8>
 80099fa:	0003      	movs	r3, r0
 80099fc:	001a      	movs	r2, r3
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	191b      	adds	r3, r3, r4
 8009a02:	711a      	strb	r2, [r3, #4]

	Log_Packet(packet);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	0018      	movs	r0, r3
 8009a08:	f7ff fe9d 	bl	8009746 <Log_Packet>

	MsgQ_Push(&TX_Que, packet);
 8009a0c:	687a      	ldr	r2, [r7, #4]
 8009a0e:	4b07      	ldr	r3, [pc, #28]	@ (8009a2c <Module_Bus_Buffered_Send+0x60>)
 8009a10:	0011      	movs	r1, r2
 8009a12:	0018      	movs	r0, r3
 8009a14:	f000 fa3d 	bl	8009e92 <MsgQ_Push>

	if(interrupt)
 8009a18:	1cfb      	adds	r3, r7, #3
 8009a1a:	781b      	ldrb	r3, [r3, #0]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d001      	beq.n	8009a24 <Module_Bus_Buffered_Send+0x58>
	{
		Set_Module_Bus_INT();
 8009a20:	f000 f806 	bl	8009a30 <Set_Module_Bus_INT>
//		aci_print("\r\nSet Module Bus INT 1\r\n");

	}
}
 8009a24:	46c0      	nop			@ (mov r8, r8)
 8009a26:	46bd      	mov	sp, r7
 8009a28:	b005      	add	sp, #20
 8009a2a:	bd90      	pop	{r4, r7, pc}
 8009a2c:	20000ad8 	.word	0x20000ad8

08009a30 <Set_Module_Bus_INT>:

void Set_Module_Bus_INT(void)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	af00      	add	r7, sp, #0
	if(	Module_Bus.Is_Module_Bus_INT_Set == true)
 8009a34:	4b13      	ldr	r3, [pc, #76]	@ (8009a84 <Set_Module_Bus_INT+0x54>)
 8009a36:	795b      	ldrb	r3, [r3, #5]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d11f      	bne.n	8009a7c <Set_Module_Bus_INT+0x4c>
		return;

	if(pmsb && pmsb->Int_Out_Port)
 8009a3c:	4b12      	ldr	r3, [pc, #72]	@ (8009a88 <Set_Module_Bus_INT+0x58>)
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d01c      	beq.n	8009a7e <Set_Module_Bus_INT+0x4e>
 8009a44:	4b10      	ldr	r3, [pc, #64]	@ (8009a88 <Set_Module_Bus_INT+0x58>)
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	685b      	ldr	r3, [r3, #4]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d017      	beq.n	8009a7e <Set_Module_Bus_INT+0x4e>
	{
		pmsb->Int_Out_Port->ODR |= pmsb->Int_Out_Pin;
 8009a4e:	4b0e      	ldr	r3, [pc, #56]	@ (8009a88 <Set_Module_Bus_INT+0x58>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	685b      	ldr	r3, [r3, #4]
 8009a54:	695a      	ldr	r2, [r3, #20]
 8009a56:	4b0c      	ldr	r3, [pc, #48]	@ (8009a88 <Set_Module_Bus_INT+0x58>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	891b      	ldrh	r3, [r3, #8]
 8009a5c:	0019      	movs	r1, r3
 8009a5e:	4b0a      	ldr	r3, [pc, #40]	@ (8009a88 <Set_Module_Bus_INT+0x58>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	685b      	ldr	r3, [r3, #4]
 8009a64:	430a      	orrs	r2, r1
 8009a66:	615a      	str	r2, [r3, #20]
		Module_Bus.Is_Module_Bus_INT_Set = true;
 8009a68:	4b06      	ldr	r3, [pc, #24]	@ (8009a84 <Set_Module_Bus_INT+0x54>)
 8009a6a:	2201      	movs	r2, #1
 8009a6c:	715a      	strb	r2, [r3, #5]
		Module_Bus.Int_Out_Start_Time = GetMsTicks();
 8009a6e:	f7ff fe51 	bl	8009714 <pmdGetMsTicks>
 8009a72:	0003      	movs	r3, r0
 8009a74:	001a      	movs	r2, r3
 8009a76:	4b03      	ldr	r3, [pc, #12]	@ (8009a84 <Set_Module_Bus_INT+0x54>)
 8009a78:	601a      	str	r2, [r3, #0]
 8009a7a:	e000      	b.n	8009a7e <Set_Module_Bus_INT+0x4e>
		return;
 8009a7c:	46c0      	nop			@ (mov r8, r8)
//		aci_print("\r\nSet_Module_Bus_INT\r\n");
	}
}
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bd80      	pop	{r7, pc}
 8009a82:	46c0      	nop			@ (mov r8, r8)
 8009a84:	20000ad0 	.word	0x20000ad0
 8009a88:	20000afc 	.word	0x20000afc

08009a8c <Clear_Module_Bus_INT>:

void Clear_Module_Bus_INT(void)
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	af00      	add	r7, sp, #0
	if(	Module_Bus.Is_Module_Bus_INT_Set == false)
 8009a90:	4b12      	ldr	r3, [pc, #72]	@ (8009adc <Clear_Module_Bus_INT+0x50>)
 8009a92:	795b      	ldrb	r3, [r3, #5]
 8009a94:	2201      	movs	r2, #1
 8009a96:	4053      	eors	r3, r2
 8009a98:	b2db      	uxtb	r3, r3
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d11a      	bne.n	8009ad4 <Clear_Module_Bus_INT+0x48>
		return;

	if(pmsb && pmsb->Int_Out_Port)
 8009a9e:	4b10      	ldr	r3, [pc, #64]	@ (8009ae0 <Clear_Module_Bus_INT+0x54>)
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d017      	beq.n	8009ad6 <Clear_Module_Bus_INT+0x4a>
 8009aa6:	4b0e      	ldr	r3, [pc, #56]	@ (8009ae0 <Clear_Module_Bus_INT+0x54>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	685b      	ldr	r3, [r3, #4]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d012      	beq.n	8009ad6 <Clear_Module_Bus_INT+0x4a>
	{
		pmsb->Int_Out_Port->ODR &= ~pmsb->Int_Out_Pin;
 8009ab0:	4b0b      	ldr	r3, [pc, #44]	@ (8009ae0 <Clear_Module_Bus_INT+0x54>)
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	685b      	ldr	r3, [r3, #4]
 8009ab6:	695a      	ldr	r2, [r3, #20]
 8009ab8:	4b09      	ldr	r3, [pc, #36]	@ (8009ae0 <Clear_Module_Bus_INT+0x54>)
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	891b      	ldrh	r3, [r3, #8]
 8009abe:	43db      	mvns	r3, r3
 8009ac0:	0019      	movs	r1, r3
 8009ac2:	4b07      	ldr	r3, [pc, #28]	@ (8009ae0 <Clear_Module_Bus_INT+0x54>)
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	685b      	ldr	r3, [r3, #4]
 8009ac8:	400a      	ands	r2, r1
 8009aca:	615a      	str	r2, [r3, #20]
		Module_Bus.Is_Module_Bus_INT_Set = false;
 8009acc:	4b03      	ldr	r3, [pc, #12]	@ (8009adc <Clear_Module_Bus_INT+0x50>)
 8009ace:	2200      	movs	r2, #0
 8009ad0:	715a      	strb	r2, [r3, #5]
 8009ad2:	e000      	b.n	8009ad6 <Clear_Module_Bus_INT+0x4a>
		return;
 8009ad4:	46c0      	nop			@ (mov r8, r8)
//		aci_print("\r\nClear_Module_Bus_INT\r\n");
	}
}
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bd80      	pop	{r7, pc}
 8009ada:	46c0      	nop			@ (mov r8, r8)
 8009adc:	20000ad0 	.word	0x20000ad0
 8009ae0:	20000afc 	.word	0x20000afc

08009ae4 <I2C_Data_Received_Callback>:
	}
}


void I2C_Data_Received_Callback(MODULE_BUS_PACKET * packet)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b084      	sub	sp, #16
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
	}
	printf("\r\n<RX>-----------------------------------------------<RX>\r\n");
#endif
	// Check there were no errors
	// Calculate the CRC over the entire packet and if the result is zero then no bit errors have occured.
	if(Get_CRC8(packet->Raw_Data, packet->Formatted_Data.Packet_Header.Formatted_Packet_Header.Data_Length + PACKET_HEADER_SIZE + 1) == 0)
 8009aec:	687a      	ldr	r2, [r7, #4]
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	78db      	ldrb	r3, [r3, #3]
 8009af2:	3305      	adds	r3, #5
 8009af4:	b29b      	uxth	r3, r3
 8009af6:	0019      	movs	r1, r3
 8009af8:	0010      	movs	r0, r2
 8009afa:	f001 f8ef 	bl	800acdc <Get_CRC8>
 8009afe:	1e03      	subs	r3, r0, #0
 8009b00:	d11e      	bne.n	8009b40 <I2C_Data_Received_Callback+0x5c>
	{
		// Create the new packet
		MODULE_BUS_RX_PACKET * new_packet = (MODULE_BUS_RX_PACKET *)pmdMalloc(sizeof(MODULE_BUS_RX_PACKET));
 8009b02:	2330      	movs	r3, #48	@ 0x30
 8009b04:	33ff      	adds	r3, #255	@ 0xff
 8009b06:	2200      	movs	r2, #0
 8009b08:	0019      	movs	r1, r3
 8009b0a:	20ff      	movs	r0, #255	@ 0xff
 8009b0c:	f001 f860 	bl	800abd0 <dbg_malloc>
 8009b10:	0003      	movs	r3, r0
 8009b12:	60fb      	str	r3, [r7, #12]

		// Save the packet
		memcpy(new_packet->RX_Packet.Raw_Data,packet->Raw_Data, I2C_MSG_MAX_SIZE);
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	6879      	ldr	r1, [r7, #4]
 8009b18:	22ff      	movs	r2, #255	@ 0xff
 8009b1a:	0018      	movs	r0, r3
 8009b1c:	f002 fb9f 	bl	800c25e <memcpy>

		// Is the command a module bus command
		if(IsValidModuleCommand(&new_packet->RX_Packet.Formatted_Data.Packet_Header))
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	0018      	movs	r0, r3
 8009b24:	f7ff fde7 	bl	80096f6 <IsValidModuleCommand>
 8009b28:	1e03      	subs	r3, r0, #0
 8009b2a:	d004      	beq.n	8009b36 <I2C_Data_Received_Callback+0x52>
		{
			Parser_Module_Command(new_packet);
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	0018      	movs	r0, r3
 8009b30:	f7ff fd2e 	bl	8009590 <Parser_Module_Command>
	}
	else
	{
		printf("\r\nFailed CRC check!\r\n");
	}
}
 8009b34:	e008      	b.n	8009b48 <I2C_Data_Received_Callback+0x64>
			Module_Bus_Rx_Callback(new_packet);
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	0018      	movs	r0, r3
 8009b3a:	f7f7 fe53 	bl	80017e4 <Module_Bus_Rx_Callback>
}
 8009b3e:	e003      	b.n	8009b48 <I2C_Data_Received_Callback+0x64>
		printf("\r\nFailed CRC check!\r\n");
 8009b40:	4b03      	ldr	r3, [pc, #12]	@ (8009b50 <I2C_Data_Received_Callback+0x6c>)
 8009b42:	0018      	movs	r0, r3
 8009b44:	f001 fb3c 	bl	800b1c0 <puts>
}
 8009b48:	46c0      	nop			@ (mov r8, r8)
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	b004      	add	sp, #16
 8009b4e:	bd80      	pop	{r7, pc}
 8009b50:	0800dc7c 	.word	0x0800dc7c

08009b54 <Send_Enum_Request_Message>:
{
	MsgQ_Purge(&TX_Que);
}

void Send_Enum_Request_Message(void)
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b084      	sub	sp, #16
 8009b58:	af02      	add	r7, sp, #8
	MODULE_BUS_PACKET * pkt = Create_Module_Bus_Packet(CommonModCmd_Enum_Success, 0x01, 0x01, 0, (unsigned char*)NULL);
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	9300      	str	r3, [sp, #0]
 8009b5e:	2300      	movs	r3, #0
 8009b60:	2201      	movs	r2, #1
 8009b62:	2101      	movs	r1, #1
 8009b64:	2005      	movs	r0, #5
 8009b66:	f000 f80b 	bl	8009b80 <Create_Module_Bus_Packet>
 8009b6a:	0003      	movs	r3, r0
 8009b6c:	607b      	str	r3, [r7, #4]
	Module_Bus_Immediate_Send(pkt, 1);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	2101      	movs	r1, #1
 8009b72:	0018      	movs	r0, r3
 8009b74:	f7ff fef8 	bl	8009968 <Module_Bus_Immediate_Send>
}
 8009b78:	46c0      	nop			@ (mov r8, r8)
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	b002      	add	sp, #8
 8009b7e:	bd80      	pop	{r7, pc}

08009b80 <Create_Module_Bus_Packet>:
	uint8_t pkt_total_size_for_crc = packet->Formatted_Data.Packet_Header.Formatted_Packet_Header.Data_Length + PACKET_HEADER_SIZE;
	packet->Raw_Data[pkt_total_size_for_crc] = Get_CRC8(packet->Raw_Data, pkt_total_size_for_crc);
}

MODULE_BUS_PACKET * Create_Module_Bus_Packet(unsigned char command, unsigned char packet_number, unsigned char packet_total, unsigned char data_length, unsigned char *data)
{
 8009b80:	b5b0      	push	{r4, r5, r7, lr}
 8009b82:	b084      	sub	sp, #16
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	0005      	movs	r5, r0
 8009b88:	000c      	movs	r4, r1
 8009b8a:	0010      	movs	r0, r2
 8009b8c:	0019      	movs	r1, r3
 8009b8e:	1dfb      	adds	r3, r7, #7
 8009b90:	1c2a      	adds	r2, r5, #0
 8009b92:	701a      	strb	r2, [r3, #0]
 8009b94:	1dbb      	adds	r3, r7, #6
 8009b96:	1c22      	adds	r2, r4, #0
 8009b98:	701a      	strb	r2, [r3, #0]
 8009b9a:	1d7b      	adds	r3, r7, #5
 8009b9c:	1c02      	adds	r2, r0, #0
 8009b9e:	701a      	strb	r2, [r3, #0]
 8009ba0:	1d3b      	adds	r3, r7, #4
 8009ba2:	1c0a      	adds	r2, r1, #0
 8009ba4:	701a      	strb	r2, [r3, #0]
	MODULE_BUS_PACKET * packet = (MODULE_BUS_PACKET *)pmdMalloc(PACKET_HEADER_SIZE + CRC_SIZE + data_length);
 8009ba6:	1d3b      	adds	r3, r7, #4
 8009ba8:	781b      	ldrb	r3, [r3, #0]
 8009baa:	3305      	adds	r3, #5
 8009bac:	2200      	movs	r2, #0
 8009bae:	2137      	movs	r1, #55	@ 0x37
 8009bb0:	0018      	movs	r0, r3
 8009bb2:	f001 f80d 	bl	800abd0 <dbg_malloc>
 8009bb6:	0003      	movs	r3, r0
 8009bb8:	60fb      	str	r3, [r7, #12]

	packet->Raw_Data[0] = command;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	1dfa      	adds	r2, r7, #7
 8009bbe:	7812      	ldrb	r2, [r2, #0]
 8009bc0:	701a      	strb	r2, [r3, #0]
	packet->Raw_Data[1] = packet_number;
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	1dba      	adds	r2, r7, #6
 8009bc6:	7812      	ldrb	r2, [r2, #0]
 8009bc8:	705a      	strb	r2, [r3, #1]
	packet->Raw_Data[2] = packet_total;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	1d7a      	adds	r2, r7, #5
 8009bce:	7812      	ldrb	r2, [r2, #0]
 8009bd0:	709a      	strb	r2, [r3, #2]
	packet->Raw_Data[3] = data_length;
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	1d3a      	adds	r2, r7, #4
 8009bd6:	7812      	ldrb	r2, [r2, #0]
 8009bd8:	70da      	strb	r2, [r3, #3]
	if(data_length && data != NULL)
 8009bda:	1d3b      	adds	r3, r7, #4
 8009bdc:	781b      	ldrb	r3, [r3, #0]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d00a      	beq.n	8009bf8 <Create_Module_Bus_Packet+0x78>
 8009be2:	6a3b      	ldr	r3, [r7, #32]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d007      	beq.n	8009bf8 <Create_Module_Bus_Packet+0x78>
	{
		memcpy(packet->Formatted_Data.Data, data, data_length);
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	1d18      	adds	r0, r3, #4
 8009bec:	1d3b      	adds	r3, r7, #4
 8009bee:	781a      	ldrb	r2, [r3, #0]
 8009bf0:	6a3b      	ldr	r3, [r7, #32]
 8009bf2:	0019      	movs	r1, r3
 8009bf4:	f002 fb33 	bl	800c25e <memcpy>
	}

	return packet;
 8009bf8:	68fb      	ldr	r3, [r7, #12]
}
 8009bfa:	0018      	movs	r0, r3
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	b004      	add	sp, #16
 8009c00:	bdb0      	pop	{r4, r5, r7, pc}

08009c02 <Module_Lib_EEPROM_Safe_Write>:
#include "Module_EEPROM.h"
#include "stm32l0xx_hal.h"
#include <stdio.h>
// Retry write until read-back matches
EEPROM_RETURN Module_Lib_EEPROM_Safe_Write(unsigned int address, unsigned char * data, unsigned int data_size)
{
 8009c02:	b590      	push	{r4, r7, lr}
 8009c04:	b087      	sub	sp, #28
 8009c06:	af00      	add	r7, sp, #0
 8009c08:	60f8      	str	r0, [r7, #12]
 8009c0a:	60b9      	str	r1, [r7, #8]
 8009c0c:	607a      	str	r2, [r7, #4]
	EEPROM_RETURN ret;
	uint8_t max_num_retries = 5;
 8009c0e:	2316      	movs	r3, #22
 8009c10:	18fb      	adds	r3, r7, r3
 8009c12:	2205      	movs	r2, #5
 8009c14:	701a      	strb	r2, [r3, #0]

	do
	{
		ret = Module_Lib_EEPROM_Write(address, data, data_size);
 8009c16:	2317      	movs	r3, #23
 8009c18:	18fc      	adds	r4, r7, r3
 8009c1a:	687a      	ldr	r2, [r7, #4]
 8009c1c:	68b9      	ldr	r1, [r7, #8]
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	0018      	movs	r0, r3
 8009c22:	f000 f823 	bl	8009c6c <Module_Lib_EEPROM_Write>
 8009c26:	0003      	movs	r3, r0
 8009c28:	7023      	strb	r3, [r4, #0]
	}while(memcmp((void*)address, (void*)data, data_size) && max_num_retries--);
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	687a      	ldr	r2, [r7, #4]
 8009c2e:	68b9      	ldr	r1, [r7, #8]
 8009c30:	0018      	movs	r0, r3
 8009c32:	f001 fbbd 	bl	800b3b0 <memcmp>
 8009c36:	1e03      	subs	r3, r0, #0
 8009c38:	d007      	beq.n	8009c4a <Module_Lib_EEPROM_Safe_Write+0x48>
 8009c3a:	2216      	movs	r2, #22
 8009c3c:	18bb      	adds	r3, r7, r2
 8009c3e:	781b      	ldrb	r3, [r3, #0]
 8009c40:	18ba      	adds	r2, r7, r2
 8009c42:	1e59      	subs	r1, r3, #1
 8009c44:	7011      	strb	r1, [r2, #0]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d1e5      	bne.n	8009c16 <Module_Lib_EEPROM_Safe_Write+0x14>

	if(max_num_retries == 0xFF)
 8009c4a:	2316      	movs	r3, #22
 8009c4c:	18fb      	adds	r3, r7, r3
 8009c4e:	781b      	ldrb	r3, [r3, #0]
 8009c50:	2bff      	cmp	r3, #255	@ 0xff
 8009c52:	d103      	bne.n	8009c5c <Module_Lib_EEPROM_Safe_Write+0x5a>
	{
		ret = eEEPROM_WRITE_FAILURE;
 8009c54:	2317      	movs	r3, #23
 8009c56:	18fb      	adds	r3, r7, r3
 8009c58:	2202      	movs	r2, #2
 8009c5a:	701a      	strb	r2, [r3, #0]
	}

	return ret;
 8009c5c:	2317      	movs	r3, #23
 8009c5e:	18fb      	adds	r3, r7, r3
 8009c60:	781b      	ldrb	r3, [r3, #0]
}
 8009c62:	0018      	movs	r0, r3
 8009c64:	46bd      	mov	sp, r7
 8009c66:	b007      	add	sp, #28
 8009c68:	bd90      	pop	{r4, r7, pc}
	...

08009c6c <Module_Lib_EEPROM_Write>:

// These functions are intended for the use of ModuleLib specific data
EEPROM_RETURN Module_Lib_EEPROM_Write(unsigned int address, unsigned char * data, unsigned int data_size)
{
 8009c6c:	b5b0      	push	{r4, r5, r7, lr}
 8009c6e:	b086      	sub	sp, #24
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	60f8      	str	r0, [r7, #12]
 8009c74:	60b9      	str	r1, [r7, #8]
 8009c76:	607a      	str	r2, [r7, #4]
	// Verify the address is in the address space
	if((address < MODULE_LIB_BASE_ADDRESS) || (address > MODULE_LIB_END_ADDRESS))
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	4a1f      	ldr	r2, [pc, #124]	@ (8009cf8 <Module_Lib_EEPROM_Write+0x8c>)
 8009c7c:	4293      	cmp	r3, r2
 8009c7e:	d903      	bls.n	8009c88 <Module_Lib_EEPROM_Write+0x1c>
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	4a1e      	ldr	r2, [pc, #120]	@ (8009cfc <Module_Lib_EEPROM_Write+0x90>)
 8009c84:	4293      	cmp	r3, r2
 8009c86:	d901      	bls.n	8009c8c <Module_Lib_EEPROM_Write+0x20>
		return eEEPROM_BAD_ADDRESS;
 8009c88:	2301      	movs	r3, #1
 8009c8a:	e031      	b.n	8009cf0 <Module_Lib_EEPROM_Write+0x84>

	// Verify that the data_size does not go outside the address space
	if((address + data_size) > MODULE_LIB_END_ADDRESS)
 8009c8c:	68fa      	ldr	r2, [r7, #12]
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	18d3      	adds	r3, r2, r3
 8009c92:	4a1a      	ldr	r2, [pc, #104]	@ (8009cfc <Module_Lib_EEPROM_Write+0x90>)
 8009c94:	4293      	cmp	r3, r2
 8009c96:	d901      	bls.n	8009c9c <Module_Lib_EEPROM_Write+0x30>
		return eEEPROM_BAD_ADDRESS;
 8009c98:	2301      	movs	r3, #1
 8009c9a:	e029      	b.n	8009cf0 <Module_Lib_EEPROM_Write+0x84>

	// Base address and data_size passed all checks, attempt to write the data
	HAL_StatusTypeDef ret;
	HAL_FLASHEx_DATAEEPROM_Unlock();
 8009c9c:	f7f9 fd38 	bl	8003710 <HAL_FLASHEx_DATAEEPROM_Unlock>

	int counter = 0;
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	617b      	str	r3, [r7, #20]
	for(; counter < data_size; counter++)
 8009ca4:	e015      	b.n	8009cd2 <Module_Lib_EEPROM_Write+0x66>
	{
		ret = HAL_FLASHEx_DATAEEPROM_Program(TYPEPROGRAMDATA_BYTE,address + counter,data[counter]);
 8009ca6:	697a      	ldr	r2, [r7, #20]
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	18d1      	adds	r1, r2, r3
 8009cac:	697b      	ldr	r3, [r7, #20]
 8009cae:	68ba      	ldr	r2, [r7, #8]
 8009cb0:	18d3      	adds	r3, r2, r3
 8009cb2:	781b      	ldrb	r3, [r3, #0]
 8009cb4:	2513      	movs	r5, #19
 8009cb6:	197c      	adds	r4, r7, r5
 8009cb8:	001a      	movs	r2, r3
 8009cba:	2000      	movs	r0, #0
 8009cbc:	f7f9 fd64 	bl	8003788 <HAL_FLASHEx_DATAEEPROM_Program>
 8009cc0:	0003      	movs	r3, r0
 8009cc2:	7023      	strb	r3, [r4, #0]

		// If there was an error writing, break and alert the calling function
		if(ret != HAL_OK)
 8009cc4:	197b      	adds	r3, r7, r5
 8009cc6:	781b      	ldrb	r3, [r3, #0]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d107      	bne.n	8009cdc <Module_Lib_EEPROM_Write+0x70>
	for(; counter < data_size; counter++)
 8009ccc:	697b      	ldr	r3, [r7, #20]
 8009cce:	3301      	adds	r3, #1
 8009cd0:	617b      	str	r3, [r7, #20]
 8009cd2:	697b      	ldr	r3, [r7, #20]
 8009cd4:	687a      	ldr	r2, [r7, #4]
 8009cd6:	429a      	cmp	r2, r3
 8009cd8:	d8e5      	bhi.n	8009ca6 <Module_Lib_EEPROM_Write+0x3a>
 8009cda:	e000      	b.n	8009cde <Module_Lib_EEPROM_Write+0x72>
			break;
 8009cdc:	46c0      	nop			@ (mov r8, r8)
	}

	HAL_FLASHEx_DATAEEPROM_Lock();
 8009cde:	f7f9 fd45 	bl	800376c <HAL_FLASHEx_DATAEEPROM_Lock>

	// If counter does not equal data_size then we were not able to write all the data
	if(counter != data_size)
 8009ce2:	697b      	ldr	r3, [r7, #20]
 8009ce4:	687a      	ldr	r2, [r7, #4]
 8009ce6:	429a      	cmp	r2, r3
 8009ce8:	d001      	beq.n	8009cee <Module_Lib_EEPROM_Write+0x82>
		return eEEPROM_WRITE_FAILURE;
 8009cea:	2302      	movs	r3, #2
 8009cec:	e000      	b.n	8009cf0 <Module_Lib_EEPROM_Write+0x84>

	// Everything was successful
	return eEEPROM_SUCCESS;
 8009cee:	2300      	movs	r3, #0
}
 8009cf0:	0018      	movs	r0, r3
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	b006      	add	sp, #24
 8009cf6:	bdb0      	pop	{r4, r5, r7, pc}
 8009cf8:	0807ffff 	.word	0x0807ffff
 8009cfc:	080800ff 	.word	0x080800ff

08009d00 <Module_Lib_EEPROM_Read>:

EEPROM_RETURN Module_Lib_EEPROM_Read(unsigned int address, unsigned char * data, unsigned int data_size)
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b086      	sub	sp, #24
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	60f8      	str	r0, [r7, #12]
 8009d08:	60b9      	str	r1, [r7, #8]
 8009d0a:	607a      	str	r2, [r7, #4]
	// Verify the address is in the address space
	if((address < MODULE_LIB_BASE_ADDRESS) || (address > MODULE_LIB_END_ADDRESS))
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	4a15      	ldr	r2, [pc, #84]	@ (8009d64 <Module_Lib_EEPROM_Read+0x64>)
 8009d10:	4293      	cmp	r3, r2
 8009d12:	d903      	bls.n	8009d1c <Module_Lib_EEPROM_Read+0x1c>
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	4a14      	ldr	r2, [pc, #80]	@ (8009d68 <Module_Lib_EEPROM_Read+0x68>)
 8009d18:	4293      	cmp	r3, r2
 8009d1a:	d901      	bls.n	8009d20 <Module_Lib_EEPROM_Read+0x20>
		return eEEPROM_BAD_ADDRESS;
 8009d1c:	2301      	movs	r3, #1
 8009d1e:	e01c      	b.n	8009d5a <Module_Lib_EEPROM_Read+0x5a>

	// Verify that the data_size does not go outside the address space
	if((address + data_size) > MODULE_LIB_END_ADDRESS)
 8009d20:	68fa      	ldr	r2, [r7, #12]
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	18d3      	adds	r3, r2, r3
 8009d26:	4a10      	ldr	r2, [pc, #64]	@ (8009d68 <Module_Lib_EEPROM_Read+0x68>)
 8009d28:	4293      	cmp	r3, r2
 8009d2a:	d901      	bls.n	8009d30 <Module_Lib_EEPROM_Read+0x30>
		return eEEPROM_BAD_ADDRESS;
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	e014      	b.n	8009d5a <Module_Lib_EEPROM_Read+0x5a>

	// Base address and data_size passed all checks, attempt to read the data
	int counter = 0;
 8009d30:	2300      	movs	r3, #0
 8009d32:	617b      	str	r3, [r7, #20]
	for(; counter < data_size; counter++)
 8009d34:	e00c      	b.n	8009d50 <Module_Lib_EEPROM_Read+0x50>
		data[counter] = *(__IO uint8_t*)(address + counter);
 8009d36:	697a      	ldr	r2, [r7, #20]
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	18d3      	adds	r3, r2, r3
 8009d3c:	0019      	movs	r1, r3
 8009d3e:	697b      	ldr	r3, [r7, #20]
 8009d40:	68ba      	ldr	r2, [r7, #8]
 8009d42:	18d3      	adds	r3, r2, r3
 8009d44:	780a      	ldrb	r2, [r1, #0]
 8009d46:	b2d2      	uxtb	r2, r2
 8009d48:	701a      	strb	r2, [r3, #0]
	for(; counter < data_size; counter++)
 8009d4a:	697b      	ldr	r3, [r7, #20]
 8009d4c:	3301      	adds	r3, #1
 8009d4e:	617b      	str	r3, [r7, #20]
 8009d50:	697b      	ldr	r3, [r7, #20]
 8009d52:	687a      	ldr	r2, [r7, #4]
 8009d54:	429a      	cmp	r2, r3
 8009d56:	d8ee      	bhi.n	8009d36 <Module_Lib_EEPROM_Read+0x36>

	// Everything was successful
	return eEEPROM_SUCCESS;
 8009d58:	2300      	movs	r3, #0
}
 8009d5a:	0018      	movs	r0, r3
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	b006      	add	sp, #24
 8009d60:	bd80      	pop	{r7, pc}
 8009d62:	46c0      	nop			@ (mov r8, r8)
 8009d64:	0807ffff 	.word	0x0807ffff
 8009d68:	080800ff 	.word	0x080800ff

08009d6c <Init_Module_I2C_Driver>:

#define I2C_SLAVE_BUS_TIMEOUT_MS		500


void Init_Module_I2C_Driver(void)
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	af00      	add	r7, sp, #0
	Module_I2C_Bus.Current_State = eMODULE_I2C_IDLE;
 8009d70:	4b05      	ldr	r3, [pc, #20]	@ (8009d88 <Init_Module_I2C_Driver+0x1c>)
 8009d72:	2200      	movs	r2, #0
 8009d74:	705a      	strb	r2, [r3, #1]
	Last_I2C_State_Change_Time = HAL_GetTick();
 8009d76:	f7f8 ff15 	bl	8002ba4 <HAL_GetTick>
 8009d7a:	0002      	movs	r2, r0
 8009d7c:	4b03      	ldr	r3, [pc, #12]	@ (8009d8c <Init_Module_I2C_Driver+0x20>)
 8009d7e:	601a      	str	r2, [r3, #0]
}
 8009d80:	46c0      	nop			@ (mov r8, r8)
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bd80      	pop	{r7, pc}
 8009d86:	46c0      	nop			@ (mov r8, r8)
 8009d88:	20000b00 	.word	0x20000b00
 8009d8c:	20000e00 	.word	0x20000e00

08009d90 <MsgQ_Init>:
#include <string.h>
#include "MsgQueue.h"


void MsgQ_Init(MSG_QUEUE *pq, uint8_t MaxNumPackets)
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b082      	sub	sp, #8
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
 8009d98:	000a      	movs	r2, r1
 8009d9a:	1cfb      	adds	r3, r7, #3
 8009d9c:	701a      	strb	r2, [r3, #0]
	pq->Max_Packet_Count = MaxNumPackets;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	1cfa      	adds	r2, r7, #3
 8009da2:	7812      	ldrb	r2, [r2, #0]
 8009da4:	701a      	strb	r2, [r3, #0]
	pq->Packet_Count = 0;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	2200      	movs	r2, #0
 8009daa:	705a      	strb	r2, [r3, #1]
	pq->Front = NULL;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2200      	movs	r2, #0
 8009db0:	605a      	str	r2, [r3, #4]
	pq->Rear = NULL;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	2200      	movs	r2, #0
 8009db6:	609a      	str	r2, [r3, #8]
	pq->NodeBuf = (MSG_QUEUE_NODE*)pmdMalloc(MaxNumPackets * sizeof(MSG_QUEUE_NODE));
 8009db8:	1cfb      	adds	r3, r7, #3
 8009dba:	781a      	ldrb	r2, [r3, #0]
 8009dbc:	0013      	movs	r3, r2
 8009dbe:	005b      	lsls	r3, r3, #1
 8009dc0:	189b      	adds	r3, r3, r2
 8009dc2:	009b      	lsls	r3, r3, #2
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	211c      	movs	r1, #28
 8009dc8:	0018      	movs	r0, r3
 8009dca:	f000 ff01 	bl	800abd0 <dbg_malloc>
 8009dce:	0002      	movs	r2, r0
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	60da      	str	r2, [r3, #12]
	memset((uint8_t*)pq->NodeBuf, 0, MaxNumPackets * sizeof(MSG_QUEUE_NODE));
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	68d8      	ldr	r0, [r3, #12]
 8009dd8:	1cfb      	adds	r3, r7, #3
 8009dda:	781a      	ldrb	r2, [r3, #0]
 8009ddc:	0013      	movs	r3, r2
 8009dde:	005b      	lsls	r3, r3, #1
 8009de0:	189b      	adds	r3, r3, r2
 8009de2:	009b      	lsls	r3, r3, #2
 8009de4:	001a      	movs	r2, r3
 8009de6:	2100      	movs	r1, #0
 8009de8:	f001 faf0 	bl	800b3cc <memset>
}
 8009dec:	46c0      	nop			@ (mov r8, r8)
 8009dee:	46bd      	mov	sp, r7
 8009df0:	b002      	add	sp, #8
 8009df2:	bd80      	pop	{r7, pc}

08009df4 <GetEmptyNode>:

static MSG_QUEUE_NODE *GetEmptyNode(MSG_QUEUE *pq)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b084      	sub	sp, #16
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
	MSG_QUEUE_NODE *node = NULL;
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	60fb      	str	r3, [r7, #12]

	CritSect_Push();
 8009e00:	f000 ffa8 	bl	800ad54 <CritSect_Push>

	for(uint8_t i=0; i<pq->Max_Packet_Count; ++i)
 8009e04:	230b      	movs	r3, #11
 8009e06:	18fb      	adds	r3, r7, r3
 8009e08:	2200      	movs	r2, #0
 8009e0a:	701a      	strb	r2, [r3, #0]
 8009e0c:	e01d      	b.n	8009e4a <GetEmptyNode+0x56>
	{
		if(pq->NodeBuf[i].Packet == NULL)
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	68d9      	ldr	r1, [r3, #12]
 8009e12:	200b      	movs	r0, #11
 8009e14:	183b      	adds	r3, r7, r0
 8009e16:	781a      	ldrb	r2, [r3, #0]
 8009e18:	0013      	movs	r3, r2
 8009e1a:	005b      	lsls	r3, r3, #1
 8009e1c:	189b      	adds	r3, r3, r2
 8009e1e:	009b      	lsls	r3, r3, #2
 8009e20:	18cb      	adds	r3, r1, r3
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d10a      	bne.n	8009e3e <GetEmptyNode+0x4a>
		{
			node = &pq->NodeBuf[i];
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	68d9      	ldr	r1, [r3, #12]
 8009e2c:	183b      	adds	r3, r7, r0
 8009e2e:	781a      	ldrb	r2, [r3, #0]
 8009e30:	0013      	movs	r3, r2
 8009e32:	005b      	lsls	r3, r3, #1
 8009e34:	189b      	adds	r3, r3, r2
 8009e36:	009b      	lsls	r3, r3, #2
 8009e38:	18cb      	adds	r3, r1, r3
 8009e3a:	60fb      	str	r3, [r7, #12]
			break;
 8009e3c:	e00c      	b.n	8009e58 <GetEmptyNode+0x64>
	for(uint8_t i=0; i<pq->Max_Packet_Count; ++i)
 8009e3e:	220b      	movs	r2, #11
 8009e40:	18bb      	adds	r3, r7, r2
 8009e42:	18ba      	adds	r2, r7, r2
 8009e44:	7812      	ldrb	r2, [r2, #0]
 8009e46:	3201      	adds	r2, #1
 8009e48:	701a      	strb	r2, [r3, #0]
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	781b      	ldrb	r3, [r3, #0]
 8009e4e:	220b      	movs	r2, #11
 8009e50:	18ba      	adds	r2, r7, r2
 8009e52:	7812      	ldrb	r2, [r2, #0]
 8009e54:	429a      	cmp	r2, r3
 8009e56:	d3da      	bcc.n	8009e0e <GetEmptyNode+0x1a>
		}
	}

	CritSect_Pop();
 8009e58:	f000 ff98 	bl	800ad8c <CritSect_Pop>

	return node;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
}
 8009e5e:	0018      	movs	r0, r3
 8009e60:	46bd      	mov	sp, r7
 8009e62:	b004      	add	sp, #16
 8009e64:	bd80      	pop	{r7, pc}

08009e66 <FreeNode>:

static void FreeNode(MSG_QUEUE *pq, MSG_QUEUE_NODE *node)
{
 8009e66:	b580      	push	{r7, lr}
 8009e68:	b082      	sub	sp, #8
 8009e6a:	af00      	add	r7, sp, #0
 8009e6c:	6078      	str	r0, [r7, #4]
 8009e6e:	6039      	str	r1, [r7, #0]
	CritSect_Push();
 8009e70:	f000 ff70 	bl	800ad54 <CritSect_Push>
	node->Packet = NULL;
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	2200      	movs	r2, #0
 8009e78:	601a      	str	r2, [r3, #0]
	node->Next = NULL;
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	605a      	str	r2, [r3, #4]
	node->Prev = NULL;
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	2200      	movs	r2, #0
 8009e84:	609a      	str	r2, [r3, #8]
	CritSect_Pop();
 8009e86:	f000 ff81 	bl	800ad8c <CritSect_Pop>
}
 8009e8a:	46c0      	nop			@ (mov r8, r8)
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	b002      	add	sp, #8
 8009e90:	bd80      	pop	{r7, pc}

08009e92 <MsgQ_Push>:

/***********************************************************************************
 * This function must never be called from an interrupt handler!
 ***********************************************************************************/
void MsgQ_Push(MSG_QUEUE *pq, MODULE_BUS_PACKET *packet)
{
 8009e92:	b580      	push	{r7, lr}
 8009e94:	b084      	sub	sp, #16
 8009e96:	af00      	add	r7, sp, #0
 8009e98:	6078      	str	r0, [r7, #4]
 8009e9a:	6039      	str	r1, [r7, #0]
	CritSect_Push();
 8009e9c:	f000 ff5a 	bl	800ad54 <CritSect_Push>
	while(pq->Packet_Count >= pq->Max_Packet_Count)
 8009ea0:	e00e      	b.n	8009ec0 <MsgQ_Push+0x2e>
	{
		// Pop the oldest packets off the front of the queue and dump them
		MODULE_BUS_PACKET *expkt = MsgQ_Pop(pq);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	0018      	movs	r0, r3
 8009ea6:	f000 f8cb 	bl	800a040 <MsgQ_Pop>
 8009eaa:	0003      	movs	r3, r0
 8009eac:	60bb      	str	r3, [r7, #8]

		if(expkt)
 8009eae:	68bb      	ldr	r3, [r7, #8]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d005      	beq.n	8009ec0 <MsgQ_Push+0x2e>
		{
			pmdFree(expkt);
 8009eb4:	68bb      	ldr	r3, [r7, #8]
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	214a      	movs	r1, #74	@ 0x4a
 8009eba:	0018      	movs	r0, r3
 8009ebc:	f000 feca 	bl	800ac54 <dbg_free>
	while(pq->Packet_Count >= pq->Max_Packet_Count)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	785a      	ldrb	r2, [r3, #1]
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	781b      	ldrb	r3, [r3, #0]
 8009ec8:	429a      	cmp	r2, r3
 8009eca:	d2ea      	bcs.n	8009ea2 <MsgQ_Push+0x10>
		}
	}

	// Create queue node for packet
	MSG_QUEUE_NODE * node = GetEmptyNode(pq);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	0018      	movs	r0, r3
 8009ed0:	f7ff ff90 	bl	8009df4 <GetEmptyNode>
 8009ed4:	0003      	movs	r3, r0
 8009ed6:	60fb      	str	r3, [r7, #12]
	node->Packet = packet;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	683a      	ldr	r2, [r7, #0]
 8009edc:	601a      	str	r2, [r3, #0]
	node->Next = NULL;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	605a      	str	r2, [r3, #4]
	node->Prev = NULL;
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	609a      	str	r2, [r3, #8]

	//Insert the packet into queue
	if(pq->Packet_Count == 0)
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	785b      	ldrb	r3, [r3, #1]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d109      	bne.n	8009f06 <MsgQ_Push+0x74>
	{
		pq->Packet_Count = 1;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	2201      	movs	r2, #1
 8009ef6:	705a      	strb	r2, [r3, #1]
		pq->Front = node;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	68fa      	ldr	r2, [r7, #12]
 8009efc:	605a      	str	r2, [r3, #4]
		pq->Rear = node;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	68fa      	ldr	r2, [r7, #12]
 8009f02:	609a      	str	r2, [r3, #8]
 8009f04:	e010      	b.n	8009f28 <MsgQ_Push+0x96>
	}
	else
	{
		++pq->Packet_Count;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	785b      	ldrb	r3, [r3, #1]
 8009f0a:	3301      	adds	r3, #1
 8009f0c:	b2da      	uxtb	r2, r3
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	705a      	strb	r2, [r3, #1]
		node->Prev = (struct MSG_QUEUE_NODE*)pq->Rear;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	689a      	ldr	r2, [r3, #8]
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	609a      	str	r2, [r3, #8]
		pq->Rear->Next = (struct MSG_QUEUE_NODE*)node;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	689b      	ldr	r3, [r3, #8]
 8009f1e:	68fa      	ldr	r2, [r7, #12]
 8009f20:	605a      	str	r2, [r3, #4]
		pq->Rear = node;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	68fa      	ldr	r2, [r7, #12]
 8009f26:	609a      	str	r2, [r3, #8]
	}
	CritSect_Pop();
 8009f28:	f000 ff30 	bl	800ad8c <CritSect_Pop>
//	__io_putchar('+');

//	printf("\r\nPush() Num Packets In Queue:  %d\r\n", pq->Packet_Count);
//	MsgQ_List_Queue_Packets(pq);
#endif
}
 8009f2c:	46c0      	nop			@ (mov r8, r8)
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	b004      	add	sp, #16
 8009f32:	bd80      	pop	{r7, pc}

08009f34 <MsgQ_PushFront>:

/***********************************************************************************
 * This function must never be called from an interrupt handler!
 ***********************************************************************************/
void MsgQ_PushFront(MSG_QUEUE *pq, MODULE_BUS_PACKET *packet)
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b084      	sub	sp, #16
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
 8009f3c:	6039      	str	r1, [r7, #0]
	CritSect_Push();
 8009f3e:	f000 ff09 	bl	800ad54 <CritSect_Push>
	while(pq->Packet_Count >= pq->Max_Packet_Count)
 8009f42:	e00e      	b.n	8009f62 <MsgQ_PushFront+0x2e>
	{
		// Pop the oldest packets off the front of the queue and dump them
		MODULE_BUS_PACKET *expkt = MsgQ_Pop(pq);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	0018      	movs	r0, r3
 8009f48:	f000 f87a 	bl	800a040 <MsgQ_Pop>
 8009f4c:	0003      	movs	r3, r0
 8009f4e:	60bb      	str	r3, [r7, #8]

		if(expkt)
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d005      	beq.n	8009f62 <MsgQ_PushFront+0x2e>
		{
			pmdFree(expkt);
 8009f56:	68bb      	ldr	r3, [r7, #8]
 8009f58:	2200      	movs	r2, #0
 8009f5a:	2179      	movs	r1, #121	@ 0x79
 8009f5c:	0018      	movs	r0, r3
 8009f5e:	f000 fe79 	bl	800ac54 <dbg_free>
	while(pq->Packet_Count >= pq->Max_Packet_Count)
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	785a      	ldrb	r2, [r3, #1]
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	781b      	ldrb	r3, [r3, #0]
 8009f6a:	429a      	cmp	r2, r3
 8009f6c:	d2ea      	bcs.n	8009f44 <MsgQ_PushFront+0x10>
		}
	}

	// Create queue node for packet
	MSG_QUEUE_NODE * node = GetEmptyNode(pq);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	0018      	movs	r0, r3
 8009f72:	f7ff ff3f 	bl	8009df4 <GetEmptyNode>
 8009f76:	0003      	movs	r3, r0
 8009f78:	60fb      	str	r3, [r7, #12]
	node->Packet = packet;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	683a      	ldr	r2, [r7, #0]
 8009f7e:	601a      	str	r2, [r3, #0]
	node->Next = NULL;
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	2200      	movs	r2, #0
 8009f84:	605a      	str	r2, [r3, #4]
	node->Prev = NULL;
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	2200      	movs	r2, #0
 8009f8a:	609a      	str	r2, [r3, #8]

	//Insert the packet into front of queue
	if(pq->Packet_Count == 0)
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	785b      	ldrb	r3, [r3, #1]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d109      	bne.n	8009fa8 <MsgQ_PushFront+0x74>
	{
		pq->Packet_Count = 1;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2201      	movs	r2, #1
 8009f98:	705a      	strb	r2, [r3, #1]
		pq->Front = node;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	68fa      	ldr	r2, [r7, #12]
 8009f9e:	605a      	str	r2, [r3, #4]
		pq->Rear = node;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	68fa      	ldr	r2, [r7, #12]
 8009fa4:	609a      	str	r2, [r3, #8]
 8009fa6:	e010      	b.n	8009fca <MsgQ_PushFront+0x96>
	}
	else
	{
		++pq->Packet_Count;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	785b      	ldrb	r3, [r3, #1]
 8009fac:	3301      	adds	r3, #1
 8009fae:	b2da      	uxtb	r2, r3
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	705a      	strb	r2, [r3, #1]
		node->Next = (struct MSG_QUEUE_NODE*)pq->Front;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	685a      	ldr	r2, [r3, #4]
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	605a      	str	r2, [r3, #4]
		pq->Front->Prev = (struct MSG_QUEUE_NODE*)node;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	685b      	ldr	r3, [r3, #4]
 8009fc0:	68fa      	ldr	r2, [r7, #12]
 8009fc2:	609a      	str	r2, [r3, #8]
		pq->Front = node;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	68fa      	ldr	r2, [r7, #12]
 8009fc8:	605a      	str	r2, [r3, #4]
	}
	CritSect_Pop();
 8009fca:	f000 fedf 	bl	800ad8c <CritSect_Pop>
//	PS('+');

//	printf("\r\nPushFront() Num Packets In Queue:  %d\r\n", pq->Packet_Count);
//	MsgQ_List_Queue_Packets(pq);
#endif
}
 8009fce:	46c0      	nop			@ (mov r8, r8)
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	b004      	add	sp, #16
 8009fd4:	bd80      	pop	{r7, pc}
	...

08009fd8 <MsgQ_List_Queue_Packets>:

/***********************************************************************************
 * This function must never be called from an interrupt handler!
 ***********************************************************************************/
void MsgQ_List_Queue_Packets(MSG_QUEUE *pq)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b084      	sub	sp, #16
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
	printf("Queue Front\r\n--------------\r\n");
 8009fe0:	4b14      	ldr	r3, [pc, #80]	@ (800a034 <MsgQ_List_Queue_Packets+0x5c>)
 8009fe2:	0018      	movs	r0, r3
 8009fe4:	f001 f8ec 	bl	800b1c0 <puts>

	MSG_QUEUE_NODE *node = pq->Front;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	685b      	ldr	r3, [r3, #4]
 8009fec:	60fb      	str	r3, [r7, #12]
	uint8_t i=0;
 8009fee:	230b      	movs	r3, #11
 8009ff0:	18fb      	adds	r3, r7, r3
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	701a      	strb	r2, [r3, #0]

	while(node)
 8009ff6:	e011      	b.n	800a01c <MsgQ_List_Queue_Packets+0x44>
	{
		printf("Msg %2d %d bytes\r\n", i++, node->Packet->Formatted_Data.Packet_Header.Formatted_Packet_Header.Data_Length);
 8009ff8:	220b      	movs	r2, #11
 8009ffa:	18bb      	adds	r3, r7, r2
 8009ffc:	781b      	ldrb	r3, [r3, #0]
 8009ffe:	18ba      	adds	r2, r7, r2
 800a000:	1c59      	adds	r1, r3, #1
 800a002:	7011      	strb	r1, [r2, #0]
 800a004:	0019      	movs	r1, r3
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	78db      	ldrb	r3, [r3, #3]
 800a00c:	001a      	movs	r2, r3
 800a00e:	4b0a      	ldr	r3, [pc, #40]	@ (800a038 <MsgQ_List_Queue_Packets+0x60>)
 800a010:	0018      	movs	r0, r3
 800a012:	f001 f865 	bl	800b0e0 <iprintf>
		node = (MSG_QUEUE_NODE *)node->Next;
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	685b      	ldr	r3, [r3, #4]
 800a01a:	60fb      	str	r3, [r7, #12]
	while(node)
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d1ea      	bne.n	8009ff8 <MsgQ_List_Queue_Packets+0x20>
	}

	printf("--------------\r\n");
 800a022:	4b06      	ldr	r3, [pc, #24]	@ (800a03c <MsgQ_List_Queue_Packets+0x64>)
 800a024:	0018      	movs	r0, r3
 800a026:	f001 f8cb 	bl	800b1c0 <puts>
}
 800a02a:	46c0      	nop			@ (mov r8, r8)
 800a02c:	46bd      	mov	sp, r7
 800a02e:	b004      	add	sp, #16
 800a030:	bd80      	pop	{r7, pc}
 800a032:	46c0      	nop			@ (mov r8, r8)
 800a034:	0800dc94 	.word	0x0800dc94
 800a038:	0800dcb4 	.word	0x0800dcb4
 800a03c:	0800dcc8 	.word	0x0800dcc8

0800a040 <MsgQ_Pop>:

/***********************************************************************************
 * This function may be called from an interrupt handler
 ***********************************************************************************/
MODULE_BUS_PACKET *MsgQ_Pop(MSG_QUEUE *pq)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b084      	sub	sp, #16
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
	MSG_QUEUE_NODE * node = NULL;
 800a048:	2300      	movs	r3, #0
 800a04a:	60fb      	str	r3, [r7, #12]
	MODULE_BUS_PACKET *Packet = NULL;
 800a04c:	2300      	movs	r3, #0
 800a04e:	60bb      	str	r3, [r7, #8]

	CritSect_Push();
 800a050:	f000 fe80 	bl	800ad54 <CritSect_Push>
	if(pq->Packet_Count != 0)
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	785b      	ldrb	r3, [r3, #1]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d01f      	beq.n	800a09c <MsgQ_Pop+0x5c>
	{
		node = pq->Front;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	685b      	ldr	r3, [r3, #4]
 800a060:	60fb      	str	r3, [r7, #12]
		if(pq->Packet_Count == 1)
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	785b      	ldrb	r3, [r3, #1]
 800a066:	2b01      	cmp	r3, #1
 800a068:	d109      	bne.n	800a07e <MsgQ_Pop+0x3e>
		{
			pq->Packet_Count = 0;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	2200      	movs	r2, #0
 800a06e:	705a      	strb	r2, [r3, #1]
			pq->Front = NULL;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2200      	movs	r2, #0
 800a074:	605a      	str	r2, [r3, #4]
			pq->Rear = NULL;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	2200      	movs	r2, #0
 800a07a:	609a      	str	r2, [r3, #8]
 800a07c:	e00e      	b.n	800a09c <MsgQ_Pop+0x5c>
		}
		else
		{
			--pq->Packet_Count;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	785b      	ldrb	r3, [r3, #1]
 800a082:	3b01      	subs	r3, #1
 800a084:	b2da      	uxtb	r2, r3
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	705a      	strb	r2, [r3, #1]
			pq->Front = (MSG_QUEUE_NODE *)pq->Front->Next;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	685b      	ldr	r3, [r3, #4]
 800a08e:	685a      	ldr	r2, [r3, #4]
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	605a      	str	r2, [r3, #4]
			pq->Front->Prev = NULL;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	685b      	ldr	r3, [r3, #4]
 800a098:	2200      	movs	r2, #0
 800a09a:	609a      	str	r2, [r3, #8]
		}
	}

	if(node)
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d008      	beq.n	800a0b4 <MsgQ_Pop+0x74>
	{
		Packet = node->Packet;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	60bb      	str	r3, [r7, #8]
		FreeNode(pq, node);
 800a0a8:	68fa      	ldr	r2, [r7, #12]
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	0011      	movs	r1, r2
 800a0ae:	0018      	movs	r0, r3
 800a0b0:	f7ff fed9 	bl	8009e66 <FreeNode>
	}
	CritSect_Pop();
 800a0b4:	f000 fe6a 	bl	800ad8c <CritSect_Pop>

	return Packet;
 800a0b8:	68bb      	ldr	r3, [r7, #8]
}
 800a0ba:	0018      	movs	r0, r3
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	b004      	add	sp, #16
 800a0c0:	bd80      	pop	{r7, pc}

0800a0c2 <MsgQ_Get_Num_Packets>:

/***********************************************************************************
 * This function may be called from an interrupt handler
 ***********************************************************************************/
uint8_t MsgQ_Get_Num_Packets(MSG_QUEUE *pq)
{
 800a0c2:	b580      	push	{r7, lr}
 800a0c4:	b082      	sub	sp, #8
 800a0c6:	af00      	add	r7, sp, #0
 800a0c8:	6078      	str	r0, [r7, #4]
	return pq->Packet_Count;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	785b      	ldrb	r3, [r3, #1]
}
 800a0ce:	0018      	movs	r0, r3
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	b002      	add	sp, #8
 800a0d4:	bd80      	pop	{r7, pc}
	...

0800a0d8 <Init_RTC>:
}TimestampCommands_t;

tm_plus SCurTime;

void Init_RTC(void)
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	af00      	add	r7, sp, #0
	// LSI clock is already enabled to support the IWDG
	PWR->CR |= PWR_CR_DBP;
 800a0dc:	4b20      	ldr	r3, [pc, #128]	@ (800a160 <Init_RTC+0x88>)
 800a0de:	681a      	ldr	r2, [r3, #0]
 800a0e0:	4b1f      	ldr	r3, [pc, #124]	@ (800a160 <Init_RTC+0x88>)
 800a0e2:	2180      	movs	r1, #128	@ 0x80
 800a0e4:	0049      	lsls	r1, r1, #1
 800a0e6:	430a      	orrs	r2, r1
 800a0e8:	601a      	str	r2, [r3, #0]

	// Select LSI for RTC Clock
	RCC->CSR &= ~RCC_CSR_RTCSEL_Msk;
 800a0ea:	4b1e      	ldr	r3, [pc, #120]	@ (800a164 <Init_RTC+0x8c>)
 800a0ec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a0ee:	4b1d      	ldr	r3, [pc, #116]	@ (800a164 <Init_RTC+0x8c>)
 800a0f0:	491d      	ldr	r1, [pc, #116]	@ (800a168 <Init_RTC+0x90>)
 800a0f2:	400a      	ands	r2, r1
 800a0f4:	651a      	str	r2, [r3, #80]	@ 0x50
	RCC->CSR |= RCC_CSR_RTCSEL_1;
 800a0f6:	4b1b      	ldr	r3, [pc, #108]	@ (800a164 <Init_RTC+0x8c>)
 800a0f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a0fa:	4b1a      	ldr	r3, [pc, #104]	@ (800a164 <Init_RTC+0x8c>)
 800a0fc:	2180      	movs	r1, #128	@ 0x80
 800a0fe:	0289      	lsls	r1, r1, #10
 800a100:	430a      	orrs	r2, r1
 800a102:	651a      	str	r2, [r3, #80]	@ 0x50
	RCC->CSR |= RCC_CSR_RTCEN;
 800a104:	4b17      	ldr	r3, [pc, #92]	@ (800a164 <Init_RTC+0x8c>)
 800a106:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a108:	4b16      	ldr	r3, [pc, #88]	@ (800a164 <Init_RTC+0x8c>)
 800a10a:	2180      	movs	r1, #128	@ 0x80
 800a10c:	02c9      	lsls	r1, r1, #11
 800a10e:	430a      	orrs	r2, r1
 800a110:	651a      	str	r2, [r3, #80]	@ 0x50

	// Unlock RTC Registers
	RTC->WPR = 0xCA;
 800a112:	4b16      	ldr	r3, [pc, #88]	@ (800a16c <Init_RTC+0x94>)
 800a114:	22ca      	movs	r2, #202	@ 0xca
 800a116:	625a      	str	r2, [r3, #36]	@ 0x24
	RTC->WPR = 0x53;
 800a118:	4b14      	ldr	r3, [pc, #80]	@ (800a16c <Init_RTC+0x94>)
 800a11a:	2253      	movs	r2, #83	@ 0x53
 800a11c:	625a      	str	r2, [r3, #36]	@ 0x24

	// Stop the RTC for initialization
	RTC->ISR |= RTC_ISR_INIT;
 800a11e:	4b13      	ldr	r3, [pc, #76]	@ (800a16c <Init_RTC+0x94>)
 800a120:	68da      	ldr	r2, [r3, #12]
 800a122:	4b12      	ldr	r3, [pc, #72]	@ (800a16c <Init_RTC+0x94>)
 800a124:	2180      	movs	r1, #128	@ 0x80
 800a126:	430a      	orrs	r2, r1
 800a128:	60da      	str	r2, [r3, #12]

	while((RTC->ISR & RTC_ISR_INITF) == 0);
 800a12a:	46c0      	nop			@ (mov r8, r8)
 800a12c:	4b0f      	ldr	r3, [pc, #60]	@ (800a16c <Init_RTC+0x94>)
 800a12e:	68db      	ldr	r3, [r3, #12]
 800a130:	2240      	movs	r2, #64	@ 0x40
 800a132:	4013      	ands	r3, r2
 800a134:	d0fa      	beq.n	800a12c <Init_RTC+0x54>

	// Set Async Prescaler to 128 and Sync Prescaler to 256
	RTC->PRER = (127 << RTC_PRER_PREDIV_A_Pos) | (255 << RTC_PRER_PREDIV_S_Pos);
 800a136:	4b0d      	ldr	r3, [pc, #52]	@ (800a16c <Init_RTC+0x94>)
 800a138:	4a0d      	ldr	r2, [pc, #52]	@ (800a170 <Init_RTC+0x98>)
 800a13a:	611a      	str	r2, [r3, #16]

	// Start the RTC
	RTC->ISR &= ~RTC_ISR_INIT;
 800a13c:	4b0b      	ldr	r3, [pc, #44]	@ (800a16c <Init_RTC+0x94>)
 800a13e:	68da      	ldr	r2, [r3, #12]
 800a140:	4b0a      	ldr	r3, [pc, #40]	@ (800a16c <Init_RTC+0x94>)
 800a142:	2180      	movs	r1, #128	@ 0x80
 800a144:	438a      	bics	r2, r1
 800a146:	60da      	str	r2, [r3, #12]

	// Lock it Up
	RTC->WPR = 0x00;
 800a148:	4b08      	ldr	r3, [pc, #32]	@ (800a16c <Init_RTC+0x94>)
 800a14a:	2200      	movs	r2, #0
 800a14c:	625a      	str	r2, [r3, #36]	@ 0x24

	PWR->CR &= ~PWR_CR_DBP;
 800a14e:	4b04      	ldr	r3, [pc, #16]	@ (800a160 <Init_RTC+0x88>)
 800a150:	681a      	ldr	r2, [r3, #0]
 800a152:	4b03      	ldr	r3, [pc, #12]	@ (800a160 <Init_RTC+0x88>)
 800a154:	4907      	ldr	r1, [pc, #28]	@ (800a174 <Init_RTC+0x9c>)
 800a156:	400a      	ands	r2, r1
 800a158:	601a      	str	r2, [r3, #0]
}
 800a15a:	46c0      	nop			@ (mov r8, r8)
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bd80      	pop	{r7, pc}
 800a160:	40007000 	.word	0x40007000
 800a164:	40021000 	.word	0x40021000
 800a168:	fffcffff 	.word	0xfffcffff
 800a16c:	40002800 	.word	0x40002800
 800a170:	007f00ff 	.word	0x007f00ff
 800a174:	fffffeff 	.word	0xfffffeff

0800a178 <Get_Current_Time>:

// This doesn't seem to be able to read the RTC registers in the static library,
// So implement Local_Get_Current_Time for now.
tm_plus *Get_Current_Time(void)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b088      	sub	sp, #32
 800a17c:	af00      	add	r7, sp, #0
	uint32_t Time, LastTime, Date, LastDate, SSR, LastSSR;
	uint32_t count = 0;
 800a17e:	2300      	movs	r3, #0
 800a180:	613b      	str	r3, [r7, #16]

	SSR = RTC->SSR;
 800a182:	4b6f      	ldr	r3, [pc, #444]	@ (800a340 <Get_Current_Time+0x1c8>)
 800a184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a186:	617b      	str	r3, [r7, #20]
	Time = RTC->TR;
 800a188:	4b6d      	ldr	r3, [pc, #436]	@ (800a340 <Get_Current_Time+0x1c8>)
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	61fb      	str	r3, [r7, #28]
	Date = RTC->DR;
 800a18e:	4b6c      	ldr	r3, [pc, #432]	@ (800a340 <Get_Current_Time+0x1c8>)
 800a190:	685b      	ldr	r3, [r3, #4]
 800a192:	61bb      	str	r3, [r7, #24]

	// Ensure that we get the correct time even if we slow down the clock for low power mode.
	do
	{
		LastSSR = SSR;
 800a194:	697b      	ldr	r3, [r7, #20]
 800a196:	60fb      	str	r3, [r7, #12]
		LastTime = Time;
 800a198:	69fb      	ldr	r3, [r7, #28]
 800a19a:	60bb      	str	r3, [r7, #8]
		LastDate = Date;
 800a19c:	69bb      	ldr	r3, [r7, #24]
 800a19e:	607b      	str	r3, [r7, #4]
		SSR = RTC->SSR;
 800a1a0:	4b67      	ldr	r3, [pc, #412]	@ (800a340 <Get_Current_Time+0x1c8>)
 800a1a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1a4:	617b      	str	r3, [r7, #20]
		Time = RTC->TR;
 800a1a6:	4b66      	ldr	r3, [pc, #408]	@ (800a340 <Get_Current_Time+0x1c8>)
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	61fb      	str	r3, [r7, #28]
		Date = RTC->DR;
 800a1ac:	4b64      	ldr	r3, [pc, #400]	@ (800a340 <Get_Current_Time+0x1c8>)
 800a1ae:	685b      	ldr	r3, [r3, #4]
 800a1b0:	61bb      	str	r3, [r7, #24]
		++count;
 800a1b2:	693b      	ldr	r3, [r7, #16]
 800a1b4:	3301      	adds	r3, #1
 800a1b6:	613b      	str	r3, [r7, #16]
	}while(Time != LastTime || Date != LastDate || SSR != LastSSR);
 800a1b8:	69fa      	ldr	r2, [r7, #28]
 800a1ba:	68bb      	ldr	r3, [r7, #8]
 800a1bc:	429a      	cmp	r2, r3
 800a1be:	d1e9      	bne.n	800a194 <Get_Current_Time+0x1c>
 800a1c0:	69ba      	ldr	r2, [r7, #24]
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	429a      	cmp	r2, r3
 800a1c6:	d1e5      	bne.n	800a194 <Get_Current_Time+0x1c>
 800a1c8:	697a      	ldr	r2, [r7, #20]
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	429a      	cmp	r2, r3
 800a1ce:	d1e1      	bne.n	800a194 <Get_Current_Time+0x1c>

	// Second
	SCurTime.tm_sec = ((Time & RTC_TR_ST) >> RTC_TR_ST_Pos) * 10 + ((Time & RTC_TR_SU) >> RTC_TR_SU_Pos);
 800a1d0:	69fb      	ldr	r3, [r7, #28]
 800a1d2:	091b      	lsrs	r3, r3, #4
 800a1d4:	b2db      	uxtb	r3, r3
 800a1d6:	2207      	movs	r2, #7
 800a1d8:	4013      	ands	r3, r2
 800a1da:	b2db      	uxtb	r3, r3
 800a1dc:	1c1a      	adds	r2, r3, #0
 800a1de:	0092      	lsls	r2, r2, #2
 800a1e0:	18d3      	adds	r3, r2, r3
 800a1e2:	18db      	adds	r3, r3, r3
 800a1e4:	b2da      	uxtb	r2, r3
 800a1e6:	69fb      	ldr	r3, [r7, #28]
 800a1e8:	b2db      	uxtb	r3, r3
 800a1ea:	210f      	movs	r1, #15
 800a1ec:	400b      	ands	r3, r1
 800a1ee:	b2db      	uxtb	r3, r3
 800a1f0:	18d3      	adds	r3, r2, r3
 800a1f2:	b2da      	uxtb	r2, r3
 800a1f4:	4b53      	ldr	r3, [pc, #332]	@ (800a344 <Get_Current_Time+0x1cc>)
 800a1f6:	701a      	strb	r2, [r3, #0]

	// Minute
	SCurTime.tm_min = ((Time & RTC_TR_MNT) >> RTC_TR_MNT_Pos) * 10 + ((Time & RTC_TR_MNU) >> RTC_TR_MNU_Pos);
 800a1f8:	69fb      	ldr	r3, [r7, #28]
 800a1fa:	0b1b      	lsrs	r3, r3, #12
 800a1fc:	b2db      	uxtb	r3, r3
 800a1fe:	2207      	movs	r2, #7
 800a200:	4013      	ands	r3, r2
 800a202:	b2db      	uxtb	r3, r3
 800a204:	1c1a      	adds	r2, r3, #0
 800a206:	0092      	lsls	r2, r2, #2
 800a208:	18d3      	adds	r3, r2, r3
 800a20a:	18db      	adds	r3, r3, r3
 800a20c:	b2da      	uxtb	r2, r3
 800a20e:	69fb      	ldr	r3, [r7, #28]
 800a210:	0a1b      	lsrs	r3, r3, #8
 800a212:	b2db      	uxtb	r3, r3
 800a214:	210f      	movs	r1, #15
 800a216:	400b      	ands	r3, r1
 800a218:	b2db      	uxtb	r3, r3
 800a21a:	18d3      	adds	r3, r2, r3
 800a21c:	b2da      	uxtb	r2, r3
 800a21e:	4b49      	ldr	r3, [pc, #292]	@ (800a344 <Get_Current_Time+0x1cc>)
 800a220:	705a      	strb	r2, [r3, #1]

	// Hour
	SCurTime.tm_hour = ((Time & RTC_TR_HT) >> RTC_TR_HT_Pos) * 10 + ((Time & RTC_TR_HU) >> RTC_TR_HU_Pos);
 800a222:	69fb      	ldr	r3, [r7, #28]
 800a224:	0d1b      	lsrs	r3, r3, #20
 800a226:	b2db      	uxtb	r3, r3
 800a228:	2203      	movs	r2, #3
 800a22a:	4013      	ands	r3, r2
 800a22c:	b2db      	uxtb	r3, r3
 800a22e:	1c1a      	adds	r2, r3, #0
 800a230:	0092      	lsls	r2, r2, #2
 800a232:	18d3      	adds	r3, r2, r3
 800a234:	18db      	adds	r3, r3, r3
 800a236:	b2da      	uxtb	r2, r3
 800a238:	69fb      	ldr	r3, [r7, #28]
 800a23a:	0c1b      	lsrs	r3, r3, #16
 800a23c:	b2db      	uxtb	r3, r3
 800a23e:	210f      	movs	r1, #15
 800a240:	400b      	ands	r3, r1
 800a242:	b2db      	uxtb	r3, r3
 800a244:	18d3      	adds	r3, r2, r3
 800a246:	b2da      	uxtb	r2, r3
 800a248:	4b3e      	ldr	r3, [pc, #248]	@ (800a344 <Get_Current_Time+0x1cc>)
 800a24a:	709a      	strb	r2, [r3, #2]

	// Day of the Month
	SCurTime.tm_mday = ((Date & RTC_DR_DT) >> RTC_DR_DT_Pos) * 10 + ((Date & RTC_DR_DU) >> RTC_DR_DU_Pos);
 800a24c:	69bb      	ldr	r3, [r7, #24]
 800a24e:	091b      	lsrs	r3, r3, #4
 800a250:	b2db      	uxtb	r3, r3
 800a252:	2203      	movs	r2, #3
 800a254:	4013      	ands	r3, r2
 800a256:	b2db      	uxtb	r3, r3
 800a258:	1c1a      	adds	r2, r3, #0
 800a25a:	0092      	lsls	r2, r2, #2
 800a25c:	18d3      	adds	r3, r2, r3
 800a25e:	18db      	adds	r3, r3, r3
 800a260:	b2da      	uxtb	r2, r3
 800a262:	69bb      	ldr	r3, [r7, #24]
 800a264:	b2db      	uxtb	r3, r3
 800a266:	210f      	movs	r1, #15
 800a268:	400b      	ands	r3, r1
 800a26a:	b2db      	uxtb	r3, r3
 800a26c:	18d3      	adds	r3, r2, r3
 800a26e:	b2da      	uxtb	r2, r3
 800a270:	4b34      	ldr	r3, [pc, #208]	@ (800a344 <Get_Current_Time+0x1cc>)
 800a272:	70da      	strb	r2, [r3, #3]

	// Day of Week (convert from Mon-Sun = 1-7 to Sun-Sat = 0-6)
	uint8_t dow = (Date & RTC_DR_WDU) >> RTC_DR_WDU_Pos;
 800a274:	69bb      	ldr	r3, [r7, #24]
 800a276:	0b5b      	lsrs	r3, r3, #13
 800a278:	b2da      	uxtb	r2, r3
 800a27a:	1cfb      	adds	r3, r7, #3
 800a27c:	2107      	movs	r1, #7
 800a27e:	400a      	ands	r2, r1
 800a280:	701a      	strb	r2, [r3, #0]
	dow = (dow == 7) ? 0 : dow;
 800a282:	1cfb      	adds	r3, r7, #3
 800a284:	781b      	ldrb	r3, [r3, #0]
 800a286:	2b07      	cmp	r3, #7
 800a288:	d002      	beq.n	800a290 <Get_Current_Time+0x118>
 800a28a:	1cfb      	adds	r3, r7, #3
 800a28c:	781a      	ldrb	r2, [r3, #0]
 800a28e:	e000      	b.n	800a292 <Get_Current_Time+0x11a>
 800a290:	2200      	movs	r2, #0
 800a292:	1cfb      	adds	r3, r7, #3
 800a294:	701a      	strb	r2, [r3, #0]
	SCurTime.tm_wday = dow;
 800a296:	4b2b      	ldr	r3, [pc, #172]	@ (800a344 <Get_Current_Time+0x1cc>)
 800a298:	1cfa      	adds	r2, r7, #3
 800a29a:	7812      	ldrb	r2, [r2, #0]
 800a29c:	719a      	strb	r2, [r3, #6]

	// Month
	SCurTime.tm_mon = ((Date & RTC_DR_MT) >> RTC_DR_MT_Pos) * 10 + ((Date & RTC_DR_MU) >> RTC_DR_MU_Pos) + 1;
 800a29e:	69bb      	ldr	r3, [r7, #24]
 800a2a0:	0b1b      	lsrs	r3, r3, #12
 800a2a2:	b2db      	uxtb	r3, r3
 800a2a4:	2201      	movs	r2, #1
 800a2a6:	4013      	ands	r3, r2
 800a2a8:	b2db      	uxtb	r3, r3
 800a2aa:	1c1a      	adds	r2, r3, #0
 800a2ac:	0092      	lsls	r2, r2, #2
 800a2ae:	18d3      	adds	r3, r2, r3
 800a2b0:	18db      	adds	r3, r3, r3
 800a2b2:	b2da      	uxtb	r2, r3
 800a2b4:	69bb      	ldr	r3, [r7, #24]
 800a2b6:	0a1b      	lsrs	r3, r3, #8
 800a2b8:	b2db      	uxtb	r3, r3
 800a2ba:	210f      	movs	r1, #15
 800a2bc:	400b      	ands	r3, r1
 800a2be:	b2db      	uxtb	r3, r3
 800a2c0:	18d3      	adds	r3, r2, r3
 800a2c2:	b2db      	uxtb	r3, r3
 800a2c4:	3301      	adds	r3, #1
 800a2c6:	b2da      	uxtb	r2, r3
 800a2c8:	4b1e      	ldr	r3, [pc, #120]	@ (800a344 <Get_Current_Time+0x1cc>)
 800a2ca:	711a      	strb	r2, [r3, #4]

	// Year (convert from years since 2000 to years since 1900)
	SCurTime.tm_year = ((Date & RTC_DR_YT) >> RTC_DR_YT_Pos) * 10 + ((Date & RTC_DR_YU) >> RTC_DR_YU_Pos) + 100;
 800a2cc:	69bb      	ldr	r3, [r7, #24]
 800a2ce:	0d1b      	lsrs	r3, r3, #20
 800a2d0:	b2db      	uxtb	r3, r3
 800a2d2:	220f      	movs	r2, #15
 800a2d4:	4013      	ands	r3, r2
 800a2d6:	b2db      	uxtb	r3, r3
 800a2d8:	1c1a      	adds	r2, r3, #0
 800a2da:	0092      	lsls	r2, r2, #2
 800a2dc:	18d3      	adds	r3, r2, r3
 800a2de:	18db      	adds	r3, r3, r3
 800a2e0:	b2da      	uxtb	r2, r3
 800a2e2:	69bb      	ldr	r3, [r7, #24]
 800a2e4:	0c1b      	lsrs	r3, r3, #16
 800a2e6:	b2db      	uxtb	r3, r3
 800a2e8:	210f      	movs	r1, #15
 800a2ea:	400b      	ands	r3, r1
 800a2ec:	b2db      	uxtb	r3, r3
 800a2ee:	18d3      	adds	r3, r2, r3
 800a2f0:	b2db      	uxtb	r3, r3
 800a2f2:	3364      	adds	r3, #100	@ 0x64
 800a2f4:	b2da      	uxtb	r2, r3
 800a2f6:	4b13      	ldr	r3, [pc, #76]	@ (800a344 <Get_Current_Time+0x1cc>)
 800a2f8:	715a      	strb	r2, [r3, #5]

	// Subseconds
	uint16_t Prediv_s = RTC->PRER & RTC_PRER_PREDIV_S_Msk;
 800a2fa:	4b11      	ldr	r3, [pc, #68]	@ (800a340 <Get_Current_Time+0x1c8>)
 800a2fc:	691b      	ldr	r3, [r3, #16]
 800a2fe:	b29a      	uxth	r2, r3
 800a300:	003b      	movs	r3, r7
 800a302:	0452      	lsls	r2, r2, #17
 800a304:	0c52      	lsrs	r2, r2, #17
 800a306:	801a      	strh	r2, [r3, #0]
	SCurTime.tm_ms = 1000 * (Prediv_s - SSR) / (Prediv_s + 1);
 800a308:	003b      	movs	r3, r7
 800a30a:	881a      	ldrh	r2, [r3, #0]
 800a30c:	697b      	ldr	r3, [r7, #20]
 800a30e:	1ad2      	subs	r2, r2, r3
 800a310:	0013      	movs	r3, r2
 800a312:	015b      	lsls	r3, r3, #5
 800a314:	1a9b      	subs	r3, r3, r2
 800a316:	009b      	lsls	r3, r3, #2
 800a318:	189b      	adds	r3, r3, r2
 800a31a:	00db      	lsls	r3, r3, #3
 800a31c:	001a      	movs	r2, r3
 800a31e:	003b      	movs	r3, r7
 800a320:	881b      	ldrh	r3, [r3, #0]
 800a322:	3301      	adds	r3, #1
 800a324:	0019      	movs	r1, r3
 800a326:	0010      	movs	r0, r2
 800a328:	f7f5 ff0a 	bl	8000140 <__udivsi3>
 800a32c:	0003      	movs	r3, r0
 800a32e:	b29a      	uxth	r2, r3
 800a330:	4b04      	ldr	r3, [pc, #16]	@ (800a344 <Get_Current_Time+0x1cc>)
 800a332:	815a      	strh	r2, [r3, #10]

	return &SCurTime;
 800a334:	4b03      	ldr	r3, [pc, #12]	@ (800a344 <Get_Current_Time+0x1cc>)
}
 800a336:	0018      	movs	r0, r3
 800a338:	46bd      	mov	sp, r7
 800a33a:	b008      	add	sp, #32
 800a33c:	bd80      	pop	{r7, pc}
 800a33e:	46c0      	nop			@ (mov r8, r8)
 800a340:	40002800 	.word	0x40002800
 800a344:	20000e04 	.word	0x20000e04

0800a348 <Get_Current_Epoch_Time>:

time_t Get_Current_Epoch_Time(void)
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b08a      	sub	sp, #40	@ 0x28
 800a34c:	af00      	add	r7, sp, #0
	tm_plus * tmpl = Get_Current_Time();
 800a34e:	f7ff ff13 	bl	800a178 <Get_Current_Time>
 800a352:	0003      	movs	r3, r0
 800a354:	627b      	str	r3, [r7, #36]	@ 0x24

	struct tm mytm;

	mytm.tm_sec = tmpl->tm_sec;
 800a356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a358:	781b      	ldrb	r3, [r3, #0]
 800a35a:	001a      	movs	r2, r3
 800a35c:	003b      	movs	r3, r7
 800a35e:	601a      	str	r2, [r3, #0]
	mytm.tm_min = tmpl->tm_min;
 800a360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a362:	785b      	ldrb	r3, [r3, #1]
 800a364:	001a      	movs	r2, r3
 800a366:	003b      	movs	r3, r7
 800a368:	605a      	str	r2, [r3, #4]
	mytm.tm_hour = tmpl->tm_hour;
 800a36a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a36c:	789b      	ldrb	r3, [r3, #2]
 800a36e:	001a      	movs	r2, r3
 800a370:	003b      	movs	r3, r7
 800a372:	609a      	str	r2, [r3, #8]
	mytm.tm_mday = tmpl->tm_mday;
 800a374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a376:	78db      	ldrb	r3, [r3, #3]
 800a378:	001a      	movs	r2, r3
 800a37a:	003b      	movs	r3, r7
 800a37c:	60da      	str	r2, [r3, #12]
	mytm.tm_mon = tmpl->tm_mon;
 800a37e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a380:	791b      	ldrb	r3, [r3, #4]
 800a382:	001a      	movs	r2, r3
 800a384:	003b      	movs	r3, r7
 800a386:	611a      	str	r2, [r3, #16]
	mytm.tm_year = tmpl->tm_year;
 800a388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a38a:	795b      	ldrb	r3, [r3, #5]
 800a38c:	001a      	movs	r2, r3
 800a38e:	003b      	movs	r3, r7
 800a390:	615a      	str	r2, [r3, #20]
	mytm.tm_wday = tmpl->tm_wday;
 800a392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a394:	799b      	ldrb	r3, [r3, #6]
 800a396:	001a      	movs	r2, r3
 800a398:	003b      	movs	r3, r7
 800a39a:	619a      	str	r2, [r3, #24]
	mytm.tm_yday = tmpl->tm_yday;
 800a39c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a39e:	891b      	ldrh	r3, [r3, #8]
 800a3a0:	001a      	movs	r2, r3
 800a3a2:	003b      	movs	r3, r7
 800a3a4:	61da      	str	r2, [r3, #28]
	mytm.tm_isdst = tmpl->tm_isdst;
 800a3a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3a8:	79db      	ldrb	r3, [r3, #7]
 800a3aa:	001a      	movs	r2, r3
 800a3ac:	003b      	movs	r3, r7
 800a3ae:	621a      	str	r2, [r3, #32]

	return mktime(&mytm);
 800a3b0:	003b      	movs	r3, r7
 800a3b2:	0018      	movs	r0, r3
 800a3b4:	f001 f9e4 	bl	800b780 <mktime>
 800a3b8:	0002      	movs	r2, r0
 800a3ba:	000b      	movs	r3, r1
}
 800a3bc:	0010      	movs	r0, r2
 800a3be:	0019      	movs	r1, r3
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	b00a      	add	sp, #40	@ 0x28
 800a3c4:	bd80      	pop	{r7, pc}
	...

0800a3c8 <Set_Current_Time>:

void Set_Current_Time(time_t now)
{
 800a3c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a3ca:	b08f      	sub	sp, #60	@ 0x3c
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6038      	str	r0, [r7, #0]
 800a3d0:	6079      	str	r1, [r7, #4]
	struct tm curtime;

	localtime_r(&now, &curtime);
 800a3d2:	230c      	movs	r3, #12
 800a3d4:	18fa      	adds	r2, r7, r3
 800a3d6:	003b      	movs	r3, r7
 800a3d8:	0011      	movs	r1, r2
 800a3da:	0018      	movs	r0, r3
 800a3dc:	f001 f812 	bl	800b404 <localtime_r>

	PWR->CR |= PWR_CR_DBP;
 800a3e0:	4b82      	ldr	r3, [pc, #520]	@ (800a5ec <Set_Current_Time+0x224>)
 800a3e2:	681a      	ldr	r2, [r3, #0]
 800a3e4:	4b81      	ldr	r3, [pc, #516]	@ (800a5ec <Set_Current_Time+0x224>)
 800a3e6:	2180      	movs	r1, #128	@ 0x80
 800a3e8:	0049      	lsls	r1, r1, #1
 800a3ea:	430a      	orrs	r2, r1
 800a3ec:	601a      	str	r2, [r3, #0]

	RTC->WPR = 0xCA;
 800a3ee:	4b80      	ldr	r3, [pc, #512]	@ (800a5f0 <Set_Current_Time+0x228>)
 800a3f0:	22ca      	movs	r2, #202	@ 0xca
 800a3f2:	625a      	str	r2, [r3, #36]	@ 0x24
	RTC->WPR = 0x53;
 800a3f4:	4b7e      	ldr	r3, [pc, #504]	@ (800a5f0 <Set_Current_Time+0x228>)
 800a3f6:	2253      	movs	r2, #83	@ 0x53
 800a3f8:	625a      	str	r2, [r3, #36]	@ 0x24

	RTC->ISR |= RTC_ISR_INIT;
 800a3fa:	4b7d      	ldr	r3, [pc, #500]	@ (800a5f0 <Set_Current_Time+0x228>)
 800a3fc:	68da      	ldr	r2, [r3, #12]
 800a3fe:	4b7c      	ldr	r3, [pc, #496]	@ (800a5f0 <Set_Current_Time+0x228>)
 800a400:	2180      	movs	r1, #128	@ 0x80
 800a402:	430a      	orrs	r2, r1
 800a404:	60da      	str	r2, [r3, #12]

	while((RTC->ISR & RTC_ISR_INITF) == 0);
 800a406:	46c0      	nop			@ (mov r8, r8)
 800a408:	4b79      	ldr	r3, [pc, #484]	@ (800a5f0 <Set_Current_Time+0x228>)
 800a40a:	68db      	ldr	r3, [r3, #12]
 800a40c:	2240      	movs	r2, #64	@ 0x40
 800a40e:	4013      	ands	r3, r2
 800a410:	d0fa      	beq.n	800a408 <Set_Current_Time+0x40>
	uint32_t reg = 0;
 800a412:	2300      	movs	r3, #0
 800a414:	637b      	str	r3, [r7, #52]	@ 0x34
	uint8_t tens;

	// Seconds
	tens = curtime.tm_sec / 10;
 800a416:	250c      	movs	r5, #12
 800a418:	197b      	adds	r3, r7, r5
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	210a      	movs	r1, #10
 800a41e:	0018      	movs	r0, r3
 800a420:	f7f5 ff18 	bl	8000254 <__divsi3>
 800a424:	0003      	movs	r3, r0
 800a426:	001a      	movs	r2, r3
 800a428:	2433      	movs	r4, #51	@ 0x33
 800a42a:	193b      	adds	r3, r7, r4
 800a42c:	701a      	strb	r2, [r3, #0]
	reg |= (tens << RTC_TR_ST_Pos) | ((curtime.tm_sec - tens*10) << RTC_TR_SU_Pos);
 800a42e:	193b      	adds	r3, r7, r4
 800a430:	781b      	ldrb	r3, [r3, #0]
 800a432:	0119      	lsls	r1, r3, #4
 800a434:	197b      	adds	r3, r7, r5
 800a436:	6818      	ldr	r0, [r3, #0]
 800a438:	193b      	adds	r3, r7, r4
 800a43a:	781a      	ldrb	r2, [r3, #0]
 800a43c:	0013      	movs	r3, r2
 800a43e:	075b      	lsls	r3, r3, #29
 800a440:	1a9b      	subs	r3, r3, r2
 800a442:	009b      	lsls	r3, r3, #2
 800a444:	1a9b      	subs	r3, r3, r2
 800a446:	005b      	lsls	r3, r3, #1
 800a448:	18c3      	adds	r3, r0, r3
 800a44a:	430b      	orrs	r3, r1
 800a44c:	001a      	movs	r2, r3
 800a44e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a450:	4313      	orrs	r3, r2
 800a452:	637b      	str	r3, [r7, #52]	@ 0x34

	// Minutes
	tens = curtime.tm_min / 10;
 800a454:	197b      	adds	r3, r7, r5
 800a456:	685b      	ldr	r3, [r3, #4]
 800a458:	210a      	movs	r1, #10
 800a45a:	0018      	movs	r0, r3
 800a45c:	f7f5 fefa 	bl	8000254 <__divsi3>
 800a460:	0003      	movs	r3, r0
 800a462:	001a      	movs	r2, r3
 800a464:	193b      	adds	r3, r7, r4
 800a466:	701a      	strb	r2, [r3, #0]
	reg |= (tens << RTC_TR_MNT_Pos) | ((curtime.tm_min - tens*10) << RTC_TR_MNU_Pos);
 800a468:	193b      	adds	r3, r7, r4
 800a46a:	781b      	ldrb	r3, [r3, #0]
 800a46c:	0319      	lsls	r1, r3, #12
 800a46e:	197b      	adds	r3, r7, r5
 800a470:	6858      	ldr	r0, [r3, #4]
 800a472:	193b      	adds	r3, r7, r4
 800a474:	781a      	ldrb	r2, [r3, #0]
 800a476:	0013      	movs	r3, r2
 800a478:	075b      	lsls	r3, r3, #29
 800a47a:	1a9b      	subs	r3, r3, r2
 800a47c:	009b      	lsls	r3, r3, #2
 800a47e:	1a9b      	subs	r3, r3, r2
 800a480:	005b      	lsls	r3, r3, #1
 800a482:	18c3      	adds	r3, r0, r3
 800a484:	021b      	lsls	r3, r3, #8
 800a486:	430b      	orrs	r3, r1
 800a488:	001a      	movs	r2, r3
 800a48a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a48c:	4313      	orrs	r3, r2
 800a48e:	637b      	str	r3, [r7, #52]	@ 0x34

	// Hours
	tens = curtime.tm_hour / 10;
 800a490:	197b      	adds	r3, r7, r5
 800a492:	689b      	ldr	r3, [r3, #8]
 800a494:	210a      	movs	r1, #10
 800a496:	0018      	movs	r0, r3
 800a498:	f7f5 fedc 	bl	8000254 <__divsi3>
 800a49c:	0003      	movs	r3, r0
 800a49e:	001a      	movs	r2, r3
 800a4a0:	193b      	adds	r3, r7, r4
 800a4a2:	701a      	strb	r2, [r3, #0]
	reg |= (tens << RTC_TR_HT_Pos) | ((curtime.tm_hour - tens*10) << RTC_TR_HU_Pos);
 800a4a4:	193b      	adds	r3, r7, r4
 800a4a6:	781b      	ldrb	r3, [r3, #0]
 800a4a8:	0519      	lsls	r1, r3, #20
 800a4aa:	197b      	adds	r3, r7, r5
 800a4ac:	6898      	ldr	r0, [r3, #8]
 800a4ae:	193b      	adds	r3, r7, r4
 800a4b0:	781a      	ldrb	r2, [r3, #0]
 800a4b2:	0013      	movs	r3, r2
 800a4b4:	075b      	lsls	r3, r3, #29
 800a4b6:	1a9b      	subs	r3, r3, r2
 800a4b8:	009b      	lsls	r3, r3, #2
 800a4ba:	1a9b      	subs	r3, r3, r2
 800a4bc:	005b      	lsls	r3, r3, #1
 800a4be:	18c3      	adds	r3, r0, r3
 800a4c0:	041b      	lsls	r3, r3, #16
 800a4c2:	430b      	orrs	r3, r1
 800a4c4:	001a      	movs	r2, r3
 800a4c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4c8:	4313      	orrs	r3, r2
 800a4ca:	637b      	str	r3, [r7, #52]	@ 0x34

	// Write Time Register
	RTC->TR = reg;
 800a4cc:	4b48      	ldr	r3, [pc, #288]	@ (800a5f0 <Set_Current_Time+0x228>)
 800a4ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a4d0:	601a      	str	r2, [r3, #0]

	reg = 0;
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	637b      	str	r3, [r7, #52]	@ 0x34

	// Date
	tens = curtime.tm_mday / 10;
 800a4d6:	197b      	adds	r3, r7, r5
 800a4d8:	68db      	ldr	r3, [r3, #12]
 800a4da:	210a      	movs	r1, #10
 800a4dc:	0018      	movs	r0, r3
 800a4de:	f7f5 feb9 	bl	8000254 <__divsi3>
 800a4e2:	0003      	movs	r3, r0
 800a4e4:	001a      	movs	r2, r3
 800a4e6:	193b      	adds	r3, r7, r4
 800a4e8:	701a      	strb	r2, [r3, #0]
	reg |= (tens << RTC_DR_DT_Pos) | ((curtime.tm_mday - tens*10) << RTC_DR_DU_Pos);
 800a4ea:	193b      	adds	r3, r7, r4
 800a4ec:	781b      	ldrb	r3, [r3, #0]
 800a4ee:	0119      	lsls	r1, r3, #4
 800a4f0:	197b      	adds	r3, r7, r5
 800a4f2:	68d8      	ldr	r0, [r3, #12]
 800a4f4:	193b      	adds	r3, r7, r4
 800a4f6:	781a      	ldrb	r2, [r3, #0]
 800a4f8:	0013      	movs	r3, r2
 800a4fa:	075b      	lsls	r3, r3, #29
 800a4fc:	1a9b      	subs	r3, r3, r2
 800a4fe:	009b      	lsls	r3, r3, #2
 800a500:	1a9b      	subs	r3, r3, r2
 800a502:	005b      	lsls	r3, r3, #1
 800a504:	18c3      	adds	r3, r0, r3
 800a506:	430b      	orrs	r3, r1
 800a508:	001a      	movs	r2, r3
 800a50a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a50c:	4313      	orrs	r3, r2
 800a50e:	637b      	str	r3, [r7, #52]	@ 0x34

	// Month
	tens = curtime.tm_mon / 10;
 800a510:	197b      	adds	r3, r7, r5
 800a512:	691b      	ldr	r3, [r3, #16]
 800a514:	210a      	movs	r1, #10
 800a516:	0018      	movs	r0, r3
 800a518:	f7f5 fe9c 	bl	8000254 <__divsi3>
 800a51c:	0003      	movs	r3, r0
 800a51e:	001a      	movs	r2, r3
 800a520:	193b      	adds	r3, r7, r4
 800a522:	701a      	strb	r2, [r3, #0]
	reg |= (tens << RTC_DR_MT_Pos) | ((curtime.tm_mon - tens*10) << RTC_DR_MU_Pos);
 800a524:	193b      	adds	r3, r7, r4
 800a526:	781b      	ldrb	r3, [r3, #0]
 800a528:	0319      	lsls	r1, r3, #12
 800a52a:	197b      	adds	r3, r7, r5
 800a52c:	6918      	ldr	r0, [r3, #16]
 800a52e:	193b      	adds	r3, r7, r4
 800a530:	781a      	ldrb	r2, [r3, #0]
 800a532:	0013      	movs	r3, r2
 800a534:	075b      	lsls	r3, r3, #29
 800a536:	1a9b      	subs	r3, r3, r2
 800a538:	009b      	lsls	r3, r3, #2
 800a53a:	1a9b      	subs	r3, r3, r2
 800a53c:	005b      	lsls	r3, r3, #1
 800a53e:	18c3      	adds	r3, r0, r3
 800a540:	021b      	lsls	r3, r3, #8
 800a542:	430b      	orrs	r3, r1
 800a544:	001a      	movs	r2, r3
 800a546:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a548:	4313      	orrs	r3, r2
 800a54a:	637b      	str	r3, [r7, #52]	@ 0x34

	// Day of Week (convert from Sun-Sat = 0-6 to Mon-Sun = 1-7)
	uint8_t dow = (curtime.tm_wday == 0) ? 7 : curtime.tm_wday;
 800a54c:	197b      	adds	r3, r7, r5
 800a54e:	699b      	ldr	r3, [r3, #24]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d003      	beq.n	800a55c <Set_Current_Time+0x194>
 800a554:	197b      	adds	r3, r7, r5
 800a556:	699b      	ldr	r3, [r3, #24]
 800a558:	b2da      	uxtb	r2, r3
 800a55a:	e000      	b.n	800a55e <Set_Current_Time+0x196>
 800a55c:	2207      	movs	r2, #7
 800a55e:	2132      	movs	r1, #50	@ 0x32
 800a560:	187b      	adds	r3, r7, r1
 800a562:	701a      	strb	r2, [r3, #0]
	reg |= dow << RTC_DR_WDU_Pos;
 800a564:	187b      	adds	r3, r7, r1
 800a566:	781b      	ldrb	r3, [r3, #0]
 800a568:	035b      	lsls	r3, r3, #13
 800a56a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a56c:	4313      	orrs	r3, r2
 800a56e:	637b      	str	r3, [r7, #52]	@ 0x34

	// Year (convert from years since 1900 to years since 2000)
	uint8_t year = curtime.tm_year - 100;
 800a570:	230c      	movs	r3, #12
 800a572:	18fb      	adds	r3, r7, r3
 800a574:	695b      	ldr	r3, [r3, #20]
 800a576:	b2da      	uxtb	r2, r3
 800a578:	2531      	movs	r5, #49	@ 0x31
 800a57a:	197b      	adds	r3, r7, r5
 800a57c:	3a64      	subs	r2, #100	@ 0x64
 800a57e:	701a      	strb	r2, [r3, #0]
	tens = year / 10;
 800a580:	2633      	movs	r6, #51	@ 0x33
 800a582:	19bc      	adds	r4, r7, r6
 800a584:	197b      	adds	r3, r7, r5
 800a586:	781b      	ldrb	r3, [r3, #0]
 800a588:	210a      	movs	r1, #10
 800a58a:	0018      	movs	r0, r3
 800a58c:	f7f5 fdd8 	bl	8000140 <__udivsi3>
 800a590:	0003      	movs	r3, r0
 800a592:	7023      	strb	r3, [r4, #0]
	reg |= (tens << RTC_DR_YT_Pos) | ((year - tens*10) << RTC_DR_YU_Pos);
 800a594:	0032      	movs	r2, r6
 800a596:	18bb      	adds	r3, r7, r2
 800a598:	781b      	ldrb	r3, [r3, #0]
 800a59a:	0519      	lsls	r1, r3, #20
 800a59c:	197b      	adds	r3, r7, r5
 800a59e:	7818      	ldrb	r0, [r3, #0]
 800a5a0:	18bb      	adds	r3, r7, r2
 800a5a2:	781a      	ldrb	r2, [r3, #0]
 800a5a4:	0013      	movs	r3, r2
 800a5a6:	075b      	lsls	r3, r3, #29
 800a5a8:	1a9b      	subs	r3, r3, r2
 800a5aa:	009b      	lsls	r3, r3, #2
 800a5ac:	1a9b      	subs	r3, r3, r2
 800a5ae:	005b      	lsls	r3, r3, #1
 800a5b0:	18c3      	adds	r3, r0, r3
 800a5b2:	041b      	lsls	r3, r3, #16
 800a5b4:	430b      	orrs	r3, r1
 800a5b6:	001a      	movs	r2, r3
 800a5b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5ba:	4313      	orrs	r3, r2
 800a5bc:	637b      	str	r3, [r7, #52]	@ 0x34

	// Write Date Register
	RTC->DR = reg;
 800a5be:	4b0c      	ldr	r3, [pc, #48]	@ (800a5f0 <Set_Current_Time+0x228>)
 800a5c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a5c2:	605a      	str	r2, [r3, #4]

	// Start the RTC
	RTC->ISR &= ~RTC_ISR_INIT;
 800a5c4:	4b0a      	ldr	r3, [pc, #40]	@ (800a5f0 <Set_Current_Time+0x228>)
 800a5c6:	68da      	ldr	r2, [r3, #12]
 800a5c8:	4b09      	ldr	r3, [pc, #36]	@ (800a5f0 <Set_Current_Time+0x228>)
 800a5ca:	2180      	movs	r1, #128	@ 0x80
 800a5cc:	438a      	bics	r2, r1
 800a5ce:	60da      	str	r2, [r3, #12]

	// Lock it Up
	RTC->WPR = 0x00;
 800a5d0:	4b07      	ldr	r3, [pc, #28]	@ (800a5f0 <Set_Current_Time+0x228>)
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	625a      	str	r2, [r3, #36]	@ 0x24

	PWR->CR &= ~PWR_CR_DBP;
 800a5d6:	4b05      	ldr	r3, [pc, #20]	@ (800a5ec <Set_Current_Time+0x224>)
 800a5d8:	681a      	ldr	r2, [r3, #0]
 800a5da:	4b04      	ldr	r3, [pc, #16]	@ (800a5ec <Set_Current_Time+0x224>)
 800a5dc:	4905      	ldr	r1, [pc, #20]	@ (800a5f4 <Set_Current_Time+0x22c>)
 800a5de:	400a      	ands	r2, r1
 800a5e0:	601a      	str	r2, [r3, #0]
}
 800a5e2:	46c0      	nop			@ (mov r8, r8)
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	b00f      	add	sp, #60	@ 0x3c
 800a5e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5ea:	46c0      	nop			@ (mov r8, r8)
 800a5ec:	40007000 	.word	0x40007000
 800a5f0:	40002800 	.word	0x40002800
 800a5f4:	fffffeff 	.word	0xfffffeff

0800a5f8 <Request_Controller_Time_Sync>:

void Request_Controller_Time_Sync(void)
{
 800a5f8:	b5b0      	push	{r4, r5, r7, lr}
 800a5fa:	b08c      	sub	sp, #48	@ 0x30
 800a5fc:	af02      	add	r7, sp, #8
	printf("Sending Request Controller Time Sync\r\n");
 800a5fe:	4b2b      	ldr	r3, [pc, #172]	@ (800a6ac <Request_Controller_Time_Sync+0xb4>)
 800a600:	0018      	movs	r0, r3
 800a602:	f000 fddd 	bl	800b1c0 <puts>
	time_t epoch = Get_Current_Epoch_Time();
 800a606:	f7ff fe9f 	bl	800a348 <Get_Current_Epoch_Time>
 800a60a:	0002      	movs	r2, r0
 800a60c:	000b      	movs	r3, r1
 800a60e:	623a      	str	r2, [r7, #32]
 800a610:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t data[8];
	data[0] = TsCmd_RequestUpdate;
 800a612:	2114      	movs	r1, #20
 800a614:	187b      	adds	r3, r7, r1
 800a616:	22aa      	movs	r2, #170	@ 0xaa
 800a618:	701a      	strb	r2, [r3, #0]
	data[1] = 0x00;
 800a61a:	187b      	adds	r3, r7, r1
 800a61c:	2200      	movs	r2, #0
 800a61e:	705a      	strb	r2, [r3, #1]
	data[2] = 0x00;
 800a620:	187b      	adds	r3, r7, r1
 800a622:	2200      	movs	r2, #0
 800a624:	709a      	strb	r2, [r3, #2]
	data[3] = 0x00;
 800a626:	187b      	adds	r3, r7, r1
 800a628:	2200      	movs	r2, #0
 800a62a:	70da      	strb	r2, [r3, #3]
	data[4] = (epoch & 0x000000FF);
 800a62c:	6a3a      	ldr	r2, [r7, #32]
 800a62e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a630:	1c13      	adds	r3, r2, #0
 800a632:	b2da      	uxtb	r2, r3
 800a634:	187b      	adds	r3, r7, r1
 800a636:	711a      	strb	r2, [r3, #4]
	data[5] = ((epoch & 0x0000FF00) >> 8);
 800a638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a63a:	061b      	lsls	r3, r3, #24
 800a63c:	6a3a      	ldr	r2, [r7, #32]
 800a63e:	0a12      	lsrs	r2, r2, #8
 800a640:	60ba      	str	r2, [r7, #8]
 800a642:	68ba      	ldr	r2, [r7, #8]
 800a644:	431a      	orrs	r2, r3
 800a646:	60ba      	str	r2, [r7, #8]
 800a648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a64a:	121b      	asrs	r3, r3, #8
 800a64c:	60fb      	str	r3, [r7, #12]
 800a64e:	7a3a      	ldrb	r2, [r7, #8]
 800a650:	187b      	adds	r3, r7, r1
 800a652:	715a      	strb	r2, [r3, #5]
	data[6] = ((epoch & 0x00FF0000) >> 16);
 800a654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a656:	041b      	lsls	r3, r3, #16
 800a658:	6a3a      	ldr	r2, [r7, #32]
 800a65a:	0c12      	lsrs	r2, r2, #16
 800a65c:	603a      	str	r2, [r7, #0]
 800a65e:	683a      	ldr	r2, [r7, #0]
 800a660:	431a      	orrs	r2, r3
 800a662:	603a      	str	r2, [r7, #0]
 800a664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a666:	141b      	asrs	r3, r3, #16
 800a668:	607b      	str	r3, [r7, #4]
 800a66a:	783a      	ldrb	r2, [r7, #0]
 800a66c:	187b      	adds	r3, r7, r1
 800a66e:	719a      	strb	r2, [r3, #6]
	data[7] = ((epoch & 0xFF000000) >> 24);
 800a670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a672:	021b      	lsls	r3, r3, #8
 800a674:	6a3a      	ldr	r2, [r7, #32]
 800a676:	0e14      	lsrs	r4, r2, #24
 800a678:	431c      	orrs	r4, r3
 800a67a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a67c:	161d      	asrs	r5, r3, #24
 800a67e:	b2e2      	uxtb	r2, r4
 800a680:	187b      	adds	r3, r7, r1
 800a682:	71da      	strb	r2, [r3, #7]

	MODULE_BUS_PACKET * packet = Create_Module_Bus_Packet(CommonModCmd_Timestamp, 0x01, 0x01, 8, (unsigned char *)data);
 800a684:	187b      	adds	r3, r7, r1
 800a686:	9300      	str	r3, [sp, #0]
 800a688:	2308      	movs	r3, #8
 800a68a:	2201      	movs	r2, #1
 800a68c:	2101      	movs	r1, #1
 800a68e:	2007      	movs	r0, #7
 800a690:	f7ff fa76 	bl	8009b80 <Create_Module_Bus_Packet>
 800a694:	0003      	movs	r3, r0
 800a696:	61fb      	str	r3, [r7, #28]
	Module_Bus_Immediate_Send(packet, 1);
 800a698:	69fb      	ldr	r3, [r7, #28]
 800a69a:	2101      	movs	r1, #1
 800a69c:	0018      	movs	r0, r3
 800a69e:	f7ff f963 	bl	8009968 <Module_Bus_Immediate_Send>
}
 800a6a2:	46c0      	nop			@ (mov r8, r8)
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	b00a      	add	sp, #40	@ 0x28
 800a6a8:	bdb0      	pop	{r4, r5, r7, pc}
 800a6aa:	46c0      	nop			@ (mov r8, r8)
 800a6ac:	0800dcd8 	.word	0x0800dcd8

0800a6b0 <pmdGetMsTicks>:
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	af00      	add	r7, sp, #0
	return uwTick;
 800a6b4:	4b02      	ldr	r3, [pc, #8]	@ (800a6c0 <pmdGetMsTicks+0x10>)
 800a6b6:	681b      	ldr	r3, [r3, #0]
}
 800a6b8:	0018      	movs	r0, r3
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	bd80      	pop	{r7, pc}
 800a6be:	46c0      	nop			@ (mov r8, r8)
 800a6c0:	20000a2c 	.word	0x20000a2c

0800a6c4 <TimedOut>:
static inline bool TimedOut(uint32_t start, uint32_t period){return (pmdGetMsTicks() - start) > period;}
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b082      	sub	sp, #8
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]
 800a6cc:	6039      	str	r1, [r7, #0]
 800a6ce:	f7ff ffef 	bl	800a6b0 <pmdGetMsTicks>
 800a6d2:	0002      	movs	r2, r0
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	1ad3      	subs	r3, r2, r3
 800a6d8:	683a      	ldr	r2, [r7, #0]
 800a6da:	429a      	cmp	r2, r3
 800a6dc:	419b      	sbcs	r3, r3
 800a6de:	425b      	negs	r3, r3
 800a6e0:	b2db      	uxtb	r3, r3
 800a6e2:	0018      	movs	r0, r3
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	b002      	add	sp, #8
 800a6e8:	bd80      	pop	{r7, pc}

0800a6ea <RB8_Init>:
	volatile uint8_t head_indx;
	volatile uint8_t tail_indx;
}RingBuf8;

INLINE void RB8_Init(RingBuf8 *buf)
{
 800a6ea:	b580      	push	{r7, lr}
 800a6ec:	b082      	sub	sp, #8
 800a6ee:	af00      	add	r7, sp, #0
 800a6f0:	6078      	str	r0, [r7, #4]
	buf->head_indx = buf->tail_indx = 0;
 800a6f2:	2000      	movs	r0, #0
 800a6f4:	687a      	ldr	r2, [r7, #4]
 800a6f6:	2302      	movs	r3, #2
 800a6f8:	33ff      	adds	r3, #255	@ 0xff
 800a6fa:	1c01      	adds	r1, r0, #0
 800a6fc:	54d1      	strb	r1, [r2, r3]
 800a6fe:	687a      	ldr	r2, [r7, #4]
 800a700:	2380      	movs	r3, #128	@ 0x80
 800a702:	005b      	lsls	r3, r3, #1
 800a704:	1c01      	adds	r1, r0, #0
 800a706:	54d1      	strb	r1, [r2, r3]
}
 800a708:	46c0      	nop			@ (mov r8, r8)
 800a70a:	46bd      	mov	sp, r7
 800a70c:	b002      	add	sp, #8
 800a70e:	bd80      	pop	{r7, pc}

0800a710 <Init_I2C_Slave>:
static MODULE_BUS_PACKET *m_pkt = NULL;
static volatile uint8_t *m_buffer = NULL;
static volatile uint8_t m_size = 0;

void Init_I2C_Slave(void)
{
 800a710:	b580      	push	{r7, lr}
 800a712:	af00      	add	r7, sp, #0
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 800a714:	2200      	movs	r2, #0
 800a716:	2100      	movs	r1, #0
 800a718:	2017      	movs	r0, #23
 800a71a:	f7f8 fb1d 	bl	8002d58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 800a71e:	2017      	movs	r0, #23
 800a720:	f7f8 fb2f 	bl	8002d82 <HAL_NVIC_EnableIRQ>

    RB8_Init(&RX_buf);
 800a724:	4b26      	ldr	r3, [pc, #152]	@ (800a7c0 <Init_I2C_Slave+0xb0>)
 800a726:	0018      	movs	r0, r3
 800a728:	f7ff ffdf 	bl	800a6ea <RB8_Init>
    RB8_Init(&State_buf);
 800a72c:	4b25      	ldr	r3, [pc, #148]	@ (800a7c4 <Init_I2C_Slave+0xb4>)
 800a72e:	0018      	movs	r0, r3
 800a730:	f7ff ffdb 	bl	800a6ea <RB8_Init>


    I2C1->CR1 |= I2C_CR1_PE | I2C_CR1_RXIE | I2C_CR1_ADDRIE | I2C_CR1_NACKIE | I2C_CR1_STOPIE | I2C_CR1_ERRIE;
 800a734:	4b24      	ldr	r3, [pc, #144]	@ (800a7c8 <Init_I2C_Slave+0xb8>)
 800a736:	681a      	ldr	r2, [r3, #0]
 800a738:	4b23      	ldr	r3, [pc, #140]	@ (800a7c8 <Init_I2C_Slave+0xb8>)
 800a73a:	21bd      	movs	r1, #189	@ 0xbd
 800a73c:	430a      	orrs	r2, r1
 800a73e:	601a      	str	r2, [r3, #0]
    I2C1->CR1 &= ~I2C_CR1_TXIE;
 800a740:	4b21      	ldr	r3, [pc, #132]	@ (800a7c8 <Init_I2C_Slave+0xb8>)
 800a742:	681a      	ldr	r2, [r3, #0]
 800a744:	4b20      	ldr	r3, [pc, #128]	@ (800a7c8 <Init_I2C_Slave+0xb8>)
 800a746:	2102      	movs	r1, #2
 800a748:	438a      	bics	r2, r1
 800a74a:	601a      	str	r2, [r3, #0]
    I2C1->CR2 &= ~I2C_CR2_AUTOEND;
 800a74c:	4b1e      	ldr	r3, [pc, #120]	@ (800a7c8 <Init_I2C_Slave+0xb8>)
 800a74e:	685a      	ldr	r2, [r3, #4]
 800a750:	4b1d      	ldr	r3, [pc, #116]	@ (800a7c8 <Init_I2C_Slave+0xb8>)
 800a752:	491e      	ldr	r1, [pc, #120]	@ (800a7cc <Init_I2C_Slave+0xbc>)
 800a754:	400a      	ands	r2, r1
 800a756:	605a      	str	r2, [r3, #4]
    I2C1->CR2 |= 4 << I2C_CR2_NBYTES_Pos;
 800a758:	4b1b      	ldr	r3, [pc, #108]	@ (800a7c8 <Init_I2C_Slave+0xb8>)
 800a75a:	685a      	ldr	r2, [r3, #4]
 800a75c:	4b1a      	ldr	r3, [pc, #104]	@ (800a7c8 <Init_I2C_Slave+0xb8>)
 800a75e:	2180      	movs	r1, #128	@ 0x80
 800a760:	02c9      	lsls	r1, r1, #11
 800a762:	430a      	orrs	r2, r1
 800a764:	605a      	str	r2, [r3, #4]
    // Clear Own Address 1
    I2C1->OAR1 &= ~I2C_OAR1_OA1EN;
 800a766:	4b18      	ldr	r3, [pc, #96]	@ (800a7c8 <Init_I2C_Slave+0xb8>)
 800a768:	689a      	ldr	r2, [r3, #8]
 800a76a:	4b17      	ldr	r3, [pc, #92]	@ (800a7c8 <Init_I2C_Slave+0xb8>)
 800a76c:	4918      	ldr	r1, [pc, #96]	@ (800a7d0 <Init_I2C_Slave+0xc0>)
 800a76e:	400a      	ands	r2, r1
 800a770:	609a      	str	r2, [r3, #8]
    I2C1->OAR1 &= ~I2C_OAR1_OA1;
 800a772:	4b15      	ldr	r3, [pc, #84]	@ (800a7c8 <Init_I2C_Slave+0xb8>)
 800a774:	689a      	ldr	r2, [r3, #8]
 800a776:	4b14      	ldr	r3, [pc, #80]	@ (800a7c8 <Init_I2C_Slave+0xb8>)
 800a778:	0a92      	lsrs	r2, r2, #10
 800a77a:	0292      	lsls	r2, r2, #10
 800a77c:	609a      	str	r2, [r3, #8]
    // Set Own Address 1
    I2C1->OAR1 |= I2C_OAR1_OA1EN | (Primary_Slave_Addr << 1); //(Module_Info.Module_I2C_Address << 1);
 800a77e:	4b12      	ldr	r3, [pc, #72]	@ (800a7c8 <Init_I2C_Slave+0xb8>)
 800a780:	689a      	ldr	r2, [r3, #8]
 800a782:	4b14      	ldr	r3, [pc, #80]	@ (800a7d4 <Init_I2C_Slave+0xc4>)
 800a784:	781b      	ldrb	r3, [r3, #0]
 800a786:	005b      	lsls	r3, r3, #1
 800a788:	431a      	orrs	r2, r3
 800a78a:	4b0f      	ldr	r3, [pc, #60]	@ (800a7c8 <Init_I2C_Slave+0xb8>)
 800a78c:	2180      	movs	r1, #128	@ 0x80
 800a78e:	0209      	lsls	r1, r1, #8
 800a790:	430a      	orrs	r2, r1
 800a792:	609a      	str	r2, [r3, #8]

    // Set Timing to 400 kHz
    // I2C1->TIMINGR |= 0x00500000; // ZGy_Note

    // Disable timeout
    I2C1->TIMEOUTR &= ~I2C_TIMEOUTR_TEXTEN;
 800a794:	4b0c      	ldr	r3, [pc, #48]	@ (800a7c8 <Init_I2C_Slave+0xb8>)
 800a796:	695a      	ldr	r2, [r3, #20]
 800a798:	4b0b      	ldr	r3, [pc, #44]	@ (800a7c8 <Init_I2C_Slave+0xb8>)
 800a79a:	0052      	lsls	r2, r2, #1
 800a79c:	0852      	lsrs	r2, r2, #1
 800a79e:	615a      	str	r2, [r3, #20]
#if !defined(DISABLE_I2C_TIMEOUTS)
    // Set timeout to 1/2 second
    I2C1->TIMEOUTR |= I2C_TIMEOUTR_TIMEOUTB;
 800a7a0:	4b09      	ldr	r3, [pc, #36]	@ (800a7c8 <Init_I2C_Slave+0xb8>)
 800a7a2:	695a      	ldr	r2, [r3, #20]
 800a7a4:	4b08      	ldr	r3, [pc, #32]	@ (800a7c8 <Init_I2C_Slave+0xb8>)
 800a7a6:	490c      	ldr	r1, [pc, #48]	@ (800a7d8 <Init_I2C_Slave+0xc8>)
 800a7a8:	430a      	orrs	r2, r1
 800a7aa:	615a      	str	r2, [r3, #20]

    // Enable timeout
    I2C1->TIMEOUTR |= I2C_TIMEOUTR_TEXTEN;
 800a7ac:	4b06      	ldr	r3, [pc, #24]	@ (800a7c8 <Init_I2C_Slave+0xb8>)
 800a7ae:	695a      	ldr	r2, [r3, #20]
 800a7b0:	4b05      	ldr	r3, [pc, #20]	@ (800a7c8 <Init_I2C_Slave+0xb8>)
 800a7b2:	2180      	movs	r1, #128	@ 0x80
 800a7b4:	0609      	lsls	r1, r1, #24
 800a7b6:	430a      	orrs	r2, r1
 800a7b8:	615a      	str	r2, [r3, #20]
#endif
}
 800a7ba:	46c0      	nop			@ (mov r8, r8)
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	bd80      	pop	{r7, pc}
 800a7c0:	20000e18 	.word	0x20000e18
 800a7c4:	20000f1c 	.word	0x20000f1c
 800a7c8:	40005400 	.word	0x40005400
 800a7cc:	fdffffff 	.word	0xfdffffff
 800a7d0:	ffff7fff 	.word	0xffff7fff
 800a7d4:	0800e118 	.word	0x0800e118
 800a7d8:	0fff0000 	.word	0x0fff0000

0800a7dc <Send_Next_Queued_Packet>:

/*****************************************************************************************
 * @note	This function may be called from the I2C interrupt handler
 *****************************************************************************************/
void Send_Next_Queued_Packet(void)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	af00      	add	r7, sp, #0
	PS('u');

	if(m_pkt)
 800a7e0:	4b23      	ldr	r3, [pc, #140]	@ (800a870 <Send_Next_Queued_Packet+0x94>)
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d106      	bne.n	800a7f6 <Send_Next_Queued_Packet+0x1a>
		PS('z');
	}
	else
	{
		PS('n');
		m_pkt = MsgQ_Pop(&TX_Que);
 800a7e8:	4b22      	ldr	r3, [pc, #136]	@ (800a874 <Send_Next_Queued_Packet+0x98>)
 800a7ea:	0018      	movs	r0, r3
 800a7ec:	f7ff fc28 	bl	800a040 <MsgQ_Pop>
 800a7f0:	0002      	movs	r2, r0
 800a7f2:	4b1f      	ldr	r3, [pc, #124]	@ (800a870 <Send_Next_Queued_Packet+0x94>)
 800a7f4:	601a      	str	r2, [r3, #0]
	}

	if(m_pkt)
 800a7f6:	4b1e      	ldr	r3, [pc, #120]	@ (800a870 <Send_Next_Queued_Packet+0x94>)
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d034      	beq.n	800a868 <Send_Next_Queued_Packet+0x8c>
	{
		PS('q');
		m_size = PACKET_HEADER_SIZE +
				CRC_SIZE +
				m_pkt->Formatted_Data.Packet_Header.Formatted_Packet_Header.Data_Length;
 800a7fe:	4b1c      	ldr	r3, [pc, #112]	@ (800a870 <Send_Next_Queued_Packet+0x94>)
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	78db      	ldrb	r3, [r3, #3]
				CRC_SIZE +
 800a804:	3305      	adds	r3, #5
 800a806:	b2da      	uxtb	r2, r3
		m_size = PACKET_HEADER_SIZE +
 800a808:	4b1b      	ldr	r3, [pc, #108]	@ (800a878 <Send_Next_Queued_Packet+0x9c>)
 800a80a:	701a      	strb	r2, [r3, #0]
		m_buffer = (uint8_t*)m_pkt->Raw_Data;
 800a80c:	4b18      	ldr	r3, [pc, #96]	@ (800a870 <Send_Next_Queued_Packet+0x94>)
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	001a      	movs	r2, r3
 800a812:	4b1a      	ldr	r3, [pc, #104]	@ (800a87c <Send_Next_Queued_Packet+0xa0>)
 800a814:	601a      	str	r2, [r3, #0]
		m_buffer[m_size-1] = m_pkt->Formatted_Data.Data[m_pkt->Formatted_Data.Packet_Header.Formatted_Packet_Header.Data_Length];
 800a816:	4b16      	ldr	r3, [pc, #88]	@ (800a870 <Send_Next_Queued_Packet+0x94>)
 800a818:	681a      	ldr	r2, [r3, #0]
 800a81a:	4b15      	ldr	r3, [pc, #84]	@ (800a870 <Send_Next_Queued_Packet+0x94>)
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	78db      	ldrb	r3, [r3, #3]
 800a820:	0018      	movs	r0, r3
 800a822:	4b16      	ldr	r3, [pc, #88]	@ (800a87c <Send_Next_Queued_Packet+0xa0>)
 800a824:	6819      	ldr	r1, [r3, #0]
 800a826:	4b14      	ldr	r3, [pc, #80]	@ (800a878 <Send_Next_Queued_Packet+0x9c>)
 800a828:	781b      	ldrb	r3, [r3, #0]
 800a82a:	b2db      	uxtb	r3, r3
 800a82c:	3b01      	subs	r3, #1
 800a82e:	18cb      	adds	r3, r1, r3
 800a830:	1812      	adds	r2, r2, r0
 800a832:	7912      	ldrb	r2, [r2, #4]
 800a834:	701a      	strb	r2, [r3, #0]

		I2C1->CR2 &= ~I2C_CR2_NBYTES;
 800a836:	4b12      	ldr	r3, [pc, #72]	@ (800a880 <Send_Next_Queued_Packet+0xa4>)
 800a838:	685a      	ldr	r2, [r3, #4]
 800a83a:	4b11      	ldr	r3, [pc, #68]	@ (800a880 <Send_Next_Queued_Packet+0xa4>)
 800a83c:	4911      	ldr	r1, [pc, #68]	@ (800a884 <Send_Next_Queued_Packet+0xa8>)
 800a83e:	400a      	ands	r2, r1
 800a840:	605a      	str	r2, [r3, #4]
		I2C1->CR2 |= (PACKET_HEADER_SIZE << I2C_CR2_NBYTES_Pos) | I2C_CR2_AUTOEND;
 800a842:	4b0f      	ldr	r3, [pc, #60]	@ (800a880 <Send_Next_Queued_Packet+0xa4>)
 800a844:	685a      	ldr	r2, [r3, #4]
 800a846:	4b0e      	ldr	r3, [pc, #56]	@ (800a880 <Send_Next_Queued_Packet+0xa4>)
 800a848:	2181      	movs	r1, #129	@ 0x81
 800a84a:	0489      	lsls	r1, r1, #18
 800a84c:	430a      	orrs	r2, r1
 800a84e:	605a      	str	r2, [r3, #4]

		// Set the interrupt flags, then enable the interrupt.
		I2C1->ISR |= I2C_ISR_TXE | I2C_ISR_TXIS;
 800a850:	4b0b      	ldr	r3, [pc, #44]	@ (800a880 <Send_Next_Queued_Packet+0xa4>)
 800a852:	699a      	ldr	r2, [r3, #24]
 800a854:	4b0a      	ldr	r3, [pc, #40]	@ (800a880 <Send_Next_Queued_Packet+0xa4>)
 800a856:	2103      	movs	r1, #3
 800a858:	430a      	orrs	r2, r1
 800a85a:	619a      	str	r2, [r3, #24]
		I2C1->CR1 |= I2C_CR1_TXIE;
 800a85c:	4b08      	ldr	r3, [pc, #32]	@ (800a880 <Send_Next_Queued_Packet+0xa4>)
 800a85e:	681a      	ldr	r2, [r3, #0]
 800a860:	4b07      	ldr	r3, [pc, #28]	@ (800a880 <Send_Next_Queued_Packet+0xa4>)
 800a862:	2102      	movs	r1, #2
 800a864:	430a      	orrs	r2, r1
 800a866:	601a      	str	r2, [r3, #0]
	}
}
 800a868:	46c0      	nop			@ (mov r8, r8)
 800a86a:	46bd      	mov	sp, r7
 800a86c:	bd80      	pop	{r7, pc}
 800a86e:	46c0      	nop			@ (mov r8, r8)
 800a870:	20001020 	.word	0x20001020
 800a874:	20000ad8 	.word	0x20000ad8
 800a878:	20001028 	.word	0x20001028
 800a87c:	20001024 	.word	0x20001024
 800a880:	40005400 	.word	0x40005400
 800a884:	ff00ffff 	.word	0xff00ffff

0800a888 <Update_I2C_State_Machine>:
//	i2c_Transmit_Restart,		// g
//	i2c_TX_Complete,			// h
//	i2c_Idle,					// i

void Update_I2C_State_Machine(void)
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	af00      	add	r7, sp, #0
	static I2C_State i2coldstate = i2c_Idle;

	// Process incoming messages
	while(IMsgQ_Get_Num_Packets(&RX_Que))
 800a88c:	e00b      	b.n	800a8a6 <Update_I2C_State_Machine+0x1e>
	{
		I2C_Data_Received_Callback(IMsgQ_Peek(&RX_Que));
 800a88e:	4b69      	ldr	r3, [pc, #420]	@ (800aa34 <Update_I2C_State_Machine+0x1ac>)
 800a890:	0018      	movs	r0, r3
 800a892:	f7fe fd37 	bl	8009304 <IMsgQ_Peek>
 800a896:	0003      	movs	r3, r0
 800a898:	0018      	movs	r0, r3
 800a89a:	f7ff f923 	bl	8009ae4 <I2C_Data_Received_Callback>
		IMsgQ_Pop(&RX_Que);
 800a89e:	4b65      	ldr	r3, [pc, #404]	@ (800aa34 <Update_I2C_State_Machine+0x1ac>)
 800a8a0:	0018      	movs	r0, r3
 800a8a2:	f7fe fd3a 	bl	800931a <IMsgQ_Pop>
	while(IMsgQ_Get_Num_Packets(&RX_Que))
 800a8a6:	4b63      	ldr	r3, [pc, #396]	@ (800aa34 <Update_I2C_State_Machine+0x1ac>)
 800a8a8:	0018      	movs	r0, r3
 800a8aa:	f7fe fd71 	bl	8009390 <IMsgQ_Get_Num_Packets>
 800a8ae:	1e03      	subs	r3, r0, #0
 800a8b0:	d1ed      	bne.n	800a88e <Update_I2C_State_Machine+0x6>
	}

	do
	{
		if(state != i2coldstate)
 800a8b2:	4b61      	ldr	r3, [pc, #388]	@ (800aa38 <Update_I2C_State_Machine+0x1b0>)
 800a8b4:	781b      	ldrb	r3, [r3, #0]
 800a8b6:	b2da      	uxtb	r2, r3
 800a8b8:	4b60      	ldr	r3, [pc, #384]	@ (800aa3c <Update_I2C_State_Machine+0x1b4>)
 800a8ba:	781b      	ldrb	r3, [r3, #0]
 800a8bc:	429a      	cmp	r2, r3
 800a8be:	d009      	beq.n	800a8d4 <Update_I2C_State_Machine+0x4c>
		{
			State_Start_Time = pmdGetMsTicks();
 800a8c0:	f7ff fef6 	bl	800a6b0 <pmdGetMsTicks>
 800a8c4:	0002      	movs	r2, r0
 800a8c6:	4b5e      	ldr	r3, [pc, #376]	@ (800aa40 <Update_I2C_State_Machine+0x1b8>)
 800a8c8:	601a      	str	r2, [r3, #0]

			// State Change Flag
			PS('>');
			PS(state_chars[state]);

			i2coldstate = state;
 800a8ca:	4b5b      	ldr	r3, [pc, #364]	@ (800aa38 <Update_I2C_State_Machine+0x1b0>)
 800a8cc:	781b      	ldrb	r3, [r3, #0]
 800a8ce:	b2da      	uxtb	r2, r3
 800a8d0:	4b5a      	ldr	r3, [pc, #360]	@ (800aa3c <Update_I2C_State_Machine+0x1b4>)
 800a8d2:	701a      	strb	r2, [r3, #0]
		}

		switch(state)
 800a8d4:	4b58      	ldr	r3, [pc, #352]	@ (800aa38 <Update_I2C_State_Machine+0x1b0>)
 800a8d6:	781b      	ldrb	r3, [r3, #0]
 800a8d8:	b2db      	uxtb	r3, r3
 800a8da:	2b08      	cmp	r3, #8
 800a8dc:	d900      	bls.n	800a8e0 <Update_I2C_State_Machine+0x58>
 800a8de:	e07e      	b.n	800a9de <Update_I2C_State_Machine+0x156>
 800a8e0:	009a      	lsls	r2, r3, #2
 800a8e2:	4b58      	ldr	r3, [pc, #352]	@ (800aa44 <Update_I2C_State_Machine+0x1bc>)
 800a8e4:	18d3      	adds	r3, r2, r3
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	469f      	mov	pc, r3
			break;
		case i2c_Start_Transmit:
			PS('e');

			// We may need to spin here as there may be a brief delay before message is queued
			if(MsgQ_Get_Num_Packets(&TX_Que))
 800a8ea:	4b57      	ldr	r3, [pc, #348]	@ (800aa48 <Update_I2C_State_Machine+0x1c0>)
 800a8ec:	0018      	movs	r0, r3
 800a8ee:	f7ff fbe8 	bl	800a0c2 <MsgQ_Get_Num_Packets>
 800a8f2:	1e03      	subs	r3, r0, #0
 800a8f4:	d00d      	beq.n	800a912 <Update_I2C_State_Machine+0x8a>
			{
				i2cprintf("Tmit\r\n");
 800a8f6:	4b55      	ldr	r3, [pc, #340]	@ (800aa4c <Update_I2C_State_Machine+0x1c4>)
 800a8f8:	0018      	movs	r0, r3
 800a8fa:	f000 fa21 	bl	800ad40 <noprintf>
				MsgQ_List_Queue_Packets(&TX_Que);
 800a8fe:	4b52      	ldr	r3, [pc, #328]	@ (800aa48 <Update_I2C_State_Machine+0x1c0>)
 800a900:	0018      	movs	r0, r3
 800a902:	f7ff fb69 	bl	8009fd8 <MsgQ_List_Queue_Packets>
				PS('k');
				Send_Next_Queued_Packet();
 800a906:	f7ff ff69 	bl	800a7dc <Send_Next_Queued_Packet>
//				printf("Send x%02X\r\n", m_pkt->Formatted_Data.Packet_Header.Formatted_Packet_Header.Command);
				state = i2c_Transmit;
 800a90a:	4b4b      	ldr	r3, [pc, #300]	@ (800aa38 <Update_I2C_State_Machine+0x1b0>)
 800a90c:	2205      	movs	r2, #5
 800a90e:	701a      	strb	r2, [r3, #0]
//					PS('j');
//					Send_Nada_Packet();
//					state = i2c_Transmit;
				}
			}
			break;
 800a910:	e062      	b.n	800a9d8 <Update_I2C_State_Machine+0x150>
				if(TimedOut(State_Start_Time, I2C_TRANSMIT_PENDING_TIMEOUT_MS))
 800a912:	4b4b      	ldr	r3, [pc, #300]	@ (800aa40 <Update_I2C_State_Machine+0x1b8>)
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	2164      	movs	r1, #100	@ 0x64
 800a918:	0018      	movs	r0, r3
 800a91a:	f7ff fed3 	bl	800a6c4 <TimedOut>
 800a91e:	1e03      	subs	r3, r0, #0
 800a920:	d05a      	beq.n	800a9d8 <Update_I2C_State_Machine+0x150>
					I2C1->CR2 |= I2C_CR2_NACK;
 800a922:	4b4b      	ldr	r3, [pc, #300]	@ (800aa50 <Update_I2C_State_Machine+0x1c8>)
 800a924:	685a      	ldr	r2, [r3, #4]
 800a926:	4b4a      	ldr	r3, [pc, #296]	@ (800aa50 <Update_I2C_State_Machine+0x1c8>)
 800a928:	2180      	movs	r1, #128	@ 0x80
 800a92a:	0209      	lsls	r1, r1, #8
 800a92c:	430a      	orrs	r2, r1
 800a92e:	605a      	str	r2, [r3, #4]
			break;
 800a930:	e052      	b.n	800a9d8 <Update_I2C_State_Machine+0x150>
		case i2c_Transmit:
			//PS('f');
			break;
		case i2c_Idle:
			//PS('i');
			i2cprintf("TX Complete\r\n");
 800a932:	4b48      	ldr	r3, [pc, #288]	@ (800aa54 <Update_I2C_State_Machine+0x1cc>)
 800a934:	0018      	movs	r0, r3
 800a936:	f000 fa03 	bl	800ad40 <noprintf>
			if(m_pkt)
 800a93a:	4b47      	ldr	r3, [pc, #284]	@ (800aa58 <Update_I2C_State_Machine+0x1d0>)
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d00f      	beq.n	800a962 <Update_I2C_State_Machine+0xda>
			{
				i2cprintf("Free Packet\r\n");
 800a942:	4b46      	ldr	r3, [pc, #280]	@ (800aa5c <Update_I2C_State_Machine+0x1d4>)
 800a944:	0018      	movs	r0, r3
 800a946:	f000 f9fb 	bl	800ad40 <noprintf>
				PS('p');
				pmdFree(m_pkt);
 800a94a:	4b43      	ldr	r3, [pc, #268]	@ (800aa58 <Update_I2C_State_Machine+0x1d0>)
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	223a      	movs	r2, #58	@ 0x3a
 800a950:	32ff      	adds	r2, #255	@ 0xff
 800a952:	0011      	movs	r1, r2
 800a954:	2200      	movs	r2, #0
 800a956:	0018      	movs	r0, r3
 800a958:	f000 f97c 	bl	800ac54 <dbg_free>
				m_pkt = NULL;
 800a95c:	4b3e      	ldr	r3, [pc, #248]	@ (800aa58 <Update_I2C_State_Machine+0x1d0>)
 800a95e:	2200      	movs	r2, #0
 800a960:	601a      	str	r2, [r3, #0]
			}
			if(MsgQ_Get_Num_Packets(&TX_Que))
 800a962:	4b39      	ldr	r3, [pc, #228]	@ (800aa48 <Update_I2C_State_Machine+0x1c0>)
 800a964:	0018      	movs	r0, r3
 800a966:	f7ff fbac 	bl	800a0c2 <MsgQ_Get_Num_Packets>
 800a96a:	1e03      	subs	r3, r0, #0
 800a96c:	d036      	beq.n	800a9dc <Update_I2C_State_Machine+0x154>
			{
				PS('o');
				// Send buffered message(s)
//				aci_print("\r\nSet Module Bus INT 3\r\n");
				Set_Module_Bus_INT();
 800a96e:	f7ff f85f 	bl	8009a30 <Set_Module_Bus_INT>
			}
			break;
 800a972:	e033      	b.n	800a9dc <Update_I2C_State_Machine+0x154>
		case i2c_TX_Complete:
			PS('h');
			i2cprintf("TX Complete\r\n");
 800a974:	4b37      	ldr	r3, [pc, #220]	@ (800aa54 <Update_I2C_State_Machine+0x1cc>)
 800a976:	0018      	movs	r0, r3
 800a978:	f000 f9e2 	bl	800ad40 <noprintf>
			if(m_pkt)
 800a97c:	4b36      	ldr	r3, [pc, #216]	@ (800aa58 <Update_I2C_State_Machine+0x1d0>)
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d00f      	beq.n	800a9a4 <Update_I2C_State_Machine+0x11c>
			{
				i2cprintf("Free Packet\r\n");
 800a984:	4b35      	ldr	r3, [pc, #212]	@ (800aa5c <Update_I2C_State_Machine+0x1d4>)
 800a986:	0018      	movs	r0, r3
 800a988:	f000 f9da 	bl	800ad40 <noprintf>
				PS('p');
				pmdFree(m_pkt);
 800a98c:	4b32      	ldr	r3, [pc, #200]	@ (800aa58 <Update_I2C_State_Machine+0x1d0>)
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	224c      	movs	r2, #76	@ 0x4c
 800a992:	32ff      	adds	r2, #255	@ 0xff
 800a994:	0011      	movs	r1, r2
 800a996:	2200      	movs	r2, #0
 800a998:	0018      	movs	r0, r3
 800a99a:	f000 f95b 	bl	800ac54 <dbg_free>
				m_pkt = NULL;
 800a99e:	4b2e      	ldr	r3, [pc, #184]	@ (800aa58 <Update_I2C_State_Machine+0x1d0>)
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	601a      	str	r2, [r3, #0]
			}
			if(MsgQ_Get_Num_Packets(&TX_Que))
 800a9a4:	4b28      	ldr	r3, [pc, #160]	@ (800aa48 <Update_I2C_State_Machine+0x1c0>)
 800a9a6:	0018      	movs	r0, r3
 800a9a8:	f7ff fb8b 	bl	800a0c2 <MsgQ_Get_Num_Packets>
 800a9ac:	1e03      	subs	r3, r0, #0
 800a9ae:	d001      	beq.n	800a9b4 <Update_I2C_State_Machine+0x12c>
			{
				PS('o');
				// Send buffered message(s)
//				aci_print("\r\nSet Module Bus INT 3\r\n");
				Set_Module_Bus_INT();
 800a9b0:	f7ff f83e 	bl	8009a30 <Set_Module_Bus_INT>
			}
			state = i2c_Idle;
 800a9b4:	4b20      	ldr	r3, [pc, #128]	@ (800aa38 <Update_I2C_State_Machine+0x1b0>)
 800a9b6:	2208      	movs	r2, #8
 800a9b8:	701a      	strb	r2, [r3, #0]
			break;
 800a9ba:	e010      	b.n	800a9de <Update_I2C_State_Machine+0x156>
		case i2c_RX_Complete:
			{
				PS('d');
				state = i2c_Idle;
 800a9bc:	4b1e      	ldr	r3, [pc, #120]	@ (800aa38 <Update_I2C_State_Machine+0x1b0>)
 800a9be:	2208      	movs	r2, #8
 800a9c0:	701a      	strb	r2, [r3, #0]
			}
			break;
 800a9c2:	e00c      	b.n	800a9de <Update_I2C_State_Machine+0x156>
		case i2c_Transmit_Restart:
			//PS('g');
			break;
		case i2c_Invalid_State:
			PS('a');
			printf("\r\nERROR:  I2C State should never be i2c_Invalid_State!\r\n");
 800a9c4:	4b26      	ldr	r3, [pc, #152]	@ (800aa60 <Update_I2C_State_Machine+0x1d8>)
 800a9c6:	0018      	movs	r0, r3
 800a9c8:	f000 fbfa 	bl	800b1c0 <puts>
			state = i2c_Idle;
 800a9cc:	4b1a      	ldr	r3, [pc, #104]	@ (800aa38 <Update_I2C_State_Machine+0x1b0>)
 800a9ce:	2208      	movs	r2, #8
 800a9d0:	701a      	strb	r2, [r3, #0]
			break;
 800a9d2:	e004      	b.n	800a9de <Update_I2C_State_Machine+0x156>
			break;
 800a9d4:	46c0      	nop			@ (mov r8, r8)
 800a9d6:	e002      	b.n	800a9de <Update_I2C_State_Machine+0x156>
			break;
 800a9d8:	46c0      	nop			@ (mov r8, r8)
 800a9da:	e000      	b.n	800a9de <Update_I2C_State_Machine+0x156>
			break;
 800a9dc:	46c0      	nop			@ (mov r8, r8)
		}

		// Release INT_OUT after timeout
		if(Module_Bus.Is_Module_Bus_INT_Set && TimedOut(Module_Bus.Int_Out_Start_Time, MODULE_INT_TIMEOUT))
 800a9de:	4b21      	ldr	r3, [pc, #132]	@ (800aa64 <Update_I2C_State_Machine+0x1dc>)
 800a9e0:	795b      	ldrb	r3, [r3, #5]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d009      	beq.n	800a9fa <Update_I2C_State_Machine+0x172>
 800a9e6:	4b1f      	ldr	r3, [pc, #124]	@ (800aa64 <Update_I2C_State_Machine+0x1dc>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	2114      	movs	r1, #20
 800a9ec:	0018      	movs	r0, r3
 800a9ee:	f7ff fe69 	bl	800a6c4 <TimedOut>
 800a9f2:	1e03      	subs	r3, r0, #0
 800a9f4:	d001      	beq.n	800a9fa <Update_I2C_State_Machine+0x172>
		{
			Clear_Module_Bus_INT();
 800a9f6:	f7ff f849 	bl	8009a8c <Clear_Module_Bus_INT>
			// Clear the controller interrupt
			Clear_Module_Bus_INT();
			state = i2c_Idle;
		}
#endif
	}while(state != i2coldstate);
 800a9fa:	4b0f      	ldr	r3, [pc, #60]	@ (800aa38 <Update_I2C_State_Machine+0x1b0>)
 800a9fc:	781b      	ldrb	r3, [r3, #0]
 800a9fe:	b2da      	uxtb	r2, r3
 800aa00:	4b0e      	ldr	r3, [pc, #56]	@ (800aa3c <Update_I2C_State_Machine+0x1b4>)
 800aa02:	781b      	ldrb	r3, [r3, #0]
 800aa04:	429a      	cmp	r2, r3
 800aa06:	d000      	beq.n	800aa0a <Update_I2C_State_Machine+0x182>
 800aa08:	e753      	b.n	800a8b2 <Update_I2C_State_Machine+0x2a>
		__io_putchar('\n');
		fflush(stdout);
	}
#endif

	if(Log_I2C_State_Flag)
 800aa0a:	4b17      	ldr	r3, [pc, #92]	@ (800aa68 <Update_I2C_State_Machine+0x1e0>)
 800aa0c:	781b      	ldrb	r3, [r3, #0]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d00d      	beq.n	800aa2e <Update_I2C_State_Machine+0x1a6>
	{
		Log_I2C_State_Flag = 0;
 800aa12:	4b15      	ldr	r3, [pc, #84]	@ (800aa68 <Update_I2C_State_Machine+0x1e0>)
 800aa14:	2200      	movs	r2, #0
 800aa16:	701a      	strb	r2, [r3, #0]
		printf("\r\nNum Packets in Queue:  %d\r\n", MsgQ_Get_Num_Packets(&TX_Que));
 800aa18:	4b0b      	ldr	r3, [pc, #44]	@ (800aa48 <Update_I2C_State_Machine+0x1c0>)
 800aa1a:	0018      	movs	r0, r3
 800aa1c:	f7ff fb51 	bl	800a0c2 <MsgQ_Get_Num_Packets>
 800aa20:	0003      	movs	r3, r0
 800aa22:	001a      	movs	r2, r3
 800aa24:	4b11      	ldr	r3, [pc, #68]	@ (800aa6c <Update_I2C_State_Machine+0x1e4>)
 800aa26:	0011      	movs	r1, r2
 800aa28:	0018      	movs	r0, r3
 800aa2a:	f000 fb59 	bl	800b0e0 <iprintf>
	}

	//i2cerrlog("");
}
 800aa2e:	46c0      	nop			@ (mov r8, r8)
 800aa30:	46bd      	mov	sp, r7
 800aa32:	bd80      	pop	{r7, pc}
 800aa34:	20000ae8 	.word	0x20000ae8
 800aa38:	2000003e 	.word	0x2000003e
 800aa3c:	2000003f 	.word	0x2000003f
 800aa40:	20000e14 	.word	0x20000e14
 800aa44:	0800e1d8 	.word	0x0800e1d8
 800aa48:	20000ad8 	.word	0x20000ad8
 800aa4c:	0800dd28 	.word	0x0800dd28
 800aa50:	40005400 	.word	0x40005400
 800aa54:	0800dd30 	.word	0x0800dd30
 800aa58:	20001020 	.word	0x20001020
 800aa5c:	0800dd40 	.word	0x0800dd40
 800aa60:	0800dd50 	.word	0x0800dd50
 800aa64:	20000ad0 	.word	0x20000ad0
 800aa68:	20000e11 	.word	0x20000e11
 800aa6c:	0800dd88 	.word	0x0800dd88

0800aa70 <pmdGetMsTicks>:
{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	af00      	add	r7, sp, #0
	return uwTick;
 800aa74:	4b02      	ldr	r3, [pc, #8]	@ (800aa80 <pmdGetMsTicks+0x10>)
 800aa76:	681b      	ldr	r3, [r3, #0]
}
 800aa78:	0018      	movs	r0, r3
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	bd80      	pop	{r7, pc}
 800aa7e:	46c0      	nop			@ (mov r8, r8)
 800aa80:	20000a2c 	.word	0x20000a2c

0800aa84 <led_set_timer>:
/*------------------------------------*/
#include "util.h"
static int led_task_timer=0;
static inline void led_set_timer(int ll);
static inline void led_set_timer(int ll)
{
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b082      	sub	sp, #8
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
	led_task_timer=ll+GetMsTicks();
 800aa8c:	f7ff fff0 	bl	800aa70 <pmdGetMsTicks>
 800aa90:	0002      	movs	r2, r0
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	18d3      	adds	r3, r2, r3
 800aa96:	001a      	movs	r2, r3
 800aa98:	4b02      	ldr	r3, [pc, #8]	@ (800aaa4 <led_set_timer+0x20>)
 800aa9a:	601a      	str	r2, [r3, #0]
}
 800aa9c:	46c0      	nop			@ (mov r8, r8)
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	b002      	add	sp, #8
 800aaa2:	bd80      	pop	{r7, pc}
 800aaa4:	2000102c 	.word	0x2000102c

0800aaa8 <led_blink_fast>:
	led_clr_timer();
}

void led_blink_fast(void);
void led_blink_fast()
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	af00      	add	r7, sp, #0
	led_lit_time = 50;
 800aaac:	4b05      	ldr	r3, [pc, #20]	@ (800aac4 <led_blink_fast+0x1c>)
 800aaae:	2232      	movs	r2, #50	@ 0x32
 800aab0:	601a      	str	r2, [r3, #0]
	led_dim_time = 50;
 800aab2:	4b05      	ldr	r3, [pc, #20]	@ (800aac8 <led_blink_fast+0x20>)
 800aab4:	2232      	movs	r2, #50	@ 0x32
 800aab6:	601a      	str	r2, [r3, #0]
	led_set_timer(10);
 800aab8:	200a      	movs	r0, #10
 800aaba:	f7ff ffe3 	bl	800aa84 <led_set_timer>
}
 800aabe:	46c0      	nop			@ (mov r8, r8)
 800aac0:	46bd      	mov	sp, r7
 800aac2:	bd80      	pop	{r7, pc}
 800aac4:	20001030 	.word	0x20001030
 800aac8:	20000040 	.word	0x20000040

0800aacc <store_ptr>:
static volatile char  ptr_rel[64];
static short int  ptr_len[64];
static short int  ptr_line[64];
static void store_ptr(void *ptr);
static void store_ptr(void *ptr)
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b084      	sub	sp, #16
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
	int i;
	i=app_malloc_times;
 800aad4:	4b0c      	ldr	r3, [pc, #48]	@ (800ab08 <store_ptr+0x3c>)
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	60fb      	str	r3, [r7, #12]
	if(i>63)
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	2b3f      	cmp	r3, #63	@ 0x3f
 800aade:	dc0f      	bgt.n	800ab00 <store_ptr+0x34>
		return;
	ptr_stack[i]=ptr;
 800aae0:	4b0a      	ldr	r3, [pc, #40]	@ (800ab0c <store_ptr+0x40>)
 800aae2:	68fa      	ldr	r2, [r7, #12]
 800aae4:	0092      	lsls	r2, r2, #2
 800aae6:	6879      	ldr	r1, [r7, #4]
 800aae8:	50d1      	str	r1, [r2, r3]
	ptr_rel[i]='M';
 800aaea:	4a09      	ldr	r2, [pc, #36]	@ (800ab10 <store_ptr+0x44>)
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	18d3      	adds	r3, r2, r3
 800aaf0:	224d      	movs	r2, #77	@ 0x4d
 800aaf2:	701a      	strb	r2, [r3, #0]
	app_malloc_times++;
 800aaf4:	4b04      	ldr	r3, [pc, #16]	@ (800ab08 <store_ptr+0x3c>)
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	1c5a      	adds	r2, r3, #1
 800aafa:	4b03      	ldr	r3, [pc, #12]	@ (800ab08 <store_ptr+0x3c>)
 800aafc:	601a      	str	r2, [r3, #0]
 800aafe:	e000      	b.n	800ab02 <store_ptr+0x36>
		return;
 800ab00:	46c0      	nop			@ (mov r8, r8)
}
 800ab02:	46bd      	mov	sp, r7
 800ab04:	b004      	add	sp, #16
 800ab06:	bd80      	pop	{r7, pc}
 800ab08:	20001034 	.word	0x20001034
 800ab0c:	20001038 	.word	0x20001038
 800ab10:	20001138 	.word	0x20001138

0800ab14 <check_ptr>:

static int check_ptr(void *ptr);
static int check_ptr(void *ptr)
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b084      	sub	sp, #16
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
	int i,j;
	i=app_malloc_times;
 800ab1c:	4b13      	ldr	r3, [pc, #76]	@ (800ab6c <check_ptr+0x58>)
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	60bb      	str	r3, [r7, #8]
	if(i>63)
 800ab22:	68bb      	ldr	r3, [r7, #8]
 800ab24:	2b3f      	cmp	r3, #63	@ 0x3f
 800ab26:	dd01      	ble.n	800ab2c <check_ptr+0x18>
		return 1;
 800ab28:	2301      	movs	r3, #1
 800ab2a:	e01b      	b.n	800ab64 <check_ptr+0x50>
	for(j=i-1;j>0;j--)
 800ab2c:	68bb      	ldr	r3, [r7, #8]
 800ab2e:	3b01      	subs	r3, #1
 800ab30:	60fb      	str	r3, [r7, #12]
 800ab32:	e013      	b.n	800ab5c <check_ptr+0x48>
	{
		if(ptr==ptr_stack[j])
 800ab34:	4b0e      	ldr	r3, [pc, #56]	@ (800ab70 <check_ptr+0x5c>)
 800ab36:	68fa      	ldr	r2, [r7, #12]
 800ab38:	0092      	lsls	r2, r2, #2
 800ab3a:	58d3      	ldr	r3, [r2, r3]
 800ab3c:	687a      	ldr	r2, [r7, #4]
 800ab3e:	429a      	cmp	r2, r3
 800ab40:	d108      	bne.n	800ab54 <check_ptr+0x40>
		{
			ptr_rel[j]='F';
 800ab42:	4a0c      	ldr	r2, [pc, #48]	@ (800ab74 <check_ptr+0x60>)
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	18d3      	adds	r3, r2, r3
 800ab48:	2246      	movs	r2, #70	@ 0x46
 800ab4a:	701a      	strb	r2, [r3, #0]
			return (i-j);
 800ab4c:	68ba      	ldr	r2, [r7, #8]
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	1ad3      	subs	r3, r2, r3
 800ab52:	e007      	b.n	800ab64 <check_ptr+0x50>
		}
		continue;
 800ab54:	46c0      	nop			@ (mov r8, r8)
	for(j=i-1;j>0;j--)
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	3b01      	subs	r3, #1
 800ab5a:	60fb      	str	r3, [r7, #12]
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	dce8      	bgt.n	800ab34 <check_ptr+0x20>
	}
	return 0;
 800ab62:	2300      	movs	r3, #0
}
 800ab64:	0018      	movs	r0, r3
 800ab66:	46bd      	mov	sp, r7
 800ab68:	b004      	add	sp, #16
 800ab6a:	bd80      	pop	{r7, pc}
 800ab6c:	20001034 	.word	0x20001034
 800ab70:	20001038 	.word	0x20001038
 800ab74:	20001138 	.word	0x20001138

0800ab78 <dec_counter>:

static int dec_counter(void);
static int dec_counter()
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b082      	sub	sp, #8
 800ab7c:	af00      	add	r7, sp, #0
	int i,j;
	i=app_malloc_times;
 800ab7e:	4b12      	ldr	r3, [pc, #72]	@ (800abc8 <dec_counter+0x50>)
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	603b      	str	r3, [r7, #0]
	if(i>63)
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	2b3f      	cmp	r3, #63	@ 0x3f
 800ab88:	dd01      	ble.n	800ab8e <dec_counter+0x16>
		return 0;
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	e018      	b.n	800abc0 <dec_counter+0x48>
	for(j=i-1;j>0;j--)
 800ab8e:	683b      	ldr	r3, [r7, #0]
 800ab90:	3b01      	subs	r3, #1
 800ab92:	607b      	str	r3, [r7, #4]
 800ab94:	e00e      	b.n	800abb4 <dec_counter+0x3c>
	{
		if(ptr_rel[j]=='F')
 800ab96:	4a0d      	ldr	r2, [pc, #52]	@ (800abcc <dec_counter+0x54>)
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	18d3      	adds	r3, r2, r3
 800ab9c:	781b      	ldrb	r3, [r3, #0]
 800ab9e:	b2db      	uxtb	r3, r3
 800aba0:	2b46      	cmp	r3, #70	@ 0x46
 800aba2:	d10b      	bne.n	800abbc <dec_counter+0x44>
			app_malloc_times--;
 800aba4:	4b08      	ldr	r3, [pc, #32]	@ (800abc8 <dec_counter+0x50>)
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	1e5a      	subs	r2, r3, #1
 800abaa:	4b07      	ldr	r3, [pc, #28]	@ (800abc8 <dec_counter+0x50>)
 800abac:	601a      	str	r2, [r3, #0]
	for(j=i-1;j>0;j--)
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	3b01      	subs	r3, #1
 800abb2:	607b      	str	r3, [r7, #4]
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	dced      	bgt.n	800ab96 <dec_counter+0x1e>
 800abba:	e000      	b.n	800abbe <dec_counter+0x46>
		else
			break;
 800abbc:	46c0      	nop			@ (mov r8, r8)
	}
	return j;
 800abbe:	687b      	ldr	r3, [r7, #4]
}
 800abc0:	0018      	movs	r0, r3
 800abc2:	46bd      	mov	sp, r7
 800abc4:	b002      	add	sp, #8
 800abc6:	bd80      	pop	{r7, pc}
 800abc8:	20001034 	.word	0x20001034
 800abcc:	20001138 	.word	0x20001138

0800abd0 <dbg_malloc>:

void *dbg_malloc(size_t size, unsigned int line, const char *file)
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b088      	sub	sp, #32
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	60f8      	str	r0, [r7, #12]
 800abd8:	60b9      	str	r1, [r7, #8]
 800abda:	607a      	str	r2, [r7, #4]
	// Store the size with the block being alloc'd
	mlc_struct *mlc = (mlc_struct*)malloc(size + 8);
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	3308      	adds	r3, #8
 800abe0:	0018      	movs	r0, r3
 800abe2:	f000 f8e9 	bl	800adb8 <malloc>
 800abe6:	0003      	movs	r3, r0
 800abe8:	61fb      	str	r3, [r7, #28]
	mlc->Size = size;
 800abea:	69fb      	ldr	r3, [r7, #28]
 800abec:	68fa      	ldr	r2, [r7, #12]
 800abee:	605a      	str	r2, [r3, #4]
	mlc->Magic = MAGIC_NUM;
 800abf0:	69fb      	ldr	r3, [r7, #28]
 800abf2:	4a13      	ldr	r2, [pc, #76]	@ (800ac40 <dbg_malloc+0x70>)
 800abf4:	601a      	str	r2, [r3, #0]
	void *mem = (void*)mlc->Payload;
 800abf6:	69fb      	ldr	r3, [r7, #28]
 800abf8:	3308      	adds	r3, #8
 800abfa:	61bb      	str	r3, [r7, #24]
	store_ptr(mem);
 800abfc:	69bb      	ldr	r3, [r7, #24]
 800abfe:	0018      	movs	r0, r3
 800ac00:	f7ff ff64 	bl	800aacc <store_ptr>
	int i;
	i=app_malloc_times;
 800ac04:	4b0f      	ldr	r3, [pc, #60]	@ (800ac44 <dbg_malloc+0x74>)
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	617b      	str	r3, [r7, #20]
	ptr_len[i]=size;
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	b219      	sxth	r1, r3
 800ac0e:	4b0e      	ldr	r3, [pc, #56]	@ (800ac48 <dbg_malloc+0x78>)
 800ac10:	697a      	ldr	r2, [r7, #20]
 800ac12:	0052      	lsls	r2, r2, #1
 800ac14:	52d1      	strh	r1, [r2, r3]
	ptr_line[i]=line;
 800ac16:	68bb      	ldr	r3, [r7, #8]
 800ac18:	b219      	sxth	r1, r3
 800ac1a:	4b0c      	ldr	r3, [pc, #48]	@ (800ac4c <dbg_malloc+0x7c>)
 800ac1c:	697a      	ldr	r2, [r7, #20]
 800ac1e:	0052      	lsls	r2, r2, #1
 800ac20:	52d1      	strh	r1, [r2, r3]
	if(!mlc)
 800ac22:	69fb      	ldr	r3, [r7, #28]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d105      	bne.n	800ac34 <dbg_malloc+0x64>
	{
		// No point in going on
		// Need to come back and add something to aid post-mortem analysis
		// Maybe printf will still work...
		printf("\r\nERROR:  malloc failed!\r\n");
 800ac28:	4b09      	ldr	r3, [pc, #36]	@ (800ac50 <dbg_malloc+0x80>)
 800ac2a:	0018      	movs	r0, r3
 800ac2c:	f000 fac8 	bl	800b1c0 <puts>
#ifndef RELEASE_BUILD
		while(1);
 800ac30:	46c0      	nop			@ (mov r8, r8)
 800ac32:	e7fd      	b.n	800ac30 <dbg_malloc+0x60>

//	dbg_last_heap_remaining -= size + 8;
//	if((line!=74)&&(line!=77))
//	printf("<MHEAP>, '%08X', +%d, %ld, %d, %s\r\n", (unsigned int)mem, size + 8, dbg_last_heap_remaining, line, file);

	return mem;
 800ac34:	69bb      	ldr	r3, [r7, #24]
}
 800ac36:	0018      	movs	r0, r3
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	b008      	add	sp, #32
 800ac3c:	bd80      	pop	{r7, pc}
 800ac3e:	46c0      	nop			@ (mov r8, r8)
 800ac40:	deadbeef 	.word	0xdeadbeef
 800ac44:	20001034 	.word	0x20001034
 800ac48:	20001178 	.word	0x20001178
 800ac4c:	200011f8 	.word	0x200011f8
 800ac50:	0800dda8 	.word	0x0800dda8

0800ac54 <dbg_free>:
void dbg_free(void *ptr, unsigned int line, const char *file)
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b086      	sub	sp, #24
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	60f8      	str	r0, [r7, #12]
 800ac5c:	60b9      	str	r1, [r7, #8]
 800ac5e:	607a      	str	r2, [r7, #4]
	int ret;
	if((unsigned int)ptr<0x20000000)
 800ac60:	68fa      	ldr	r2, [r7, #12]
 800ac62:	2380      	movs	r3, #128	@ 0x80
 800ac64:	059b      	lsls	r3, r3, #22
 800ac66:	429a      	cmp	r2, r3
 800ac68:	d327      	bcc.n	800acba <dbg_free+0x66>
		return;
	if((unsigned int)ptr>0x20004f00)
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	4a18      	ldr	r2, [pc, #96]	@ (800acd0 <dbg_free+0x7c>)
 800ac6e:	4293      	cmp	r3, r2
 800ac70:	d825      	bhi.n	800acbe <dbg_free+0x6a>
		return;
	CritSect_Push();
 800ac72:	f000 f86f 	bl	800ad54 <CritSect_Push>
	ret=check_ptr(ptr);
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	0018      	movs	r0, r3
 800ac7a:	f7ff ff4b 	bl	800ab14 <check_ptr>
 800ac7e:	0003      	movs	r3, r0
 800ac80:	617b      	str	r3, [r7, #20]
	if(ret==0)
	{
//		printf("\r\nERROR in dbg_free, %08X invalid address!\r\n",(unsigned int)ptr);
	}
	dec_counter();
 800ac82:	f7ff ff79 	bl	800ab78 <dec_counter>
	CritSect_Pop();
 800ac86:	f000 f881 	bl	800ad8c <CritSect_Pop>
	mlc_struct *mlc = (mlc_struct*)(((uint8_t*)ptr) - 8);
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	3b08      	subs	r3, #8
 800ac8e:	613b      	str	r3, [r7, #16]

	if((uint32_t)mlc & 0x00000003)
 800ac90:	693b      	ldr	r3, [r7, #16]
 800ac92:	2203      	movs	r2, #3
 800ac94:	4013      	ands	r3, r2
 800ac96:	d114      	bne.n	800acc2 <dbg_free+0x6e>
	{
//		printf("\r\nERROR in dbg_free:  unaligned access attempt!\r\n");
		return;
	}

	if(mlc->Magic != MAGIC_NUM)
 800ac98:	693b      	ldr	r3, [r7, #16]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	4a0d      	ldr	r2, [pc, #52]	@ (800acd4 <dbg_free+0x80>)
 800ac9e:	4293      	cmp	r3, r2
 800aca0:	d111      	bne.n	800acc6 <dbg_free+0x72>
//	dbg_last_heap_remaining += mlc->Size + 8;

//	if((line!=148)&&(line!=149)&&(line!=565))
//	printf("<FHEAP>, '%08X', -%ld, %ld, %d, %s\r\n", (unsigned int)ptr, mlc->Size + 8, dbg_last_heap_remaining, line, file);

	mlc->Magic=0x55aaaa55;
 800aca2:	693b      	ldr	r3, [r7, #16]
 800aca4:	4a0c      	ldr	r2, [pc, #48]	@ (800acd8 <dbg_free+0x84>)
 800aca6:	601a      	str	r2, [r3, #0]
	CritSect_Push();
 800aca8:	f000 f854 	bl	800ad54 <CritSect_Push>
	free((void*)mlc);
 800acac:	693b      	ldr	r3, [r7, #16]
 800acae:	0018      	movs	r0, r3
 800acb0:	f000 f88c 	bl	800adcc <free>
	CritSect_Pop();
 800acb4:	f000 f86a 	bl	800ad8c <CritSect_Pop>
 800acb8:	e006      	b.n	800acc8 <dbg_free+0x74>
		return;
 800acba:	46c0      	nop			@ (mov r8, r8)
 800acbc:	e004      	b.n	800acc8 <dbg_free+0x74>
		return;
 800acbe:	46c0      	nop			@ (mov r8, r8)
 800acc0:	e002      	b.n	800acc8 <dbg_free+0x74>
		return;
 800acc2:	46c0      	nop			@ (mov r8, r8)
 800acc4:	e000      	b.n	800acc8 <dbg_free+0x74>
		return;
 800acc6:	46c0      	nop			@ (mov r8, r8)
}
 800acc8:	46bd      	mov	sp, r7
 800acca:	b006      	add	sp, #24
 800accc:	bd80      	pop	{r7, pc}
 800acce:	46c0      	nop			@ (mov r8, r8)
 800acd0:	20004f00 	.word	0x20004f00
 800acd4:	deadbeef 	.word	0xdeadbeef
 800acd8:	55aaaa55 	.word	0x55aaaa55

0800acdc <Get_CRC8>:
//	return (ticks - start) > period;
//}


uint8_t Get_CRC8(uint8_t *data, uint16_t size)
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	b084      	sub	sp, #16
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
 800ace4:	000a      	movs	r2, r1
 800ace6:	1cbb      	adds	r3, r7, #2
 800ace8:	801a      	strh	r2, [r3, #0]
	uint16_t i;

	CRC->CR = CRC_CR_POLYSIZE_1 | CRC_CR_RESET;
 800acea:	4b14      	ldr	r3, [pc, #80]	@ (800ad3c <Get_CRC8+0x60>)
 800acec:	2211      	movs	r2, #17
 800acee:	609a      	str	r2, [r3, #8]
	CRC->INIT = 0x00;
 800acf0:	4b12      	ldr	r3, [pc, #72]	@ (800ad3c <Get_CRC8+0x60>)
 800acf2:	2200      	movs	r2, #0
 800acf4:	611a      	str	r2, [r3, #16]
	CRC->POL = 0x9B;
 800acf6:	4b11      	ldr	r3, [pc, #68]	@ (800ad3c <Get_CRC8+0x60>)
 800acf8:	229b      	movs	r2, #155	@ 0x9b
 800acfa:	615a      	str	r2, [r3, #20]

	for(i=0; i<size; ++i)
 800acfc:	230e      	movs	r3, #14
 800acfe:	18fb      	adds	r3, r7, r3
 800ad00:	2200      	movs	r2, #0
 800ad02:	801a      	strh	r2, [r3, #0]
 800ad04:	e00c      	b.n	800ad20 <Get_CRC8+0x44>
	{
		*(uint8_t volatile*) (&CRC->DR) = data[i];
 800ad06:	210e      	movs	r1, #14
 800ad08:	187b      	adds	r3, r7, r1
 800ad0a:	881b      	ldrh	r3, [r3, #0]
 800ad0c:	687a      	ldr	r2, [r7, #4]
 800ad0e:	18d3      	adds	r3, r2, r3
 800ad10:	4a0a      	ldr	r2, [pc, #40]	@ (800ad3c <Get_CRC8+0x60>)
 800ad12:	781b      	ldrb	r3, [r3, #0]
 800ad14:	7013      	strb	r3, [r2, #0]
	for(i=0; i<size; ++i)
 800ad16:	187b      	adds	r3, r7, r1
 800ad18:	187a      	adds	r2, r7, r1
 800ad1a:	8812      	ldrh	r2, [r2, #0]
 800ad1c:	3201      	adds	r2, #1
 800ad1e:	801a      	strh	r2, [r3, #0]
 800ad20:	230e      	movs	r3, #14
 800ad22:	18fa      	adds	r2, r7, r3
 800ad24:	1cbb      	adds	r3, r7, #2
 800ad26:	8812      	ldrh	r2, [r2, #0]
 800ad28:	881b      	ldrh	r3, [r3, #0]
 800ad2a:	429a      	cmp	r2, r3
 800ad2c:	d3eb      	bcc.n	800ad06 <Get_CRC8+0x2a>
	}

	return CRC->DR;
 800ad2e:	4b03      	ldr	r3, [pc, #12]	@ (800ad3c <Get_CRC8+0x60>)
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	b2db      	uxtb	r3, r3
}
 800ad34:	0018      	movs	r0, r3
 800ad36:	46bd      	mov	sp, r7
 800ad38:	b004      	add	sp, #16
 800ad3a:	bd80      	pop	{r7, pc}
 800ad3c:	40023000 	.word	0x40023000

0800ad40 <noprintf>:
	}

	return CRC->DR;
}

int noprintf(const char *format, ...){return 0;}
 800ad40:	b40f      	push	{r0, r1, r2, r3}
 800ad42:	b580      	push	{r7, lr}
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	2300      	movs	r3, #0
 800ad48:	0018      	movs	r0, r3
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	bc80      	pop	{r7}
 800ad4e:	bc08      	pop	{r3}
 800ad50:	b004      	add	sp, #16
 800ad52:	4718      	bx	r3

0800ad54 <CritSect_Push>:

static uint32_t PriMaskCache = 0;

void CritSect_Push()
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b082      	sub	sp, #8
 800ad58:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ad5a:	f3ef 8305 	mrs	r3, IPSR
 800ad5e:	607b      	str	r3, [r7, #4]
  return(result);
 800ad60:	687b      	ldr	r3, [r7, #4]
	//if(SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk)	Use this for F767
	if(!(__get_IPSR() & 0x1F))			// Make sure we're not in an interrupt
 800ad62:	221f      	movs	r2, #31
 800ad64:	4013      	ands	r3, r2
 800ad66:	d10b      	bne.n	800ad80 <CritSect_Push+0x2c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ad68:	f3ef 8310 	mrs	r3, PRIMASK
 800ad6c:	603b      	str	r3, [r7, #0]
  return(result);
 800ad6e:	683a      	ldr	r2, [r7, #0]
	{
		PriMaskCache = __get_PRIMASK();
 800ad70:	4b05      	ldr	r3, [pc, #20]	@ (800ad88 <CritSect_Push+0x34>)
 800ad72:	601a      	str	r2, [r3, #0]

		if(PriMaskCache)
 800ad74:	4b04      	ldr	r3, [pc, #16]	@ (800ad88 <CritSect_Push+0x34>)
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d001      	beq.n	800ad80 <CritSect_Push+0x2c>
  __ASM volatile ("cpsid i" : : : "memory");
 800ad7c:	b672      	cpsid	i
}
 800ad7e:	46c0      	nop			@ (mov r8, r8)
		{
			__disable_irq();
		}
	}
}
 800ad80:	46c0      	nop			@ (mov r8, r8)
 800ad82:	46bd      	mov	sp, r7
 800ad84:	b002      	add	sp, #8
 800ad86:	bd80      	pop	{r7, pc}
 800ad88:	20001278 	.word	0x20001278

0800ad8c <CritSect_Pop>:

void CritSect_Pop()
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b082      	sub	sp, #8
 800ad90:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ad92:	f3ef 8305 	mrs	r3, IPSR
 800ad96:	607b      	str	r3, [r7, #4]
  return(result);
 800ad98:	687b      	ldr	r3, [r7, #4]
	if(!(__get_IPSR() & 0x1F) && !PriMaskCache)
 800ad9a:	221f      	movs	r2, #31
 800ad9c:	4013      	ands	r3, r2
 800ad9e:	d105      	bne.n	800adac <CritSect_Pop+0x20>
 800ada0:	4b04      	ldr	r3, [pc, #16]	@ (800adb4 <CritSect_Pop+0x28>)
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d101      	bne.n	800adac <CritSect_Pop+0x20>
  __ASM volatile ("cpsie i" : : : "memory");
 800ada8:	b662      	cpsie	i
}
 800adaa:	46c0      	nop			@ (mov r8, r8)
	{
		__enable_irq();
	}
}
 800adac:	46c0      	nop			@ (mov r8, r8)
 800adae:	46bd      	mov	sp, r7
 800adb0:	b002      	add	sp, #8
 800adb2:	bd80      	pop	{r7, pc}
 800adb4:	20001278 	.word	0x20001278

0800adb8 <malloc>:
 800adb8:	b510      	push	{r4, lr}
 800adba:	4b03      	ldr	r3, [pc, #12]	@ (800adc8 <malloc+0x10>)
 800adbc:	0001      	movs	r1, r0
 800adbe:	6818      	ldr	r0, [r3, #0]
 800adc0:	f000 f830 	bl	800ae24 <_malloc_r>
 800adc4:	bd10      	pop	{r4, pc}
 800adc6:	46c0      	nop			@ (mov r8, r8)
 800adc8:	20000058 	.word	0x20000058

0800adcc <free>:
 800adcc:	b510      	push	{r4, lr}
 800adce:	4b03      	ldr	r3, [pc, #12]	@ (800addc <free+0x10>)
 800add0:	0001      	movs	r1, r0
 800add2:	6818      	ldr	r0, [r3, #0]
 800add4:	f001 fa56 	bl	800c284 <_free_r>
 800add8:	bd10      	pop	{r4, pc}
 800adda:	46c0      	nop			@ (mov r8, r8)
 800addc:	20000058 	.word	0x20000058

0800ade0 <sbrk_aligned>:
 800ade0:	b570      	push	{r4, r5, r6, lr}
 800ade2:	4e0f      	ldr	r6, [pc, #60]	@ (800ae20 <sbrk_aligned+0x40>)
 800ade4:	000d      	movs	r5, r1
 800ade6:	6831      	ldr	r1, [r6, #0]
 800ade8:	0004      	movs	r4, r0
 800adea:	2900      	cmp	r1, #0
 800adec:	d102      	bne.n	800adf4 <sbrk_aligned+0x14>
 800adee:	f001 f9d9 	bl	800c1a4 <_sbrk_r>
 800adf2:	6030      	str	r0, [r6, #0]
 800adf4:	0029      	movs	r1, r5
 800adf6:	0020      	movs	r0, r4
 800adf8:	f001 f9d4 	bl	800c1a4 <_sbrk_r>
 800adfc:	1c43      	adds	r3, r0, #1
 800adfe:	d103      	bne.n	800ae08 <sbrk_aligned+0x28>
 800ae00:	2501      	movs	r5, #1
 800ae02:	426d      	negs	r5, r5
 800ae04:	0028      	movs	r0, r5
 800ae06:	bd70      	pop	{r4, r5, r6, pc}
 800ae08:	2303      	movs	r3, #3
 800ae0a:	1cc5      	adds	r5, r0, #3
 800ae0c:	439d      	bics	r5, r3
 800ae0e:	42a8      	cmp	r0, r5
 800ae10:	d0f8      	beq.n	800ae04 <sbrk_aligned+0x24>
 800ae12:	1a29      	subs	r1, r5, r0
 800ae14:	0020      	movs	r0, r4
 800ae16:	f001 f9c5 	bl	800c1a4 <_sbrk_r>
 800ae1a:	3001      	adds	r0, #1
 800ae1c:	d1f2      	bne.n	800ae04 <sbrk_aligned+0x24>
 800ae1e:	e7ef      	b.n	800ae00 <sbrk_aligned+0x20>
 800ae20:	2000127c 	.word	0x2000127c

0800ae24 <_malloc_r>:
 800ae24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ae26:	2203      	movs	r2, #3
 800ae28:	1ccb      	adds	r3, r1, #3
 800ae2a:	4393      	bics	r3, r2
 800ae2c:	3308      	adds	r3, #8
 800ae2e:	0005      	movs	r5, r0
 800ae30:	001f      	movs	r7, r3
 800ae32:	2b0c      	cmp	r3, #12
 800ae34:	d234      	bcs.n	800aea0 <_malloc_r+0x7c>
 800ae36:	270c      	movs	r7, #12
 800ae38:	42b9      	cmp	r1, r7
 800ae3a:	d833      	bhi.n	800aea4 <_malloc_r+0x80>
 800ae3c:	0028      	movs	r0, r5
 800ae3e:	f000 f871 	bl	800af24 <__malloc_lock>
 800ae42:	4e37      	ldr	r6, [pc, #220]	@ (800af20 <_malloc_r+0xfc>)
 800ae44:	6833      	ldr	r3, [r6, #0]
 800ae46:	001c      	movs	r4, r3
 800ae48:	2c00      	cmp	r4, #0
 800ae4a:	d12f      	bne.n	800aeac <_malloc_r+0x88>
 800ae4c:	0039      	movs	r1, r7
 800ae4e:	0028      	movs	r0, r5
 800ae50:	f7ff ffc6 	bl	800ade0 <sbrk_aligned>
 800ae54:	0004      	movs	r4, r0
 800ae56:	1c43      	adds	r3, r0, #1
 800ae58:	d15f      	bne.n	800af1a <_malloc_r+0xf6>
 800ae5a:	6834      	ldr	r4, [r6, #0]
 800ae5c:	9400      	str	r4, [sp, #0]
 800ae5e:	9b00      	ldr	r3, [sp, #0]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d14a      	bne.n	800aefa <_malloc_r+0xd6>
 800ae64:	2c00      	cmp	r4, #0
 800ae66:	d052      	beq.n	800af0e <_malloc_r+0xea>
 800ae68:	6823      	ldr	r3, [r4, #0]
 800ae6a:	0028      	movs	r0, r5
 800ae6c:	18e3      	adds	r3, r4, r3
 800ae6e:	9900      	ldr	r1, [sp, #0]
 800ae70:	9301      	str	r3, [sp, #4]
 800ae72:	f001 f997 	bl	800c1a4 <_sbrk_r>
 800ae76:	9b01      	ldr	r3, [sp, #4]
 800ae78:	4283      	cmp	r3, r0
 800ae7a:	d148      	bne.n	800af0e <_malloc_r+0xea>
 800ae7c:	6823      	ldr	r3, [r4, #0]
 800ae7e:	0028      	movs	r0, r5
 800ae80:	1aff      	subs	r7, r7, r3
 800ae82:	0039      	movs	r1, r7
 800ae84:	f7ff ffac 	bl	800ade0 <sbrk_aligned>
 800ae88:	3001      	adds	r0, #1
 800ae8a:	d040      	beq.n	800af0e <_malloc_r+0xea>
 800ae8c:	6823      	ldr	r3, [r4, #0]
 800ae8e:	19db      	adds	r3, r3, r7
 800ae90:	6023      	str	r3, [r4, #0]
 800ae92:	6833      	ldr	r3, [r6, #0]
 800ae94:	685a      	ldr	r2, [r3, #4]
 800ae96:	2a00      	cmp	r2, #0
 800ae98:	d133      	bne.n	800af02 <_malloc_r+0xde>
 800ae9a:	9b00      	ldr	r3, [sp, #0]
 800ae9c:	6033      	str	r3, [r6, #0]
 800ae9e:	e019      	b.n	800aed4 <_malloc_r+0xb0>
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	dac9      	bge.n	800ae38 <_malloc_r+0x14>
 800aea4:	230c      	movs	r3, #12
 800aea6:	602b      	str	r3, [r5, #0]
 800aea8:	2000      	movs	r0, #0
 800aeaa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800aeac:	6821      	ldr	r1, [r4, #0]
 800aeae:	1bc9      	subs	r1, r1, r7
 800aeb0:	d420      	bmi.n	800aef4 <_malloc_r+0xd0>
 800aeb2:	290b      	cmp	r1, #11
 800aeb4:	d90a      	bls.n	800aecc <_malloc_r+0xa8>
 800aeb6:	19e2      	adds	r2, r4, r7
 800aeb8:	6027      	str	r7, [r4, #0]
 800aeba:	42a3      	cmp	r3, r4
 800aebc:	d104      	bne.n	800aec8 <_malloc_r+0xa4>
 800aebe:	6032      	str	r2, [r6, #0]
 800aec0:	6863      	ldr	r3, [r4, #4]
 800aec2:	6011      	str	r1, [r2, #0]
 800aec4:	6053      	str	r3, [r2, #4]
 800aec6:	e005      	b.n	800aed4 <_malloc_r+0xb0>
 800aec8:	605a      	str	r2, [r3, #4]
 800aeca:	e7f9      	b.n	800aec0 <_malloc_r+0x9c>
 800aecc:	6862      	ldr	r2, [r4, #4]
 800aece:	42a3      	cmp	r3, r4
 800aed0:	d10e      	bne.n	800aef0 <_malloc_r+0xcc>
 800aed2:	6032      	str	r2, [r6, #0]
 800aed4:	0028      	movs	r0, r5
 800aed6:	f000 f82d 	bl	800af34 <__malloc_unlock>
 800aeda:	0020      	movs	r0, r4
 800aedc:	2207      	movs	r2, #7
 800aede:	300b      	adds	r0, #11
 800aee0:	1d23      	adds	r3, r4, #4
 800aee2:	4390      	bics	r0, r2
 800aee4:	1ac2      	subs	r2, r0, r3
 800aee6:	4298      	cmp	r0, r3
 800aee8:	d0df      	beq.n	800aeaa <_malloc_r+0x86>
 800aeea:	1a1b      	subs	r3, r3, r0
 800aeec:	50a3      	str	r3, [r4, r2]
 800aeee:	e7dc      	b.n	800aeaa <_malloc_r+0x86>
 800aef0:	605a      	str	r2, [r3, #4]
 800aef2:	e7ef      	b.n	800aed4 <_malloc_r+0xb0>
 800aef4:	0023      	movs	r3, r4
 800aef6:	6864      	ldr	r4, [r4, #4]
 800aef8:	e7a6      	b.n	800ae48 <_malloc_r+0x24>
 800aefa:	9c00      	ldr	r4, [sp, #0]
 800aefc:	6863      	ldr	r3, [r4, #4]
 800aefe:	9300      	str	r3, [sp, #0]
 800af00:	e7ad      	b.n	800ae5e <_malloc_r+0x3a>
 800af02:	001a      	movs	r2, r3
 800af04:	685b      	ldr	r3, [r3, #4]
 800af06:	42a3      	cmp	r3, r4
 800af08:	d1fb      	bne.n	800af02 <_malloc_r+0xde>
 800af0a:	2300      	movs	r3, #0
 800af0c:	e7da      	b.n	800aec4 <_malloc_r+0xa0>
 800af0e:	230c      	movs	r3, #12
 800af10:	0028      	movs	r0, r5
 800af12:	602b      	str	r3, [r5, #0]
 800af14:	f000 f80e 	bl	800af34 <__malloc_unlock>
 800af18:	e7c6      	b.n	800aea8 <_malloc_r+0x84>
 800af1a:	6007      	str	r7, [r0, #0]
 800af1c:	e7da      	b.n	800aed4 <_malloc_r+0xb0>
 800af1e:	46c0      	nop			@ (mov r8, r8)
 800af20:	20001280 	.word	0x20001280

0800af24 <__malloc_lock>:
 800af24:	b510      	push	{r4, lr}
 800af26:	4802      	ldr	r0, [pc, #8]	@ (800af30 <__malloc_lock+0xc>)
 800af28:	f001 f98e 	bl	800c248 <__retarget_lock_acquire_recursive>
 800af2c:	bd10      	pop	{r4, pc}
 800af2e:	46c0      	nop			@ (mov r8, r8)
 800af30:	200013ea 	.word	0x200013ea

0800af34 <__malloc_unlock>:
 800af34:	b510      	push	{r4, lr}
 800af36:	4802      	ldr	r0, [pc, #8]	@ (800af40 <__malloc_unlock+0xc>)
 800af38:	f001 f988 	bl	800c24c <__retarget_lock_release_recursive>
 800af3c:	bd10      	pop	{r4, pc}
 800af3e:	46c0      	nop			@ (mov r8, r8)
 800af40:	200013ea 	.word	0x200013ea

0800af44 <malloc_usable_size>:
 800af44:	b510      	push	{r4, lr}
 800af46:	4b03      	ldr	r3, [pc, #12]	@ (800af54 <malloc_usable_size+0x10>)
 800af48:	0001      	movs	r1, r0
 800af4a:	6818      	ldr	r0, [r3, #0]
 800af4c:	f001 fa21 	bl	800c392 <_malloc_usable_size_r>
 800af50:	bd10      	pop	{r4, pc}
 800af52:	46c0      	nop			@ (mov r8, r8)
 800af54:	20000058 	.word	0x20000058

0800af58 <std>:
 800af58:	2300      	movs	r3, #0
 800af5a:	b510      	push	{r4, lr}
 800af5c:	0004      	movs	r4, r0
 800af5e:	6003      	str	r3, [r0, #0]
 800af60:	6043      	str	r3, [r0, #4]
 800af62:	6083      	str	r3, [r0, #8]
 800af64:	8181      	strh	r1, [r0, #12]
 800af66:	6643      	str	r3, [r0, #100]	@ 0x64
 800af68:	81c2      	strh	r2, [r0, #14]
 800af6a:	6103      	str	r3, [r0, #16]
 800af6c:	6143      	str	r3, [r0, #20]
 800af6e:	6183      	str	r3, [r0, #24]
 800af70:	0019      	movs	r1, r3
 800af72:	2208      	movs	r2, #8
 800af74:	305c      	adds	r0, #92	@ 0x5c
 800af76:	f000 fa29 	bl	800b3cc <memset>
 800af7a:	4b0b      	ldr	r3, [pc, #44]	@ (800afa8 <std+0x50>)
 800af7c:	6224      	str	r4, [r4, #32]
 800af7e:	6263      	str	r3, [r4, #36]	@ 0x24
 800af80:	4b0a      	ldr	r3, [pc, #40]	@ (800afac <std+0x54>)
 800af82:	62a3      	str	r3, [r4, #40]	@ 0x28
 800af84:	4b0a      	ldr	r3, [pc, #40]	@ (800afb0 <std+0x58>)
 800af86:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800af88:	4b0a      	ldr	r3, [pc, #40]	@ (800afb4 <std+0x5c>)
 800af8a:	6323      	str	r3, [r4, #48]	@ 0x30
 800af8c:	4b0a      	ldr	r3, [pc, #40]	@ (800afb8 <std+0x60>)
 800af8e:	429c      	cmp	r4, r3
 800af90:	d005      	beq.n	800af9e <std+0x46>
 800af92:	4b0a      	ldr	r3, [pc, #40]	@ (800afbc <std+0x64>)
 800af94:	429c      	cmp	r4, r3
 800af96:	d002      	beq.n	800af9e <std+0x46>
 800af98:	4b09      	ldr	r3, [pc, #36]	@ (800afc0 <std+0x68>)
 800af9a:	429c      	cmp	r4, r3
 800af9c:	d103      	bne.n	800afa6 <std+0x4e>
 800af9e:	0020      	movs	r0, r4
 800afa0:	3058      	adds	r0, #88	@ 0x58
 800afa2:	f001 f94f 	bl	800c244 <__retarget_lock_init_recursive>
 800afa6:	bd10      	pop	{r4, pc}
 800afa8:	0800b1d5 	.word	0x0800b1d5
 800afac:	0800b201 	.word	0x0800b201
 800afb0:	0800b239 	.word	0x0800b239
 800afb4:	0800b265 	.word	0x0800b265
 800afb8:	20001284 	.word	0x20001284
 800afbc:	200012ec 	.word	0x200012ec
 800afc0:	20001354 	.word	0x20001354

0800afc4 <stdio_exit_handler>:
 800afc4:	b510      	push	{r4, lr}
 800afc6:	4a03      	ldr	r2, [pc, #12]	@ (800afd4 <stdio_exit_handler+0x10>)
 800afc8:	4903      	ldr	r1, [pc, #12]	@ (800afd8 <stdio_exit_handler+0x14>)
 800afca:	4804      	ldr	r0, [pc, #16]	@ (800afdc <stdio_exit_handler+0x18>)
 800afcc:	f000 f86c 	bl	800b0a8 <_fwalk_sglue>
 800afd0:	bd10      	pop	{r4, pc}
 800afd2:	46c0      	nop			@ (mov r8, r8)
 800afd4:	20000044 	.word	0x20000044
 800afd8:	0800cb55 	.word	0x0800cb55
 800afdc:	2000005c 	.word	0x2000005c

0800afe0 <cleanup_stdio>:
 800afe0:	6841      	ldr	r1, [r0, #4]
 800afe2:	4b0b      	ldr	r3, [pc, #44]	@ (800b010 <cleanup_stdio+0x30>)
 800afe4:	b510      	push	{r4, lr}
 800afe6:	0004      	movs	r4, r0
 800afe8:	4299      	cmp	r1, r3
 800afea:	d001      	beq.n	800aff0 <cleanup_stdio+0x10>
 800afec:	f001 fdb2 	bl	800cb54 <_fflush_r>
 800aff0:	68a1      	ldr	r1, [r4, #8]
 800aff2:	4b08      	ldr	r3, [pc, #32]	@ (800b014 <cleanup_stdio+0x34>)
 800aff4:	4299      	cmp	r1, r3
 800aff6:	d002      	beq.n	800affe <cleanup_stdio+0x1e>
 800aff8:	0020      	movs	r0, r4
 800affa:	f001 fdab 	bl	800cb54 <_fflush_r>
 800affe:	68e1      	ldr	r1, [r4, #12]
 800b000:	4b05      	ldr	r3, [pc, #20]	@ (800b018 <cleanup_stdio+0x38>)
 800b002:	4299      	cmp	r1, r3
 800b004:	d002      	beq.n	800b00c <cleanup_stdio+0x2c>
 800b006:	0020      	movs	r0, r4
 800b008:	f001 fda4 	bl	800cb54 <_fflush_r>
 800b00c:	bd10      	pop	{r4, pc}
 800b00e:	46c0      	nop			@ (mov r8, r8)
 800b010:	20001284 	.word	0x20001284
 800b014:	200012ec 	.word	0x200012ec
 800b018:	20001354 	.word	0x20001354

0800b01c <global_stdio_init.part.0>:
 800b01c:	b510      	push	{r4, lr}
 800b01e:	4b09      	ldr	r3, [pc, #36]	@ (800b044 <global_stdio_init.part.0+0x28>)
 800b020:	4a09      	ldr	r2, [pc, #36]	@ (800b048 <global_stdio_init.part.0+0x2c>)
 800b022:	2104      	movs	r1, #4
 800b024:	601a      	str	r2, [r3, #0]
 800b026:	4809      	ldr	r0, [pc, #36]	@ (800b04c <global_stdio_init.part.0+0x30>)
 800b028:	2200      	movs	r2, #0
 800b02a:	f7ff ff95 	bl	800af58 <std>
 800b02e:	2201      	movs	r2, #1
 800b030:	2109      	movs	r1, #9
 800b032:	4807      	ldr	r0, [pc, #28]	@ (800b050 <global_stdio_init.part.0+0x34>)
 800b034:	f7ff ff90 	bl	800af58 <std>
 800b038:	2202      	movs	r2, #2
 800b03a:	2112      	movs	r1, #18
 800b03c:	4805      	ldr	r0, [pc, #20]	@ (800b054 <global_stdio_init.part.0+0x38>)
 800b03e:	f7ff ff8b 	bl	800af58 <std>
 800b042:	bd10      	pop	{r4, pc}
 800b044:	200013bc 	.word	0x200013bc
 800b048:	0800afc5 	.word	0x0800afc5
 800b04c:	20001284 	.word	0x20001284
 800b050:	200012ec 	.word	0x200012ec
 800b054:	20001354 	.word	0x20001354

0800b058 <__sfp_lock_acquire>:
 800b058:	b510      	push	{r4, lr}
 800b05a:	4802      	ldr	r0, [pc, #8]	@ (800b064 <__sfp_lock_acquire+0xc>)
 800b05c:	f001 f8f4 	bl	800c248 <__retarget_lock_acquire_recursive>
 800b060:	bd10      	pop	{r4, pc}
 800b062:	46c0      	nop			@ (mov r8, r8)
 800b064:	200013eb 	.word	0x200013eb

0800b068 <__sfp_lock_release>:
 800b068:	b510      	push	{r4, lr}
 800b06a:	4802      	ldr	r0, [pc, #8]	@ (800b074 <__sfp_lock_release+0xc>)
 800b06c:	f001 f8ee 	bl	800c24c <__retarget_lock_release_recursive>
 800b070:	bd10      	pop	{r4, pc}
 800b072:	46c0      	nop			@ (mov r8, r8)
 800b074:	200013eb 	.word	0x200013eb

0800b078 <__sinit>:
 800b078:	b510      	push	{r4, lr}
 800b07a:	0004      	movs	r4, r0
 800b07c:	f7ff ffec 	bl	800b058 <__sfp_lock_acquire>
 800b080:	6a23      	ldr	r3, [r4, #32]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d002      	beq.n	800b08c <__sinit+0x14>
 800b086:	f7ff ffef 	bl	800b068 <__sfp_lock_release>
 800b08a:	bd10      	pop	{r4, pc}
 800b08c:	4b04      	ldr	r3, [pc, #16]	@ (800b0a0 <__sinit+0x28>)
 800b08e:	6223      	str	r3, [r4, #32]
 800b090:	4b04      	ldr	r3, [pc, #16]	@ (800b0a4 <__sinit+0x2c>)
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d1f6      	bne.n	800b086 <__sinit+0xe>
 800b098:	f7ff ffc0 	bl	800b01c <global_stdio_init.part.0>
 800b09c:	e7f3      	b.n	800b086 <__sinit+0xe>
 800b09e:	46c0      	nop			@ (mov r8, r8)
 800b0a0:	0800afe1 	.word	0x0800afe1
 800b0a4:	200013bc 	.word	0x200013bc

0800b0a8 <_fwalk_sglue>:
 800b0a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b0aa:	0014      	movs	r4, r2
 800b0ac:	2600      	movs	r6, #0
 800b0ae:	9000      	str	r0, [sp, #0]
 800b0b0:	9101      	str	r1, [sp, #4]
 800b0b2:	68a5      	ldr	r5, [r4, #8]
 800b0b4:	6867      	ldr	r7, [r4, #4]
 800b0b6:	3f01      	subs	r7, #1
 800b0b8:	d504      	bpl.n	800b0c4 <_fwalk_sglue+0x1c>
 800b0ba:	6824      	ldr	r4, [r4, #0]
 800b0bc:	2c00      	cmp	r4, #0
 800b0be:	d1f8      	bne.n	800b0b2 <_fwalk_sglue+0xa>
 800b0c0:	0030      	movs	r0, r6
 800b0c2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b0c4:	89ab      	ldrh	r3, [r5, #12]
 800b0c6:	2b01      	cmp	r3, #1
 800b0c8:	d908      	bls.n	800b0dc <_fwalk_sglue+0x34>
 800b0ca:	220e      	movs	r2, #14
 800b0cc:	5eab      	ldrsh	r3, [r5, r2]
 800b0ce:	3301      	adds	r3, #1
 800b0d0:	d004      	beq.n	800b0dc <_fwalk_sglue+0x34>
 800b0d2:	0029      	movs	r1, r5
 800b0d4:	9800      	ldr	r0, [sp, #0]
 800b0d6:	9b01      	ldr	r3, [sp, #4]
 800b0d8:	4798      	blx	r3
 800b0da:	4306      	orrs	r6, r0
 800b0dc:	3568      	adds	r5, #104	@ 0x68
 800b0de:	e7ea      	b.n	800b0b6 <_fwalk_sglue+0xe>

0800b0e0 <iprintf>:
 800b0e0:	b40f      	push	{r0, r1, r2, r3}
 800b0e2:	b507      	push	{r0, r1, r2, lr}
 800b0e4:	4905      	ldr	r1, [pc, #20]	@ (800b0fc <iprintf+0x1c>)
 800b0e6:	ab04      	add	r3, sp, #16
 800b0e8:	6808      	ldr	r0, [r1, #0]
 800b0ea:	cb04      	ldmia	r3!, {r2}
 800b0ec:	6881      	ldr	r1, [r0, #8]
 800b0ee:	9301      	str	r3, [sp, #4]
 800b0f0:	f001 fa12 	bl	800c518 <_vfiprintf_r>
 800b0f4:	b003      	add	sp, #12
 800b0f6:	bc08      	pop	{r3}
 800b0f8:	b004      	add	sp, #16
 800b0fa:	4718      	bx	r3
 800b0fc:	20000058 	.word	0x20000058

0800b100 <putchar>:
 800b100:	b510      	push	{r4, lr}
 800b102:	4b03      	ldr	r3, [pc, #12]	@ (800b110 <putchar+0x10>)
 800b104:	0001      	movs	r1, r0
 800b106:	6818      	ldr	r0, [r3, #0]
 800b108:	6882      	ldr	r2, [r0, #8]
 800b10a:	f001 fdba 	bl	800cc82 <_putc_r>
 800b10e:	bd10      	pop	{r4, pc}
 800b110:	20000058 	.word	0x20000058

0800b114 <_puts_r>:
 800b114:	6a03      	ldr	r3, [r0, #32]
 800b116:	b570      	push	{r4, r5, r6, lr}
 800b118:	0005      	movs	r5, r0
 800b11a:	000e      	movs	r6, r1
 800b11c:	6884      	ldr	r4, [r0, #8]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d101      	bne.n	800b126 <_puts_r+0x12>
 800b122:	f7ff ffa9 	bl	800b078 <__sinit>
 800b126:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b128:	07db      	lsls	r3, r3, #31
 800b12a:	d405      	bmi.n	800b138 <_puts_r+0x24>
 800b12c:	89a3      	ldrh	r3, [r4, #12]
 800b12e:	059b      	lsls	r3, r3, #22
 800b130:	d402      	bmi.n	800b138 <_puts_r+0x24>
 800b132:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b134:	f001 f888 	bl	800c248 <__retarget_lock_acquire_recursive>
 800b138:	89a3      	ldrh	r3, [r4, #12]
 800b13a:	071b      	lsls	r3, r3, #28
 800b13c:	d502      	bpl.n	800b144 <_puts_r+0x30>
 800b13e:	6923      	ldr	r3, [r4, #16]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d11f      	bne.n	800b184 <_puts_r+0x70>
 800b144:	0021      	movs	r1, r4
 800b146:	0028      	movs	r0, r5
 800b148:	f000 f8d4 	bl	800b2f4 <__swsetup_r>
 800b14c:	2800      	cmp	r0, #0
 800b14e:	d019      	beq.n	800b184 <_puts_r+0x70>
 800b150:	2501      	movs	r5, #1
 800b152:	426d      	negs	r5, r5
 800b154:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b156:	07db      	lsls	r3, r3, #31
 800b158:	d405      	bmi.n	800b166 <_puts_r+0x52>
 800b15a:	89a3      	ldrh	r3, [r4, #12]
 800b15c:	059b      	lsls	r3, r3, #22
 800b15e:	d402      	bmi.n	800b166 <_puts_r+0x52>
 800b160:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b162:	f001 f873 	bl	800c24c <__retarget_lock_release_recursive>
 800b166:	0028      	movs	r0, r5
 800b168:	bd70      	pop	{r4, r5, r6, pc}
 800b16a:	3601      	adds	r6, #1
 800b16c:	60a3      	str	r3, [r4, #8]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	da04      	bge.n	800b17c <_puts_r+0x68>
 800b172:	69a2      	ldr	r2, [r4, #24]
 800b174:	429a      	cmp	r2, r3
 800b176:	dc16      	bgt.n	800b1a6 <_puts_r+0x92>
 800b178:	290a      	cmp	r1, #10
 800b17a:	d014      	beq.n	800b1a6 <_puts_r+0x92>
 800b17c:	6823      	ldr	r3, [r4, #0]
 800b17e:	1c5a      	adds	r2, r3, #1
 800b180:	6022      	str	r2, [r4, #0]
 800b182:	7019      	strb	r1, [r3, #0]
 800b184:	68a3      	ldr	r3, [r4, #8]
 800b186:	7831      	ldrb	r1, [r6, #0]
 800b188:	3b01      	subs	r3, #1
 800b18a:	2900      	cmp	r1, #0
 800b18c:	d1ed      	bne.n	800b16a <_puts_r+0x56>
 800b18e:	60a3      	str	r3, [r4, #8]
 800b190:	2b00      	cmp	r3, #0
 800b192:	da0f      	bge.n	800b1b4 <_puts_r+0xa0>
 800b194:	0022      	movs	r2, r4
 800b196:	0028      	movs	r0, r5
 800b198:	310a      	adds	r1, #10
 800b19a:	f000 f869 	bl	800b270 <__swbuf_r>
 800b19e:	3001      	adds	r0, #1
 800b1a0:	d0d6      	beq.n	800b150 <_puts_r+0x3c>
 800b1a2:	250a      	movs	r5, #10
 800b1a4:	e7d6      	b.n	800b154 <_puts_r+0x40>
 800b1a6:	0022      	movs	r2, r4
 800b1a8:	0028      	movs	r0, r5
 800b1aa:	f000 f861 	bl	800b270 <__swbuf_r>
 800b1ae:	3001      	adds	r0, #1
 800b1b0:	d1e8      	bne.n	800b184 <_puts_r+0x70>
 800b1b2:	e7cd      	b.n	800b150 <_puts_r+0x3c>
 800b1b4:	6823      	ldr	r3, [r4, #0]
 800b1b6:	1c5a      	adds	r2, r3, #1
 800b1b8:	6022      	str	r2, [r4, #0]
 800b1ba:	220a      	movs	r2, #10
 800b1bc:	701a      	strb	r2, [r3, #0]
 800b1be:	e7f0      	b.n	800b1a2 <_puts_r+0x8e>

0800b1c0 <puts>:
 800b1c0:	b510      	push	{r4, lr}
 800b1c2:	4b03      	ldr	r3, [pc, #12]	@ (800b1d0 <puts+0x10>)
 800b1c4:	0001      	movs	r1, r0
 800b1c6:	6818      	ldr	r0, [r3, #0]
 800b1c8:	f7ff ffa4 	bl	800b114 <_puts_r>
 800b1cc:	bd10      	pop	{r4, pc}
 800b1ce:	46c0      	nop			@ (mov r8, r8)
 800b1d0:	20000058 	.word	0x20000058

0800b1d4 <__sread>:
 800b1d4:	b570      	push	{r4, r5, r6, lr}
 800b1d6:	000c      	movs	r4, r1
 800b1d8:	250e      	movs	r5, #14
 800b1da:	5f49      	ldrsh	r1, [r1, r5]
 800b1dc:	f000 ffce 	bl	800c17c <_read_r>
 800b1e0:	2800      	cmp	r0, #0
 800b1e2:	db03      	blt.n	800b1ec <__sread+0x18>
 800b1e4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800b1e6:	181b      	adds	r3, r3, r0
 800b1e8:	6563      	str	r3, [r4, #84]	@ 0x54
 800b1ea:	bd70      	pop	{r4, r5, r6, pc}
 800b1ec:	89a3      	ldrh	r3, [r4, #12]
 800b1ee:	4a02      	ldr	r2, [pc, #8]	@ (800b1f8 <__sread+0x24>)
 800b1f0:	4013      	ands	r3, r2
 800b1f2:	81a3      	strh	r3, [r4, #12]
 800b1f4:	e7f9      	b.n	800b1ea <__sread+0x16>
 800b1f6:	46c0      	nop			@ (mov r8, r8)
 800b1f8:	ffffefff 	.word	0xffffefff

0800b1fc <__seofread>:
 800b1fc:	2000      	movs	r0, #0
 800b1fe:	4770      	bx	lr

0800b200 <__swrite>:
 800b200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b202:	001f      	movs	r7, r3
 800b204:	898b      	ldrh	r3, [r1, #12]
 800b206:	0005      	movs	r5, r0
 800b208:	000c      	movs	r4, r1
 800b20a:	0016      	movs	r6, r2
 800b20c:	05db      	lsls	r3, r3, #23
 800b20e:	d505      	bpl.n	800b21c <__swrite+0x1c>
 800b210:	230e      	movs	r3, #14
 800b212:	5ec9      	ldrsh	r1, [r1, r3]
 800b214:	2200      	movs	r2, #0
 800b216:	2302      	movs	r3, #2
 800b218:	f000 ff9c 	bl	800c154 <_lseek_r>
 800b21c:	89a3      	ldrh	r3, [r4, #12]
 800b21e:	4a05      	ldr	r2, [pc, #20]	@ (800b234 <__swrite+0x34>)
 800b220:	0028      	movs	r0, r5
 800b222:	4013      	ands	r3, r2
 800b224:	81a3      	strh	r3, [r4, #12]
 800b226:	0032      	movs	r2, r6
 800b228:	230e      	movs	r3, #14
 800b22a:	5ee1      	ldrsh	r1, [r4, r3]
 800b22c:	003b      	movs	r3, r7
 800b22e:	f000 ffcb 	bl	800c1c8 <_write_r>
 800b232:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b234:	ffffefff 	.word	0xffffefff

0800b238 <__sseek>:
 800b238:	b570      	push	{r4, r5, r6, lr}
 800b23a:	000c      	movs	r4, r1
 800b23c:	250e      	movs	r5, #14
 800b23e:	5f49      	ldrsh	r1, [r1, r5]
 800b240:	f000 ff88 	bl	800c154 <_lseek_r>
 800b244:	89a3      	ldrh	r3, [r4, #12]
 800b246:	1c42      	adds	r2, r0, #1
 800b248:	d103      	bne.n	800b252 <__sseek+0x1a>
 800b24a:	4a05      	ldr	r2, [pc, #20]	@ (800b260 <__sseek+0x28>)
 800b24c:	4013      	ands	r3, r2
 800b24e:	81a3      	strh	r3, [r4, #12]
 800b250:	bd70      	pop	{r4, r5, r6, pc}
 800b252:	2280      	movs	r2, #128	@ 0x80
 800b254:	0152      	lsls	r2, r2, #5
 800b256:	4313      	orrs	r3, r2
 800b258:	81a3      	strh	r3, [r4, #12]
 800b25a:	6560      	str	r0, [r4, #84]	@ 0x54
 800b25c:	e7f8      	b.n	800b250 <__sseek+0x18>
 800b25e:	46c0      	nop			@ (mov r8, r8)
 800b260:	ffffefff 	.word	0xffffefff

0800b264 <__sclose>:
 800b264:	b510      	push	{r4, lr}
 800b266:	230e      	movs	r3, #14
 800b268:	5ec9      	ldrsh	r1, [r1, r3]
 800b26a:	f000 ff61 	bl	800c130 <_close_r>
 800b26e:	bd10      	pop	{r4, pc}

0800b270 <__swbuf_r>:
 800b270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b272:	0006      	movs	r6, r0
 800b274:	000d      	movs	r5, r1
 800b276:	0014      	movs	r4, r2
 800b278:	2800      	cmp	r0, #0
 800b27a:	d004      	beq.n	800b286 <__swbuf_r+0x16>
 800b27c:	6a03      	ldr	r3, [r0, #32]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d101      	bne.n	800b286 <__swbuf_r+0x16>
 800b282:	f7ff fef9 	bl	800b078 <__sinit>
 800b286:	69a3      	ldr	r3, [r4, #24]
 800b288:	60a3      	str	r3, [r4, #8]
 800b28a:	89a3      	ldrh	r3, [r4, #12]
 800b28c:	071b      	lsls	r3, r3, #28
 800b28e:	d502      	bpl.n	800b296 <__swbuf_r+0x26>
 800b290:	6923      	ldr	r3, [r4, #16]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d109      	bne.n	800b2aa <__swbuf_r+0x3a>
 800b296:	0021      	movs	r1, r4
 800b298:	0030      	movs	r0, r6
 800b29a:	f000 f82b 	bl	800b2f4 <__swsetup_r>
 800b29e:	2800      	cmp	r0, #0
 800b2a0:	d003      	beq.n	800b2aa <__swbuf_r+0x3a>
 800b2a2:	2501      	movs	r5, #1
 800b2a4:	426d      	negs	r5, r5
 800b2a6:	0028      	movs	r0, r5
 800b2a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2aa:	6923      	ldr	r3, [r4, #16]
 800b2ac:	6820      	ldr	r0, [r4, #0]
 800b2ae:	b2ef      	uxtb	r7, r5
 800b2b0:	1ac0      	subs	r0, r0, r3
 800b2b2:	6963      	ldr	r3, [r4, #20]
 800b2b4:	b2ed      	uxtb	r5, r5
 800b2b6:	4283      	cmp	r3, r0
 800b2b8:	dc05      	bgt.n	800b2c6 <__swbuf_r+0x56>
 800b2ba:	0021      	movs	r1, r4
 800b2bc:	0030      	movs	r0, r6
 800b2be:	f001 fc49 	bl	800cb54 <_fflush_r>
 800b2c2:	2800      	cmp	r0, #0
 800b2c4:	d1ed      	bne.n	800b2a2 <__swbuf_r+0x32>
 800b2c6:	68a3      	ldr	r3, [r4, #8]
 800b2c8:	3001      	adds	r0, #1
 800b2ca:	3b01      	subs	r3, #1
 800b2cc:	60a3      	str	r3, [r4, #8]
 800b2ce:	6823      	ldr	r3, [r4, #0]
 800b2d0:	1c5a      	adds	r2, r3, #1
 800b2d2:	6022      	str	r2, [r4, #0]
 800b2d4:	701f      	strb	r7, [r3, #0]
 800b2d6:	6963      	ldr	r3, [r4, #20]
 800b2d8:	4283      	cmp	r3, r0
 800b2da:	d004      	beq.n	800b2e6 <__swbuf_r+0x76>
 800b2dc:	89a3      	ldrh	r3, [r4, #12]
 800b2de:	07db      	lsls	r3, r3, #31
 800b2e0:	d5e1      	bpl.n	800b2a6 <__swbuf_r+0x36>
 800b2e2:	2d0a      	cmp	r5, #10
 800b2e4:	d1df      	bne.n	800b2a6 <__swbuf_r+0x36>
 800b2e6:	0021      	movs	r1, r4
 800b2e8:	0030      	movs	r0, r6
 800b2ea:	f001 fc33 	bl	800cb54 <_fflush_r>
 800b2ee:	2800      	cmp	r0, #0
 800b2f0:	d0d9      	beq.n	800b2a6 <__swbuf_r+0x36>
 800b2f2:	e7d6      	b.n	800b2a2 <__swbuf_r+0x32>

0800b2f4 <__swsetup_r>:
 800b2f4:	4b2d      	ldr	r3, [pc, #180]	@ (800b3ac <__swsetup_r+0xb8>)
 800b2f6:	b570      	push	{r4, r5, r6, lr}
 800b2f8:	0005      	movs	r5, r0
 800b2fa:	6818      	ldr	r0, [r3, #0]
 800b2fc:	000c      	movs	r4, r1
 800b2fe:	2800      	cmp	r0, #0
 800b300:	d004      	beq.n	800b30c <__swsetup_r+0x18>
 800b302:	6a03      	ldr	r3, [r0, #32]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d101      	bne.n	800b30c <__swsetup_r+0x18>
 800b308:	f7ff feb6 	bl	800b078 <__sinit>
 800b30c:	220c      	movs	r2, #12
 800b30e:	5ea3      	ldrsh	r3, [r4, r2]
 800b310:	071a      	lsls	r2, r3, #28
 800b312:	d423      	bmi.n	800b35c <__swsetup_r+0x68>
 800b314:	06da      	lsls	r2, r3, #27
 800b316:	d407      	bmi.n	800b328 <__swsetup_r+0x34>
 800b318:	2209      	movs	r2, #9
 800b31a:	602a      	str	r2, [r5, #0]
 800b31c:	2240      	movs	r2, #64	@ 0x40
 800b31e:	2001      	movs	r0, #1
 800b320:	4313      	orrs	r3, r2
 800b322:	81a3      	strh	r3, [r4, #12]
 800b324:	4240      	negs	r0, r0
 800b326:	e03a      	b.n	800b39e <__swsetup_r+0xaa>
 800b328:	075b      	lsls	r3, r3, #29
 800b32a:	d513      	bpl.n	800b354 <__swsetup_r+0x60>
 800b32c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b32e:	2900      	cmp	r1, #0
 800b330:	d008      	beq.n	800b344 <__swsetup_r+0x50>
 800b332:	0023      	movs	r3, r4
 800b334:	3344      	adds	r3, #68	@ 0x44
 800b336:	4299      	cmp	r1, r3
 800b338:	d002      	beq.n	800b340 <__swsetup_r+0x4c>
 800b33a:	0028      	movs	r0, r5
 800b33c:	f000 ffa2 	bl	800c284 <_free_r>
 800b340:	2300      	movs	r3, #0
 800b342:	6363      	str	r3, [r4, #52]	@ 0x34
 800b344:	2224      	movs	r2, #36	@ 0x24
 800b346:	89a3      	ldrh	r3, [r4, #12]
 800b348:	4393      	bics	r3, r2
 800b34a:	81a3      	strh	r3, [r4, #12]
 800b34c:	2300      	movs	r3, #0
 800b34e:	6063      	str	r3, [r4, #4]
 800b350:	6923      	ldr	r3, [r4, #16]
 800b352:	6023      	str	r3, [r4, #0]
 800b354:	2308      	movs	r3, #8
 800b356:	89a2      	ldrh	r2, [r4, #12]
 800b358:	4313      	orrs	r3, r2
 800b35a:	81a3      	strh	r3, [r4, #12]
 800b35c:	6923      	ldr	r3, [r4, #16]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d10b      	bne.n	800b37a <__swsetup_r+0x86>
 800b362:	21a0      	movs	r1, #160	@ 0xa0
 800b364:	2280      	movs	r2, #128	@ 0x80
 800b366:	89a3      	ldrh	r3, [r4, #12]
 800b368:	0089      	lsls	r1, r1, #2
 800b36a:	0092      	lsls	r2, r2, #2
 800b36c:	400b      	ands	r3, r1
 800b36e:	4293      	cmp	r3, r2
 800b370:	d003      	beq.n	800b37a <__swsetup_r+0x86>
 800b372:	0021      	movs	r1, r4
 800b374:	0028      	movs	r0, r5
 800b376:	f001 fc43 	bl	800cc00 <__smakebuf_r>
 800b37a:	220c      	movs	r2, #12
 800b37c:	5ea3      	ldrsh	r3, [r4, r2]
 800b37e:	2101      	movs	r1, #1
 800b380:	001a      	movs	r2, r3
 800b382:	400a      	ands	r2, r1
 800b384:	420b      	tst	r3, r1
 800b386:	d00b      	beq.n	800b3a0 <__swsetup_r+0xac>
 800b388:	2200      	movs	r2, #0
 800b38a:	60a2      	str	r2, [r4, #8]
 800b38c:	6962      	ldr	r2, [r4, #20]
 800b38e:	4252      	negs	r2, r2
 800b390:	61a2      	str	r2, [r4, #24]
 800b392:	2000      	movs	r0, #0
 800b394:	6922      	ldr	r2, [r4, #16]
 800b396:	4282      	cmp	r2, r0
 800b398:	d101      	bne.n	800b39e <__swsetup_r+0xaa>
 800b39a:	061a      	lsls	r2, r3, #24
 800b39c:	d4be      	bmi.n	800b31c <__swsetup_r+0x28>
 800b39e:	bd70      	pop	{r4, r5, r6, pc}
 800b3a0:	0799      	lsls	r1, r3, #30
 800b3a2:	d400      	bmi.n	800b3a6 <__swsetup_r+0xb2>
 800b3a4:	6962      	ldr	r2, [r4, #20]
 800b3a6:	60a2      	str	r2, [r4, #8]
 800b3a8:	e7f3      	b.n	800b392 <__swsetup_r+0x9e>
 800b3aa:	46c0      	nop			@ (mov r8, r8)
 800b3ac:	20000058 	.word	0x20000058

0800b3b0 <memcmp>:
 800b3b0:	b530      	push	{r4, r5, lr}
 800b3b2:	2400      	movs	r4, #0
 800b3b4:	3901      	subs	r1, #1
 800b3b6:	42a2      	cmp	r2, r4
 800b3b8:	d101      	bne.n	800b3be <memcmp+0xe>
 800b3ba:	2000      	movs	r0, #0
 800b3bc:	e005      	b.n	800b3ca <memcmp+0x1a>
 800b3be:	5d03      	ldrb	r3, [r0, r4]
 800b3c0:	3401      	adds	r4, #1
 800b3c2:	5d0d      	ldrb	r5, [r1, r4]
 800b3c4:	42ab      	cmp	r3, r5
 800b3c6:	d0f6      	beq.n	800b3b6 <memcmp+0x6>
 800b3c8:	1b58      	subs	r0, r3, r5
 800b3ca:	bd30      	pop	{r4, r5, pc}

0800b3cc <memset>:
 800b3cc:	0003      	movs	r3, r0
 800b3ce:	1882      	adds	r2, r0, r2
 800b3d0:	4293      	cmp	r3, r2
 800b3d2:	d100      	bne.n	800b3d6 <memset+0xa>
 800b3d4:	4770      	bx	lr
 800b3d6:	7019      	strb	r1, [r3, #0]
 800b3d8:	3301      	adds	r3, #1
 800b3da:	e7f9      	b.n	800b3d0 <memset+0x4>

0800b3dc <strncpy>:
 800b3dc:	0003      	movs	r3, r0
 800b3de:	b530      	push	{r4, r5, lr}
 800b3e0:	001d      	movs	r5, r3
 800b3e2:	2a00      	cmp	r2, #0
 800b3e4:	d006      	beq.n	800b3f4 <strncpy+0x18>
 800b3e6:	780c      	ldrb	r4, [r1, #0]
 800b3e8:	3a01      	subs	r2, #1
 800b3ea:	3301      	adds	r3, #1
 800b3ec:	702c      	strb	r4, [r5, #0]
 800b3ee:	3101      	adds	r1, #1
 800b3f0:	2c00      	cmp	r4, #0
 800b3f2:	d1f5      	bne.n	800b3e0 <strncpy+0x4>
 800b3f4:	2100      	movs	r1, #0
 800b3f6:	189a      	adds	r2, r3, r2
 800b3f8:	4293      	cmp	r3, r2
 800b3fa:	d100      	bne.n	800b3fe <strncpy+0x22>
 800b3fc:	bd30      	pop	{r4, r5, pc}
 800b3fe:	7019      	strb	r1, [r3, #0]
 800b400:	3301      	adds	r3, #1
 800b402:	e7f9      	b.n	800b3f8 <strncpy+0x1c>

0800b404 <localtime_r>:
 800b404:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b406:	000c      	movs	r4, r1
 800b408:	0006      	movs	r6, r0
 800b40a:	f001 fcad 	bl	800cd68 <__gettzinfo>
 800b40e:	0021      	movs	r1, r4
 800b410:	0005      	movs	r5, r0
 800b412:	0030      	movs	r0, r6
 800b414:	f001 fcac 	bl	800cd70 <gmtime_r>
 800b418:	4a72      	ldr	r2, [pc, #456]	@ (800b5e4 <localtime_r+0x1e0>)
 800b41a:	6943      	ldr	r3, [r0, #20]
 800b41c:	0004      	movs	r4, r0
 800b41e:	189f      	adds	r7, r3, r2
 800b420:	079b      	lsls	r3, r3, #30
 800b422:	d106      	bne.n	800b432 <localtime_r+0x2e>
 800b424:	2164      	movs	r1, #100	@ 0x64
 800b426:	0038      	movs	r0, r7
 800b428:	f7f4 fffa 	bl	8000420 <__aeabi_idivmod>
 800b42c:	2301      	movs	r3, #1
 800b42e:	2900      	cmp	r1, #0
 800b430:	d106      	bne.n	800b440 <localtime_r+0x3c>
 800b432:	21c8      	movs	r1, #200	@ 0xc8
 800b434:	0038      	movs	r0, r7
 800b436:	0049      	lsls	r1, r1, #1
 800b438:	f7f4 fff2 	bl	8000420 <__aeabi_idivmod>
 800b43c:	424b      	negs	r3, r1
 800b43e:	414b      	adcs	r3, r1
 800b440:	2230      	movs	r2, #48	@ 0x30
 800b442:	425b      	negs	r3, r3
 800b444:	4013      	ands	r3, r2
 800b446:	4a68      	ldr	r2, [pc, #416]	@ (800b5e8 <localtime_r+0x1e4>)
 800b448:	189b      	adds	r3, r3, r2
 800b44a:	9301      	str	r3, [sp, #4]
 800b44c:	f000 fc3a 	bl	800bcc4 <__tz_lock>
 800b450:	f000 fc48 	bl	800bce4 <_tzset_unlocked>
 800b454:	4b65      	ldr	r3, [pc, #404]	@ (800b5ec <localtime_r+0x1e8>)
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d100      	bne.n	800b45e <localtime_r+0x5a>
 800b45c:	e068      	b.n	800b530 <localtime_r+0x12c>
 800b45e:	686b      	ldr	r3, [r5, #4]
 800b460:	42bb      	cmp	r3, r7
 800b462:	d157      	bne.n	800b514 <localtime_r+0x110>
 800b464:	ce06      	ldmia	r6!, {r1, r2}
 800b466:	682e      	ldr	r6, [r5, #0]
 800b468:	6a28      	ldr	r0, [r5, #32]
 800b46a:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800b46c:	2e00      	cmp	r6, #0
 800b46e:	d159      	bne.n	800b524 <localtime_r+0x120>
 800b470:	4293      	cmp	r3, r2
 800b472:	dc5f      	bgt.n	800b534 <localtime_r+0x130>
 800b474:	d101      	bne.n	800b47a <localtime_r+0x76>
 800b476:	4288      	cmp	r0, r1
 800b478:	d85c      	bhi.n	800b534 <localtime_r+0x130>
 800b47a:	2301      	movs	r3, #1
 800b47c:	6223      	str	r3, [r4, #32]
 800b47e:	6d2f      	ldr	r7, [r5, #80]	@ 0x50
 800b480:	21e1      	movs	r1, #225	@ 0xe1
 800b482:	0038      	movs	r0, r7
 800b484:	0109      	lsls	r1, r1, #4
 800b486:	f7f4 ffcb 	bl	8000420 <__aeabi_idivmod>
 800b48a:	000e      	movs	r6, r1
 800b48c:	213c      	movs	r1, #60	@ 0x3c
 800b48e:	0030      	movs	r0, r6
 800b490:	f7f4 ffc6 	bl	8000420 <__aeabi_idivmod>
 800b494:	6825      	ldr	r5, [r4, #0]
 800b496:	0030      	movs	r0, r6
 800b498:	1a6d      	subs	r5, r5, r1
 800b49a:	6025      	str	r5, [r4, #0]
 800b49c:	213c      	movs	r1, #60	@ 0x3c
 800b49e:	f7f4 fed9 	bl	8000254 <__divsi3>
 800b4a2:	21e1      	movs	r1, #225	@ 0xe1
 800b4a4:	6866      	ldr	r6, [r4, #4]
 800b4a6:	0109      	lsls	r1, r1, #4
 800b4a8:	1a36      	subs	r6, r6, r0
 800b4aa:	6066      	str	r6, [r4, #4]
 800b4ac:	0038      	movs	r0, r7
 800b4ae:	f7f4 fed1 	bl	8000254 <__divsi3>
 800b4b2:	68a3      	ldr	r3, [r4, #8]
 800b4b4:	1a18      	subs	r0, r3, r0
 800b4b6:	60a0      	str	r0, [r4, #8]
 800b4b8:	2d3b      	cmp	r5, #59	@ 0x3b
 800b4ba:	dd49      	ble.n	800b550 <localtime_r+0x14c>
 800b4bc:	3601      	adds	r6, #1
 800b4be:	6066      	str	r6, [r4, #4]
 800b4c0:	3d3c      	subs	r5, #60	@ 0x3c
 800b4c2:	6025      	str	r5, [r4, #0]
 800b4c4:	6863      	ldr	r3, [r4, #4]
 800b4c6:	2b3b      	cmp	r3, #59	@ 0x3b
 800b4c8:	dd48      	ble.n	800b55c <localtime_r+0x158>
 800b4ca:	3001      	adds	r0, #1
 800b4cc:	60a0      	str	r0, [r4, #8]
 800b4ce:	3b3c      	subs	r3, #60	@ 0x3c
 800b4d0:	6063      	str	r3, [r4, #4]
 800b4d2:	68a1      	ldr	r1, [r4, #8]
 800b4d4:	2917      	cmp	r1, #23
 800b4d6:	dd4e      	ble.n	800b576 <localtime_r+0x172>
 800b4d8:	69e3      	ldr	r3, [r4, #28]
 800b4da:	69a2      	ldr	r2, [r4, #24]
 800b4dc:	3301      	adds	r3, #1
 800b4de:	3201      	adds	r2, #1
 800b4e0:	61e3      	str	r3, [r4, #28]
 800b4e2:	2a06      	cmp	r2, #6
 800b4e4:	dd00      	ble.n	800b4e8 <localtime_r+0xe4>
 800b4e6:	2200      	movs	r2, #0
 800b4e8:	68e3      	ldr	r3, [r4, #12]
 800b4ea:	61a2      	str	r2, [r4, #24]
 800b4ec:	6922      	ldr	r2, [r4, #16]
 800b4ee:	3918      	subs	r1, #24
 800b4f0:	9801      	ldr	r0, [sp, #4]
 800b4f2:	3301      	adds	r3, #1
 800b4f4:	60a1      	str	r1, [r4, #8]
 800b4f6:	60e3      	str	r3, [r4, #12]
 800b4f8:	0091      	lsls	r1, r2, #2
 800b4fa:	5809      	ldr	r1, [r1, r0]
 800b4fc:	428b      	cmp	r3, r1
 800b4fe:	dd05      	ble.n	800b50c <localtime_r+0x108>
 800b500:	1a5b      	subs	r3, r3, r1
 800b502:	60e3      	str	r3, [r4, #12]
 800b504:	1c53      	adds	r3, r2, #1
 800b506:	2a0b      	cmp	r2, #11
 800b508:	d02e      	beq.n	800b568 <localtime_r+0x164>
 800b50a:	6123      	str	r3, [r4, #16]
 800b50c:	f000 fbe2 	bl	800bcd4 <__tz_unlock>
 800b510:	0020      	movs	r0, r4
 800b512:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b514:	0038      	movs	r0, r7
 800b516:	f000 fb1b 	bl	800bb50 <__tzcalc_limits>
 800b51a:	2800      	cmp	r0, #0
 800b51c:	d1a2      	bne.n	800b464 <localtime_r+0x60>
 800b51e:	2301      	movs	r3, #1
 800b520:	425b      	negs	r3, r3
 800b522:	e005      	b.n	800b530 <localtime_r+0x12c>
 800b524:	4293      	cmp	r3, r2
 800b526:	dc02      	bgt.n	800b52e <localtime_r+0x12a>
 800b528:	d104      	bne.n	800b534 <localtime_r+0x130>
 800b52a:	4288      	cmp	r0, r1
 800b52c:	d902      	bls.n	800b534 <localtime_r+0x130>
 800b52e:	2300      	movs	r3, #0
 800b530:	6223      	str	r3, [r4, #32]
 800b532:	e00b      	b.n	800b54c <localtime_r+0x148>
 800b534:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800b536:	2301      	movs	r3, #1
 800b538:	4290      	cmp	r0, r2
 800b53a:	dc04      	bgt.n	800b546 <localtime_r+0x142>
 800b53c:	d102      	bne.n	800b544 <localtime_r+0x140>
 800b53e:	6caa      	ldr	r2, [r5, #72]	@ 0x48
 800b540:	428a      	cmp	r2, r1
 800b542:	d800      	bhi.n	800b546 <localtime_r+0x142>
 800b544:	2300      	movs	r3, #0
 800b546:	6223      	str	r3, [r4, #32]
 800b548:	2b01      	cmp	r3, #1
 800b54a:	d098      	beq.n	800b47e <localtime_r+0x7a>
 800b54c:	6aaf      	ldr	r7, [r5, #40]	@ 0x28
 800b54e:	e797      	b.n	800b480 <localtime_r+0x7c>
 800b550:	2d00      	cmp	r5, #0
 800b552:	dab7      	bge.n	800b4c4 <localtime_r+0xc0>
 800b554:	3e01      	subs	r6, #1
 800b556:	6066      	str	r6, [r4, #4]
 800b558:	353c      	adds	r5, #60	@ 0x3c
 800b55a:	e7b2      	b.n	800b4c2 <localtime_r+0xbe>
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	dab8      	bge.n	800b4d2 <localtime_r+0xce>
 800b560:	3801      	subs	r0, #1
 800b562:	60a0      	str	r0, [r4, #8]
 800b564:	333c      	adds	r3, #60	@ 0x3c
 800b566:	e7b3      	b.n	800b4d0 <localtime_r+0xcc>
 800b568:	2200      	movs	r2, #0
 800b56a:	6963      	ldr	r3, [r4, #20]
 800b56c:	6122      	str	r2, [r4, #16]
 800b56e:	3301      	adds	r3, #1
 800b570:	6163      	str	r3, [r4, #20]
 800b572:	61e2      	str	r2, [r4, #28]
 800b574:	e7ca      	b.n	800b50c <localtime_r+0x108>
 800b576:	2900      	cmp	r1, #0
 800b578:	dac8      	bge.n	800b50c <localtime_r+0x108>
 800b57a:	69e3      	ldr	r3, [r4, #28]
 800b57c:	69a2      	ldr	r2, [r4, #24]
 800b57e:	3b01      	subs	r3, #1
 800b580:	61e3      	str	r3, [r4, #28]
 800b582:	3a01      	subs	r2, #1
 800b584:	d500      	bpl.n	800b588 <localtime_r+0x184>
 800b586:	2206      	movs	r2, #6
 800b588:	61a2      	str	r2, [r4, #24]
 800b58a:	68e2      	ldr	r2, [r4, #12]
 800b58c:	3118      	adds	r1, #24
 800b58e:	3a01      	subs	r2, #1
 800b590:	60e2      	str	r2, [r4, #12]
 800b592:	60a1      	str	r1, [r4, #8]
 800b594:	2a00      	cmp	r2, #0
 800b596:	d1b9      	bne.n	800b50c <localtime_r+0x108>
 800b598:	6923      	ldr	r3, [r4, #16]
 800b59a:	3b01      	subs	r3, #1
 800b59c:	d406      	bmi.n	800b5ac <localtime_r+0x1a8>
 800b59e:	6123      	str	r3, [r4, #16]
 800b5a0:	6923      	ldr	r3, [r4, #16]
 800b5a2:	9a01      	ldr	r2, [sp, #4]
 800b5a4:	009b      	lsls	r3, r3, #2
 800b5a6:	589b      	ldr	r3, [r3, r2]
 800b5a8:	60e3      	str	r3, [r4, #12]
 800b5aa:	e7af      	b.n	800b50c <localtime_r+0x108>
 800b5ac:	230b      	movs	r3, #11
 800b5ae:	6965      	ldr	r5, [r4, #20]
 800b5b0:	4a0f      	ldr	r2, [pc, #60]	@ (800b5f0 <localtime_r+0x1ec>)
 800b5b2:	6123      	str	r3, [r4, #16]
 800b5b4:	1e6b      	subs	r3, r5, #1
 800b5b6:	6163      	str	r3, [r4, #20]
 800b5b8:	18ad      	adds	r5, r5, r2
 800b5ba:	079b      	lsls	r3, r3, #30
 800b5bc:	d106      	bne.n	800b5cc <localtime_r+0x1c8>
 800b5be:	2164      	movs	r1, #100	@ 0x64
 800b5c0:	0028      	movs	r0, r5
 800b5c2:	f7f4 ff2d 	bl	8000420 <__aeabi_idivmod>
 800b5c6:	2301      	movs	r3, #1
 800b5c8:	2900      	cmp	r1, #0
 800b5ca:	d106      	bne.n	800b5da <localtime_r+0x1d6>
 800b5cc:	21c8      	movs	r1, #200	@ 0xc8
 800b5ce:	0028      	movs	r0, r5
 800b5d0:	0049      	lsls	r1, r1, #1
 800b5d2:	f7f4 ff25 	bl	8000420 <__aeabi_idivmod>
 800b5d6:	424b      	negs	r3, r1
 800b5d8:	414b      	adcs	r3, r1
 800b5da:	336d      	adds	r3, #109	@ 0x6d
 800b5dc:	33ff      	adds	r3, #255	@ 0xff
 800b5de:	61e3      	str	r3, [r4, #28]
 800b5e0:	e7de      	b.n	800b5a0 <localtime_r+0x19c>
 800b5e2:	46c0      	nop			@ (mov r8, r8)
 800b5e4:	0000076c 	.word	0x0000076c
 800b5e8:	0800e25c 	.word	0x0800e25c
 800b5ec:	200013e0 	.word	0x200013e0
 800b5f0:	0000076b 	.word	0x0000076b

0800b5f4 <validate_structure>:
 800b5f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b5f6:	6801      	ldr	r1, [r0, #0]
 800b5f8:	0004      	movs	r4, r0
 800b5fa:	293b      	cmp	r1, #59	@ 0x3b
 800b5fc:	d90b      	bls.n	800b616 <validate_structure+0x22>
 800b5fe:	223c      	movs	r2, #60	@ 0x3c
 800b600:	4668      	mov	r0, sp
 800b602:	f000 fe35 	bl	800c270 <div>
 800b606:	6863      	ldr	r3, [r4, #4]
 800b608:	9900      	ldr	r1, [sp, #0]
 800b60a:	9a01      	ldr	r2, [sp, #4]
 800b60c:	185b      	adds	r3, r3, r1
 800b60e:	6063      	str	r3, [r4, #4]
 800b610:	2a00      	cmp	r2, #0
 800b612:	db4a      	blt.n	800b6aa <validate_structure+0xb6>
 800b614:	6022      	str	r2, [r4, #0]
 800b616:	6861      	ldr	r1, [r4, #4]
 800b618:	293b      	cmp	r1, #59	@ 0x3b
 800b61a:	d90b      	bls.n	800b634 <validate_structure+0x40>
 800b61c:	223c      	movs	r2, #60	@ 0x3c
 800b61e:	4668      	mov	r0, sp
 800b620:	f000 fe26 	bl	800c270 <div>
 800b624:	68a3      	ldr	r3, [r4, #8]
 800b626:	9900      	ldr	r1, [sp, #0]
 800b628:	9a01      	ldr	r2, [sp, #4]
 800b62a:	185b      	adds	r3, r3, r1
 800b62c:	60a3      	str	r3, [r4, #8]
 800b62e:	2a00      	cmp	r2, #0
 800b630:	db40      	blt.n	800b6b4 <validate_structure+0xc0>
 800b632:	6062      	str	r2, [r4, #4]
 800b634:	68a1      	ldr	r1, [r4, #8]
 800b636:	2917      	cmp	r1, #23
 800b638:	d90b      	bls.n	800b652 <validate_structure+0x5e>
 800b63a:	2218      	movs	r2, #24
 800b63c:	4668      	mov	r0, sp
 800b63e:	f000 fe17 	bl	800c270 <div>
 800b642:	68e3      	ldr	r3, [r4, #12]
 800b644:	9900      	ldr	r1, [sp, #0]
 800b646:	9a01      	ldr	r2, [sp, #4]
 800b648:	185b      	adds	r3, r3, r1
 800b64a:	60e3      	str	r3, [r4, #12]
 800b64c:	2a00      	cmp	r2, #0
 800b64e:	db36      	blt.n	800b6be <validate_structure+0xca>
 800b650:	60a2      	str	r2, [r4, #8]
 800b652:	6921      	ldr	r1, [r4, #16]
 800b654:	290b      	cmp	r1, #11
 800b656:	d90b      	bls.n	800b670 <validate_structure+0x7c>
 800b658:	220c      	movs	r2, #12
 800b65a:	4668      	mov	r0, sp
 800b65c:	f000 fe08 	bl	800c270 <div>
 800b660:	6963      	ldr	r3, [r4, #20]
 800b662:	9900      	ldr	r1, [sp, #0]
 800b664:	9a01      	ldr	r2, [sp, #4]
 800b666:	185b      	adds	r3, r3, r1
 800b668:	6163      	str	r3, [r4, #20]
 800b66a:	2a00      	cmp	r2, #0
 800b66c:	db2c      	blt.n	800b6c8 <validate_structure+0xd4>
 800b66e:	6122      	str	r2, [r4, #16]
 800b670:	6965      	ldr	r5, [r4, #20]
 800b672:	231c      	movs	r3, #28
 800b674:	07aa      	lsls	r2, r5, #30
 800b676:	d10f      	bne.n	800b698 <validate_structure+0xa4>
 800b678:	2164      	movs	r1, #100	@ 0x64
 800b67a:	0028      	movs	r0, r5
 800b67c:	f7f4 fed0 	bl	8000420 <__aeabi_idivmod>
 800b680:	231d      	movs	r3, #29
 800b682:	2900      	cmp	r1, #0
 800b684:	d108      	bne.n	800b698 <validate_structure+0xa4>
 800b686:	4b3a      	ldr	r3, [pc, #232]	@ (800b770 <validate_structure+0x17c>)
 800b688:	3191      	adds	r1, #145	@ 0x91
 800b68a:	18e8      	adds	r0, r5, r3
 800b68c:	31ff      	adds	r1, #255	@ 0xff
 800b68e:	f7f4 fec7 	bl	8000420 <__aeabi_idivmod>
 800b692:	424b      	negs	r3, r1
 800b694:	414b      	adcs	r3, r1
 800b696:	331c      	adds	r3, #28
 800b698:	68e2      	ldr	r2, [r4, #12]
 800b69a:	271d      	movs	r7, #29
 800b69c:	4d35      	ldr	r5, [pc, #212]	@ (800b774 <validate_structure+0x180>)
 800b69e:	2a00      	cmp	r2, #0
 800b6a0:	dc5b      	bgt.n	800b75a <validate_structure+0x166>
 800b6a2:	68e6      	ldr	r6, [r4, #12]
 800b6a4:	2e00      	cmp	r6, #0
 800b6a6:	dd14      	ble.n	800b6d2 <validate_structure+0xde>
 800b6a8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800b6aa:	323c      	adds	r2, #60	@ 0x3c
 800b6ac:	3b01      	subs	r3, #1
 800b6ae:	6022      	str	r2, [r4, #0]
 800b6b0:	6063      	str	r3, [r4, #4]
 800b6b2:	e7b0      	b.n	800b616 <validate_structure+0x22>
 800b6b4:	323c      	adds	r2, #60	@ 0x3c
 800b6b6:	3b01      	subs	r3, #1
 800b6b8:	6062      	str	r2, [r4, #4]
 800b6ba:	60a3      	str	r3, [r4, #8]
 800b6bc:	e7ba      	b.n	800b634 <validate_structure+0x40>
 800b6be:	3218      	adds	r2, #24
 800b6c0:	3b01      	subs	r3, #1
 800b6c2:	60a2      	str	r2, [r4, #8]
 800b6c4:	60e3      	str	r3, [r4, #12]
 800b6c6:	e7c4      	b.n	800b652 <validate_structure+0x5e>
 800b6c8:	320c      	adds	r2, #12
 800b6ca:	3b01      	subs	r3, #1
 800b6cc:	6122      	str	r2, [r4, #16]
 800b6ce:	6163      	str	r3, [r4, #20]
 800b6d0:	e7ce      	b.n	800b670 <validate_structure+0x7c>
 800b6d2:	6922      	ldr	r2, [r4, #16]
 800b6d4:	3a01      	subs	r2, #1
 800b6d6:	6122      	str	r2, [r4, #16]
 800b6d8:	3201      	adds	r2, #1
 800b6da:	d117      	bne.n	800b70c <validate_structure+0x118>
 800b6dc:	230b      	movs	r3, #11
 800b6de:	2203      	movs	r2, #3
 800b6e0:	6965      	ldr	r5, [r4, #20]
 800b6e2:	6123      	str	r3, [r4, #16]
 800b6e4:	1e68      	subs	r0, r5, #1
 800b6e6:	6160      	str	r0, [r4, #20]
 800b6e8:	3311      	adds	r3, #17
 800b6ea:	4210      	tst	r0, r2
 800b6ec:	d10e      	bne.n	800b70c <validate_structure+0x118>
 800b6ee:	2164      	movs	r1, #100	@ 0x64
 800b6f0:	f7f4 fe96 	bl	8000420 <__aeabi_idivmod>
 800b6f4:	003b      	movs	r3, r7
 800b6f6:	2900      	cmp	r1, #0
 800b6f8:	d108      	bne.n	800b70c <validate_structure+0x118>
 800b6fa:	4b1f      	ldr	r3, [pc, #124]	@ (800b778 <validate_structure+0x184>)
 800b6fc:	3191      	adds	r1, #145	@ 0x91
 800b6fe:	18e8      	adds	r0, r5, r3
 800b700:	31ff      	adds	r1, #255	@ 0xff
 800b702:	f7f4 fe8d 	bl	8000420 <__aeabi_idivmod>
 800b706:	424b      	negs	r3, r1
 800b708:	414b      	adcs	r3, r1
 800b70a:	331c      	adds	r3, #28
 800b70c:	6921      	ldr	r1, [r4, #16]
 800b70e:	001a      	movs	r2, r3
 800b710:	2901      	cmp	r1, #1
 800b712:	d002      	beq.n	800b71a <validate_structure+0x126>
 800b714:	4a17      	ldr	r2, [pc, #92]	@ (800b774 <validate_structure+0x180>)
 800b716:	0089      	lsls	r1, r1, #2
 800b718:	588a      	ldr	r2, [r1, r2]
 800b71a:	18b2      	adds	r2, r6, r2
 800b71c:	60e2      	str	r2, [r4, #12]
 800b71e:	e7c0      	b.n	800b6a2 <validate_structure+0xae>
 800b720:	1a09      	subs	r1, r1, r0
 800b722:	3201      	adds	r2, #1
 800b724:	60e1      	str	r1, [r4, #12]
 800b726:	6122      	str	r2, [r4, #16]
 800b728:	2a0c      	cmp	r2, #12
 800b72a:	d116      	bne.n	800b75a <validate_structure+0x166>
 800b72c:	2300      	movs	r3, #0
 800b72e:	6966      	ldr	r6, [r4, #20]
 800b730:	6123      	str	r3, [r4, #16]
 800b732:	1c70      	adds	r0, r6, #1
 800b734:	6160      	str	r0, [r4, #20]
 800b736:	331c      	adds	r3, #28
 800b738:	0782      	lsls	r2, r0, #30
 800b73a:	d10e      	bne.n	800b75a <validate_structure+0x166>
 800b73c:	2164      	movs	r1, #100	@ 0x64
 800b73e:	f7f4 fe6f 	bl	8000420 <__aeabi_idivmod>
 800b742:	231d      	movs	r3, #29
 800b744:	2900      	cmp	r1, #0
 800b746:	d108      	bne.n	800b75a <validate_structure+0x166>
 800b748:	4b0c      	ldr	r3, [pc, #48]	@ (800b77c <validate_structure+0x188>)
 800b74a:	3191      	adds	r1, #145	@ 0x91
 800b74c:	18f0      	adds	r0, r6, r3
 800b74e:	31ff      	adds	r1, #255	@ 0xff
 800b750:	f7f4 fe66 	bl	8000420 <__aeabi_idivmod>
 800b754:	424b      	negs	r3, r1
 800b756:	414b      	adcs	r3, r1
 800b758:	331c      	adds	r3, #28
 800b75a:	6922      	ldr	r2, [r4, #16]
 800b75c:	0018      	movs	r0, r3
 800b75e:	68e1      	ldr	r1, [r4, #12]
 800b760:	2a01      	cmp	r2, #1
 800b762:	d001      	beq.n	800b768 <validate_structure+0x174>
 800b764:	0090      	lsls	r0, r2, #2
 800b766:	5940      	ldr	r0, [r0, r5]
 800b768:	4281      	cmp	r1, r0
 800b76a:	dcd9      	bgt.n	800b720 <validate_structure+0x12c>
 800b76c:	e79c      	b.n	800b6a8 <validate_structure+0xb4>
 800b76e:	46c0      	nop			@ (mov r8, r8)
 800b770:	0000076c 	.word	0x0000076c
 800b774:	0800e22c 	.word	0x0800e22c
 800b778:	0000076b 	.word	0x0000076b
 800b77c:	0000076d 	.word	0x0000076d

0800b780 <mktime>:
 800b780:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b782:	b08d      	sub	sp, #52	@ 0x34
 800b784:	0004      	movs	r4, r0
 800b786:	f001 faef 	bl	800cd68 <__gettzinfo>
 800b78a:	0007      	movs	r7, r0
 800b78c:	0020      	movs	r0, r4
 800b78e:	f7ff ff31 	bl	800b5f4 <validate_structure>
 800b792:	223c      	movs	r2, #60	@ 0x3c
 800b794:	6863      	ldr	r3, [r4, #4]
 800b796:	68a1      	ldr	r1, [r4, #8]
 800b798:	4353      	muls	r3, r2
 800b79a:	6822      	ldr	r2, [r4, #0]
 800b79c:	189b      	adds	r3, r3, r2
 800b79e:	22e1      	movs	r2, #225	@ 0xe1
 800b7a0:	0112      	lsls	r2, r2, #4
 800b7a2:	434a      	muls	r2, r1
 800b7a4:	6921      	ldr	r1, [r4, #16]
 800b7a6:	189b      	adds	r3, r3, r2
 800b7a8:	9300      	str	r3, [sp, #0]
 800b7aa:	4ac4      	ldr	r2, [pc, #784]	@ (800babc <mktime+0x33c>)
 800b7ac:	17db      	asrs	r3, r3, #31
 800b7ae:	9301      	str	r3, [sp, #4]
 800b7b0:	0088      	lsls	r0, r1, #2
 800b7b2:	68e3      	ldr	r3, [r4, #12]
 800b7b4:	5882      	ldr	r2, [r0, r2]
 800b7b6:	3b01      	subs	r3, #1
 800b7b8:	189b      	adds	r3, r3, r2
 800b7ba:	9306      	str	r3, [sp, #24]
 800b7bc:	6963      	ldr	r3, [r4, #20]
 800b7be:	9303      	str	r3, [sp, #12]
 800b7c0:	2901      	cmp	r1, #1
 800b7c2:	dd13      	ble.n	800b7ec <mktime+0x6c>
 800b7c4:	079b      	lsls	r3, r3, #30
 800b7c6:	d111      	bne.n	800b7ec <mktime+0x6c>
 800b7c8:	2164      	movs	r1, #100	@ 0x64
 800b7ca:	9803      	ldr	r0, [sp, #12]
 800b7cc:	f7f4 fe28 	bl	8000420 <__aeabi_idivmod>
 800b7d0:	2900      	cmp	r1, #0
 800b7d2:	d108      	bne.n	800b7e6 <mktime+0x66>
 800b7d4:	9b03      	ldr	r3, [sp, #12]
 800b7d6:	4aba      	ldr	r2, [pc, #744]	@ (800bac0 <mktime+0x340>)
 800b7d8:	3191      	adds	r1, #145	@ 0x91
 800b7da:	31ff      	adds	r1, #255	@ 0xff
 800b7dc:	1898      	adds	r0, r3, r2
 800b7de:	f7f4 fe1f 	bl	8000420 <__aeabi_idivmod>
 800b7e2:	2900      	cmp	r1, #0
 800b7e4:	d102      	bne.n	800b7ec <mktime+0x6c>
 800b7e6:	9b06      	ldr	r3, [sp, #24]
 800b7e8:	3301      	adds	r3, #1
 800b7ea:	9306      	str	r3, [sp, #24]
 800b7ec:	9b06      	ldr	r3, [sp, #24]
 800b7ee:	49b5      	ldr	r1, [pc, #724]	@ (800bac4 <mktime+0x344>)
 800b7f0:	61e3      	str	r3, [r4, #28]
 800b7f2:	9b03      	ldr	r3, [sp, #12]
 800b7f4:	4ab4      	ldr	r2, [pc, #720]	@ (800bac8 <mktime+0x348>)
 800b7f6:	185b      	adds	r3, r3, r1
 800b7f8:	4293      	cmp	r3, r2
 800b7fa:	d900      	bls.n	800b7fe <mktime+0x7e>
 800b7fc:	e193      	b.n	800bb26 <mktime+0x3a6>
 800b7fe:	9b03      	ldr	r3, [sp, #12]
 800b800:	2b46      	cmp	r3, #70	@ 0x46
 800b802:	dc00      	bgt.n	800b806 <mktime+0x86>
 800b804:	e0dd      	b.n	800b9c2 <mktime+0x242>
 800b806:	2204      	movs	r2, #4
 800b808:	2346      	movs	r3, #70	@ 0x46
 800b80a:	2603      	movs	r6, #3
 800b80c:	4694      	mov	ip, r2
 800b80e:	0019      	movs	r1, r3
 800b810:	4031      	ands	r1, r6
 800b812:	4233      	tst	r3, r6
 800b814:	d000      	beq.n	800b818 <mktime+0x98>
 800b816:	e0d1      	b.n	800b9bc <mktime+0x23c>
 800b818:	2002      	movs	r0, #2
 800b81a:	4dac      	ldr	r5, [pc, #688]	@ (800bacc <mktime+0x34c>)
 800b81c:	4aac      	ldr	r2, [pc, #688]	@ (800bad0 <mktime+0x350>)
 800b81e:	435d      	muls	r5, r3
 800b820:	41c5      	rors	r5, r0
 800b822:	306d      	adds	r0, #109	@ 0x6d
 800b824:	30ff      	adds	r0, #255	@ 0xff
 800b826:	4295      	cmp	r5, r2
 800b828:	d80b      	bhi.n	800b842 <mktime+0xc2>
 800b82a:	4aa5      	ldr	r2, [pc, #660]	@ (800bac0 <mktime+0x340>)
 800b82c:	1898      	adds	r0, r3, r2
 800b82e:	4aa7      	ldr	r2, [pc, #668]	@ (800bacc <mktime+0x34c>)
 800b830:	4342      	muls	r2, r0
 800b832:	4660      	mov	r0, ip
 800b834:	41c2      	rors	r2, r0
 800b836:	48a7      	ldr	r0, [pc, #668]	@ (800bad4 <mktime+0x354>)
 800b838:	4290      	cmp	r0, r2
 800b83a:	4149      	adcs	r1, r1
 800b83c:	316e      	adds	r1, #110	@ 0x6e
 800b83e:	31ff      	adds	r1, #255	@ 0xff
 800b840:	0008      	movs	r0, r1
 800b842:	9a06      	ldr	r2, [sp, #24]
 800b844:	3301      	adds	r3, #1
 800b846:	1812      	adds	r2, r2, r0
 800b848:	9206      	str	r2, [sp, #24]
 800b84a:	9a03      	ldr	r2, [sp, #12]
 800b84c:	429a      	cmp	r2, r3
 800b84e:	d1de      	bne.n	800b80e <mktime+0x8e>
 800b850:	9b06      	ldr	r3, [sp, #24]
 800b852:	4aa1      	ldr	r2, [pc, #644]	@ (800bad8 <mktime+0x358>)
 800b854:	9806      	ldr	r0, [sp, #24]
 800b856:	17d9      	asrs	r1, r3, #31
 800b858:	2300      	movs	r3, #0
 800b85a:	f7f4 fe2b 	bl	80004b4 <__aeabi_lmul>
 800b85e:	9a00      	ldr	r2, [sp, #0]
 800b860:	9b01      	ldr	r3, [sp, #4]
 800b862:	1812      	adds	r2, r2, r0
 800b864:	414b      	adcs	r3, r1
 800b866:	9200      	str	r2, [sp, #0]
 800b868:	9301      	str	r3, [sp, #4]
 800b86a:	f000 fa2b 	bl	800bcc4 <__tz_lock>
 800b86e:	f000 fa39 	bl	800bce4 <_tzset_unlocked>
 800b872:	4b9a      	ldr	r3, [pc, #616]	@ (800badc <mktime+0x35c>)
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d100      	bne.n	800b87c <mktime+0xfc>
 800b87a:	e15d      	b.n	800bb38 <mktime+0x3b8>
 800b87c:	4b90      	ldr	r3, [pc, #576]	@ (800bac0 <mktime+0x340>)
 800b87e:	6960      	ldr	r0, [r4, #20]
 800b880:	18c0      	adds	r0, r0, r3
 800b882:	6a23      	ldr	r3, [r4, #32]
 800b884:	9307      	str	r3, [sp, #28]
 800b886:	9309      	str	r3, [sp, #36]	@ 0x24
 800b888:	2b00      	cmp	r3, #0
 800b88a:	dd01      	ble.n	800b890 <mktime+0x110>
 800b88c:	2301      	movs	r3, #1
 800b88e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	4283      	cmp	r3, r0
 800b894:	d000      	beq.n	800b898 <mktime+0x118>
 800b896:	e0d6      	b.n	800ba46 <mktime+0x2c6>
 800b898:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b89a:	0018      	movs	r0, r3
 800b89c:	17d9      	asrs	r1, r3, #31
 800b89e:	469c      	mov	ip, r3
 800b8a0:	6a3a      	ldr	r2, [r7, #32]
 800b8a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8a4:	1a12      	subs	r2, r2, r0
 800b8a6:	418b      	sbcs	r3, r1
 800b8a8:	9204      	str	r2, [sp, #16]
 800b8aa:	9305      	str	r3, [sp, #20]
 800b8ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b8ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b8b0:	920a      	str	r2, [sp, #40]	@ 0x28
 800b8b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b8b4:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800b8b6:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800b8b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8ba:	9308      	str	r3, [sp, #32]
 800b8bc:	9a08      	ldr	r2, [sp, #32]
 800b8be:	17d3      	asrs	r3, r2, #31
 800b8c0:	1aad      	subs	r5, r5, r2
 800b8c2:	419e      	sbcs	r6, r3
 800b8c4:	002a      	movs	r2, r5
 800b8c6:	9d01      	ldr	r5, [sp, #4]
 800b8c8:	0033      	movs	r3, r6
 800b8ca:	42ae      	cmp	r6, r5
 800b8cc:	dc11      	bgt.n	800b8f2 <mktime+0x172>
 800b8ce:	d102      	bne.n	800b8d6 <mktime+0x156>
 800b8d0:	9d00      	ldr	r5, [sp, #0]
 800b8d2:	42aa      	cmp	r2, r5
 800b8d4:	d80d      	bhi.n	800b8f2 <mktime+0x172>
 800b8d6:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800b8d8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800b8da:	1a2d      	subs	r5, r5, r0
 800b8dc:	418e      	sbcs	r6, r1
 800b8de:	0028      	movs	r0, r5
 800b8e0:	9d01      	ldr	r5, [sp, #4]
 800b8e2:	42ae      	cmp	r6, r5
 800b8e4:	dd00      	ble.n	800b8e8 <mktime+0x168>
 800b8e6:	e0b3      	b.n	800ba50 <mktime+0x2d0>
 800b8e8:	d103      	bne.n	800b8f2 <mktime+0x172>
 800b8ea:	9d00      	ldr	r5, [sp, #0]
 800b8ec:	42a8      	cmp	r0, r5
 800b8ee:	d900      	bls.n	800b8f2 <mktime+0x172>
 800b8f0:	e0ae      	b.n	800ba50 <mktime+0x2d0>
 800b8f2:	6839      	ldr	r1, [r7, #0]
 800b8f4:	2900      	cmp	r1, #0
 800b8f6:	d100      	bne.n	800b8fa <mktime+0x17a>
 800b8f8:	e0c5      	b.n	800ba86 <mktime+0x306>
 800b8fa:	9901      	ldr	r1, [sp, #4]
 800b8fc:	9805      	ldr	r0, [sp, #20]
 800b8fe:	4288      	cmp	r0, r1
 800b900:	dd00      	ble.n	800b904 <mktime+0x184>
 800b902:	e114      	b.n	800bb2e <mktime+0x3ae>
 800b904:	d104      	bne.n	800b910 <mktime+0x190>
 800b906:	9900      	ldr	r1, [sp, #0]
 800b908:	9804      	ldr	r0, [sp, #16]
 800b90a:	4288      	cmp	r0, r1
 800b90c:	d900      	bls.n	800b910 <mktime+0x190>
 800b90e:	e10e      	b.n	800bb2e <mktime+0x3ae>
 800b910:	9901      	ldr	r1, [sp, #4]
 800b912:	2501      	movs	r5, #1
 800b914:	428b      	cmp	r3, r1
 800b916:	dc04      	bgt.n	800b922 <mktime+0x1a2>
 800b918:	d102      	bne.n	800b920 <mktime+0x1a0>
 800b91a:	9900      	ldr	r1, [sp, #0]
 800b91c:	428a      	cmp	r2, r1
 800b91e:	d800      	bhi.n	800b922 <mktime+0x1a2>
 800b920:	2500      	movs	r5, #0
 800b922:	9b07      	ldr	r3, [sp, #28]
 800b924:	2b00      	cmp	r3, #0
 800b926:	da00      	bge.n	800b92a <mktime+0x1aa>
 800b928:	e093      	b.n	800ba52 <mktime+0x2d2>
 800b92a:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800b92c:	406e      	eors	r6, r5
 800b92e:	2e01      	cmp	r6, #1
 800b930:	d000      	beq.n	800b934 <mktime+0x1b4>
 800b932:	e08e      	b.n	800ba52 <mktime+0x2d2>
 800b934:	4663      	mov	r3, ip
 800b936:	9a08      	ldr	r2, [sp, #32]
 800b938:	1a9b      	subs	r3, r3, r2
 800b93a:	2d00      	cmp	r5, #0
 800b93c:	d002      	beq.n	800b944 <mktime+0x1c4>
 800b93e:	0013      	movs	r3, r2
 800b940:	4662      	mov	r2, ip
 800b942:	1a9b      	subs	r3, r3, r2
 800b944:	0018      	movs	r0, r3
 800b946:	6822      	ldr	r2, [r4, #0]
 800b948:	17d9      	asrs	r1, r3, #31
 800b94a:	18d2      	adds	r2, r2, r3
 800b94c:	6022      	str	r2, [r4, #0]
 800b94e:	9a00      	ldr	r2, [sp, #0]
 800b950:	9b01      	ldr	r3, [sp, #4]
 800b952:	1812      	adds	r2, r2, r0
 800b954:	414b      	adcs	r3, r1
 800b956:	9200      	str	r2, [sp, #0]
 800b958:	9301      	str	r3, [sp, #4]
 800b95a:	68e3      	ldr	r3, [r4, #12]
 800b95c:	0020      	movs	r0, r4
 800b95e:	9304      	str	r3, [sp, #16]
 800b960:	f7ff fe48 	bl	800b5f4 <validate_structure>
 800b964:	68e2      	ldr	r2, [r4, #12]
 800b966:	9b04      	ldr	r3, [sp, #16]
 800b968:	9904      	ldr	r1, [sp, #16]
 800b96a:	1ad3      	subs	r3, r2, r3
 800b96c:	428a      	cmp	r2, r1
 800b96e:	d070      	beq.n	800ba52 <mktime+0x2d2>
 800b970:	2b01      	cmp	r3, #1
 800b972:	dd00      	ble.n	800b976 <mktime+0x1f6>
 800b974:	e098      	b.n	800baa8 <mktime+0x328>
 800b976:	1c5a      	adds	r2, r3, #1
 800b978:	db00      	blt.n	800b97c <mktime+0x1fc>
 800b97a:	001e      	movs	r6, r3
 800b97c:	9b06      	ldr	r3, [sp, #24]
 800b97e:	69e2      	ldr	r2, [r4, #28]
 800b980:	199b      	adds	r3, r3, r6
 800b982:	9306      	str	r3, [sp, #24]
 800b984:	2303      	movs	r3, #3
 800b986:	18b6      	adds	r6, r6, r2
 800b988:	d400      	bmi.n	800b98c <mktime+0x20c>
 800b98a:	e0ab      	b.n	800bae4 <mktime+0x364>
 800b98c:	9a03      	ldr	r2, [sp, #12]
 800b98e:	1e50      	subs	r0, r2, #1
 800b990:	4218      	tst	r0, r3
 800b992:	d000      	beq.n	800b996 <mktime+0x216>
 800b994:	e08b      	b.n	800baae <mktime+0x32e>
 800b996:	2164      	movs	r1, #100	@ 0x64
 800b998:	f7f4 fd42 	bl	8000420 <__aeabi_idivmod>
 800b99c:	2900      	cmp	r1, #0
 800b99e:	d000      	beq.n	800b9a2 <mktime+0x222>
 800b9a0:	e089      	b.n	800bab6 <mktime+0x336>
 800b9a2:	4b4f      	ldr	r3, [pc, #316]	@ (800bae0 <mktime+0x360>)
 800b9a4:	9803      	ldr	r0, [sp, #12]
 800b9a6:	469c      	mov	ip, r3
 800b9a8:	3191      	adds	r1, #145	@ 0x91
 800b9aa:	4460      	add	r0, ip
 800b9ac:	31ff      	adds	r1, #255	@ 0xff
 800b9ae:	f7f4 fd37 	bl	8000420 <__aeabi_idivmod>
 800b9b2:	424b      	negs	r3, r1
 800b9b4:	4159      	adcs	r1, r3
 800b9b6:	316d      	adds	r1, #109	@ 0x6d
 800b9b8:	31ff      	adds	r1, #255	@ 0xff
 800b9ba:	e07a      	b.n	800bab2 <mktime+0x332>
 800b9bc:	206e      	movs	r0, #110	@ 0x6e
 800b9be:	30ff      	adds	r0, #255	@ 0xff
 800b9c0:	e73f      	b.n	800b842 <mktime+0xc2>
 800b9c2:	9b03      	ldr	r3, [sp, #12]
 800b9c4:	2545      	movs	r5, #69	@ 0x45
 800b9c6:	2b46      	cmp	r3, #70	@ 0x46
 800b9c8:	d100      	bne.n	800b9cc <mktime+0x24c>
 800b9ca:	e741      	b.n	800b850 <mktime+0xd0>
 800b9cc:	26b7      	movs	r6, #183	@ 0xb7
 800b9ce:	0076      	lsls	r6, r6, #1
 800b9d0:	2303      	movs	r3, #3
 800b9d2:	9a03      	ldr	r2, [sp, #12]
 800b9d4:	402b      	ands	r3, r5
 800b9d6:	42aa      	cmp	r2, r5
 800b9d8:	db16      	blt.n	800ba08 <mktime+0x288>
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d12e      	bne.n	800ba3c <mktime+0x2bc>
 800b9de:	2164      	movs	r1, #100	@ 0x64
 800b9e0:	0010      	movs	r0, r2
 800b9e2:	f7f4 fd1d 	bl	8000420 <__aeabi_idivmod>
 800b9e6:	2900      	cmp	r1, #0
 800b9e8:	d12a      	bne.n	800ba40 <mktime+0x2c0>
 800b9ea:	9b03      	ldr	r3, [sp, #12]
 800b9ec:	4a34      	ldr	r2, [pc, #208]	@ (800bac0 <mktime+0x340>)
 800b9ee:	3191      	adds	r1, #145	@ 0x91
 800b9f0:	1898      	adds	r0, r3, r2
 800b9f2:	31ff      	adds	r1, #255	@ 0xff
 800b9f4:	f7f4 fd14 	bl	8000420 <__aeabi_idivmod>
 800b9f8:	424b      	negs	r3, r1
 800b9fa:	4159      	adcs	r1, r3
 800b9fc:	316e      	adds	r1, #110	@ 0x6e
 800b9fe:	31ff      	adds	r1, #255	@ 0xff
 800ba00:	9b06      	ldr	r3, [sp, #24]
 800ba02:	1a5b      	subs	r3, r3, r1
 800ba04:	9306      	str	r3, [sp, #24]
 800ba06:	e723      	b.n	800b850 <mktime+0xd0>
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d115      	bne.n	800ba38 <mktime+0x2b8>
 800ba0c:	2164      	movs	r1, #100	@ 0x64
 800ba0e:	0028      	movs	r0, r5
 800ba10:	f7f4 fd06 	bl	8000420 <__aeabi_idivmod>
 800ba14:	0033      	movs	r3, r6
 800ba16:	2900      	cmp	r1, #0
 800ba18:	d109      	bne.n	800ba2e <mktime+0x2ae>
 800ba1a:	4b29      	ldr	r3, [pc, #164]	@ (800bac0 <mktime+0x340>)
 800ba1c:	3191      	adds	r1, #145	@ 0x91
 800ba1e:	18e8      	adds	r0, r5, r3
 800ba20:	31ff      	adds	r1, #255	@ 0xff
 800ba22:	f7f4 fcfd 	bl	8000420 <__aeabi_idivmod>
 800ba26:	424b      	negs	r3, r1
 800ba28:	414b      	adcs	r3, r1
 800ba2a:	336e      	adds	r3, #110	@ 0x6e
 800ba2c:	33ff      	adds	r3, #255	@ 0xff
 800ba2e:	9a06      	ldr	r2, [sp, #24]
 800ba30:	3d01      	subs	r5, #1
 800ba32:	1ad3      	subs	r3, r2, r3
 800ba34:	9306      	str	r3, [sp, #24]
 800ba36:	e7cb      	b.n	800b9d0 <mktime+0x250>
 800ba38:	236e      	movs	r3, #110	@ 0x6e
 800ba3a:	e7f7      	b.n	800ba2c <mktime+0x2ac>
 800ba3c:	216e      	movs	r1, #110	@ 0x6e
 800ba3e:	e7de      	b.n	800b9fe <mktime+0x27e>
 800ba40:	21b7      	movs	r1, #183	@ 0xb7
 800ba42:	0049      	lsls	r1, r1, #1
 800ba44:	e7dc      	b.n	800ba00 <mktime+0x280>
 800ba46:	f000 f883 	bl	800bb50 <__tzcalc_limits>
 800ba4a:	2800      	cmp	r0, #0
 800ba4c:	d000      	beq.n	800ba50 <mktime+0x2d0>
 800ba4e:	e723      	b.n	800b898 <mktime+0x118>
 800ba50:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800ba52:	2d01      	cmp	r5, #1
 800ba54:	d000      	beq.n	800ba58 <mktime+0x2d8>
 800ba56:	e070      	b.n	800bb3a <mktime+0x3ba>
 800ba58:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ba5a:	2501      	movs	r5, #1
 800ba5c:	001e      	movs	r6, r3
 800ba5e:	17df      	asrs	r7, r3, #31
 800ba60:	9a00      	ldr	r2, [sp, #0]
 800ba62:	9b01      	ldr	r3, [sp, #4]
 800ba64:	18b6      	adds	r6, r6, r2
 800ba66:	415f      	adcs	r7, r3
 800ba68:	f000 f934 	bl	800bcd4 <__tz_unlock>
 800ba6c:	9806      	ldr	r0, [sp, #24]
 800ba6e:	2107      	movs	r1, #7
 800ba70:	3004      	adds	r0, #4
 800ba72:	f7f4 fcd5 	bl	8000420 <__aeabi_idivmod>
 800ba76:	2900      	cmp	r1, #0
 800ba78:	db53      	blt.n	800bb22 <mktime+0x3a2>
 800ba7a:	6225      	str	r5, [r4, #32]
 800ba7c:	61a1      	str	r1, [r4, #24]
 800ba7e:	0030      	movs	r0, r6
 800ba80:	0039      	movs	r1, r7
 800ba82:	b00d      	add	sp, #52	@ 0x34
 800ba84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba86:	9901      	ldr	r1, [sp, #4]
 800ba88:	9805      	ldr	r0, [sp, #20]
 800ba8a:	4288      	cmp	r0, r1
 800ba8c:	dd00      	ble.n	800ba90 <mktime+0x310>
 800ba8e:	e73f      	b.n	800b910 <mktime+0x190>
 800ba90:	d104      	bne.n	800ba9c <mktime+0x31c>
 800ba92:	9900      	ldr	r1, [sp, #0]
 800ba94:	9804      	ldr	r0, [sp, #16]
 800ba96:	4288      	cmp	r0, r1
 800ba98:	d900      	bls.n	800ba9c <mktime+0x31c>
 800ba9a:	e739      	b.n	800b910 <mktime+0x190>
 800ba9c:	9b07      	ldr	r3, [sp, #28]
 800ba9e:	2501      	movs	r5, #1
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	db00      	blt.n	800baa6 <mktime+0x326>
 800baa4:	e741      	b.n	800b92a <mktime+0x1aa>
 800baa6:	e7d7      	b.n	800ba58 <mktime+0x2d8>
 800baa8:	2601      	movs	r6, #1
 800baaa:	4276      	negs	r6, r6
 800baac:	e766      	b.n	800b97c <mktime+0x1fc>
 800baae:	21b6      	movs	r1, #182	@ 0xb6
 800bab0:	0049      	lsls	r1, r1, #1
 800bab2:	61e1      	str	r1, [r4, #28]
 800bab4:	e7cd      	b.n	800ba52 <mktime+0x2d2>
 800bab6:	216e      	movs	r1, #110	@ 0x6e
 800bab8:	e77e      	b.n	800b9b8 <mktime+0x238>
 800baba:	46c0      	nop			@ (mov r8, r8)
 800babc:	0800e1fc 	.word	0x0800e1fc
 800bac0:	0000076c 	.word	0x0000076c
 800bac4:	00002710 	.word	0x00002710
 800bac8:	00004e20 	.word	0x00004e20
 800bacc:	c28f5c29 	.word	0xc28f5c29
 800bad0:	028f5c28 	.word	0x028f5c28
 800bad4:	00a3d70a 	.word	0x00a3d70a
 800bad8:	00015180 	.word	0x00015180
 800badc:	200013e0 	.word	0x200013e0
 800bae0:	0000076b 	.word	0x0000076b
 800bae4:	9a03      	ldr	r2, [sp, #12]
 800bae6:	421a      	tst	r2, r3
 800bae8:	d116      	bne.n	800bb18 <mktime+0x398>
 800baea:	2164      	movs	r1, #100	@ 0x64
 800baec:	0010      	movs	r0, r2
 800baee:	f7f4 fc97 	bl	8000420 <__aeabi_idivmod>
 800baf2:	2900      	cmp	r1, #0
 800baf4:	d112      	bne.n	800bb1c <mktime+0x39c>
 800baf6:	4b15      	ldr	r3, [pc, #84]	@ (800bb4c <mktime+0x3cc>)
 800baf8:	9803      	ldr	r0, [sp, #12]
 800bafa:	469c      	mov	ip, r3
 800bafc:	3191      	adds	r1, #145	@ 0x91
 800bafe:	4460      	add	r0, ip
 800bb00:	31ff      	adds	r1, #255	@ 0xff
 800bb02:	f7f4 fc8d 	bl	8000420 <__aeabi_idivmod>
 800bb06:	424b      	negs	r3, r1
 800bb08:	4159      	adcs	r1, r3
 800bb0a:	316e      	adds	r1, #110	@ 0x6e
 800bb0c:	31ff      	adds	r1, #255	@ 0xff
 800bb0e:	428e      	cmp	r6, r1
 800bb10:	db00      	blt.n	800bb14 <mktime+0x394>
 800bb12:	1a76      	subs	r6, r6, r1
 800bb14:	61e6      	str	r6, [r4, #28]
 800bb16:	e79c      	b.n	800ba52 <mktime+0x2d2>
 800bb18:	216e      	movs	r1, #110	@ 0x6e
 800bb1a:	e7f7      	b.n	800bb0c <mktime+0x38c>
 800bb1c:	21b7      	movs	r1, #183	@ 0xb7
 800bb1e:	0049      	lsls	r1, r1, #1
 800bb20:	e7f5      	b.n	800bb0e <mktime+0x38e>
 800bb22:	3107      	adds	r1, #7
 800bb24:	e7a9      	b.n	800ba7a <mktime+0x2fa>
 800bb26:	2601      	movs	r6, #1
 800bb28:	4276      	negs	r6, r6
 800bb2a:	17f7      	asrs	r7, r6, #31
 800bb2c:	e7a7      	b.n	800ba7e <mktime+0x2fe>
 800bb2e:	2500      	movs	r5, #0
 800bb30:	9b07      	ldr	r3, [sp, #28]
 800bb32:	42ab      	cmp	r3, r5
 800bb34:	db00      	blt.n	800bb38 <mktime+0x3b8>
 800bb36:	e6f8      	b.n	800b92a <mktime+0x1aa>
 800bb38:	2500      	movs	r5, #0
 800bb3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb3c:	001e      	movs	r6, r3
 800bb3e:	17df      	asrs	r7, r3, #31
 800bb40:	9a00      	ldr	r2, [sp, #0]
 800bb42:	9b01      	ldr	r3, [sp, #4]
 800bb44:	18b6      	adds	r6, r6, r2
 800bb46:	415f      	adcs	r7, r3
 800bb48:	e78e      	b.n	800ba68 <mktime+0x2e8>
 800bb4a:	46c0      	nop			@ (mov r8, r8)
 800bb4c:	0000076c 	.word	0x0000076c

0800bb50 <__tzcalc_limits>:
 800bb50:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb52:	b089      	sub	sp, #36	@ 0x24
 800bb54:	0007      	movs	r7, r0
 800bb56:	f001 f907 	bl	800cd68 <__gettzinfo>
 800bb5a:	4b53      	ldr	r3, [pc, #332]	@ (800bca8 <__tzcalc_limits+0x158>)
 800bb5c:	0005      	movs	r5, r0
 800bb5e:	2000      	movs	r0, #0
 800bb60:	429f      	cmp	r7, r3
 800bb62:	dd63      	ble.n	800bc2c <__tzcalc_limits+0xdc>
 800bb64:	246e      	movs	r4, #110	@ 0x6e
 800bb66:	2164      	movs	r1, #100	@ 0x64
 800bb68:	4b50      	ldr	r3, [pc, #320]	@ (800bcac <__tzcalc_limits+0x15c>)
 800bb6a:	34ff      	adds	r4, #255	@ 0xff
 800bb6c:	18fb      	adds	r3, r7, r3
 800bb6e:	435c      	muls	r4, r3
 800bb70:	4b4f      	ldr	r3, [pc, #316]	@ (800bcb0 <__tzcalc_limits+0x160>)
 800bb72:	4249      	negs	r1, r1
 800bb74:	18fb      	adds	r3, r7, r3
 800bb76:	109b      	asrs	r3, r3, #2
 800bb78:	18e4      	adds	r4, r4, r3
 800bb7a:	4b4e      	ldr	r3, [pc, #312]	@ (800bcb4 <__tzcalc_limits+0x164>)
 800bb7c:	606f      	str	r7, [r5, #4]
 800bb7e:	18f8      	adds	r0, r7, r3
 800bb80:	f7f4 fb68 	bl	8000254 <__divsi3>
 800bb84:	21c8      	movs	r1, #200	@ 0xc8
 800bb86:	4b4c      	ldr	r3, [pc, #304]	@ (800bcb8 <__tzcalc_limits+0x168>)
 800bb88:	1824      	adds	r4, r4, r0
 800bb8a:	0049      	lsls	r1, r1, #1
 800bb8c:	18f8      	adds	r0, r7, r3
 800bb8e:	f7f4 fb61 	bl	8000254 <__divsi3>
 800bb92:	1823      	adds	r3, r4, r0
 800bb94:	9301      	str	r3, [sp, #4]
 800bb96:	002b      	movs	r3, r5
 800bb98:	002e      	movs	r6, r5
 800bb9a:	3358      	adds	r3, #88	@ 0x58
 800bb9c:	3608      	adds	r6, #8
 800bb9e:	9307      	str	r3, [sp, #28]
 800bba0:	68f2      	ldr	r2, [r6, #12]
 800bba2:	7833      	ldrb	r3, [r6, #0]
 800bba4:	9200      	str	r2, [sp, #0]
 800bba6:	2b4a      	cmp	r3, #74	@ 0x4a
 800bba8:	d142      	bne.n	800bc30 <__tzcalc_limits+0xe0>
 800bbaa:	9b01      	ldr	r3, [sp, #4]
 800bbac:	189c      	adds	r4, r3, r2
 800bbae:	07bb      	lsls	r3, r7, #30
 800bbb0:	d105      	bne.n	800bbbe <__tzcalc_limits+0x6e>
 800bbb2:	2164      	movs	r1, #100	@ 0x64
 800bbb4:	0038      	movs	r0, r7
 800bbb6:	f7f4 fc33 	bl	8000420 <__aeabi_idivmod>
 800bbba:	2900      	cmp	r1, #0
 800bbbc:	d107      	bne.n	800bbce <__tzcalc_limits+0x7e>
 800bbbe:	21c8      	movs	r1, #200	@ 0xc8
 800bbc0:	0038      	movs	r0, r7
 800bbc2:	0049      	lsls	r1, r1, #1
 800bbc4:	f7f4 fc2c 	bl	8000420 <__aeabi_idivmod>
 800bbc8:	2300      	movs	r3, #0
 800bbca:	4299      	cmp	r1, r3
 800bbcc:	d104      	bne.n	800bbd8 <__tzcalc_limits+0x88>
 800bbce:	9a00      	ldr	r2, [sp, #0]
 800bbd0:	2301      	movs	r3, #1
 800bbd2:	2a3b      	cmp	r2, #59	@ 0x3b
 800bbd4:	dc00      	bgt.n	800bbd8 <__tzcalc_limits+0x88>
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	18e0      	adds	r0, r4, r3
 800bbda:	3801      	subs	r0, #1
 800bbdc:	2300      	movs	r3, #0
 800bbde:	4a37      	ldr	r2, [pc, #220]	@ (800bcbc <__tzcalc_limits+0x16c>)
 800bbe0:	17c1      	asrs	r1, r0, #31
 800bbe2:	f7f4 fc67 	bl	80004b4 <__aeabi_lmul>
 800bbe6:	6933      	ldr	r3, [r6, #16]
 800bbe8:	9302      	str	r3, [sp, #8]
 800bbea:	17db      	asrs	r3, r3, #31
 800bbec:	9303      	str	r3, [sp, #12]
 800bbee:	9b02      	ldr	r3, [sp, #8]
 800bbf0:	9c03      	ldr	r4, [sp, #12]
 800bbf2:	18c0      	adds	r0, r0, r3
 800bbf4:	4161      	adcs	r1, r4
 800bbf6:	6a33      	ldr	r3, [r6, #32]
 800bbf8:	9304      	str	r3, [sp, #16]
 800bbfa:	17db      	asrs	r3, r3, #31
 800bbfc:	9305      	str	r3, [sp, #20]
 800bbfe:	9b04      	ldr	r3, [sp, #16]
 800bc00:	9c05      	ldr	r4, [sp, #20]
 800bc02:	18c0      	adds	r0, r0, r3
 800bc04:	4161      	adcs	r1, r4
 800bc06:	9b07      	ldr	r3, [sp, #28]
 800bc08:	61b0      	str	r0, [r6, #24]
 800bc0a:	61f1      	str	r1, [r6, #28]
 800bc0c:	3628      	adds	r6, #40	@ 0x28
 800bc0e:	42b3      	cmp	r3, r6
 800bc10:	d1c6      	bne.n	800bba0 <__tzcalc_limits+0x50>
 800bc12:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800bc14:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 800bc16:	2301      	movs	r3, #1
 800bc18:	4291      	cmp	r1, r2
 800bc1a:	dc05      	bgt.n	800bc28 <__tzcalc_limits+0xd8>
 800bc1c:	d103      	bne.n	800bc26 <__tzcalc_limits+0xd6>
 800bc1e:	6ca9      	ldr	r1, [r5, #72]	@ 0x48
 800bc20:	6a2a      	ldr	r2, [r5, #32]
 800bc22:	4291      	cmp	r1, r2
 800bc24:	d800      	bhi.n	800bc28 <__tzcalc_limits+0xd8>
 800bc26:	2300      	movs	r3, #0
 800bc28:	2001      	movs	r0, #1
 800bc2a:	602b      	str	r3, [r5, #0]
 800bc2c:	b009      	add	sp, #36	@ 0x24
 800bc2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc30:	2b44      	cmp	r3, #68	@ 0x44
 800bc32:	d104      	bne.n	800bc3e <__tzcalc_limits+0xee>
 800bc34:	9b01      	ldr	r3, [sp, #4]
 800bc36:	9800      	ldr	r0, [sp, #0]
 800bc38:	469c      	mov	ip, r3
 800bc3a:	4460      	add	r0, ip
 800bc3c:	e7ce      	b.n	800bbdc <__tzcalc_limits+0x8c>
 800bc3e:	07bb      	lsls	r3, r7, #30
 800bc40:	d106      	bne.n	800bc50 <__tzcalc_limits+0x100>
 800bc42:	2164      	movs	r1, #100	@ 0x64
 800bc44:	0038      	movs	r0, r7
 800bc46:	f7f4 fbeb 	bl	8000420 <__aeabi_idivmod>
 800bc4a:	2301      	movs	r3, #1
 800bc4c:	2900      	cmp	r1, #0
 800bc4e:	d106      	bne.n	800bc5e <__tzcalc_limits+0x10e>
 800bc50:	21c8      	movs	r1, #200	@ 0xc8
 800bc52:	0038      	movs	r0, r7
 800bc54:	0049      	lsls	r1, r1, #1
 800bc56:	f7f4 fbe3 	bl	8000420 <__aeabi_idivmod>
 800bc5a:	424b      	negs	r3, r1
 800bc5c:	414b      	adcs	r3, r1
 800bc5e:	2230      	movs	r2, #48	@ 0x30
 800bc60:	425b      	negs	r3, r3
 800bc62:	4013      	ands	r3, r2
 800bc64:	2200      	movs	r2, #0
 800bc66:	4816      	ldr	r0, [pc, #88]	@ (800bcc0 <__tzcalc_limits+0x170>)
 800bc68:	6871      	ldr	r1, [r6, #4]
 800bc6a:	9c01      	ldr	r4, [sp, #4]
 800bc6c:	181b      	adds	r3, r3, r0
 800bc6e:	3201      	adds	r2, #1
 800bc70:	0090      	lsls	r0, r2, #2
 800bc72:	5818      	ldr	r0, [r3, r0]
 800bc74:	9006      	str	r0, [sp, #24]
 800bc76:	4291      	cmp	r1, r2
 800bc78:	dc11      	bgt.n	800bc9e <__tzcalc_limits+0x14e>
 800bc7a:	2107      	movs	r1, #7
 800bc7c:	1d20      	adds	r0, r4, #4
 800bc7e:	f7f4 fbcf 	bl	8000420 <__aeabi_idivmod>
 800bc82:	9b00      	ldr	r3, [sp, #0]
 800bc84:	1a59      	subs	r1, r3, r1
 800bc86:	d500      	bpl.n	800bc8a <__tzcalc_limits+0x13a>
 800bc88:	3107      	adds	r1, #7
 800bc8a:	2307      	movs	r3, #7
 800bc8c:	68b2      	ldr	r2, [r6, #8]
 800bc8e:	3a01      	subs	r2, #1
 800bc90:	4353      	muls	r3, r2
 800bc92:	185b      	adds	r3, r3, r1
 800bc94:	9a06      	ldr	r2, [sp, #24]
 800bc96:	4293      	cmp	r3, r2
 800bc98:	da04      	bge.n	800bca4 <__tzcalc_limits+0x154>
 800bc9a:	18e0      	adds	r0, r4, r3
 800bc9c:	e79e      	b.n	800bbdc <__tzcalc_limits+0x8c>
 800bc9e:	9806      	ldr	r0, [sp, #24]
 800bca0:	1824      	adds	r4, r4, r0
 800bca2:	e7e4      	b.n	800bc6e <__tzcalc_limits+0x11e>
 800bca4:	3b07      	subs	r3, #7
 800bca6:	e7f5      	b.n	800bc94 <__tzcalc_limits+0x144>
 800bca8:	000007b1 	.word	0x000007b1
 800bcac:	fffff84e 	.word	0xfffff84e
 800bcb0:	fffff84f 	.word	0xfffff84f
 800bcb4:	fffff893 	.word	0xfffff893
 800bcb8:	fffff9bf 	.word	0xfffff9bf
 800bcbc:	00015180 	.word	0x00015180
 800bcc0:	0800e258 	.word	0x0800e258

0800bcc4 <__tz_lock>:
 800bcc4:	b510      	push	{r4, lr}
 800bcc6:	4802      	ldr	r0, [pc, #8]	@ (800bcd0 <__tz_lock+0xc>)
 800bcc8:	f000 fabd 	bl	800c246 <__retarget_lock_acquire>
 800bccc:	bd10      	pop	{r4, pc}
 800bcce:	46c0      	nop			@ (mov r8, r8)
 800bcd0:	200013e8 	.word	0x200013e8

0800bcd4 <__tz_unlock>:
 800bcd4:	b510      	push	{r4, lr}
 800bcd6:	4802      	ldr	r0, [pc, #8]	@ (800bce0 <__tz_unlock+0xc>)
 800bcd8:	f000 fab7 	bl	800c24a <__retarget_lock_release>
 800bcdc:	bd10      	pop	{r4, pc}
 800bcde:	46c0      	nop			@ (mov r8, r8)
 800bce0:	200013e8 	.word	0x200013e8

0800bce4 <_tzset_unlocked>:
 800bce4:	b510      	push	{r4, lr}
 800bce6:	4b02      	ldr	r3, [pc, #8]	@ (800bcf0 <_tzset_unlocked+0xc>)
 800bce8:	6818      	ldr	r0, [r3, #0]
 800bcea:	f000 f803 	bl	800bcf4 <_tzset_unlocked_r>
 800bcee:	bd10      	pop	{r4, pc}
 800bcf0:	20000058 	.word	0x20000058

0800bcf4 <_tzset_unlocked_r>:
 800bcf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bcf6:	b08f      	sub	sp, #60	@ 0x3c
 800bcf8:	0006      	movs	r6, r0
 800bcfa:	f001 f835 	bl	800cd68 <__gettzinfo>
 800bcfe:	49cc      	ldr	r1, [pc, #816]	@ (800c030 <_tzset_unlocked_r+0x33c>)
 800bd00:	0007      	movs	r7, r0
 800bd02:	0030      	movs	r0, r6
 800bd04:	f000 fb40 	bl	800c388 <_getenv_r>
 800bd08:	4cca      	ldr	r4, [pc, #808]	@ (800c034 <_tzset_unlocked_r+0x340>)
 800bd0a:	1e05      	subs	r5, r0, #0
 800bd0c:	d122      	bne.n	800bd54 <_tzset_unlocked_r+0x60>
 800bd0e:	4bca      	ldr	r3, [pc, #808]	@ (800c038 <_tzset_unlocked_r+0x344>)
 800bd10:	4aca      	ldr	r2, [pc, #808]	@ (800c03c <_tzset_unlocked_r+0x348>)
 800bd12:	6018      	str	r0, [r3, #0]
 800bd14:	4bca      	ldr	r3, [pc, #808]	@ (800c040 <_tzset_unlocked_r+0x34c>)
 800bd16:	60f8      	str	r0, [r7, #12]
 800bd18:	6018      	str	r0, [r3, #0]
 800bd1a:	4bca      	ldr	r3, [pc, #808]	@ (800c044 <_tzset_unlocked_r+0x350>)
 800bd1c:	6138      	str	r0, [r7, #16]
 800bd1e:	6178      	str	r0, [r7, #20]
 800bd20:	61b8      	str	r0, [r7, #24]
 800bd22:	62b8      	str	r0, [r7, #40]	@ 0x28
 800bd24:	0038      	movs	r0, r7
 800bd26:	214a      	movs	r1, #74	@ 0x4a
 800bd28:	601a      	str	r2, [r3, #0]
 800bd2a:	605a      	str	r2, [r3, #4]
 800bd2c:	2200      	movs	r2, #0
 800bd2e:	2300      	movs	r3, #0
 800bd30:	3030      	adds	r0, #48	@ 0x30
 800bd32:	623a      	str	r2, [r7, #32]
 800bd34:	627b      	str	r3, [r7, #36]	@ 0x24
 800bd36:	7239      	strb	r1, [r7, #8]
 800bd38:	7001      	strb	r1, [r0, #0]
 800bd3a:	64ba      	str	r2, [r7, #72]	@ 0x48
 800bd3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bd3e:	6820      	ldr	r0, [r4, #0]
 800bd40:	637d      	str	r5, [r7, #52]	@ 0x34
 800bd42:	63bd      	str	r5, [r7, #56]	@ 0x38
 800bd44:	63fd      	str	r5, [r7, #60]	@ 0x3c
 800bd46:	643d      	str	r5, [r7, #64]	@ 0x40
 800bd48:	653d      	str	r5, [r7, #80]	@ 0x50
 800bd4a:	f7ff f83f 	bl	800adcc <free>
 800bd4e:	6025      	str	r5, [r4, #0]
 800bd50:	b00f      	add	sp, #60	@ 0x3c
 800bd52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd54:	6821      	ldr	r1, [r4, #0]
 800bd56:	2900      	cmp	r1, #0
 800bd58:	d000      	beq.n	800bd5c <_tzset_unlocked_r+0x68>
 800bd5a:	e089      	b.n	800be70 <_tzset_unlocked_r+0x17c>
 800bd5c:	6820      	ldr	r0, [r4, #0]
 800bd5e:	f7ff f835 	bl	800adcc <free>
 800bd62:	0028      	movs	r0, r5
 800bd64:	f7f4 f9da 	bl	800011c <strlen>
 800bd68:	1c41      	adds	r1, r0, #1
 800bd6a:	0030      	movs	r0, r6
 800bd6c:	f7ff f85a 	bl	800ae24 <_malloc_r>
 800bd70:	6020      	str	r0, [r4, #0]
 800bd72:	2800      	cmp	r0, #0
 800bd74:	d000      	beq.n	800bd78 <_tzset_unlocked_r+0x84>
 800bd76:	e081      	b.n	800be7c <_tzset_unlocked_r+0x188>
 800bd78:	2300      	movs	r3, #0
 800bd7a:	4aaf      	ldr	r2, [pc, #700]	@ (800c038 <_tzset_unlocked_r+0x344>)
 800bd7c:	49b2      	ldr	r1, [pc, #712]	@ (800c048 <_tzset_unlocked_r+0x354>)
 800bd7e:	6013      	str	r3, [r2, #0]
 800bd80:	4aaf      	ldr	r2, [pc, #700]	@ (800c040 <_tzset_unlocked_r+0x34c>)
 800bd82:	003c      	movs	r4, r7
 800bd84:	6013      	str	r3, [r2, #0]
 800bd86:	4aaf      	ldr	r2, [pc, #700]	@ (800c044 <_tzset_unlocked_r+0x350>)
 800bd88:	2000      	movs	r0, #0
 800bd8a:	6011      	str	r1, [r2, #0]
 800bd8c:	6051      	str	r1, [r2, #4]
 800bd8e:	224a      	movs	r2, #74	@ 0x4a
 800bd90:	2100      	movs	r1, #0
 800bd92:	3430      	adds	r4, #48	@ 0x30
 800bd94:	723a      	strb	r2, [r7, #8]
 800bd96:	6238      	str	r0, [r7, #32]
 800bd98:	6279      	str	r1, [r7, #36]	@ 0x24
 800bd9a:	60fb      	str	r3, [r7, #12]
 800bd9c:	613b      	str	r3, [r7, #16]
 800bd9e:	617b      	str	r3, [r7, #20]
 800bda0:	61bb      	str	r3, [r7, #24]
 800bda2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bda4:	7022      	strb	r2, [r4, #0]
 800bda6:	64b8      	str	r0, [r7, #72]	@ 0x48
 800bda8:	64f9      	str	r1, [r7, #76]	@ 0x4c
 800bdaa:	637b      	str	r3, [r7, #52]	@ 0x34
 800bdac:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bdae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bdb0:	643b      	str	r3, [r7, #64]	@ 0x40
 800bdb2:	653b      	str	r3, [r7, #80]	@ 0x50
 800bdb4:	782b      	ldrb	r3, [r5, #0]
 800bdb6:	3b3a      	subs	r3, #58	@ 0x3a
 800bdb8:	425a      	negs	r2, r3
 800bdba:	4153      	adcs	r3, r2
 800bdbc:	18ed      	adds	r5, r5, r3
 800bdbe:	782b      	ldrb	r3, [r5, #0]
 800bdc0:	4aa2      	ldr	r2, [pc, #648]	@ (800c04c <_tzset_unlocked_r+0x358>)
 800bdc2:	2b3c      	cmp	r3, #60	@ 0x3c
 800bdc4:	d15e      	bne.n	800be84 <_tzset_unlocked_r+0x190>
 800bdc6:	1c6c      	adds	r4, r5, #1
 800bdc8:	0020      	movs	r0, r4
 800bdca:	49a1      	ldr	r1, [pc, #644]	@ (800c050 <_tzset_unlocked_r+0x35c>)
 800bdcc:	ab0c      	add	r3, sp, #48	@ 0x30
 800bdce:	f000 ff8f 	bl	800ccf0 <siscanf>
 800bdd2:	2800      	cmp	r0, #0
 800bdd4:	ddbc      	ble.n	800bd50 <_tzset_unlocked_r+0x5c>
 800bdd6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bdd8:	1eda      	subs	r2, r3, #3
 800bdda:	2a07      	cmp	r2, #7
 800bddc:	d8b8      	bhi.n	800bd50 <_tzset_unlocked_r+0x5c>
 800bdde:	5ce3      	ldrb	r3, [r4, r3]
 800bde0:	3502      	adds	r5, #2
 800bde2:	2b3e      	cmp	r3, #62	@ 0x3e
 800bde4:	d1b4      	bne.n	800bd50 <_tzset_unlocked_r+0x5c>
 800bde6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bde8:	18ec      	adds	r4, r5, r3
 800bdea:	5ceb      	ldrb	r3, [r5, r3]
 800bdec:	2b2d      	cmp	r3, #45	@ 0x2d
 800bdee:	d156      	bne.n	800be9e <_tzset_unlocked_r+0x1aa>
 800bdf0:	3b2e      	subs	r3, #46	@ 0x2e
 800bdf2:	3401      	adds	r4, #1
 800bdf4:	9304      	str	r3, [sp, #16]
 800bdf6:	2516      	movs	r5, #22
 800bdf8:	ab04      	add	r3, sp, #16
 800bdfa:	18ed      	adds	r5, r5, r3
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	ae0a      	add	r6, sp, #40	@ 0x28
 800be00:	802b      	strh	r3, [r5, #0]
 800be02:	8033      	strh	r3, [r6, #0]
 800be04:	ab0c      	add	r3, sp, #48	@ 0x30
 800be06:	0020      	movs	r0, r4
 800be08:	4992      	ldr	r1, [pc, #584]	@ (800c054 <_tzset_unlocked_r+0x360>)
 800be0a:	9303      	str	r3, [sp, #12]
 800be0c:	9602      	str	r6, [sp, #8]
 800be0e:	9301      	str	r3, [sp, #4]
 800be10:	9500      	str	r5, [sp, #0]
 800be12:	aa09      	add	r2, sp, #36	@ 0x24
 800be14:	f000 ff6c 	bl	800ccf0 <siscanf>
 800be18:	2800      	cmp	r0, #0
 800be1a:	dd99      	ble.n	800bd50 <_tzset_unlocked_r+0x5c>
 800be1c:	233c      	movs	r3, #60	@ 0x3c
 800be1e:	882a      	ldrh	r2, [r5, #0]
 800be20:	4353      	muls	r3, r2
 800be22:	8832      	ldrh	r2, [r6, #0]
 800be24:	189b      	adds	r3, r3, r2
 800be26:	aa04      	add	r2, sp, #16
 800be28:	8a91      	ldrh	r1, [r2, #20]
 800be2a:	22e1      	movs	r2, #225	@ 0xe1
 800be2c:	0112      	lsls	r2, r2, #4
 800be2e:	434a      	muls	r2, r1
 800be30:	189b      	adds	r3, r3, r2
 800be32:	9a04      	ldr	r2, [sp, #16]
 800be34:	435a      	muls	r2, r3
 800be36:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800be38:	9204      	str	r2, [sp, #16]
 800be3a:	18e6      	adds	r6, r4, r3
 800be3c:	5ce3      	ldrb	r3, [r4, r3]
 800be3e:	4a86      	ldr	r2, [pc, #536]	@ (800c058 <_tzset_unlocked_r+0x364>)
 800be40:	2b3c      	cmp	r3, #60	@ 0x3c
 800be42:	d000      	beq.n	800be46 <_tzset_unlocked_r+0x152>
 800be44:	e0cd      	b.n	800bfe2 <_tzset_unlocked_r+0x2ee>
 800be46:	1c74      	adds	r4, r6, #1
 800be48:	0020      	movs	r0, r4
 800be4a:	4981      	ldr	r1, [pc, #516]	@ (800c050 <_tzset_unlocked_r+0x35c>)
 800be4c:	ab0c      	add	r3, sp, #48	@ 0x30
 800be4e:	f000 ff4f 	bl	800ccf0 <siscanf>
 800be52:	2800      	cmp	r0, #0
 800be54:	dc2a      	bgt.n	800beac <_tzset_unlocked_r+0x1b8>
 800be56:	7873      	ldrb	r3, [r6, #1]
 800be58:	2b3e      	cmp	r3, #62	@ 0x3e
 800be5a:	d127      	bne.n	800beac <_tzset_unlocked_r+0x1b8>
 800be5c:	4b79      	ldr	r3, [pc, #484]	@ (800c044 <_tzset_unlocked_r+0x350>)
 800be5e:	4a7b      	ldr	r2, [pc, #492]	@ (800c04c <_tzset_unlocked_r+0x358>)
 800be60:	601a      	str	r2, [r3, #0]
 800be62:	605a      	str	r2, [r3, #4]
 800be64:	9b04      	ldr	r3, [sp, #16]
 800be66:	9a04      	ldr	r2, [sp, #16]
 800be68:	62bb      	str	r3, [r7, #40]	@ 0x28
 800be6a:	4b73      	ldr	r3, [pc, #460]	@ (800c038 <_tzset_unlocked_r+0x344>)
 800be6c:	601a      	str	r2, [r3, #0]
 800be6e:	e76f      	b.n	800bd50 <_tzset_unlocked_r+0x5c>
 800be70:	f7f4 f94a 	bl	8000108 <strcmp>
 800be74:	2800      	cmp	r0, #0
 800be76:	d000      	beq.n	800be7a <_tzset_unlocked_r+0x186>
 800be78:	e770      	b.n	800bd5c <_tzset_unlocked_r+0x68>
 800be7a:	e769      	b.n	800bd50 <_tzset_unlocked_r+0x5c>
 800be7c:	0029      	movs	r1, r5
 800be7e:	f000 f9e6 	bl	800c24e <strcpy>
 800be82:	e779      	b.n	800bd78 <_tzset_unlocked_r+0x84>
 800be84:	0028      	movs	r0, r5
 800be86:	4975      	ldr	r1, [pc, #468]	@ (800c05c <_tzset_unlocked_r+0x368>)
 800be88:	ab0c      	add	r3, sp, #48	@ 0x30
 800be8a:	f000 ff31 	bl	800ccf0 <siscanf>
 800be8e:	2800      	cmp	r0, #0
 800be90:	dc00      	bgt.n	800be94 <_tzset_unlocked_r+0x1a0>
 800be92:	e75d      	b.n	800bd50 <_tzset_unlocked_r+0x5c>
 800be94:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800be96:	3b03      	subs	r3, #3
 800be98:	2b07      	cmp	r3, #7
 800be9a:	d9a4      	bls.n	800bde6 <_tzset_unlocked_r+0xf2>
 800be9c:	e758      	b.n	800bd50 <_tzset_unlocked_r+0x5c>
 800be9e:	2201      	movs	r2, #1
 800bea0:	3b2b      	subs	r3, #43	@ 0x2b
 800bea2:	9204      	str	r2, [sp, #16]
 800bea4:	425a      	negs	r2, r3
 800bea6:	4153      	adcs	r3, r2
 800bea8:	18e4      	adds	r4, r4, r3
 800beaa:	e7a4      	b.n	800bdf6 <_tzset_unlocked_r+0x102>
 800beac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800beae:	1eda      	subs	r2, r3, #3
 800beb0:	2a07      	cmp	r2, #7
 800beb2:	d900      	bls.n	800beb6 <_tzset_unlocked_r+0x1c2>
 800beb4:	e74c      	b.n	800bd50 <_tzset_unlocked_r+0x5c>
 800beb6:	5ce3      	ldrb	r3, [r4, r3]
 800beb8:	3602      	adds	r6, #2
 800beba:	2b3e      	cmp	r3, #62	@ 0x3e
 800bebc:	d000      	beq.n	800bec0 <_tzset_unlocked_r+0x1cc>
 800bebe:	e747      	b.n	800bd50 <_tzset_unlocked_r+0x5c>
 800bec0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bec2:	18f4      	adds	r4, r6, r3
 800bec4:	5cf3      	ldrb	r3, [r6, r3]
 800bec6:	2b2d      	cmp	r3, #45	@ 0x2d
 800bec8:	d000      	beq.n	800becc <_tzset_unlocked_r+0x1d8>
 800beca:	e098      	b.n	800bffe <_tzset_unlocked_r+0x30a>
 800becc:	3b2e      	subs	r3, #46	@ 0x2e
 800bece:	3401      	adds	r4, #1
 800bed0:	9305      	str	r3, [sp, #20]
 800bed2:	2300      	movs	r3, #0
 800bed4:	aa04      	add	r2, sp, #16
 800bed6:	ae0a      	add	r6, sp, #40	@ 0x28
 800bed8:	8293      	strh	r3, [r2, #20]
 800beda:	802b      	strh	r3, [r5, #0]
 800bedc:	8033      	strh	r3, [r6, #0]
 800bede:	930c      	str	r3, [sp, #48]	@ 0x30
 800bee0:	ab0c      	add	r3, sp, #48	@ 0x30
 800bee2:	0020      	movs	r0, r4
 800bee4:	495b      	ldr	r1, [pc, #364]	@ (800c054 <_tzset_unlocked_r+0x360>)
 800bee6:	9303      	str	r3, [sp, #12]
 800bee8:	9602      	str	r6, [sp, #8]
 800beea:	9301      	str	r3, [sp, #4]
 800beec:	9500      	str	r5, [sp, #0]
 800beee:	aa09      	add	r2, sp, #36	@ 0x24
 800bef0:	f000 fefe 	bl	800ccf0 <siscanf>
 800bef4:	2800      	cmp	r0, #0
 800bef6:	dd00      	ble.n	800befa <_tzset_unlocked_r+0x206>
 800bef8:	e088      	b.n	800c00c <_tzset_unlocked_r+0x318>
 800befa:	4a59      	ldr	r2, [pc, #356]	@ (800c060 <_tzset_unlocked_r+0x36c>)
 800befc:	9b04      	ldr	r3, [sp, #16]
 800befe:	4694      	mov	ip, r2
 800bf00:	4463      	add	r3, ip
 800bf02:	9307      	str	r3, [sp, #28]
 800bf04:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bf06:	003d      	movs	r5, r7
 800bf08:	18e4      	adds	r4, r4, r3
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	3508      	adds	r5, #8
 800bf0e:	9305      	str	r3, [sp, #20]
 800bf10:	7823      	ldrb	r3, [r4, #0]
 800bf12:	3b2c      	subs	r3, #44	@ 0x2c
 800bf14:	425a      	negs	r2, r3
 800bf16:	4153      	adcs	r3, r2
 800bf18:	18e4      	adds	r4, r4, r3
 800bf1a:	7826      	ldrb	r6, [r4, #0]
 800bf1c:	2e4d      	cmp	r6, #77	@ 0x4d
 800bf1e:	d000      	beq.n	800bf22 <_tzset_unlocked_r+0x22e>
 800bf20:	e0a4      	b.n	800c06c <_tzset_unlocked_r+0x378>
 800bf22:	ab0c      	add	r3, sp, #48	@ 0x30
 800bf24:	9303      	str	r3, [sp, #12]
 800bf26:	231e      	movs	r3, #30
 800bf28:	aa04      	add	r2, sp, #16
 800bf2a:	189b      	adds	r3, r3, r2
 800bf2c:	221a      	movs	r2, #26
 800bf2e:	9302      	str	r3, [sp, #8]
 800bf30:	ab0c      	add	r3, sp, #48	@ 0x30
 800bf32:	a804      	add	r0, sp, #16
 800bf34:	9301      	str	r3, [sp, #4]
 800bf36:	ab0b      	add	r3, sp, #44	@ 0x2c
 800bf38:	9300      	str	r3, [sp, #0]
 800bf3a:	1812      	adds	r2, r2, r0
 800bf3c:	4949      	ldr	r1, [pc, #292]	@ (800c064 <_tzset_unlocked_r+0x370>)
 800bf3e:	0020      	movs	r0, r4
 800bf40:	ab0c      	add	r3, sp, #48	@ 0x30
 800bf42:	f000 fed5 	bl	800ccf0 <siscanf>
 800bf46:	2803      	cmp	r0, #3
 800bf48:	d000      	beq.n	800bf4c <_tzset_unlocked_r+0x258>
 800bf4a:	e701      	b.n	800bd50 <_tzset_unlocked_r+0x5c>
 800bf4c:	ab04      	add	r3, sp, #16
 800bf4e:	8b59      	ldrh	r1, [r3, #26]
 800bf50:	1e4b      	subs	r3, r1, #1
 800bf52:	2b0b      	cmp	r3, #11
 800bf54:	d900      	bls.n	800bf58 <_tzset_unlocked_r+0x264>
 800bf56:	e6fb      	b.n	800bd50 <_tzset_unlocked_r+0x5c>
 800bf58:	ab04      	add	r3, sp, #16
 800bf5a:	8b9a      	ldrh	r2, [r3, #28]
 800bf5c:	1e53      	subs	r3, r2, #1
 800bf5e:	2b04      	cmp	r3, #4
 800bf60:	d900      	bls.n	800bf64 <_tzset_unlocked_r+0x270>
 800bf62:	e6f5      	b.n	800bd50 <_tzset_unlocked_r+0x5c>
 800bf64:	ab04      	add	r3, sp, #16
 800bf66:	8bdb      	ldrh	r3, [r3, #30]
 800bf68:	2b06      	cmp	r3, #6
 800bf6a:	d900      	bls.n	800bf6e <_tzset_unlocked_r+0x27a>
 800bf6c:	e6f0      	b.n	800bd50 <_tzset_unlocked_r+0x5c>
 800bf6e:	702e      	strb	r6, [r5, #0]
 800bf70:	6069      	str	r1, [r5, #4]
 800bf72:	60aa      	str	r2, [r5, #8]
 800bf74:	60eb      	str	r3, [r5, #12]
 800bf76:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bf78:	19a6      	adds	r6, r4, r6
 800bf7a:	2302      	movs	r3, #2
 800bf7c:	2400      	movs	r4, #0
 800bf7e:	aa09      	add	r2, sp, #36	@ 0x24
 800bf80:	8013      	strh	r3, [r2, #0]
 800bf82:	a904      	add	r1, sp, #16
 800bf84:	3314      	adds	r3, #20
 800bf86:	185b      	adds	r3, r3, r1
 800bf88:	a80a      	add	r0, sp, #40	@ 0x28
 800bf8a:	801c      	strh	r4, [r3, #0]
 800bf8c:	8004      	strh	r4, [r0, #0]
 800bf8e:	940c      	str	r4, [sp, #48]	@ 0x30
 800bf90:	7831      	ldrb	r1, [r6, #0]
 800bf92:	292f      	cmp	r1, #47	@ 0x2f
 800bf94:	d000      	beq.n	800bf98 <_tzset_unlocked_r+0x2a4>
 800bf96:	e095      	b.n	800c0c4 <_tzset_unlocked_r+0x3d0>
 800bf98:	4933      	ldr	r1, [pc, #204]	@ (800c068 <_tzset_unlocked_r+0x374>)
 800bf9a:	9002      	str	r0, [sp, #8]
 800bf9c:	9106      	str	r1, [sp, #24]
 800bf9e:	a90c      	add	r1, sp, #48	@ 0x30
 800bfa0:	9103      	str	r1, [sp, #12]
 800bfa2:	9101      	str	r1, [sp, #4]
 800bfa4:	9300      	str	r3, [sp, #0]
 800bfa6:	0030      	movs	r0, r6
 800bfa8:	000b      	movs	r3, r1
 800bfaa:	9906      	ldr	r1, [sp, #24]
 800bfac:	f000 fea0 	bl	800ccf0 <siscanf>
 800bfb0:	42a0      	cmp	r0, r4
 800bfb2:	dd00      	ble.n	800bfb6 <_tzset_unlocked_r+0x2c2>
 800bfb4:	e086      	b.n	800c0c4 <_tzset_unlocked_r+0x3d0>
 800bfb6:	0038      	movs	r0, r7
 800bfb8:	214a      	movs	r1, #74	@ 0x4a
 800bfba:	2200      	movs	r2, #0
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	3030      	adds	r0, #48	@ 0x30
 800bfc0:	623a      	str	r2, [r7, #32]
 800bfc2:	627b      	str	r3, [r7, #36]	@ 0x24
 800bfc4:	7239      	strb	r1, [r7, #8]
 800bfc6:	60fc      	str	r4, [r7, #12]
 800bfc8:	613c      	str	r4, [r7, #16]
 800bfca:	617c      	str	r4, [r7, #20]
 800bfcc:	61bc      	str	r4, [r7, #24]
 800bfce:	62bc      	str	r4, [r7, #40]	@ 0x28
 800bfd0:	7001      	strb	r1, [r0, #0]
 800bfd2:	64ba      	str	r2, [r7, #72]	@ 0x48
 800bfd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bfd6:	637c      	str	r4, [r7, #52]	@ 0x34
 800bfd8:	63bc      	str	r4, [r7, #56]	@ 0x38
 800bfda:	63fc      	str	r4, [r7, #60]	@ 0x3c
 800bfdc:	643c      	str	r4, [r7, #64]	@ 0x40
 800bfde:	653c      	str	r4, [r7, #80]	@ 0x50
 800bfe0:	e6b6      	b.n	800bd50 <_tzset_unlocked_r+0x5c>
 800bfe2:	0030      	movs	r0, r6
 800bfe4:	491d      	ldr	r1, [pc, #116]	@ (800c05c <_tzset_unlocked_r+0x368>)
 800bfe6:	ab0c      	add	r3, sp, #48	@ 0x30
 800bfe8:	f000 fe82 	bl	800ccf0 <siscanf>
 800bfec:	2800      	cmp	r0, #0
 800bfee:	dc00      	bgt.n	800bff2 <_tzset_unlocked_r+0x2fe>
 800bff0:	e734      	b.n	800be5c <_tzset_unlocked_r+0x168>
 800bff2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bff4:	3b03      	subs	r3, #3
 800bff6:	2b07      	cmp	r3, #7
 800bff8:	d800      	bhi.n	800bffc <_tzset_unlocked_r+0x308>
 800bffa:	e761      	b.n	800bec0 <_tzset_unlocked_r+0x1cc>
 800bffc:	e6a8      	b.n	800bd50 <_tzset_unlocked_r+0x5c>
 800bffe:	2201      	movs	r2, #1
 800c000:	3b2b      	subs	r3, #43	@ 0x2b
 800c002:	9205      	str	r2, [sp, #20]
 800c004:	425a      	negs	r2, r3
 800c006:	4153      	adcs	r3, r2
 800c008:	18e4      	adds	r4, r4, r3
 800c00a:	e762      	b.n	800bed2 <_tzset_unlocked_r+0x1de>
 800c00c:	233c      	movs	r3, #60	@ 0x3c
 800c00e:	882a      	ldrh	r2, [r5, #0]
 800c010:	4353      	muls	r3, r2
 800c012:	8832      	ldrh	r2, [r6, #0]
 800c014:	189b      	adds	r3, r3, r2
 800c016:	aa04      	add	r2, sp, #16
 800c018:	8a91      	ldrh	r1, [r2, #20]
 800c01a:	22e1      	movs	r2, #225	@ 0xe1
 800c01c:	0112      	lsls	r2, r2, #4
 800c01e:	434a      	muls	r2, r1
 800c020:	189b      	adds	r3, r3, r2
 800c022:	9a05      	ldr	r2, [sp, #20]
 800c024:	435a      	muls	r2, r3
 800c026:	9207      	str	r2, [sp, #28]
 800c028:	e76c      	b.n	800bf04 <_tzset_unlocked_r+0x210>
 800c02a:	2301      	movs	r3, #1
 800c02c:	e76f      	b.n	800bf0e <_tzset_unlocked_r+0x21a>
 800c02e:	46c0      	nop			@ (mov r8, r8)
 800c030:	0800e2bc 	.word	0x0800e2bc
 800c034:	200013c0 	.word	0x200013c0
 800c038:	200013dc 	.word	0x200013dc
 800c03c:	0800e2bf 	.word	0x0800e2bf
 800c040:	200013e0 	.word	0x200013e0
 800c044:	20000050 	.word	0x20000050
 800c048:	0800e30f 	.word	0x0800e30f
 800c04c:	200013d0 	.word	0x200013d0
 800c050:	0800e2c3 	.word	0x0800e2c3
 800c054:	0800e2f8 	.word	0x0800e2f8
 800c058:	200013c4 	.word	0x200013c4
 800c05c:	0800e2d6 	.word	0x0800e2d6
 800c060:	fffff1f0 	.word	0xfffff1f0
 800c064:	0800e2e4 	.word	0x0800e2e4
 800c068:	0800e2f7 	.word	0x0800e2f7
 800c06c:	2344      	movs	r3, #68	@ 0x44
 800c06e:	9306      	str	r3, [sp, #24]
 800c070:	2e4a      	cmp	r6, #74	@ 0x4a
 800c072:	d101      	bne.n	800c078 <_tzset_unlocked_r+0x384>
 800c074:	3401      	adds	r4, #1
 800c076:	9606      	str	r6, [sp, #24]
 800c078:	220a      	movs	r2, #10
 800c07a:	0020      	movs	r0, r4
 800c07c:	a90d      	add	r1, sp, #52	@ 0x34
 800c07e:	f000 fa17 	bl	800c4b0 <strtoul>
 800c082:	231e      	movs	r3, #30
 800c084:	aa04      	add	r2, sp, #16
 800c086:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 800c088:	189b      	adds	r3, r3, r2
 800c08a:	8018      	strh	r0, [r3, #0]
 800c08c:	42a6      	cmp	r6, r4
 800c08e:	d114      	bne.n	800c0ba <_tzset_unlocked_r+0x3c6>
 800c090:	9a05      	ldr	r2, [sp, #20]
 800c092:	234d      	movs	r3, #77	@ 0x4d
 800c094:	2a00      	cmp	r2, #0
 800c096:	d106      	bne.n	800c0a6 <_tzset_unlocked_r+0x3b2>
 800c098:	723b      	strb	r3, [r7, #8]
 800c09a:	3b4a      	subs	r3, #74	@ 0x4a
 800c09c:	60fb      	str	r3, [r7, #12]
 800c09e:	3b01      	subs	r3, #1
 800c0a0:	613b      	str	r3, [r7, #16]
 800c0a2:	617a      	str	r2, [r7, #20]
 800c0a4:	e769      	b.n	800bf7a <_tzset_unlocked_r+0x286>
 800c0a6:	003a      	movs	r2, r7
 800c0a8:	3230      	adds	r2, #48	@ 0x30
 800c0aa:	7013      	strb	r3, [r2, #0]
 800c0ac:	230b      	movs	r3, #11
 800c0ae:	637b      	str	r3, [r7, #52]	@ 0x34
 800c0b0:	3b0a      	subs	r3, #10
 800c0b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c0b8:	e75f      	b.n	800bf7a <_tzset_unlocked_r+0x286>
 800c0ba:	9b06      	ldr	r3, [sp, #24]
 800c0bc:	b280      	uxth	r0, r0
 800c0be:	702b      	strb	r3, [r5, #0]
 800c0c0:	60e8      	str	r0, [r5, #12]
 800c0c2:	e75a      	b.n	800bf7a <_tzset_unlocked_r+0x286>
 800c0c4:	2316      	movs	r3, #22
 800c0c6:	aa04      	add	r2, sp, #16
 800c0c8:	189b      	adds	r3, r3, r2
 800c0ca:	881a      	ldrh	r2, [r3, #0]
 800c0cc:	233c      	movs	r3, #60	@ 0x3c
 800c0ce:	4353      	muls	r3, r2
 800c0d0:	aa0a      	add	r2, sp, #40	@ 0x28
 800c0d2:	8812      	ldrh	r2, [r2, #0]
 800c0d4:	189b      	adds	r3, r3, r2
 800c0d6:	aa09      	add	r2, sp, #36	@ 0x24
 800c0d8:	8811      	ldrh	r1, [r2, #0]
 800c0da:	22e1      	movs	r2, #225	@ 0xe1
 800c0dc:	0112      	lsls	r2, r2, #4
 800c0de:	434a      	muls	r2, r1
 800c0e0:	189b      	adds	r3, r3, r2
 800c0e2:	612b      	str	r3, [r5, #16]
 800c0e4:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800c0e6:	9b05      	ldr	r3, [sp, #20]
 800c0e8:	1934      	adds	r4, r6, r4
 800c0ea:	3528      	adds	r5, #40	@ 0x28
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d09c      	beq.n	800c02a <_tzset_unlocked_r+0x336>
 800c0f0:	9b04      	ldr	r3, [sp, #16]
 800c0f2:	4a0a      	ldr	r2, [pc, #40]	@ (800c11c <_tzset_unlocked_r+0x428>)
 800c0f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c0f6:	9b07      	ldr	r3, [sp, #28]
 800c0f8:	6878      	ldr	r0, [r7, #4]
 800c0fa:	653b      	str	r3, [r7, #80]	@ 0x50
 800c0fc:	4b08      	ldr	r3, [pc, #32]	@ (800c120 <_tzset_unlocked_r+0x42c>)
 800c0fe:	601a      	str	r2, [r3, #0]
 800c100:	4a08      	ldr	r2, [pc, #32]	@ (800c124 <_tzset_unlocked_r+0x430>)
 800c102:	605a      	str	r2, [r3, #4]
 800c104:	f7ff fd24 	bl	800bb50 <__tzcalc_limits>
 800c108:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c10a:	4b07      	ldr	r3, [pc, #28]	@ (800c128 <_tzset_unlocked_r+0x434>)
 800c10c:	4907      	ldr	r1, [pc, #28]	@ (800c12c <_tzset_unlocked_r+0x438>)
 800c10e:	601a      	str	r2, [r3, #0]
 800c110:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c112:	1a9b      	subs	r3, r3, r2
 800c114:	1e5a      	subs	r2, r3, #1
 800c116:	4193      	sbcs	r3, r2
 800c118:	600b      	str	r3, [r1, #0]
 800c11a:	e619      	b.n	800bd50 <_tzset_unlocked_r+0x5c>
 800c11c:	200013d0 	.word	0x200013d0
 800c120:	20000050 	.word	0x20000050
 800c124:	200013c4 	.word	0x200013c4
 800c128:	200013dc 	.word	0x200013dc
 800c12c:	200013e0 	.word	0x200013e0

0800c130 <_close_r>:
 800c130:	2300      	movs	r3, #0
 800c132:	b570      	push	{r4, r5, r6, lr}
 800c134:	4d06      	ldr	r5, [pc, #24]	@ (800c150 <_close_r+0x20>)
 800c136:	0004      	movs	r4, r0
 800c138:	0008      	movs	r0, r1
 800c13a:	602b      	str	r3, [r5, #0]
 800c13c:	f7f6 fbdb 	bl	80028f6 <_close>
 800c140:	1c43      	adds	r3, r0, #1
 800c142:	d103      	bne.n	800c14c <_close_r+0x1c>
 800c144:	682b      	ldr	r3, [r5, #0]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d000      	beq.n	800c14c <_close_r+0x1c>
 800c14a:	6023      	str	r3, [r4, #0]
 800c14c:	bd70      	pop	{r4, r5, r6, pc}
 800c14e:	46c0      	nop			@ (mov r8, r8)
 800c150:	200013e4 	.word	0x200013e4

0800c154 <_lseek_r>:
 800c154:	b570      	push	{r4, r5, r6, lr}
 800c156:	0004      	movs	r4, r0
 800c158:	0008      	movs	r0, r1
 800c15a:	0011      	movs	r1, r2
 800c15c:	001a      	movs	r2, r3
 800c15e:	2300      	movs	r3, #0
 800c160:	4d05      	ldr	r5, [pc, #20]	@ (800c178 <_lseek_r+0x24>)
 800c162:	602b      	str	r3, [r5, #0]
 800c164:	f7f6 fbe8 	bl	8002938 <_lseek>
 800c168:	1c43      	adds	r3, r0, #1
 800c16a:	d103      	bne.n	800c174 <_lseek_r+0x20>
 800c16c:	682b      	ldr	r3, [r5, #0]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d000      	beq.n	800c174 <_lseek_r+0x20>
 800c172:	6023      	str	r3, [r4, #0]
 800c174:	bd70      	pop	{r4, r5, r6, pc}
 800c176:	46c0      	nop			@ (mov r8, r8)
 800c178:	200013e4 	.word	0x200013e4

0800c17c <_read_r>:
 800c17c:	b570      	push	{r4, r5, r6, lr}
 800c17e:	0004      	movs	r4, r0
 800c180:	0008      	movs	r0, r1
 800c182:	0011      	movs	r1, r2
 800c184:	001a      	movs	r2, r3
 800c186:	2300      	movs	r3, #0
 800c188:	4d05      	ldr	r5, [pc, #20]	@ (800c1a0 <_read_r+0x24>)
 800c18a:	602b      	str	r3, [r5, #0]
 800c18c:	f7f6 fb7a 	bl	8002884 <_read>
 800c190:	1c43      	adds	r3, r0, #1
 800c192:	d103      	bne.n	800c19c <_read_r+0x20>
 800c194:	682b      	ldr	r3, [r5, #0]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d000      	beq.n	800c19c <_read_r+0x20>
 800c19a:	6023      	str	r3, [r4, #0]
 800c19c:	bd70      	pop	{r4, r5, r6, pc}
 800c19e:	46c0      	nop			@ (mov r8, r8)
 800c1a0:	200013e4 	.word	0x200013e4

0800c1a4 <_sbrk_r>:
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	b570      	push	{r4, r5, r6, lr}
 800c1a8:	4d06      	ldr	r5, [pc, #24]	@ (800c1c4 <_sbrk_r+0x20>)
 800c1aa:	0004      	movs	r4, r0
 800c1ac:	0008      	movs	r0, r1
 800c1ae:	602b      	str	r3, [r5, #0]
 800c1b0:	f7f6 fbce 	bl	8002950 <_sbrk>
 800c1b4:	1c43      	adds	r3, r0, #1
 800c1b6:	d103      	bne.n	800c1c0 <_sbrk_r+0x1c>
 800c1b8:	682b      	ldr	r3, [r5, #0]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d000      	beq.n	800c1c0 <_sbrk_r+0x1c>
 800c1be:	6023      	str	r3, [r4, #0]
 800c1c0:	bd70      	pop	{r4, r5, r6, pc}
 800c1c2:	46c0      	nop			@ (mov r8, r8)
 800c1c4:	200013e4 	.word	0x200013e4

0800c1c8 <_write_r>:
 800c1c8:	b570      	push	{r4, r5, r6, lr}
 800c1ca:	0004      	movs	r4, r0
 800c1cc:	0008      	movs	r0, r1
 800c1ce:	0011      	movs	r1, r2
 800c1d0:	001a      	movs	r2, r3
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	4d05      	ldr	r5, [pc, #20]	@ (800c1ec <_write_r+0x24>)
 800c1d6:	602b      	str	r3, [r5, #0]
 800c1d8:	f7f6 fb71 	bl	80028be <_write>
 800c1dc:	1c43      	adds	r3, r0, #1
 800c1de:	d103      	bne.n	800c1e8 <_write_r+0x20>
 800c1e0:	682b      	ldr	r3, [r5, #0]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d000      	beq.n	800c1e8 <_write_r+0x20>
 800c1e6:	6023      	str	r3, [r4, #0]
 800c1e8:	bd70      	pop	{r4, r5, r6, pc}
 800c1ea:	46c0      	nop			@ (mov r8, r8)
 800c1ec:	200013e4 	.word	0x200013e4

0800c1f0 <__errno>:
 800c1f0:	4b01      	ldr	r3, [pc, #4]	@ (800c1f8 <__errno+0x8>)
 800c1f2:	6818      	ldr	r0, [r3, #0]
 800c1f4:	4770      	bx	lr
 800c1f6:	46c0      	nop			@ (mov r8, r8)
 800c1f8:	20000058 	.word	0x20000058

0800c1fc <__libc_init_array>:
 800c1fc:	b570      	push	{r4, r5, r6, lr}
 800c1fe:	2600      	movs	r6, #0
 800c200:	4c0c      	ldr	r4, [pc, #48]	@ (800c234 <__libc_init_array+0x38>)
 800c202:	4d0d      	ldr	r5, [pc, #52]	@ (800c238 <__libc_init_array+0x3c>)
 800c204:	1b64      	subs	r4, r4, r5
 800c206:	10a4      	asrs	r4, r4, #2
 800c208:	42a6      	cmp	r6, r4
 800c20a:	d109      	bne.n	800c220 <__libc_init_array+0x24>
 800c20c:	2600      	movs	r6, #0
 800c20e:	f001 fb19 	bl	800d844 <_init>
 800c212:	4c0a      	ldr	r4, [pc, #40]	@ (800c23c <__libc_init_array+0x40>)
 800c214:	4d0a      	ldr	r5, [pc, #40]	@ (800c240 <__libc_init_array+0x44>)
 800c216:	1b64      	subs	r4, r4, r5
 800c218:	10a4      	asrs	r4, r4, #2
 800c21a:	42a6      	cmp	r6, r4
 800c21c:	d105      	bne.n	800c22a <__libc_init_array+0x2e>
 800c21e:	bd70      	pop	{r4, r5, r6, pc}
 800c220:	00b3      	lsls	r3, r6, #2
 800c222:	58eb      	ldr	r3, [r5, r3]
 800c224:	4798      	blx	r3
 800c226:	3601      	adds	r6, #1
 800c228:	e7ee      	b.n	800c208 <__libc_init_array+0xc>
 800c22a:	00b3      	lsls	r3, r6, #2
 800c22c:	58eb      	ldr	r3, [r5, r3]
 800c22e:	4798      	blx	r3
 800c230:	3601      	adds	r6, #1
 800c232:	e7f2      	b.n	800c21a <__libc_init_array+0x1e>
 800c234:	0800e464 	.word	0x0800e464
 800c238:	0800e464 	.word	0x0800e464
 800c23c:	0800e468 	.word	0x0800e468
 800c240:	0800e464 	.word	0x0800e464

0800c244 <__retarget_lock_init_recursive>:
 800c244:	4770      	bx	lr

0800c246 <__retarget_lock_acquire>:
 800c246:	4770      	bx	lr

0800c248 <__retarget_lock_acquire_recursive>:
 800c248:	4770      	bx	lr

0800c24a <__retarget_lock_release>:
 800c24a:	4770      	bx	lr

0800c24c <__retarget_lock_release_recursive>:
 800c24c:	4770      	bx	lr

0800c24e <strcpy>:
 800c24e:	0003      	movs	r3, r0
 800c250:	780a      	ldrb	r2, [r1, #0]
 800c252:	3101      	adds	r1, #1
 800c254:	701a      	strb	r2, [r3, #0]
 800c256:	3301      	adds	r3, #1
 800c258:	2a00      	cmp	r2, #0
 800c25a:	d1f9      	bne.n	800c250 <strcpy+0x2>
 800c25c:	4770      	bx	lr

0800c25e <memcpy>:
 800c25e:	2300      	movs	r3, #0
 800c260:	b510      	push	{r4, lr}
 800c262:	429a      	cmp	r2, r3
 800c264:	d100      	bne.n	800c268 <memcpy+0xa>
 800c266:	bd10      	pop	{r4, pc}
 800c268:	5ccc      	ldrb	r4, [r1, r3]
 800c26a:	54c4      	strb	r4, [r0, r3]
 800c26c:	3301      	adds	r3, #1
 800c26e:	e7f8      	b.n	800c262 <memcpy+0x4>

0800c270 <div>:
 800c270:	b510      	push	{r4, lr}
 800c272:	0004      	movs	r4, r0
 800c274:	0008      	movs	r0, r1
 800c276:	0011      	movs	r1, r2
 800c278:	f7f4 f8d2 	bl	8000420 <__aeabi_idivmod>
 800c27c:	6020      	str	r0, [r4, #0]
 800c27e:	6061      	str	r1, [r4, #4]
 800c280:	0020      	movs	r0, r4
 800c282:	bd10      	pop	{r4, pc}

0800c284 <_free_r>:
 800c284:	b570      	push	{r4, r5, r6, lr}
 800c286:	0005      	movs	r5, r0
 800c288:	1e0c      	subs	r4, r1, #0
 800c28a:	d010      	beq.n	800c2ae <_free_r+0x2a>
 800c28c:	3c04      	subs	r4, #4
 800c28e:	6823      	ldr	r3, [r4, #0]
 800c290:	2b00      	cmp	r3, #0
 800c292:	da00      	bge.n	800c296 <_free_r+0x12>
 800c294:	18e4      	adds	r4, r4, r3
 800c296:	0028      	movs	r0, r5
 800c298:	f7fe fe44 	bl	800af24 <__malloc_lock>
 800c29c:	4a1d      	ldr	r2, [pc, #116]	@ (800c314 <_free_r+0x90>)
 800c29e:	6813      	ldr	r3, [r2, #0]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d105      	bne.n	800c2b0 <_free_r+0x2c>
 800c2a4:	6063      	str	r3, [r4, #4]
 800c2a6:	6014      	str	r4, [r2, #0]
 800c2a8:	0028      	movs	r0, r5
 800c2aa:	f7fe fe43 	bl	800af34 <__malloc_unlock>
 800c2ae:	bd70      	pop	{r4, r5, r6, pc}
 800c2b0:	42a3      	cmp	r3, r4
 800c2b2:	d908      	bls.n	800c2c6 <_free_r+0x42>
 800c2b4:	6820      	ldr	r0, [r4, #0]
 800c2b6:	1821      	adds	r1, r4, r0
 800c2b8:	428b      	cmp	r3, r1
 800c2ba:	d1f3      	bne.n	800c2a4 <_free_r+0x20>
 800c2bc:	6819      	ldr	r1, [r3, #0]
 800c2be:	685b      	ldr	r3, [r3, #4]
 800c2c0:	1809      	adds	r1, r1, r0
 800c2c2:	6021      	str	r1, [r4, #0]
 800c2c4:	e7ee      	b.n	800c2a4 <_free_r+0x20>
 800c2c6:	001a      	movs	r2, r3
 800c2c8:	685b      	ldr	r3, [r3, #4]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d001      	beq.n	800c2d2 <_free_r+0x4e>
 800c2ce:	42a3      	cmp	r3, r4
 800c2d0:	d9f9      	bls.n	800c2c6 <_free_r+0x42>
 800c2d2:	6811      	ldr	r1, [r2, #0]
 800c2d4:	1850      	adds	r0, r2, r1
 800c2d6:	42a0      	cmp	r0, r4
 800c2d8:	d10b      	bne.n	800c2f2 <_free_r+0x6e>
 800c2da:	6820      	ldr	r0, [r4, #0]
 800c2dc:	1809      	adds	r1, r1, r0
 800c2de:	1850      	adds	r0, r2, r1
 800c2e0:	6011      	str	r1, [r2, #0]
 800c2e2:	4283      	cmp	r3, r0
 800c2e4:	d1e0      	bne.n	800c2a8 <_free_r+0x24>
 800c2e6:	6818      	ldr	r0, [r3, #0]
 800c2e8:	685b      	ldr	r3, [r3, #4]
 800c2ea:	1841      	adds	r1, r0, r1
 800c2ec:	6011      	str	r1, [r2, #0]
 800c2ee:	6053      	str	r3, [r2, #4]
 800c2f0:	e7da      	b.n	800c2a8 <_free_r+0x24>
 800c2f2:	42a0      	cmp	r0, r4
 800c2f4:	d902      	bls.n	800c2fc <_free_r+0x78>
 800c2f6:	230c      	movs	r3, #12
 800c2f8:	602b      	str	r3, [r5, #0]
 800c2fa:	e7d5      	b.n	800c2a8 <_free_r+0x24>
 800c2fc:	6820      	ldr	r0, [r4, #0]
 800c2fe:	1821      	adds	r1, r4, r0
 800c300:	428b      	cmp	r3, r1
 800c302:	d103      	bne.n	800c30c <_free_r+0x88>
 800c304:	6819      	ldr	r1, [r3, #0]
 800c306:	685b      	ldr	r3, [r3, #4]
 800c308:	1809      	adds	r1, r1, r0
 800c30a:	6021      	str	r1, [r4, #0]
 800c30c:	6063      	str	r3, [r4, #4]
 800c30e:	6054      	str	r4, [r2, #4]
 800c310:	e7ca      	b.n	800c2a8 <_free_r+0x24>
 800c312:	46c0      	nop			@ (mov r8, r8)
 800c314:	20001280 	.word	0x20001280

0800c318 <_findenv_r>:
 800c318:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c31a:	000d      	movs	r5, r1
 800c31c:	b085      	sub	sp, #20
 800c31e:	9001      	str	r0, [sp, #4]
 800c320:	9203      	str	r2, [sp, #12]
 800c322:	f000 fe29 	bl	800cf78 <__env_lock>
 800c326:	4f17      	ldr	r7, [pc, #92]	@ (800c384 <_findenv_r+0x6c>)
 800c328:	002e      	movs	r6, r5
 800c32a:	683c      	ldr	r4, [r7, #0]
 800c32c:	2c00      	cmp	r4, #0
 800c32e:	d106      	bne.n	800c33e <_findenv_r+0x26>
 800c330:	9801      	ldr	r0, [sp, #4]
 800c332:	f000 fe29 	bl	800cf88 <__env_unlock>
 800c336:	2000      	movs	r0, #0
 800c338:	b005      	add	sp, #20
 800c33a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c33c:	3601      	adds	r6, #1
 800c33e:	7832      	ldrb	r2, [r6, #0]
 800c340:	2a00      	cmp	r2, #0
 800c342:	d01d      	beq.n	800c380 <_findenv_r+0x68>
 800c344:	2a3d      	cmp	r2, #61	@ 0x3d
 800c346:	d1f9      	bne.n	800c33c <_findenv_r+0x24>
 800c348:	e7f2      	b.n	800c330 <_findenv_r+0x18>
 800c34a:	3404      	adds	r4, #4
 800c34c:	6820      	ldr	r0, [r4, #0]
 800c34e:	2800      	cmp	r0, #0
 800c350:	d0ee      	beq.n	800c330 <_findenv_r+0x18>
 800c352:	0032      	movs	r2, r6
 800c354:	0029      	movs	r1, r5
 800c356:	f000 fcf5 	bl	800cd44 <strncmp>
 800c35a:	2800      	cmp	r0, #0
 800c35c:	d1f5      	bne.n	800c34a <_findenv_r+0x32>
 800c35e:	6823      	ldr	r3, [r4, #0]
 800c360:	199a      	adds	r2, r3, r6
 800c362:	5d9b      	ldrb	r3, [r3, r6]
 800c364:	9202      	str	r2, [sp, #8]
 800c366:	2b3d      	cmp	r3, #61	@ 0x3d
 800c368:	d1ef      	bne.n	800c34a <_findenv_r+0x32>
 800c36a:	683b      	ldr	r3, [r7, #0]
 800c36c:	9a03      	ldr	r2, [sp, #12]
 800c36e:	1ae3      	subs	r3, r4, r3
 800c370:	109b      	asrs	r3, r3, #2
 800c372:	9801      	ldr	r0, [sp, #4]
 800c374:	6013      	str	r3, [r2, #0]
 800c376:	f000 fe07 	bl	800cf88 <__env_unlock>
 800c37a:	9802      	ldr	r0, [sp, #8]
 800c37c:	3001      	adds	r0, #1
 800c37e:	e7db      	b.n	800c338 <_findenv_r+0x20>
 800c380:	1b76      	subs	r6, r6, r5
 800c382:	e7e3      	b.n	800c34c <_findenv_r+0x34>
 800c384:	20000028 	.word	0x20000028

0800c388 <_getenv_r>:
 800c388:	b507      	push	{r0, r1, r2, lr}
 800c38a:	aa01      	add	r2, sp, #4
 800c38c:	f7ff ffc4 	bl	800c318 <_findenv_r>
 800c390:	bd0e      	pop	{r1, r2, r3, pc}

0800c392 <_malloc_usable_size_r>:
 800c392:	1f0b      	subs	r3, r1, #4
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	1f18      	subs	r0, r3, #4
 800c398:	2b00      	cmp	r3, #0
 800c39a:	da01      	bge.n	800c3a0 <_malloc_usable_size_r+0xe>
 800c39c:	580b      	ldr	r3, [r1, r0]
 800c39e:	18c0      	adds	r0, r0, r3
 800c3a0:	4770      	bx	lr
	...

0800c3a4 <_strtoul_l.isra.0>:
 800c3a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c3a6:	001e      	movs	r6, r3
 800c3a8:	4b3e      	ldr	r3, [pc, #248]	@ (800c4a4 <_strtoul_l.isra.0+0x100>)
 800c3aa:	0017      	movs	r7, r2
 800c3ac:	000c      	movs	r4, r1
 800c3ae:	469c      	mov	ip, r3
 800c3b0:	2208      	movs	r2, #8
 800c3b2:	b085      	sub	sp, #20
 800c3b4:	9003      	str	r0, [sp, #12]
 800c3b6:	9100      	str	r1, [sp, #0]
 800c3b8:	0023      	movs	r3, r4
 800c3ba:	4661      	mov	r1, ip
 800c3bc:	781d      	ldrb	r5, [r3, #0]
 800c3be:	3401      	adds	r4, #1
 800c3c0:	5d48      	ldrb	r0, [r1, r5]
 800c3c2:	0001      	movs	r1, r0
 800c3c4:	4011      	ands	r1, r2
 800c3c6:	4210      	tst	r0, r2
 800c3c8:	d1f6      	bne.n	800c3b8 <_strtoul_l.isra.0+0x14>
 800c3ca:	2d2d      	cmp	r5, #45	@ 0x2d
 800c3cc:	d112      	bne.n	800c3f4 <_strtoul_l.isra.0+0x50>
 800c3ce:	7825      	ldrb	r5, [r4, #0]
 800c3d0:	1c9c      	adds	r4, r3, #2
 800c3d2:	2301      	movs	r3, #1
 800c3d4:	9302      	str	r3, [sp, #8]
 800c3d6:	2210      	movs	r2, #16
 800c3d8:	0033      	movs	r3, r6
 800c3da:	4393      	bics	r3, r2
 800c3dc:	d116      	bne.n	800c40c <_strtoul_l.isra.0+0x68>
 800c3de:	2d30      	cmp	r5, #48	@ 0x30
 800c3e0:	d10e      	bne.n	800c400 <_strtoul_l.isra.0+0x5c>
 800c3e2:	2120      	movs	r1, #32
 800c3e4:	7823      	ldrb	r3, [r4, #0]
 800c3e6:	438b      	bics	r3, r1
 800c3e8:	2b58      	cmp	r3, #88	@ 0x58
 800c3ea:	d109      	bne.n	800c400 <_strtoul_l.isra.0+0x5c>
 800c3ec:	7865      	ldrb	r5, [r4, #1]
 800c3ee:	3402      	adds	r4, #2
 800c3f0:	2610      	movs	r6, #16
 800c3f2:	e00b      	b.n	800c40c <_strtoul_l.isra.0+0x68>
 800c3f4:	9102      	str	r1, [sp, #8]
 800c3f6:	2d2b      	cmp	r5, #43	@ 0x2b
 800c3f8:	d1ed      	bne.n	800c3d6 <_strtoul_l.isra.0+0x32>
 800c3fa:	7825      	ldrb	r5, [r4, #0]
 800c3fc:	1c9c      	adds	r4, r3, #2
 800c3fe:	e7ea      	b.n	800c3d6 <_strtoul_l.isra.0+0x32>
 800c400:	2e00      	cmp	r6, #0
 800c402:	d1f5      	bne.n	800c3f0 <_strtoul_l.isra.0+0x4c>
 800c404:	360a      	adds	r6, #10
 800c406:	2d30      	cmp	r5, #48	@ 0x30
 800c408:	d100      	bne.n	800c40c <_strtoul_l.isra.0+0x68>
 800c40a:	3e02      	subs	r6, #2
 800c40c:	2001      	movs	r0, #1
 800c40e:	0031      	movs	r1, r6
 800c410:	4240      	negs	r0, r0
 800c412:	f7f3 fe95 	bl	8000140 <__udivsi3>
 800c416:	9001      	str	r0, [sp, #4]
 800c418:	2001      	movs	r0, #1
 800c41a:	0031      	movs	r1, r6
 800c41c:	4240      	negs	r0, r0
 800c41e:	f7f3 ff15 	bl	800024c <__aeabi_uidivmod>
 800c422:	2300      	movs	r3, #0
 800c424:	2201      	movs	r2, #1
 800c426:	0018      	movs	r0, r3
 800c428:	4694      	mov	ip, r2
 800c42a:	002a      	movs	r2, r5
 800c42c:	3a30      	subs	r2, #48	@ 0x30
 800c42e:	2a09      	cmp	r2, #9
 800c430:	d812      	bhi.n	800c458 <_strtoul_l.isra.0+0xb4>
 800c432:	0015      	movs	r5, r2
 800c434:	42ae      	cmp	r6, r5
 800c436:	dd1e      	ble.n	800c476 <_strtoul_l.isra.0+0xd2>
 800c438:	1c5a      	adds	r2, r3, #1
 800c43a:	d00a      	beq.n	800c452 <_strtoul_l.isra.0+0xae>
 800c43c:	2301      	movs	r3, #1
 800c43e:	9a01      	ldr	r2, [sp, #4]
 800c440:	425b      	negs	r3, r3
 800c442:	4282      	cmp	r2, r0
 800c444:	d305      	bcc.n	800c452 <_strtoul_l.isra.0+0xae>
 800c446:	d101      	bne.n	800c44c <_strtoul_l.isra.0+0xa8>
 800c448:	42a9      	cmp	r1, r5
 800c44a:	db11      	blt.n	800c470 <_strtoul_l.isra.0+0xcc>
 800c44c:	4663      	mov	r3, ip
 800c44e:	4370      	muls	r0, r6
 800c450:	1828      	adds	r0, r5, r0
 800c452:	7825      	ldrb	r5, [r4, #0]
 800c454:	3401      	adds	r4, #1
 800c456:	e7e8      	b.n	800c42a <_strtoul_l.isra.0+0x86>
 800c458:	002a      	movs	r2, r5
 800c45a:	3a41      	subs	r2, #65	@ 0x41
 800c45c:	2a19      	cmp	r2, #25
 800c45e:	d801      	bhi.n	800c464 <_strtoul_l.isra.0+0xc0>
 800c460:	3d37      	subs	r5, #55	@ 0x37
 800c462:	e7e7      	b.n	800c434 <_strtoul_l.isra.0+0x90>
 800c464:	002a      	movs	r2, r5
 800c466:	3a61      	subs	r2, #97	@ 0x61
 800c468:	2a19      	cmp	r2, #25
 800c46a:	d804      	bhi.n	800c476 <_strtoul_l.isra.0+0xd2>
 800c46c:	3d57      	subs	r5, #87	@ 0x57
 800c46e:	e7e1      	b.n	800c434 <_strtoul_l.isra.0+0x90>
 800c470:	2301      	movs	r3, #1
 800c472:	425b      	negs	r3, r3
 800c474:	e7ed      	b.n	800c452 <_strtoul_l.isra.0+0xae>
 800c476:	1c5a      	adds	r2, r3, #1
 800c478:	d107      	bne.n	800c48a <_strtoul_l.isra.0+0xe6>
 800c47a:	2222      	movs	r2, #34	@ 0x22
 800c47c:	9903      	ldr	r1, [sp, #12]
 800c47e:	0018      	movs	r0, r3
 800c480:	600a      	str	r2, [r1, #0]
 800c482:	2f00      	cmp	r7, #0
 800c484:	d109      	bne.n	800c49a <_strtoul_l.isra.0+0xf6>
 800c486:	b005      	add	sp, #20
 800c488:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c48a:	9a02      	ldr	r2, [sp, #8]
 800c48c:	2a00      	cmp	r2, #0
 800c48e:	d000      	beq.n	800c492 <_strtoul_l.isra.0+0xee>
 800c490:	4240      	negs	r0, r0
 800c492:	2f00      	cmp	r7, #0
 800c494:	d0f7      	beq.n	800c486 <_strtoul_l.isra.0+0xe2>
 800c496:	2b00      	cmp	r3, #0
 800c498:	d001      	beq.n	800c49e <_strtoul_l.isra.0+0xfa>
 800c49a:	1e63      	subs	r3, r4, #1
 800c49c:	9300      	str	r3, [sp, #0]
 800c49e:	9b00      	ldr	r3, [sp, #0]
 800c4a0:	603b      	str	r3, [r7, #0]
 800c4a2:	e7f0      	b.n	800c486 <_strtoul_l.isra.0+0xe2>
 800c4a4:	0800e359 	.word	0x0800e359

0800c4a8 <_strtoul_r>:
 800c4a8:	b510      	push	{r4, lr}
 800c4aa:	f7ff ff7b 	bl	800c3a4 <_strtoul_l.isra.0>
 800c4ae:	bd10      	pop	{r4, pc}

0800c4b0 <strtoul>:
 800c4b0:	b510      	push	{r4, lr}
 800c4b2:	4c04      	ldr	r4, [pc, #16]	@ (800c4c4 <strtoul+0x14>)
 800c4b4:	0013      	movs	r3, r2
 800c4b6:	000a      	movs	r2, r1
 800c4b8:	0001      	movs	r1, r0
 800c4ba:	6820      	ldr	r0, [r4, #0]
 800c4bc:	f7ff ff72 	bl	800c3a4 <_strtoul_l.isra.0>
 800c4c0:	bd10      	pop	{r4, pc}
 800c4c2:	46c0      	nop			@ (mov r8, r8)
 800c4c4:	20000058 	.word	0x20000058

0800c4c8 <__sfputc_r>:
 800c4c8:	6893      	ldr	r3, [r2, #8]
 800c4ca:	b510      	push	{r4, lr}
 800c4cc:	3b01      	subs	r3, #1
 800c4ce:	6093      	str	r3, [r2, #8]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	da04      	bge.n	800c4de <__sfputc_r+0x16>
 800c4d4:	6994      	ldr	r4, [r2, #24]
 800c4d6:	42a3      	cmp	r3, r4
 800c4d8:	db07      	blt.n	800c4ea <__sfputc_r+0x22>
 800c4da:	290a      	cmp	r1, #10
 800c4dc:	d005      	beq.n	800c4ea <__sfputc_r+0x22>
 800c4de:	6813      	ldr	r3, [r2, #0]
 800c4e0:	1c58      	adds	r0, r3, #1
 800c4e2:	6010      	str	r0, [r2, #0]
 800c4e4:	7019      	strb	r1, [r3, #0]
 800c4e6:	0008      	movs	r0, r1
 800c4e8:	bd10      	pop	{r4, pc}
 800c4ea:	f7fe fec1 	bl	800b270 <__swbuf_r>
 800c4ee:	0001      	movs	r1, r0
 800c4f0:	e7f9      	b.n	800c4e6 <__sfputc_r+0x1e>

0800c4f2 <__sfputs_r>:
 800c4f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4f4:	0006      	movs	r6, r0
 800c4f6:	000f      	movs	r7, r1
 800c4f8:	0014      	movs	r4, r2
 800c4fa:	18d5      	adds	r5, r2, r3
 800c4fc:	42ac      	cmp	r4, r5
 800c4fe:	d101      	bne.n	800c504 <__sfputs_r+0x12>
 800c500:	2000      	movs	r0, #0
 800c502:	e007      	b.n	800c514 <__sfputs_r+0x22>
 800c504:	7821      	ldrb	r1, [r4, #0]
 800c506:	003a      	movs	r2, r7
 800c508:	0030      	movs	r0, r6
 800c50a:	f7ff ffdd 	bl	800c4c8 <__sfputc_r>
 800c50e:	3401      	adds	r4, #1
 800c510:	1c43      	adds	r3, r0, #1
 800c512:	d1f3      	bne.n	800c4fc <__sfputs_r+0xa>
 800c514:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c518 <_vfiprintf_r>:
 800c518:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c51a:	b0a1      	sub	sp, #132	@ 0x84
 800c51c:	000f      	movs	r7, r1
 800c51e:	0015      	movs	r5, r2
 800c520:	001e      	movs	r6, r3
 800c522:	9003      	str	r0, [sp, #12]
 800c524:	2800      	cmp	r0, #0
 800c526:	d004      	beq.n	800c532 <_vfiprintf_r+0x1a>
 800c528:	6a03      	ldr	r3, [r0, #32]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d101      	bne.n	800c532 <_vfiprintf_r+0x1a>
 800c52e:	f7fe fda3 	bl	800b078 <__sinit>
 800c532:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c534:	07db      	lsls	r3, r3, #31
 800c536:	d405      	bmi.n	800c544 <_vfiprintf_r+0x2c>
 800c538:	89bb      	ldrh	r3, [r7, #12]
 800c53a:	059b      	lsls	r3, r3, #22
 800c53c:	d402      	bmi.n	800c544 <_vfiprintf_r+0x2c>
 800c53e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800c540:	f7ff fe82 	bl	800c248 <__retarget_lock_acquire_recursive>
 800c544:	89bb      	ldrh	r3, [r7, #12]
 800c546:	071b      	lsls	r3, r3, #28
 800c548:	d502      	bpl.n	800c550 <_vfiprintf_r+0x38>
 800c54a:	693b      	ldr	r3, [r7, #16]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d113      	bne.n	800c578 <_vfiprintf_r+0x60>
 800c550:	0039      	movs	r1, r7
 800c552:	9803      	ldr	r0, [sp, #12]
 800c554:	f7fe fece 	bl	800b2f4 <__swsetup_r>
 800c558:	2800      	cmp	r0, #0
 800c55a:	d00d      	beq.n	800c578 <_vfiprintf_r+0x60>
 800c55c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c55e:	07db      	lsls	r3, r3, #31
 800c560:	d503      	bpl.n	800c56a <_vfiprintf_r+0x52>
 800c562:	2001      	movs	r0, #1
 800c564:	4240      	negs	r0, r0
 800c566:	b021      	add	sp, #132	@ 0x84
 800c568:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c56a:	89bb      	ldrh	r3, [r7, #12]
 800c56c:	059b      	lsls	r3, r3, #22
 800c56e:	d4f8      	bmi.n	800c562 <_vfiprintf_r+0x4a>
 800c570:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800c572:	f7ff fe6b 	bl	800c24c <__retarget_lock_release_recursive>
 800c576:	e7f4      	b.n	800c562 <_vfiprintf_r+0x4a>
 800c578:	2300      	movs	r3, #0
 800c57a:	ac08      	add	r4, sp, #32
 800c57c:	6163      	str	r3, [r4, #20]
 800c57e:	3320      	adds	r3, #32
 800c580:	7663      	strb	r3, [r4, #25]
 800c582:	3310      	adds	r3, #16
 800c584:	76a3      	strb	r3, [r4, #26]
 800c586:	9607      	str	r6, [sp, #28]
 800c588:	002e      	movs	r6, r5
 800c58a:	7833      	ldrb	r3, [r6, #0]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d001      	beq.n	800c594 <_vfiprintf_r+0x7c>
 800c590:	2b25      	cmp	r3, #37	@ 0x25
 800c592:	d148      	bne.n	800c626 <_vfiprintf_r+0x10e>
 800c594:	1b73      	subs	r3, r6, r5
 800c596:	9305      	str	r3, [sp, #20]
 800c598:	42ae      	cmp	r6, r5
 800c59a:	d00b      	beq.n	800c5b4 <_vfiprintf_r+0x9c>
 800c59c:	002a      	movs	r2, r5
 800c59e:	0039      	movs	r1, r7
 800c5a0:	9803      	ldr	r0, [sp, #12]
 800c5a2:	f7ff ffa6 	bl	800c4f2 <__sfputs_r>
 800c5a6:	3001      	adds	r0, #1
 800c5a8:	d100      	bne.n	800c5ac <_vfiprintf_r+0x94>
 800c5aa:	e0ae      	b.n	800c70a <_vfiprintf_r+0x1f2>
 800c5ac:	6963      	ldr	r3, [r4, #20]
 800c5ae:	9a05      	ldr	r2, [sp, #20]
 800c5b0:	189b      	adds	r3, r3, r2
 800c5b2:	6163      	str	r3, [r4, #20]
 800c5b4:	7833      	ldrb	r3, [r6, #0]
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d100      	bne.n	800c5bc <_vfiprintf_r+0xa4>
 800c5ba:	e0a6      	b.n	800c70a <_vfiprintf_r+0x1f2>
 800c5bc:	2201      	movs	r2, #1
 800c5be:	2300      	movs	r3, #0
 800c5c0:	4252      	negs	r2, r2
 800c5c2:	6062      	str	r2, [r4, #4]
 800c5c4:	a904      	add	r1, sp, #16
 800c5c6:	3254      	adds	r2, #84	@ 0x54
 800c5c8:	1852      	adds	r2, r2, r1
 800c5ca:	1c75      	adds	r5, r6, #1
 800c5cc:	6023      	str	r3, [r4, #0]
 800c5ce:	60e3      	str	r3, [r4, #12]
 800c5d0:	60a3      	str	r3, [r4, #8]
 800c5d2:	7013      	strb	r3, [r2, #0]
 800c5d4:	65a3      	str	r3, [r4, #88]	@ 0x58
 800c5d6:	4b59      	ldr	r3, [pc, #356]	@ (800c73c <_vfiprintf_r+0x224>)
 800c5d8:	2205      	movs	r2, #5
 800c5da:	0018      	movs	r0, r3
 800c5dc:	7829      	ldrb	r1, [r5, #0]
 800c5de:	9305      	str	r3, [sp, #20]
 800c5e0:	f000 fcbe 	bl	800cf60 <memchr>
 800c5e4:	1c6e      	adds	r6, r5, #1
 800c5e6:	2800      	cmp	r0, #0
 800c5e8:	d11f      	bne.n	800c62a <_vfiprintf_r+0x112>
 800c5ea:	6822      	ldr	r2, [r4, #0]
 800c5ec:	06d3      	lsls	r3, r2, #27
 800c5ee:	d504      	bpl.n	800c5fa <_vfiprintf_r+0xe2>
 800c5f0:	2353      	movs	r3, #83	@ 0x53
 800c5f2:	a904      	add	r1, sp, #16
 800c5f4:	185b      	adds	r3, r3, r1
 800c5f6:	2120      	movs	r1, #32
 800c5f8:	7019      	strb	r1, [r3, #0]
 800c5fa:	0713      	lsls	r3, r2, #28
 800c5fc:	d504      	bpl.n	800c608 <_vfiprintf_r+0xf0>
 800c5fe:	2353      	movs	r3, #83	@ 0x53
 800c600:	a904      	add	r1, sp, #16
 800c602:	185b      	adds	r3, r3, r1
 800c604:	212b      	movs	r1, #43	@ 0x2b
 800c606:	7019      	strb	r1, [r3, #0]
 800c608:	782b      	ldrb	r3, [r5, #0]
 800c60a:	2b2a      	cmp	r3, #42	@ 0x2a
 800c60c:	d016      	beq.n	800c63c <_vfiprintf_r+0x124>
 800c60e:	002e      	movs	r6, r5
 800c610:	2100      	movs	r1, #0
 800c612:	200a      	movs	r0, #10
 800c614:	68e3      	ldr	r3, [r4, #12]
 800c616:	7832      	ldrb	r2, [r6, #0]
 800c618:	1c75      	adds	r5, r6, #1
 800c61a:	3a30      	subs	r2, #48	@ 0x30
 800c61c:	2a09      	cmp	r2, #9
 800c61e:	d950      	bls.n	800c6c2 <_vfiprintf_r+0x1aa>
 800c620:	2900      	cmp	r1, #0
 800c622:	d111      	bne.n	800c648 <_vfiprintf_r+0x130>
 800c624:	e017      	b.n	800c656 <_vfiprintf_r+0x13e>
 800c626:	3601      	adds	r6, #1
 800c628:	e7af      	b.n	800c58a <_vfiprintf_r+0x72>
 800c62a:	9b05      	ldr	r3, [sp, #20]
 800c62c:	6822      	ldr	r2, [r4, #0]
 800c62e:	1ac0      	subs	r0, r0, r3
 800c630:	2301      	movs	r3, #1
 800c632:	4083      	lsls	r3, r0
 800c634:	4313      	orrs	r3, r2
 800c636:	0035      	movs	r5, r6
 800c638:	6023      	str	r3, [r4, #0]
 800c63a:	e7cc      	b.n	800c5d6 <_vfiprintf_r+0xbe>
 800c63c:	9b07      	ldr	r3, [sp, #28]
 800c63e:	1d19      	adds	r1, r3, #4
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	9107      	str	r1, [sp, #28]
 800c644:	2b00      	cmp	r3, #0
 800c646:	db01      	blt.n	800c64c <_vfiprintf_r+0x134>
 800c648:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c64a:	e004      	b.n	800c656 <_vfiprintf_r+0x13e>
 800c64c:	425b      	negs	r3, r3
 800c64e:	60e3      	str	r3, [r4, #12]
 800c650:	2302      	movs	r3, #2
 800c652:	4313      	orrs	r3, r2
 800c654:	6023      	str	r3, [r4, #0]
 800c656:	7833      	ldrb	r3, [r6, #0]
 800c658:	2b2e      	cmp	r3, #46	@ 0x2e
 800c65a:	d10c      	bne.n	800c676 <_vfiprintf_r+0x15e>
 800c65c:	7873      	ldrb	r3, [r6, #1]
 800c65e:	2b2a      	cmp	r3, #42	@ 0x2a
 800c660:	d134      	bne.n	800c6cc <_vfiprintf_r+0x1b4>
 800c662:	9b07      	ldr	r3, [sp, #28]
 800c664:	3602      	adds	r6, #2
 800c666:	1d1a      	adds	r2, r3, #4
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	9207      	str	r2, [sp, #28]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	da01      	bge.n	800c674 <_vfiprintf_r+0x15c>
 800c670:	2301      	movs	r3, #1
 800c672:	425b      	negs	r3, r3
 800c674:	9309      	str	r3, [sp, #36]	@ 0x24
 800c676:	4d32      	ldr	r5, [pc, #200]	@ (800c740 <_vfiprintf_r+0x228>)
 800c678:	2203      	movs	r2, #3
 800c67a:	0028      	movs	r0, r5
 800c67c:	7831      	ldrb	r1, [r6, #0]
 800c67e:	f000 fc6f 	bl	800cf60 <memchr>
 800c682:	2800      	cmp	r0, #0
 800c684:	d006      	beq.n	800c694 <_vfiprintf_r+0x17c>
 800c686:	2340      	movs	r3, #64	@ 0x40
 800c688:	1b40      	subs	r0, r0, r5
 800c68a:	4083      	lsls	r3, r0
 800c68c:	6822      	ldr	r2, [r4, #0]
 800c68e:	3601      	adds	r6, #1
 800c690:	4313      	orrs	r3, r2
 800c692:	6023      	str	r3, [r4, #0]
 800c694:	7831      	ldrb	r1, [r6, #0]
 800c696:	2206      	movs	r2, #6
 800c698:	482a      	ldr	r0, [pc, #168]	@ (800c744 <_vfiprintf_r+0x22c>)
 800c69a:	1c75      	adds	r5, r6, #1
 800c69c:	7621      	strb	r1, [r4, #24]
 800c69e:	f000 fc5f 	bl	800cf60 <memchr>
 800c6a2:	2800      	cmp	r0, #0
 800c6a4:	d040      	beq.n	800c728 <_vfiprintf_r+0x210>
 800c6a6:	4b28      	ldr	r3, [pc, #160]	@ (800c748 <_vfiprintf_r+0x230>)
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d122      	bne.n	800c6f2 <_vfiprintf_r+0x1da>
 800c6ac:	2207      	movs	r2, #7
 800c6ae:	9b07      	ldr	r3, [sp, #28]
 800c6b0:	3307      	adds	r3, #7
 800c6b2:	4393      	bics	r3, r2
 800c6b4:	3308      	adds	r3, #8
 800c6b6:	9307      	str	r3, [sp, #28]
 800c6b8:	6963      	ldr	r3, [r4, #20]
 800c6ba:	9a04      	ldr	r2, [sp, #16]
 800c6bc:	189b      	adds	r3, r3, r2
 800c6be:	6163      	str	r3, [r4, #20]
 800c6c0:	e762      	b.n	800c588 <_vfiprintf_r+0x70>
 800c6c2:	4343      	muls	r3, r0
 800c6c4:	002e      	movs	r6, r5
 800c6c6:	2101      	movs	r1, #1
 800c6c8:	189b      	adds	r3, r3, r2
 800c6ca:	e7a4      	b.n	800c616 <_vfiprintf_r+0xfe>
 800c6cc:	2300      	movs	r3, #0
 800c6ce:	200a      	movs	r0, #10
 800c6d0:	0019      	movs	r1, r3
 800c6d2:	3601      	adds	r6, #1
 800c6d4:	6063      	str	r3, [r4, #4]
 800c6d6:	7832      	ldrb	r2, [r6, #0]
 800c6d8:	1c75      	adds	r5, r6, #1
 800c6da:	3a30      	subs	r2, #48	@ 0x30
 800c6dc:	2a09      	cmp	r2, #9
 800c6de:	d903      	bls.n	800c6e8 <_vfiprintf_r+0x1d0>
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d0c8      	beq.n	800c676 <_vfiprintf_r+0x15e>
 800c6e4:	9109      	str	r1, [sp, #36]	@ 0x24
 800c6e6:	e7c6      	b.n	800c676 <_vfiprintf_r+0x15e>
 800c6e8:	4341      	muls	r1, r0
 800c6ea:	002e      	movs	r6, r5
 800c6ec:	2301      	movs	r3, #1
 800c6ee:	1889      	adds	r1, r1, r2
 800c6f0:	e7f1      	b.n	800c6d6 <_vfiprintf_r+0x1be>
 800c6f2:	aa07      	add	r2, sp, #28
 800c6f4:	9200      	str	r2, [sp, #0]
 800c6f6:	0021      	movs	r1, r4
 800c6f8:	003a      	movs	r2, r7
 800c6fa:	4b14      	ldr	r3, [pc, #80]	@ (800c74c <_vfiprintf_r+0x234>)
 800c6fc:	9803      	ldr	r0, [sp, #12]
 800c6fe:	e000      	b.n	800c702 <_vfiprintf_r+0x1ea>
 800c700:	bf00      	nop
 800c702:	9004      	str	r0, [sp, #16]
 800c704:	9b04      	ldr	r3, [sp, #16]
 800c706:	3301      	adds	r3, #1
 800c708:	d1d6      	bne.n	800c6b8 <_vfiprintf_r+0x1a0>
 800c70a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c70c:	07db      	lsls	r3, r3, #31
 800c70e:	d405      	bmi.n	800c71c <_vfiprintf_r+0x204>
 800c710:	89bb      	ldrh	r3, [r7, #12]
 800c712:	059b      	lsls	r3, r3, #22
 800c714:	d402      	bmi.n	800c71c <_vfiprintf_r+0x204>
 800c716:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800c718:	f7ff fd98 	bl	800c24c <__retarget_lock_release_recursive>
 800c71c:	89bb      	ldrh	r3, [r7, #12]
 800c71e:	065b      	lsls	r3, r3, #25
 800c720:	d500      	bpl.n	800c724 <_vfiprintf_r+0x20c>
 800c722:	e71e      	b.n	800c562 <_vfiprintf_r+0x4a>
 800c724:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800c726:	e71e      	b.n	800c566 <_vfiprintf_r+0x4e>
 800c728:	aa07      	add	r2, sp, #28
 800c72a:	9200      	str	r2, [sp, #0]
 800c72c:	0021      	movs	r1, r4
 800c72e:	003a      	movs	r2, r7
 800c730:	4b06      	ldr	r3, [pc, #24]	@ (800c74c <_vfiprintf_r+0x234>)
 800c732:	9803      	ldr	r0, [sp, #12]
 800c734:	f000 f87c 	bl	800c830 <_printf_i>
 800c738:	e7e3      	b.n	800c702 <_vfiprintf_r+0x1ea>
 800c73a:	46c0      	nop			@ (mov r8, r8)
 800c73c:	0800e30a 	.word	0x0800e30a
 800c740:	0800e310 	.word	0x0800e310
 800c744:	0800e314 	.word	0x0800e314
 800c748:	00000000 	.word	0x00000000
 800c74c:	0800c4f3 	.word	0x0800c4f3

0800c750 <_printf_common>:
 800c750:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c752:	0016      	movs	r6, r2
 800c754:	9301      	str	r3, [sp, #4]
 800c756:	688a      	ldr	r2, [r1, #8]
 800c758:	690b      	ldr	r3, [r1, #16]
 800c75a:	000c      	movs	r4, r1
 800c75c:	9000      	str	r0, [sp, #0]
 800c75e:	4293      	cmp	r3, r2
 800c760:	da00      	bge.n	800c764 <_printf_common+0x14>
 800c762:	0013      	movs	r3, r2
 800c764:	0022      	movs	r2, r4
 800c766:	6033      	str	r3, [r6, #0]
 800c768:	3243      	adds	r2, #67	@ 0x43
 800c76a:	7812      	ldrb	r2, [r2, #0]
 800c76c:	2a00      	cmp	r2, #0
 800c76e:	d001      	beq.n	800c774 <_printf_common+0x24>
 800c770:	3301      	adds	r3, #1
 800c772:	6033      	str	r3, [r6, #0]
 800c774:	6823      	ldr	r3, [r4, #0]
 800c776:	069b      	lsls	r3, r3, #26
 800c778:	d502      	bpl.n	800c780 <_printf_common+0x30>
 800c77a:	6833      	ldr	r3, [r6, #0]
 800c77c:	3302      	adds	r3, #2
 800c77e:	6033      	str	r3, [r6, #0]
 800c780:	6822      	ldr	r2, [r4, #0]
 800c782:	2306      	movs	r3, #6
 800c784:	0015      	movs	r5, r2
 800c786:	401d      	ands	r5, r3
 800c788:	421a      	tst	r2, r3
 800c78a:	d027      	beq.n	800c7dc <_printf_common+0x8c>
 800c78c:	0023      	movs	r3, r4
 800c78e:	3343      	adds	r3, #67	@ 0x43
 800c790:	781b      	ldrb	r3, [r3, #0]
 800c792:	1e5a      	subs	r2, r3, #1
 800c794:	4193      	sbcs	r3, r2
 800c796:	6822      	ldr	r2, [r4, #0]
 800c798:	0692      	lsls	r2, r2, #26
 800c79a:	d430      	bmi.n	800c7fe <_printf_common+0xae>
 800c79c:	0022      	movs	r2, r4
 800c79e:	9901      	ldr	r1, [sp, #4]
 800c7a0:	9800      	ldr	r0, [sp, #0]
 800c7a2:	9d08      	ldr	r5, [sp, #32]
 800c7a4:	3243      	adds	r2, #67	@ 0x43
 800c7a6:	47a8      	blx	r5
 800c7a8:	3001      	adds	r0, #1
 800c7aa:	d025      	beq.n	800c7f8 <_printf_common+0xa8>
 800c7ac:	2206      	movs	r2, #6
 800c7ae:	6823      	ldr	r3, [r4, #0]
 800c7b0:	2500      	movs	r5, #0
 800c7b2:	4013      	ands	r3, r2
 800c7b4:	2b04      	cmp	r3, #4
 800c7b6:	d105      	bne.n	800c7c4 <_printf_common+0x74>
 800c7b8:	6833      	ldr	r3, [r6, #0]
 800c7ba:	68e5      	ldr	r5, [r4, #12]
 800c7bc:	1aed      	subs	r5, r5, r3
 800c7be:	43eb      	mvns	r3, r5
 800c7c0:	17db      	asrs	r3, r3, #31
 800c7c2:	401d      	ands	r5, r3
 800c7c4:	68a3      	ldr	r3, [r4, #8]
 800c7c6:	6922      	ldr	r2, [r4, #16]
 800c7c8:	4293      	cmp	r3, r2
 800c7ca:	dd01      	ble.n	800c7d0 <_printf_common+0x80>
 800c7cc:	1a9b      	subs	r3, r3, r2
 800c7ce:	18ed      	adds	r5, r5, r3
 800c7d0:	2600      	movs	r6, #0
 800c7d2:	42b5      	cmp	r5, r6
 800c7d4:	d120      	bne.n	800c818 <_printf_common+0xc8>
 800c7d6:	2000      	movs	r0, #0
 800c7d8:	e010      	b.n	800c7fc <_printf_common+0xac>
 800c7da:	3501      	adds	r5, #1
 800c7dc:	68e3      	ldr	r3, [r4, #12]
 800c7de:	6832      	ldr	r2, [r6, #0]
 800c7e0:	1a9b      	subs	r3, r3, r2
 800c7e2:	42ab      	cmp	r3, r5
 800c7e4:	ddd2      	ble.n	800c78c <_printf_common+0x3c>
 800c7e6:	0022      	movs	r2, r4
 800c7e8:	2301      	movs	r3, #1
 800c7ea:	9901      	ldr	r1, [sp, #4]
 800c7ec:	9800      	ldr	r0, [sp, #0]
 800c7ee:	9f08      	ldr	r7, [sp, #32]
 800c7f0:	3219      	adds	r2, #25
 800c7f2:	47b8      	blx	r7
 800c7f4:	3001      	adds	r0, #1
 800c7f6:	d1f0      	bne.n	800c7da <_printf_common+0x8a>
 800c7f8:	2001      	movs	r0, #1
 800c7fa:	4240      	negs	r0, r0
 800c7fc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c7fe:	2030      	movs	r0, #48	@ 0x30
 800c800:	18e1      	adds	r1, r4, r3
 800c802:	3143      	adds	r1, #67	@ 0x43
 800c804:	7008      	strb	r0, [r1, #0]
 800c806:	0021      	movs	r1, r4
 800c808:	1c5a      	adds	r2, r3, #1
 800c80a:	3145      	adds	r1, #69	@ 0x45
 800c80c:	7809      	ldrb	r1, [r1, #0]
 800c80e:	18a2      	adds	r2, r4, r2
 800c810:	3243      	adds	r2, #67	@ 0x43
 800c812:	3302      	adds	r3, #2
 800c814:	7011      	strb	r1, [r2, #0]
 800c816:	e7c1      	b.n	800c79c <_printf_common+0x4c>
 800c818:	0022      	movs	r2, r4
 800c81a:	2301      	movs	r3, #1
 800c81c:	9901      	ldr	r1, [sp, #4]
 800c81e:	9800      	ldr	r0, [sp, #0]
 800c820:	9f08      	ldr	r7, [sp, #32]
 800c822:	321a      	adds	r2, #26
 800c824:	47b8      	blx	r7
 800c826:	3001      	adds	r0, #1
 800c828:	d0e6      	beq.n	800c7f8 <_printf_common+0xa8>
 800c82a:	3601      	adds	r6, #1
 800c82c:	e7d1      	b.n	800c7d2 <_printf_common+0x82>
	...

0800c830 <_printf_i>:
 800c830:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c832:	b08b      	sub	sp, #44	@ 0x2c
 800c834:	9206      	str	r2, [sp, #24]
 800c836:	000a      	movs	r2, r1
 800c838:	3243      	adds	r2, #67	@ 0x43
 800c83a:	9307      	str	r3, [sp, #28]
 800c83c:	9005      	str	r0, [sp, #20]
 800c83e:	9203      	str	r2, [sp, #12]
 800c840:	7e0a      	ldrb	r2, [r1, #24]
 800c842:	000c      	movs	r4, r1
 800c844:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c846:	2a78      	cmp	r2, #120	@ 0x78
 800c848:	d809      	bhi.n	800c85e <_printf_i+0x2e>
 800c84a:	2a62      	cmp	r2, #98	@ 0x62
 800c84c:	d80b      	bhi.n	800c866 <_printf_i+0x36>
 800c84e:	2a00      	cmp	r2, #0
 800c850:	d100      	bne.n	800c854 <_printf_i+0x24>
 800c852:	e0ba      	b.n	800c9ca <_printf_i+0x19a>
 800c854:	497a      	ldr	r1, [pc, #488]	@ (800ca40 <_printf_i+0x210>)
 800c856:	9104      	str	r1, [sp, #16]
 800c858:	2a58      	cmp	r2, #88	@ 0x58
 800c85a:	d100      	bne.n	800c85e <_printf_i+0x2e>
 800c85c:	e08e      	b.n	800c97c <_printf_i+0x14c>
 800c85e:	0025      	movs	r5, r4
 800c860:	3542      	adds	r5, #66	@ 0x42
 800c862:	702a      	strb	r2, [r5, #0]
 800c864:	e022      	b.n	800c8ac <_printf_i+0x7c>
 800c866:	0010      	movs	r0, r2
 800c868:	3863      	subs	r0, #99	@ 0x63
 800c86a:	2815      	cmp	r0, #21
 800c86c:	d8f7      	bhi.n	800c85e <_printf_i+0x2e>
 800c86e:	f7f3 fc5d 	bl	800012c <__gnu_thumb1_case_shi>
 800c872:	0016      	.short	0x0016
 800c874:	fff6001f 	.word	0xfff6001f
 800c878:	fff6fff6 	.word	0xfff6fff6
 800c87c:	001ffff6 	.word	0x001ffff6
 800c880:	fff6fff6 	.word	0xfff6fff6
 800c884:	fff6fff6 	.word	0xfff6fff6
 800c888:	0036009f 	.word	0x0036009f
 800c88c:	fff6007e 	.word	0xfff6007e
 800c890:	00b0fff6 	.word	0x00b0fff6
 800c894:	0036fff6 	.word	0x0036fff6
 800c898:	fff6fff6 	.word	0xfff6fff6
 800c89c:	0082      	.short	0x0082
 800c89e:	0025      	movs	r5, r4
 800c8a0:	681a      	ldr	r2, [r3, #0]
 800c8a2:	3542      	adds	r5, #66	@ 0x42
 800c8a4:	1d11      	adds	r1, r2, #4
 800c8a6:	6019      	str	r1, [r3, #0]
 800c8a8:	6813      	ldr	r3, [r2, #0]
 800c8aa:	702b      	strb	r3, [r5, #0]
 800c8ac:	2301      	movs	r3, #1
 800c8ae:	e09e      	b.n	800c9ee <_printf_i+0x1be>
 800c8b0:	6818      	ldr	r0, [r3, #0]
 800c8b2:	6809      	ldr	r1, [r1, #0]
 800c8b4:	1d02      	adds	r2, r0, #4
 800c8b6:	060d      	lsls	r5, r1, #24
 800c8b8:	d50b      	bpl.n	800c8d2 <_printf_i+0xa2>
 800c8ba:	6806      	ldr	r6, [r0, #0]
 800c8bc:	601a      	str	r2, [r3, #0]
 800c8be:	2e00      	cmp	r6, #0
 800c8c0:	da03      	bge.n	800c8ca <_printf_i+0x9a>
 800c8c2:	232d      	movs	r3, #45	@ 0x2d
 800c8c4:	9a03      	ldr	r2, [sp, #12]
 800c8c6:	4276      	negs	r6, r6
 800c8c8:	7013      	strb	r3, [r2, #0]
 800c8ca:	4b5d      	ldr	r3, [pc, #372]	@ (800ca40 <_printf_i+0x210>)
 800c8cc:	270a      	movs	r7, #10
 800c8ce:	9304      	str	r3, [sp, #16]
 800c8d0:	e018      	b.n	800c904 <_printf_i+0xd4>
 800c8d2:	6806      	ldr	r6, [r0, #0]
 800c8d4:	601a      	str	r2, [r3, #0]
 800c8d6:	0649      	lsls	r1, r1, #25
 800c8d8:	d5f1      	bpl.n	800c8be <_printf_i+0x8e>
 800c8da:	b236      	sxth	r6, r6
 800c8dc:	e7ef      	b.n	800c8be <_printf_i+0x8e>
 800c8de:	6808      	ldr	r0, [r1, #0]
 800c8e0:	6819      	ldr	r1, [r3, #0]
 800c8e2:	c940      	ldmia	r1!, {r6}
 800c8e4:	0605      	lsls	r5, r0, #24
 800c8e6:	d402      	bmi.n	800c8ee <_printf_i+0xbe>
 800c8e8:	0640      	lsls	r0, r0, #25
 800c8ea:	d500      	bpl.n	800c8ee <_printf_i+0xbe>
 800c8ec:	b2b6      	uxth	r6, r6
 800c8ee:	6019      	str	r1, [r3, #0]
 800c8f0:	4b53      	ldr	r3, [pc, #332]	@ (800ca40 <_printf_i+0x210>)
 800c8f2:	270a      	movs	r7, #10
 800c8f4:	9304      	str	r3, [sp, #16]
 800c8f6:	2a6f      	cmp	r2, #111	@ 0x6f
 800c8f8:	d100      	bne.n	800c8fc <_printf_i+0xcc>
 800c8fa:	3f02      	subs	r7, #2
 800c8fc:	0023      	movs	r3, r4
 800c8fe:	2200      	movs	r2, #0
 800c900:	3343      	adds	r3, #67	@ 0x43
 800c902:	701a      	strb	r2, [r3, #0]
 800c904:	6863      	ldr	r3, [r4, #4]
 800c906:	60a3      	str	r3, [r4, #8]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	db06      	blt.n	800c91a <_printf_i+0xea>
 800c90c:	2104      	movs	r1, #4
 800c90e:	6822      	ldr	r2, [r4, #0]
 800c910:	9d03      	ldr	r5, [sp, #12]
 800c912:	438a      	bics	r2, r1
 800c914:	6022      	str	r2, [r4, #0]
 800c916:	4333      	orrs	r3, r6
 800c918:	d00c      	beq.n	800c934 <_printf_i+0x104>
 800c91a:	9d03      	ldr	r5, [sp, #12]
 800c91c:	0030      	movs	r0, r6
 800c91e:	0039      	movs	r1, r7
 800c920:	f7f3 fc94 	bl	800024c <__aeabi_uidivmod>
 800c924:	9b04      	ldr	r3, [sp, #16]
 800c926:	3d01      	subs	r5, #1
 800c928:	5c5b      	ldrb	r3, [r3, r1]
 800c92a:	702b      	strb	r3, [r5, #0]
 800c92c:	0033      	movs	r3, r6
 800c92e:	0006      	movs	r6, r0
 800c930:	429f      	cmp	r7, r3
 800c932:	d9f3      	bls.n	800c91c <_printf_i+0xec>
 800c934:	2f08      	cmp	r7, #8
 800c936:	d109      	bne.n	800c94c <_printf_i+0x11c>
 800c938:	6823      	ldr	r3, [r4, #0]
 800c93a:	07db      	lsls	r3, r3, #31
 800c93c:	d506      	bpl.n	800c94c <_printf_i+0x11c>
 800c93e:	6862      	ldr	r2, [r4, #4]
 800c940:	6923      	ldr	r3, [r4, #16]
 800c942:	429a      	cmp	r2, r3
 800c944:	dc02      	bgt.n	800c94c <_printf_i+0x11c>
 800c946:	2330      	movs	r3, #48	@ 0x30
 800c948:	3d01      	subs	r5, #1
 800c94a:	702b      	strb	r3, [r5, #0]
 800c94c:	9b03      	ldr	r3, [sp, #12]
 800c94e:	1b5b      	subs	r3, r3, r5
 800c950:	6123      	str	r3, [r4, #16]
 800c952:	9b07      	ldr	r3, [sp, #28]
 800c954:	0021      	movs	r1, r4
 800c956:	9300      	str	r3, [sp, #0]
 800c958:	9805      	ldr	r0, [sp, #20]
 800c95a:	9b06      	ldr	r3, [sp, #24]
 800c95c:	aa09      	add	r2, sp, #36	@ 0x24
 800c95e:	f7ff fef7 	bl	800c750 <_printf_common>
 800c962:	3001      	adds	r0, #1
 800c964:	d148      	bne.n	800c9f8 <_printf_i+0x1c8>
 800c966:	2001      	movs	r0, #1
 800c968:	4240      	negs	r0, r0
 800c96a:	b00b      	add	sp, #44	@ 0x2c
 800c96c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c96e:	2220      	movs	r2, #32
 800c970:	6809      	ldr	r1, [r1, #0]
 800c972:	430a      	orrs	r2, r1
 800c974:	6022      	str	r2, [r4, #0]
 800c976:	2278      	movs	r2, #120	@ 0x78
 800c978:	4932      	ldr	r1, [pc, #200]	@ (800ca44 <_printf_i+0x214>)
 800c97a:	9104      	str	r1, [sp, #16]
 800c97c:	0021      	movs	r1, r4
 800c97e:	3145      	adds	r1, #69	@ 0x45
 800c980:	700a      	strb	r2, [r1, #0]
 800c982:	6819      	ldr	r1, [r3, #0]
 800c984:	6822      	ldr	r2, [r4, #0]
 800c986:	c940      	ldmia	r1!, {r6}
 800c988:	0610      	lsls	r0, r2, #24
 800c98a:	d402      	bmi.n	800c992 <_printf_i+0x162>
 800c98c:	0650      	lsls	r0, r2, #25
 800c98e:	d500      	bpl.n	800c992 <_printf_i+0x162>
 800c990:	b2b6      	uxth	r6, r6
 800c992:	6019      	str	r1, [r3, #0]
 800c994:	07d3      	lsls	r3, r2, #31
 800c996:	d502      	bpl.n	800c99e <_printf_i+0x16e>
 800c998:	2320      	movs	r3, #32
 800c99a:	4313      	orrs	r3, r2
 800c99c:	6023      	str	r3, [r4, #0]
 800c99e:	2e00      	cmp	r6, #0
 800c9a0:	d001      	beq.n	800c9a6 <_printf_i+0x176>
 800c9a2:	2710      	movs	r7, #16
 800c9a4:	e7aa      	b.n	800c8fc <_printf_i+0xcc>
 800c9a6:	2220      	movs	r2, #32
 800c9a8:	6823      	ldr	r3, [r4, #0]
 800c9aa:	4393      	bics	r3, r2
 800c9ac:	6023      	str	r3, [r4, #0]
 800c9ae:	e7f8      	b.n	800c9a2 <_printf_i+0x172>
 800c9b0:	681a      	ldr	r2, [r3, #0]
 800c9b2:	680d      	ldr	r5, [r1, #0]
 800c9b4:	1d10      	adds	r0, r2, #4
 800c9b6:	6949      	ldr	r1, [r1, #20]
 800c9b8:	6018      	str	r0, [r3, #0]
 800c9ba:	6813      	ldr	r3, [r2, #0]
 800c9bc:	062e      	lsls	r6, r5, #24
 800c9be:	d501      	bpl.n	800c9c4 <_printf_i+0x194>
 800c9c0:	6019      	str	r1, [r3, #0]
 800c9c2:	e002      	b.n	800c9ca <_printf_i+0x19a>
 800c9c4:	066d      	lsls	r5, r5, #25
 800c9c6:	d5fb      	bpl.n	800c9c0 <_printf_i+0x190>
 800c9c8:	8019      	strh	r1, [r3, #0]
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	9d03      	ldr	r5, [sp, #12]
 800c9ce:	6123      	str	r3, [r4, #16]
 800c9d0:	e7bf      	b.n	800c952 <_printf_i+0x122>
 800c9d2:	681a      	ldr	r2, [r3, #0]
 800c9d4:	1d11      	adds	r1, r2, #4
 800c9d6:	6019      	str	r1, [r3, #0]
 800c9d8:	6815      	ldr	r5, [r2, #0]
 800c9da:	2100      	movs	r1, #0
 800c9dc:	0028      	movs	r0, r5
 800c9de:	6862      	ldr	r2, [r4, #4]
 800c9e0:	f000 fabe 	bl	800cf60 <memchr>
 800c9e4:	2800      	cmp	r0, #0
 800c9e6:	d001      	beq.n	800c9ec <_printf_i+0x1bc>
 800c9e8:	1b40      	subs	r0, r0, r5
 800c9ea:	6060      	str	r0, [r4, #4]
 800c9ec:	6863      	ldr	r3, [r4, #4]
 800c9ee:	6123      	str	r3, [r4, #16]
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	9a03      	ldr	r2, [sp, #12]
 800c9f4:	7013      	strb	r3, [r2, #0]
 800c9f6:	e7ac      	b.n	800c952 <_printf_i+0x122>
 800c9f8:	002a      	movs	r2, r5
 800c9fa:	6923      	ldr	r3, [r4, #16]
 800c9fc:	9906      	ldr	r1, [sp, #24]
 800c9fe:	9805      	ldr	r0, [sp, #20]
 800ca00:	9d07      	ldr	r5, [sp, #28]
 800ca02:	47a8      	blx	r5
 800ca04:	3001      	adds	r0, #1
 800ca06:	d0ae      	beq.n	800c966 <_printf_i+0x136>
 800ca08:	6823      	ldr	r3, [r4, #0]
 800ca0a:	079b      	lsls	r3, r3, #30
 800ca0c:	d415      	bmi.n	800ca3a <_printf_i+0x20a>
 800ca0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca10:	68e0      	ldr	r0, [r4, #12]
 800ca12:	4298      	cmp	r0, r3
 800ca14:	daa9      	bge.n	800c96a <_printf_i+0x13a>
 800ca16:	0018      	movs	r0, r3
 800ca18:	e7a7      	b.n	800c96a <_printf_i+0x13a>
 800ca1a:	0022      	movs	r2, r4
 800ca1c:	2301      	movs	r3, #1
 800ca1e:	9906      	ldr	r1, [sp, #24]
 800ca20:	9805      	ldr	r0, [sp, #20]
 800ca22:	9e07      	ldr	r6, [sp, #28]
 800ca24:	3219      	adds	r2, #25
 800ca26:	47b0      	blx	r6
 800ca28:	3001      	adds	r0, #1
 800ca2a:	d09c      	beq.n	800c966 <_printf_i+0x136>
 800ca2c:	3501      	adds	r5, #1
 800ca2e:	68e3      	ldr	r3, [r4, #12]
 800ca30:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ca32:	1a9b      	subs	r3, r3, r2
 800ca34:	42ab      	cmp	r3, r5
 800ca36:	dcf0      	bgt.n	800ca1a <_printf_i+0x1ea>
 800ca38:	e7e9      	b.n	800ca0e <_printf_i+0x1de>
 800ca3a:	2500      	movs	r5, #0
 800ca3c:	e7f7      	b.n	800ca2e <_printf_i+0x1fe>
 800ca3e:	46c0      	nop			@ (mov r8, r8)
 800ca40:	0800e31b 	.word	0x0800e31b
 800ca44:	0800e32c 	.word	0x0800e32c

0800ca48 <__sflush_r>:
 800ca48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ca4a:	220c      	movs	r2, #12
 800ca4c:	5e8b      	ldrsh	r3, [r1, r2]
 800ca4e:	0005      	movs	r5, r0
 800ca50:	000c      	movs	r4, r1
 800ca52:	071a      	lsls	r2, r3, #28
 800ca54:	d456      	bmi.n	800cb04 <__sflush_r+0xbc>
 800ca56:	684a      	ldr	r2, [r1, #4]
 800ca58:	2a00      	cmp	r2, #0
 800ca5a:	dc02      	bgt.n	800ca62 <__sflush_r+0x1a>
 800ca5c:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800ca5e:	2a00      	cmp	r2, #0
 800ca60:	dd4e      	ble.n	800cb00 <__sflush_r+0xb8>
 800ca62:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800ca64:	2f00      	cmp	r7, #0
 800ca66:	d04b      	beq.n	800cb00 <__sflush_r+0xb8>
 800ca68:	2200      	movs	r2, #0
 800ca6a:	2080      	movs	r0, #128	@ 0x80
 800ca6c:	682e      	ldr	r6, [r5, #0]
 800ca6e:	602a      	str	r2, [r5, #0]
 800ca70:	001a      	movs	r2, r3
 800ca72:	0140      	lsls	r0, r0, #5
 800ca74:	6a21      	ldr	r1, [r4, #32]
 800ca76:	4002      	ands	r2, r0
 800ca78:	4203      	tst	r3, r0
 800ca7a:	d033      	beq.n	800cae4 <__sflush_r+0x9c>
 800ca7c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ca7e:	89a3      	ldrh	r3, [r4, #12]
 800ca80:	075b      	lsls	r3, r3, #29
 800ca82:	d506      	bpl.n	800ca92 <__sflush_r+0x4a>
 800ca84:	6863      	ldr	r3, [r4, #4]
 800ca86:	1ad2      	subs	r2, r2, r3
 800ca88:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d001      	beq.n	800ca92 <__sflush_r+0x4a>
 800ca8e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ca90:	1ad2      	subs	r2, r2, r3
 800ca92:	2300      	movs	r3, #0
 800ca94:	0028      	movs	r0, r5
 800ca96:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800ca98:	6a21      	ldr	r1, [r4, #32]
 800ca9a:	47b8      	blx	r7
 800ca9c:	89a2      	ldrh	r2, [r4, #12]
 800ca9e:	1c43      	adds	r3, r0, #1
 800caa0:	d106      	bne.n	800cab0 <__sflush_r+0x68>
 800caa2:	6829      	ldr	r1, [r5, #0]
 800caa4:	291d      	cmp	r1, #29
 800caa6:	d846      	bhi.n	800cb36 <__sflush_r+0xee>
 800caa8:	4b29      	ldr	r3, [pc, #164]	@ (800cb50 <__sflush_r+0x108>)
 800caaa:	40cb      	lsrs	r3, r1
 800caac:	07db      	lsls	r3, r3, #31
 800caae:	d542      	bpl.n	800cb36 <__sflush_r+0xee>
 800cab0:	2300      	movs	r3, #0
 800cab2:	6063      	str	r3, [r4, #4]
 800cab4:	6923      	ldr	r3, [r4, #16]
 800cab6:	6023      	str	r3, [r4, #0]
 800cab8:	04d2      	lsls	r2, r2, #19
 800caba:	d505      	bpl.n	800cac8 <__sflush_r+0x80>
 800cabc:	1c43      	adds	r3, r0, #1
 800cabe:	d102      	bne.n	800cac6 <__sflush_r+0x7e>
 800cac0:	682b      	ldr	r3, [r5, #0]
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d100      	bne.n	800cac8 <__sflush_r+0x80>
 800cac6:	6560      	str	r0, [r4, #84]	@ 0x54
 800cac8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800caca:	602e      	str	r6, [r5, #0]
 800cacc:	2900      	cmp	r1, #0
 800cace:	d017      	beq.n	800cb00 <__sflush_r+0xb8>
 800cad0:	0023      	movs	r3, r4
 800cad2:	3344      	adds	r3, #68	@ 0x44
 800cad4:	4299      	cmp	r1, r3
 800cad6:	d002      	beq.n	800cade <__sflush_r+0x96>
 800cad8:	0028      	movs	r0, r5
 800cada:	f7ff fbd3 	bl	800c284 <_free_r>
 800cade:	2300      	movs	r3, #0
 800cae0:	6363      	str	r3, [r4, #52]	@ 0x34
 800cae2:	e00d      	b.n	800cb00 <__sflush_r+0xb8>
 800cae4:	2301      	movs	r3, #1
 800cae6:	0028      	movs	r0, r5
 800cae8:	47b8      	blx	r7
 800caea:	0002      	movs	r2, r0
 800caec:	1c43      	adds	r3, r0, #1
 800caee:	d1c6      	bne.n	800ca7e <__sflush_r+0x36>
 800caf0:	682b      	ldr	r3, [r5, #0]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d0c3      	beq.n	800ca7e <__sflush_r+0x36>
 800caf6:	2b1d      	cmp	r3, #29
 800caf8:	d001      	beq.n	800cafe <__sflush_r+0xb6>
 800cafa:	2b16      	cmp	r3, #22
 800cafc:	d11a      	bne.n	800cb34 <__sflush_r+0xec>
 800cafe:	602e      	str	r6, [r5, #0]
 800cb00:	2000      	movs	r0, #0
 800cb02:	e01e      	b.n	800cb42 <__sflush_r+0xfa>
 800cb04:	690e      	ldr	r6, [r1, #16]
 800cb06:	2e00      	cmp	r6, #0
 800cb08:	d0fa      	beq.n	800cb00 <__sflush_r+0xb8>
 800cb0a:	680f      	ldr	r7, [r1, #0]
 800cb0c:	600e      	str	r6, [r1, #0]
 800cb0e:	1bba      	subs	r2, r7, r6
 800cb10:	9201      	str	r2, [sp, #4]
 800cb12:	2200      	movs	r2, #0
 800cb14:	079b      	lsls	r3, r3, #30
 800cb16:	d100      	bne.n	800cb1a <__sflush_r+0xd2>
 800cb18:	694a      	ldr	r2, [r1, #20]
 800cb1a:	60a2      	str	r2, [r4, #8]
 800cb1c:	9b01      	ldr	r3, [sp, #4]
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	ddee      	ble.n	800cb00 <__sflush_r+0xb8>
 800cb22:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800cb24:	0032      	movs	r2, r6
 800cb26:	001f      	movs	r7, r3
 800cb28:	0028      	movs	r0, r5
 800cb2a:	9b01      	ldr	r3, [sp, #4]
 800cb2c:	6a21      	ldr	r1, [r4, #32]
 800cb2e:	47b8      	blx	r7
 800cb30:	2800      	cmp	r0, #0
 800cb32:	dc07      	bgt.n	800cb44 <__sflush_r+0xfc>
 800cb34:	89a2      	ldrh	r2, [r4, #12]
 800cb36:	2340      	movs	r3, #64	@ 0x40
 800cb38:	2001      	movs	r0, #1
 800cb3a:	4313      	orrs	r3, r2
 800cb3c:	b21b      	sxth	r3, r3
 800cb3e:	81a3      	strh	r3, [r4, #12]
 800cb40:	4240      	negs	r0, r0
 800cb42:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cb44:	9b01      	ldr	r3, [sp, #4]
 800cb46:	1836      	adds	r6, r6, r0
 800cb48:	1a1b      	subs	r3, r3, r0
 800cb4a:	9301      	str	r3, [sp, #4]
 800cb4c:	e7e6      	b.n	800cb1c <__sflush_r+0xd4>
 800cb4e:	46c0      	nop			@ (mov r8, r8)
 800cb50:	20400001 	.word	0x20400001

0800cb54 <_fflush_r>:
 800cb54:	690b      	ldr	r3, [r1, #16]
 800cb56:	b570      	push	{r4, r5, r6, lr}
 800cb58:	0005      	movs	r5, r0
 800cb5a:	000c      	movs	r4, r1
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d102      	bne.n	800cb66 <_fflush_r+0x12>
 800cb60:	2500      	movs	r5, #0
 800cb62:	0028      	movs	r0, r5
 800cb64:	bd70      	pop	{r4, r5, r6, pc}
 800cb66:	2800      	cmp	r0, #0
 800cb68:	d004      	beq.n	800cb74 <_fflush_r+0x20>
 800cb6a:	6a03      	ldr	r3, [r0, #32]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d101      	bne.n	800cb74 <_fflush_r+0x20>
 800cb70:	f7fe fa82 	bl	800b078 <__sinit>
 800cb74:	220c      	movs	r2, #12
 800cb76:	5ea3      	ldrsh	r3, [r4, r2]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d0f1      	beq.n	800cb60 <_fflush_r+0xc>
 800cb7c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cb7e:	07d2      	lsls	r2, r2, #31
 800cb80:	d404      	bmi.n	800cb8c <_fflush_r+0x38>
 800cb82:	059b      	lsls	r3, r3, #22
 800cb84:	d402      	bmi.n	800cb8c <_fflush_r+0x38>
 800cb86:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cb88:	f7ff fb5e 	bl	800c248 <__retarget_lock_acquire_recursive>
 800cb8c:	0028      	movs	r0, r5
 800cb8e:	0021      	movs	r1, r4
 800cb90:	f7ff ff5a 	bl	800ca48 <__sflush_r>
 800cb94:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cb96:	0005      	movs	r5, r0
 800cb98:	07db      	lsls	r3, r3, #31
 800cb9a:	d4e2      	bmi.n	800cb62 <_fflush_r+0xe>
 800cb9c:	89a3      	ldrh	r3, [r4, #12]
 800cb9e:	059b      	lsls	r3, r3, #22
 800cba0:	d4df      	bmi.n	800cb62 <_fflush_r+0xe>
 800cba2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cba4:	f7ff fb52 	bl	800c24c <__retarget_lock_release_recursive>
 800cba8:	e7db      	b.n	800cb62 <_fflush_r+0xe>
	...

0800cbac <__swhatbuf_r>:
 800cbac:	b570      	push	{r4, r5, r6, lr}
 800cbae:	000e      	movs	r6, r1
 800cbb0:	001d      	movs	r5, r3
 800cbb2:	230e      	movs	r3, #14
 800cbb4:	5ec9      	ldrsh	r1, [r1, r3]
 800cbb6:	0014      	movs	r4, r2
 800cbb8:	b096      	sub	sp, #88	@ 0x58
 800cbba:	2900      	cmp	r1, #0
 800cbbc:	da0c      	bge.n	800cbd8 <__swhatbuf_r+0x2c>
 800cbbe:	89b2      	ldrh	r2, [r6, #12]
 800cbc0:	2380      	movs	r3, #128	@ 0x80
 800cbc2:	0011      	movs	r1, r2
 800cbc4:	4019      	ands	r1, r3
 800cbc6:	421a      	tst	r2, r3
 800cbc8:	d114      	bne.n	800cbf4 <__swhatbuf_r+0x48>
 800cbca:	2380      	movs	r3, #128	@ 0x80
 800cbcc:	00db      	lsls	r3, r3, #3
 800cbce:	2000      	movs	r0, #0
 800cbd0:	6029      	str	r1, [r5, #0]
 800cbd2:	6023      	str	r3, [r4, #0]
 800cbd4:	b016      	add	sp, #88	@ 0x58
 800cbd6:	bd70      	pop	{r4, r5, r6, pc}
 800cbd8:	466a      	mov	r2, sp
 800cbda:	f000 f99d 	bl	800cf18 <_fstat_r>
 800cbde:	2800      	cmp	r0, #0
 800cbe0:	dbed      	blt.n	800cbbe <__swhatbuf_r+0x12>
 800cbe2:	23f0      	movs	r3, #240	@ 0xf0
 800cbe4:	9901      	ldr	r1, [sp, #4]
 800cbe6:	021b      	lsls	r3, r3, #8
 800cbe8:	4019      	ands	r1, r3
 800cbea:	4b04      	ldr	r3, [pc, #16]	@ (800cbfc <__swhatbuf_r+0x50>)
 800cbec:	18c9      	adds	r1, r1, r3
 800cbee:	424b      	negs	r3, r1
 800cbf0:	4159      	adcs	r1, r3
 800cbf2:	e7ea      	b.n	800cbca <__swhatbuf_r+0x1e>
 800cbf4:	2100      	movs	r1, #0
 800cbf6:	2340      	movs	r3, #64	@ 0x40
 800cbf8:	e7e9      	b.n	800cbce <__swhatbuf_r+0x22>
 800cbfa:	46c0      	nop			@ (mov r8, r8)
 800cbfc:	ffffe000 	.word	0xffffe000

0800cc00 <__smakebuf_r>:
 800cc00:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc02:	2602      	movs	r6, #2
 800cc04:	898b      	ldrh	r3, [r1, #12]
 800cc06:	0005      	movs	r5, r0
 800cc08:	000c      	movs	r4, r1
 800cc0a:	b085      	sub	sp, #20
 800cc0c:	4233      	tst	r3, r6
 800cc0e:	d007      	beq.n	800cc20 <__smakebuf_r+0x20>
 800cc10:	0023      	movs	r3, r4
 800cc12:	3347      	adds	r3, #71	@ 0x47
 800cc14:	6023      	str	r3, [r4, #0]
 800cc16:	6123      	str	r3, [r4, #16]
 800cc18:	2301      	movs	r3, #1
 800cc1a:	6163      	str	r3, [r4, #20]
 800cc1c:	b005      	add	sp, #20
 800cc1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc20:	ab03      	add	r3, sp, #12
 800cc22:	aa02      	add	r2, sp, #8
 800cc24:	f7ff ffc2 	bl	800cbac <__swhatbuf_r>
 800cc28:	9f02      	ldr	r7, [sp, #8]
 800cc2a:	9001      	str	r0, [sp, #4]
 800cc2c:	0039      	movs	r1, r7
 800cc2e:	0028      	movs	r0, r5
 800cc30:	f7fe f8f8 	bl	800ae24 <_malloc_r>
 800cc34:	2800      	cmp	r0, #0
 800cc36:	d108      	bne.n	800cc4a <__smakebuf_r+0x4a>
 800cc38:	220c      	movs	r2, #12
 800cc3a:	5ea3      	ldrsh	r3, [r4, r2]
 800cc3c:	059a      	lsls	r2, r3, #22
 800cc3e:	d4ed      	bmi.n	800cc1c <__smakebuf_r+0x1c>
 800cc40:	2203      	movs	r2, #3
 800cc42:	4393      	bics	r3, r2
 800cc44:	431e      	orrs	r6, r3
 800cc46:	81a6      	strh	r6, [r4, #12]
 800cc48:	e7e2      	b.n	800cc10 <__smakebuf_r+0x10>
 800cc4a:	2380      	movs	r3, #128	@ 0x80
 800cc4c:	89a2      	ldrh	r2, [r4, #12]
 800cc4e:	6020      	str	r0, [r4, #0]
 800cc50:	4313      	orrs	r3, r2
 800cc52:	81a3      	strh	r3, [r4, #12]
 800cc54:	9b03      	ldr	r3, [sp, #12]
 800cc56:	6120      	str	r0, [r4, #16]
 800cc58:	6167      	str	r7, [r4, #20]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d00c      	beq.n	800cc78 <__smakebuf_r+0x78>
 800cc5e:	0028      	movs	r0, r5
 800cc60:	230e      	movs	r3, #14
 800cc62:	5ee1      	ldrsh	r1, [r4, r3]
 800cc64:	f000 f96a 	bl	800cf3c <_isatty_r>
 800cc68:	2800      	cmp	r0, #0
 800cc6a:	d005      	beq.n	800cc78 <__smakebuf_r+0x78>
 800cc6c:	2303      	movs	r3, #3
 800cc6e:	89a2      	ldrh	r2, [r4, #12]
 800cc70:	439a      	bics	r2, r3
 800cc72:	3b02      	subs	r3, #2
 800cc74:	4313      	orrs	r3, r2
 800cc76:	81a3      	strh	r3, [r4, #12]
 800cc78:	89a3      	ldrh	r3, [r4, #12]
 800cc7a:	9a01      	ldr	r2, [sp, #4]
 800cc7c:	4313      	orrs	r3, r2
 800cc7e:	81a3      	strh	r3, [r4, #12]
 800cc80:	e7cc      	b.n	800cc1c <__smakebuf_r+0x1c>

0800cc82 <_putc_r>:
 800cc82:	b570      	push	{r4, r5, r6, lr}
 800cc84:	0006      	movs	r6, r0
 800cc86:	000d      	movs	r5, r1
 800cc88:	0014      	movs	r4, r2
 800cc8a:	2800      	cmp	r0, #0
 800cc8c:	d004      	beq.n	800cc98 <_putc_r+0x16>
 800cc8e:	6a03      	ldr	r3, [r0, #32]
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d101      	bne.n	800cc98 <_putc_r+0x16>
 800cc94:	f7fe f9f0 	bl	800b078 <__sinit>
 800cc98:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cc9a:	07db      	lsls	r3, r3, #31
 800cc9c:	d405      	bmi.n	800ccaa <_putc_r+0x28>
 800cc9e:	89a3      	ldrh	r3, [r4, #12]
 800cca0:	059b      	lsls	r3, r3, #22
 800cca2:	d402      	bmi.n	800ccaa <_putc_r+0x28>
 800cca4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cca6:	f7ff facf 	bl	800c248 <__retarget_lock_acquire_recursive>
 800ccaa:	68a3      	ldr	r3, [r4, #8]
 800ccac:	3b01      	subs	r3, #1
 800ccae:	60a3      	str	r3, [r4, #8]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	da05      	bge.n	800ccc0 <_putc_r+0x3e>
 800ccb4:	69a2      	ldr	r2, [r4, #24]
 800ccb6:	4293      	cmp	r3, r2
 800ccb8:	db12      	blt.n	800cce0 <_putc_r+0x5e>
 800ccba:	b2eb      	uxtb	r3, r5
 800ccbc:	2b0a      	cmp	r3, #10
 800ccbe:	d00f      	beq.n	800cce0 <_putc_r+0x5e>
 800ccc0:	6823      	ldr	r3, [r4, #0]
 800ccc2:	1c5a      	adds	r2, r3, #1
 800ccc4:	6022      	str	r2, [r4, #0]
 800ccc6:	701d      	strb	r5, [r3, #0]
 800ccc8:	b2ed      	uxtb	r5, r5
 800ccca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cccc:	07db      	lsls	r3, r3, #31
 800ccce:	d405      	bmi.n	800ccdc <_putc_r+0x5a>
 800ccd0:	89a3      	ldrh	r3, [r4, #12]
 800ccd2:	059b      	lsls	r3, r3, #22
 800ccd4:	d402      	bmi.n	800ccdc <_putc_r+0x5a>
 800ccd6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ccd8:	f7ff fab8 	bl	800c24c <__retarget_lock_release_recursive>
 800ccdc:	0028      	movs	r0, r5
 800ccde:	bd70      	pop	{r4, r5, r6, pc}
 800cce0:	0029      	movs	r1, r5
 800cce2:	0022      	movs	r2, r4
 800cce4:	0030      	movs	r0, r6
 800cce6:	f7fe fac3 	bl	800b270 <__swbuf_r>
 800ccea:	0005      	movs	r5, r0
 800ccec:	e7ed      	b.n	800ccca <_putc_r+0x48>
	...

0800ccf0 <siscanf>:
 800ccf0:	b40e      	push	{r1, r2, r3}
 800ccf2:	b570      	push	{r4, r5, r6, lr}
 800ccf4:	2381      	movs	r3, #129	@ 0x81
 800ccf6:	b09d      	sub	sp, #116	@ 0x74
 800ccf8:	466a      	mov	r2, sp
 800ccfa:	2500      	movs	r5, #0
 800ccfc:	ac21      	add	r4, sp, #132	@ 0x84
 800ccfe:	009b      	lsls	r3, r3, #2
 800cd00:	cc40      	ldmia	r4!, {r6}
 800cd02:	8293      	strh	r3, [r2, #20]
 800cd04:	951b      	str	r5, [sp, #108]	@ 0x6c
 800cd06:	9002      	str	r0, [sp, #8]
 800cd08:	9006      	str	r0, [sp, #24]
 800cd0a:	f7f3 fa07 	bl	800011c <strlen>
 800cd0e:	4b0b      	ldr	r3, [pc, #44]	@ (800cd3c <siscanf+0x4c>)
 800cd10:	466a      	mov	r2, sp
 800cd12:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cd14:	2301      	movs	r3, #1
 800cd16:	9003      	str	r0, [sp, #12]
 800cd18:	9007      	str	r0, [sp, #28]
 800cd1a:	4809      	ldr	r0, [pc, #36]	@ (800cd40 <siscanf+0x50>)
 800cd1c:	425b      	negs	r3, r3
 800cd1e:	82d3      	strh	r3, [r2, #22]
 800cd20:	a902      	add	r1, sp, #8
 800cd22:	0023      	movs	r3, r4
 800cd24:	0032      	movs	r2, r6
 800cd26:	6800      	ldr	r0, [r0, #0]
 800cd28:	950f      	str	r5, [sp, #60]	@ 0x3c
 800cd2a:	9514      	str	r5, [sp, #80]	@ 0x50
 800cd2c:	9401      	str	r4, [sp, #4]
 800cd2e:	f000 f9bf 	bl	800d0b0 <__ssvfiscanf_r>
 800cd32:	b01d      	add	sp, #116	@ 0x74
 800cd34:	bc70      	pop	{r4, r5, r6}
 800cd36:	bc08      	pop	{r3}
 800cd38:	b003      	add	sp, #12
 800cd3a:	4718      	bx	r3
 800cd3c:	0800b1fd 	.word	0x0800b1fd
 800cd40:	20000058 	.word	0x20000058

0800cd44 <strncmp>:
 800cd44:	b530      	push	{r4, r5, lr}
 800cd46:	0005      	movs	r5, r0
 800cd48:	1e10      	subs	r0, r2, #0
 800cd4a:	d00b      	beq.n	800cd64 <strncmp+0x20>
 800cd4c:	2400      	movs	r4, #0
 800cd4e:	3a01      	subs	r2, #1
 800cd50:	5d2b      	ldrb	r3, [r5, r4]
 800cd52:	5d08      	ldrb	r0, [r1, r4]
 800cd54:	4283      	cmp	r3, r0
 800cd56:	d104      	bne.n	800cd62 <strncmp+0x1e>
 800cd58:	4294      	cmp	r4, r2
 800cd5a:	d002      	beq.n	800cd62 <strncmp+0x1e>
 800cd5c:	3401      	adds	r4, #1
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d1f6      	bne.n	800cd50 <strncmp+0xc>
 800cd62:	1a18      	subs	r0, r3, r0
 800cd64:	bd30      	pop	{r4, r5, pc}
	...

0800cd68 <__gettzinfo>:
 800cd68:	4800      	ldr	r0, [pc, #0]	@ (800cd6c <__gettzinfo+0x4>)
 800cd6a:	4770      	bx	lr
 800cd6c:	200000a8 	.word	0x200000a8

0800cd70 <gmtime_r>:
 800cd70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd72:	2300      	movs	r3, #0
 800cd74:	000c      	movs	r4, r1
 800cd76:	6841      	ldr	r1, [r0, #4]
 800cd78:	6800      	ldr	r0, [r0, #0]
 800cd7a:	4a59      	ldr	r2, [pc, #356]	@ (800cee0 <gmtime_r+0x170>)
 800cd7c:	b085      	sub	sp, #20
 800cd7e:	f7f3 fb55 	bl	800042c <__aeabi_ldivmod>
 800cd82:	1e15      	subs	r5, r2, #0
 800cd84:	da00      	bge.n	800cd88 <gmtime_r+0x18>
 800cd86:	e08a      	b.n	800ce9e <gmtime_r+0x12e>
 800cd88:	4b56      	ldr	r3, [pc, #344]	@ (800cee4 <gmtime_r+0x174>)
 800cd8a:	21e1      	movs	r1, #225	@ 0xe1
 800cd8c:	18c6      	adds	r6, r0, r3
 800cd8e:	0109      	lsls	r1, r1, #4
 800cd90:	0028      	movs	r0, r5
 800cd92:	f7f3 fa5f 	bl	8000254 <__divsi3>
 800cd96:	21e1      	movs	r1, #225	@ 0xe1
 800cd98:	60a0      	str	r0, [r4, #8]
 800cd9a:	0109      	lsls	r1, r1, #4
 800cd9c:	0028      	movs	r0, r5
 800cd9e:	f7f3 fb3f 	bl	8000420 <__aeabi_idivmod>
 800cda2:	000d      	movs	r5, r1
 800cda4:	213c      	movs	r1, #60	@ 0x3c
 800cda6:	0028      	movs	r0, r5
 800cda8:	f7f3 fa54 	bl	8000254 <__divsi3>
 800cdac:	213c      	movs	r1, #60	@ 0x3c
 800cdae:	6060      	str	r0, [r4, #4]
 800cdb0:	0028      	movs	r0, r5
 800cdb2:	f7f3 fb35 	bl	8000420 <__aeabi_idivmod>
 800cdb6:	1cf0      	adds	r0, r6, #3
 800cdb8:	6021      	str	r1, [r4, #0]
 800cdba:	2107      	movs	r1, #7
 800cdbc:	f7f3 fb30 	bl	8000420 <__aeabi_idivmod>
 800cdc0:	2900      	cmp	r1, #0
 800cdc2:	db00      	blt.n	800cdc6 <gmtime_r+0x56>
 800cdc4:	e06f      	b.n	800cea6 <gmtime_r+0x136>
 800cdc6:	3107      	adds	r1, #7
 800cdc8:	61a1      	str	r1, [r4, #24]
 800cdca:	4b47      	ldr	r3, [pc, #284]	@ (800cee8 <gmtime_r+0x178>)
 800cdcc:	4947      	ldr	r1, [pc, #284]	@ (800ceec <gmtime_r+0x17c>)
 800cdce:	18f0      	adds	r0, r6, r3
 800cdd0:	f7f3 fa40 	bl	8000254 <__divsi3>
 800cdd4:	9001      	str	r0, [sp, #4]
 800cdd6:	9b01      	ldr	r3, [sp, #4]
 800cdd8:	4d45      	ldr	r5, [pc, #276]	@ (800cef0 <gmtime_r+0x180>)
 800cdda:	4946      	ldr	r1, [pc, #280]	@ (800cef4 <gmtime_r+0x184>)
 800cddc:	435d      	muls	r5, r3
 800cdde:	19ad      	adds	r5, r5, r6
 800cde0:	0028      	movs	r0, r5
 800cde2:	f7f3 f9ad 	bl	8000140 <__udivsi3>
 800cde6:	4944      	ldr	r1, [pc, #272]	@ (800cef8 <gmtime_r+0x188>)
 800cde8:	1946      	adds	r6, r0, r5
 800cdea:	0028      	movs	r0, r5
 800cdec:	f7f3 f9a8 	bl	8000140 <__udivsi3>
 800cdf0:	4942      	ldr	r1, [pc, #264]	@ (800cefc <gmtime_r+0x18c>)
 800cdf2:	1a36      	subs	r6, r6, r0
 800cdf4:	0028      	movs	r0, r5
 800cdf6:	f7f3 f9a3 	bl	8000140 <__udivsi3>
 800cdfa:	216e      	movs	r1, #110	@ 0x6e
 800cdfc:	1a36      	subs	r6, r6, r0
 800cdfe:	0030      	movs	r0, r6
 800ce00:	31ff      	adds	r1, #255	@ 0xff
 800ce02:	f7f3 f99d 	bl	8000140 <__udivsi3>
 800ce06:	2164      	movs	r1, #100	@ 0x64
 800ce08:	0007      	movs	r7, r0
 800ce0a:	f7f3 f999 	bl	8000140 <__udivsi3>
 800ce0e:	493a      	ldr	r1, [pc, #232]	@ (800cef8 <gmtime_r+0x188>)
 800ce10:	9000      	str	r0, [sp, #0]
 800ce12:	0030      	movs	r0, r6
 800ce14:	f7f3 f994 	bl	8000140 <__udivsi3>
 800ce18:	9b00      	ldr	r3, [sp, #0]
 800ce1a:	2605      	movs	r6, #5
 800ce1c:	1a18      	subs	r0, r3, r0
 800ce1e:	236e      	movs	r3, #110	@ 0x6e
 800ce20:	33ff      	adds	r3, #255	@ 0xff
 800ce22:	437b      	muls	r3, r7
 800ce24:	1940      	adds	r0, r0, r5
 800ce26:	1ac3      	subs	r3, r0, r3
 800ce28:	9300      	str	r3, [sp, #0]
 800ce2a:	4373      	muls	r3, r6
 800ce2c:	3302      	adds	r3, #2
 800ce2e:	2199      	movs	r1, #153	@ 0x99
 800ce30:	0018      	movs	r0, r3
 800ce32:	9302      	str	r3, [sp, #8]
 800ce34:	f7f3 f984 	bl	8000140 <__udivsi3>
 800ce38:	0005      	movs	r5, r0
 800ce3a:	2099      	movs	r0, #153	@ 0x99
 800ce3c:	4368      	muls	r0, r5
 800ce3e:	9b00      	ldr	r3, [sp, #0]
 800ce40:	0031      	movs	r1, r6
 800ce42:	3301      	adds	r3, #1
 800ce44:	3002      	adds	r0, #2
 800ce46:	9303      	str	r3, [sp, #12]
 800ce48:	f7f3 f97a 	bl	8000140 <__udivsi3>
 800ce4c:	9b03      	ldr	r3, [sp, #12]
 800ce4e:	9a02      	ldr	r2, [sp, #8]
 800ce50:	1a1b      	subs	r3, r3, r0
 800ce52:	469c      	mov	ip, r3
 800ce54:	4b2a      	ldr	r3, [pc, #168]	@ (800cf00 <gmtime_r+0x190>)
 800ce56:	2002      	movs	r0, #2
 800ce58:	429a      	cmp	r2, r3
 800ce5a:	d901      	bls.n	800ce60 <gmtime_r+0xf0>
 800ce5c:	200a      	movs	r0, #10
 800ce5e:	4240      	negs	r0, r0
 800ce60:	23c8      	movs	r3, #200	@ 0xc8
 800ce62:	9a01      	ldr	r2, [sp, #4]
 800ce64:	005b      	lsls	r3, r3, #1
 800ce66:	4353      	muls	r3, r2
 800ce68:	2100      	movs	r1, #0
 800ce6a:	2201      	movs	r2, #1
 800ce6c:	1940      	adds	r0, r0, r5
 800ce6e:	4282      	cmp	r2, r0
 800ce70:	4149      	adcs	r1, r1
 800ce72:	19db      	adds	r3, r3, r7
 800ce74:	185b      	adds	r3, r3, r1
 800ce76:	2199      	movs	r1, #153	@ 0x99
 800ce78:	9d00      	ldr	r5, [sp, #0]
 800ce7a:	0049      	lsls	r1, r1, #1
 800ce7c:	428d      	cmp	r5, r1
 800ce7e:	d319      	bcc.n	800ceb4 <gmtime_r+0x144>
 800ce80:	002a      	movs	r2, r5
 800ce82:	3a33      	subs	r2, #51	@ 0x33
 800ce84:	3aff      	subs	r2, #255	@ 0xff
 800ce86:	61e2      	str	r2, [r4, #28]
 800ce88:	4a1e      	ldr	r2, [pc, #120]	@ (800cf04 <gmtime_r+0x194>)
 800ce8a:	6120      	str	r0, [r4, #16]
 800ce8c:	189b      	adds	r3, r3, r2
 800ce8e:	6163      	str	r3, [r4, #20]
 800ce90:	4663      	mov	r3, ip
 800ce92:	0020      	movs	r0, r4
 800ce94:	60e3      	str	r3, [r4, #12]
 800ce96:	2300      	movs	r3, #0
 800ce98:	6223      	str	r3, [r4, #32]
 800ce9a:	b005      	add	sp, #20
 800ce9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce9e:	4b10      	ldr	r3, [pc, #64]	@ (800cee0 <gmtime_r+0x170>)
 800cea0:	18ed      	adds	r5, r5, r3
 800cea2:	4b19      	ldr	r3, [pc, #100]	@ (800cf08 <gmtime_r+0x198>)
 800cea4:	e771      	b.n	800cd8a <gmtime_r+0x1a>
 800cea6:	61a1      	str	r1, [r4, #24]
 800cea8:	2e00      	cmp	r6, #0
 800ceaa:	da00      	bge.n	800ceae <gmtime_r+0x13e>
 800ceac:	e78d      	b.n	800cdca <gmtime_r+0x5a>
 800ceae:	0030      	movs	r0, r6
 800ceb0:	490e      	ldr	r1, [pc, #56]	@ (800ceec <gmtime_r+0x17c>)
 800ceb2:	e78d      	b.n	800cdd0 <gmtime_r+0x60>
 800ceb4:	4915      	ldr	r1, [pc, #84]	@ (800cf0c <gmtime_r+0x19c>)
 800ceb6:	07bd      	lsls	r5, r7, #30
 800ceb8:	d106      	bne.n	800cec8 <gmtime_r+0x158>
 800ceba:	000d      	movs	r5, r1
 800cebc:	2602      	movs	r6, #2
 800cebe:	437d      	muls	r5, r7
 800cec0:	41f5      	rors	r5, r6
 800cec2:	4e13      	ldr	r6, [pc, #76]	@ (800cf10 <gmtime_r+0x1a0>)
 800cec4:	42b5      	cmp	r5, r6
 800cec6:	d806      	bhi.n	800ced6 <gmtime_r+0x166>
 800cec8:	2204      	movs	r2, #4
 800ceca:	4379      	muls	r1, r7
 800cecc:	41d1      	rors	r1, r2
 800cece:	2200      	movs	r2, #0
 800ced0:	4d10      	ldr	r5, [pc, #64]	@ (800cf14 <gmtime_r+0x1a4>)
 800ced2:	428d      	cmp	r5, r1
 800ced4:	4152      	adcs	r2, r2
 800ced6:	9900      	ldr	r1, [sp, #0]
 800ced8:	313b      	adds	r1, #59	@ 0x3b
 800ceda:	188a      	adds	r2, r1, r2
 800cedc:	e7d3      	b.n	800ce86 <gmtime_r+0x116>
 800cede:	46c0      	nop			@ (mov r8, r8)
 800cee0:	00015180 	.word	0x00015180
 800cee4:	000afa6c 	.word	0x000afa6c
 800cee8:	fffdc550 	.word	0xfffdc550
 800ceec:	00023ab1 	.word	0x00023ab1
 800cef0:	fffdc54f 	.word	0xfffdc54f
 800cef4:	00008eac 	.word	0x00008eac
 800cef8:	000005b4 	.word	0x000005b4
 800cefc:	00023ab0 	.word	0x00023ab0
 800cf00:	000005f9 	.word	0x000005f9
 800cf04:	fffff894 	.word	0xfffff894
 800cf08:	000afa6b 	.word	0x000afa6b
 800cf0c:	c28f5c29 	.word	0xc28f5c29
 800cf10:	028f5c28 	.word	0x028f5c28
 800cf14:	00a3d70a 	.word	0x00a3d70a

0800cf18 <_fstat_r>:
 800cf18:	2300      	movs	r3, #0
 800cf1a:	b570      	push	{r4, r5, r6, lr}
 800cf1c:	4d06      	ldr	r5, [pc, #24]	@ (800cf38 <_fstat_r+0x20>)
 800cf1e:	0004      	movs	r4, r0
 800cf20:	0008      	movs	r0, r1
 800cf22:	0011      	movs	r1, r2
 800cf24:	602b      	str	r3, [r5, #0]
 800cf26:	f7f5 fcf0 	bl	800290a <_fstat>
 800cf2a:	1c43      	adds	r3, r0, #1
 800cf2c:	d103      	bne.n	800cf36 <_fstat_r+0x1e>
 800cf2e:	682b      	ldr	r3, [r5, #0]
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d000      	beq.n	800cf36 <_fstat_r+0x1e>
 800cf34:	6023      	str	r3, [r4, #0]
 800cf36:	bd70      	pop	{r4, r5, r6, pc}
 800cf38:	200013e4 	.word	0x200013e4

0800cf3c <_isatty_r>:
 800cf3c:	2300      	movs	r3, #0
 800cf3e:	b570      	push	{r4, r5, r6, lr}
 800cf40:	4d06      	ldr	r5, [pc, #24]	@ (800cf5c <_isatty_r+0x20>)
 800cf42:	0004      	movs	r4, r0
 800cf44:	0008      	movs	r0, r1
 800cf46:	602b      	str	r3, [r5, #0]
 800cf48:	f7f5 fced 	bl	8002926 <_isatty>
 800cf4c:	1c43      	adds	r3, r0, #1
 800cf4e:	d103      	bne.n	800cf58 <_isatty_r+0x1c>
 800cf50:	682b      	ldr	r3, [r5, #0]
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d000      	beq.n	800cf58 <_isatty_r+0x1c>
 800cf56:	6023      	str	r3, [r4, #0]
 800cf58:	bd70      	pop	{r4, r5, r6, pc}
 800cf5a:	46c0      	nop			@ (mov r8, r8)
 800cf5c:	200013e4 	.word	0x200013e4

0800cf60 <memchr>:
 800cf60:	b2c9      	uxtb	r1, r1
 800cf62:	1882      	adds	r2, r0, r2
 800cf64:	4290      	cmp	r0, r2
 800cf66:	d101      	bne.n	800cf6c <memchr+0xc>
 800cf68:	2000      	movs	r0, #0
 800cf6a:	4770      	bx	lr
 800cf6c:	7803      	ldrb	r3, [r0, #0]
 800cf6e:	428b      	cmp	r3, r1
 800cf70:	d0fb      	beq.n	800cf6a <memchr+0xa>
 800cf72:	3001      	adds	r0, #1
 800cf74:	e7f6      	b.n	800cf64 <memchr+0x4>
	...

0800cf78 <__env_lock>:
 800cf78:	b510      	push	{r4, lr}
 800cf7a:	4802      	ldr	r0, [pc, #8]	@ (800cf84 <__env_lock+0xc>)
 800cf7c:	f7ff f964 	bl	800c248 <__retarget_lock_acquire_recursive>
 800cf80:	bd10      	pop	{r4, pc}
 800cf82:	46c0      	nop			@ (mov r8, r8)
 800cf84:	200013e9 	.word	0x200013e9

0800cf88 <__env_unlock>:
 800cf88:	b510      	push	{r4, lr}
 800cf8a:	4802      	ldr	r0, [pc, #8]	@ (800cf94 <__env_unlock+0xc>)
 800cf8c:	f7ff f95e 	bl	800c24c <__retarget_lock_release_recursive>
 800cf90:	bd10      	pop	{r4, pc}
 800cf92:	46c0      	nop			@ (mov r8, r8)
 800cf94:	200013e9 	.word	0x200013e9

0800cf98 <_realloc_r>:
 800cf98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cf9a:	0006      	movs	r6, r0
 800cf9c:	000c      	movs	r4, r1
 800cf9e:	0015      	movs	r5, r2
 800cfa0:	2900      	cmp	r1, #0
 800cfa2:	d105      	bne.n	800cfb0 <_realloc_r+0x18>
 800cfa4:	0011      	movs	r1, r2
 800cfa6:	f7fd ff3d 	bl	800ae24 <_malloc_r>
 800cfaa:	0004      	movs	r4, r0
 800cfac:	0020      	movs	r0, r4
 800cfae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cfb0:	2a00      	cmp	r2, #0
 800cfb2:	d103      	bne.n	800cfbc <_realloc_r+0x24>
 800cfb4:	f7ff f966 	bl	800c284 <_free_r>
 800cfb8:	002c      	movs	r4, r5
 800cfba:	e7f7      	b.n	800cfac <_realloc_r+0x14>
 800cfbc:	f7ff f9e9 	bl	800c392 <_malloc_usable_size_r>
 800cfc0:	0007      	movs	r7, r0
 800cfc2:	4285      	cmp	r5, r0
 800cfc4:	d802      	bhi.n	800cfcc <_realloc_r+0x34>
 800cfc6:	0843      	lsrs	r3, r0, #1
 800cfc8:	42ab      	cmp	r3, r5
 800cfca:	d3ef      	bcc.n	800cfac <_realloc_r+0x14>
 800cfcc:	0029      	movs	r1, r5
 800cfce:	0030      	movs	r0, r6
 800cfd0:	f7fd ff28 	bl	800ae24 <_malloc_r>
 800cfd4:	9001      	str	r0, [sp, #4]
 800cfd6:	2800      	cmp	r0, #0
 800cfd8:	d101      	bne.n	800cfde <_realloc_r+0x46>
 800cfda:	9c01      	ldr	r4, [sp, #4]
 800cfdc:	e7e6      	b.n	800cfac <_realloc_r+0x14>
 800cfde:	002a      	movs	r2, r5
 800cfe0:	42bd      	cmp	r5, r7
 800cfe2:	d900      	bls.n	800cfe6 <_realloc_r+0x4e>
 800cfe4:	003a      	movs	r2, r7
 800cfe6:	0021      	movs	r1, r4
 800cfe8:	9801      	ldr	r0, [sp, #4]
 800cfea:	f7ff f938 	bl	800c25e <memcpy>
 800cfee:	0021      	movs	r1, r4
 800cff0:	0030      	movs	r0, r6
 800cff2:	f7ff f947 	bl	800c284 <_free_r>
 800cff6:	e7f0      	b.n	800cfda <_realloc_r+0x42>

0800cff8 <_sungetc_r>:
 800cff8:	b570      	push	{r4, r5, r6, lr}
 800cffa:	0014      	movs	r4, r2
 800cffc:	1c4b      	adds	r3, r1, #1
 800cffe:	d103      	bne.n	800d008 <_sungetc_r+0x10>
 800d000:	2501      	movs	r5, #1
 800d002:	426d      	negs	r5, r5
 800d004:	0028      	movs	r0, r5
 800d006:	bd70      	pop	{r4, r5, r6, pc}
 800d008:	8993      	ldrh	r3, [r2, #12]
 800d00a:	2220      	movs	r2, #32
 800d00c:	4393      	bics	r3, r2
 800d00e:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800d010:	81a3      	strh	r3, [r4, #12]
 800d012:	b2ce      	uxtb	r6, r1
 800d014:	6863      	ldr	r3, [r4, #4]
 800d016:	b2cd      	uxtb	r5, r1
 800d018:	2a00      	cmp	r2, #0
 800d01a:	d010      	beq.n	800d03e <_sungetc_r+0x46>
 800d01c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800d01e:	429a      	cmp	r2, r3
 800d020:	dd07      	ble.n	800d032 <_sungetc_r+0x3a>
 800d022:	6823      	ldr	r3, [r4, #0]
 800d024:	3b01      	subs	r3, #1
 800d026:	6023      	str	r3, [r4, #0]
 800d028:	701e      	strb	r6, [r3, #0]
 800d02a:	6863      	ldr	r3, [r4, #4]
 800d02c:	3301      	adds	r3, #1
 800d02e:	6063      	str	r3, [r4, #4]
 800d030:	e7e8      	b.n	800d004 <_sungetc_r+0xc>
 800d032:	0021      	movs	r1, r4
 800d034:	f000 fb3a 	bl	800d6ac <__submore>
 800d038:	2800      	cmp	r0, #0
 800d03a:	d0f2      	beq.n	800d022 <_sungetc_r+0x2a>
 800d03c:	e7e0      	b.n	800d000 <_sungetc_r+0x8>
 800d03e:	6921      	ldr	r1, [r4, #16]
 800d040:	6822      	ldr	r2, [r4, #0]
 800d042:	2900      	cmp	r1, #0
 800d044:	d007      	beq.n	800d056 <_sungetc_r+0x5e>
 800d046:	4291      	cmp	r1, r2
 800d048:	d205      	bcs.n	800d056 <_sungetc_r+0x5e>
 800d04a:	1e51      	subs	r1, r2, #1
 800d04c:	7808      	ldrb	r0, [r1, #0]
 800d04e:	42a8      	cmp	r0, r5
 800d050:	d101      	bne.n	800d056 <_sungetc_r+0x5e>
 800d052:	6021      	str	r1, [r4, #0]
 800d054:	e7ea      	b.n	800d02c <_sungetc_r+0x34>
 800d056:	6423      	str	r3, [r4, #64]	@ 0x40
 800d058:	0023      	movs	r3, r4
 800d05a:	3344      	adds	r3, #68	@ 0x44
 800d05c:	6363      	str	r3, [r4, #52]	@ 0x34
 800d05e:	2303      	movs	r3, #3
 800d060:	63a3      	str	r3, [r4, #56]	@ 0x38
 800d062:	0023      	movs	r3, r4
 800d064:	3346      	adds	r3, #70	@ 0x46
 800d066:	63e2      	str	r2, [r4, #60]	@ 0x3c
 800d068:	701e      	strb	r6, [r3, #0]
 800d06a:	6023      	str	r3, [r4, #0]
 800d06c:	2301      	movs	r3, #1
 800d06e:	e7de      	b.n	800d02e <_sungetc_r+0x36>

0800d070 <__ssrefill_r>:
 800d070:	b510      	push	{r4, lr}
 800d072:	000c      	movs	r4, r1
 800d074:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800d076:	2900      	cmp	r1, #0
 800d078:	d00e      	beq.n	800d098 <__ssrefill_r+0x28>
 800d07a:	0023      	movs	r3, r4
 800d07c:	3344      	adds	r3, #68	@ 0x44
 800d07e:	4299      	cmp	r1, r3
 800d080:	d001      	beq.n	800d086 <__ssrefill_r+0x16>
 800d082:	f7ff f8ff 	bl	800c284 <_free_r>
 800d086:	2000      	movs	r0, #0
 800d088:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d08a:	6360      	str	r0, [r4, #52]	@ 0x34
 800d08c:	6063      	str	r3, [r4, #4]
 800d08e:	4283      	cmp	r3, r0
 800d090:	d002      	beq.n	800d098 <__ssrefill_r+0x28>
 800d092:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800d094:	6023      	str	r3, [r4, #0]
 800d096:	bd10      	pop	{r4, pc}
 800d098:	6923      	ldr	r3, [r4, #16]
 800d09a:	2001      	movs	r0, #1
 800d09c:	6023      	str	r3, [r4, #0]
 800d09e:	2300      	movs	r3, #0
 800d0a0:	89a2      	ldrh	r2, [r4, #12]
 800d0a2:	6063      	str	r3, [r4, #4]
 800d0a4:	3320      	adds	r3, #32
 800d0a6:	4313      	orrs	r3, r2
 800d0a8:	81a3      	strh	r3, [r4, #12]
 800d0aa:	4240      	negs	r0, r0
 800d0ac:	e7f3      	b.n	800d096 <__ssrefill_r+0x26>
	...

0800d0b0 <__ssvfiscanf_r>:
 800d0b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d0b2:	4cab      	ldr	r4, [pc, #684]	@ (800d360 <__ssvfiscanf_r+0x2b0>)
 800d0b4:	44a5      	add	sp, r4
 800d0b6:	000c      	movs	r4, r1
 800d0b8:	2100      	movs	r1, #0
 800d0ba:	9000      	str	r0, [sp, #0]
 800d0bc:	20be      	movs	r0, #190	@ 0xbe
 800d0be:	9146      	str	r1, [sp, #280]	@ 0x118
 800d0c0:	9147      	str	r1, [sp, #284]	@ 0x11c
 800d0c2:	a903      	add	r1, sp, #12
 800d0c4:	9148      	str	r1, [sp, #288]	@ 0x120
 800d0c6:	49a7      	ldr	r1, [pc, #668]	@ (800d364 <__ssvfiscanf_r+0x2b4>)
 800d0c8:	0040      	lsls	r0, r0, #1
 800d0ca:	ad43      	add	r5, sp, #268	@ 0x10c
 800d0cc:	5029      	str	r1, [r5, r0]
 800d0ce:	49a6      	ldr	r1, [pc, #664]	@ (800d368 <__ssvfiscanf_r+0x2b8>)
 800d0d0:	3004      	adds	r0, #4
 800d0d2:	ad43      	add	r5, sp, #268	@ 0x10c
 800d0d4:	5029      	str	r1, [r5, r0]
 800d0d6:	9302      	str	r3, [sp, #8]
 800d0d8:	7816      	ldrb	r6, [r2, #0]
 800d0da:	2e00      	cmp	r6, #0
 800d0dc:	d100      	bne.n	800d0e0 <__ssvfiscanf_r+0x30>
 800d0de:	e13c      	b.n	800d35a <__ssvfiscanf_r+0x2aa>
 800d0e0:	2308      	movs	r3, #8
 800d0e2:	2008      	movs	r0, #8
 800d0e4:	4da1      	ldr	r5, [pc, #644]	@ (800d36c <__ssvfiscanf_r+0x2bc>)
 800d0e6:	1c57      	adds	r7, r2, #1
 800d0e8:	5da9      	ldrb	r1, [r5, r6]
 800d0ea:	400b      	ands	r3, r1
 800d0ec:	4201      	tst	r1, r0
 800d0ee:	d01d      	beq.n	800d12c <__ssvfiscanf_r+0x7c>
 800d0f0:	0006      	movs	r6, r0
 800d0f2:	6863      	ldr	r3, [r4, #4]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	dd0f      	ble.n	800d118 <__ssvfiscanf_r+0x68>
 800d0f8:	6823      	ldr	r3, [r4, #0]
 800d0fa:	781a      	ldrb	r2, [r3, #0]
 800d0fc:	5caa      	ldrb	r2, [r5, r2]
 800d0fe:	4232      	tst	r2, r6
 800d100:	d101      	bne.n	800d106 <__ssvfiscanf_r+0x56>
 800d102:	003a      	movs	r2, r7
 800d104:	e7e8      	b.n	800d0d8 <__ssvfiscanf_r+0x28>
 800d106:	9a47      	ldr	r2, [sp, #284]	@ 0x11c
 800d108:	3301      	adds	r3, #1
 800d10a:	3201      	adds	r2, #1
 800d10c:	9247      	str	r2, [sp, #284]	@ 0x11c
 800d10e:	6862      	ldr	r2, [r4, #4]
 800d110:	6023      	str	r3, [r4, #0]
 800d112:	3a01      	subs	r2, #1
 800d114:	6062      	str	r2, [r4, #4]
 800d116:	e7ec      	b.n	800d0f2 <__ssvfiscanf_r+0x42>
 800d118:	22c0      	movs	r2, #192	@ 0xc0
 800d11a:	ab43      	add	r3, sp, #268	@ 0x10c
 800d11c:	0052      	lsls	r2, r2, #1
 800d11e:	0021      	movs	r1, r4
 800d120:	589b      	ldr	r3, [r3, r2]
 800d122:	9800      	ldr	r0, [sp, #0]
 800d124:	4798      	blx	r3
 800d126:	2800      	cmp	r0, #0
 800d128:	d0e6      	beq.n	800d0f8 <__ssvfiscanf_r+0x48>
 800d12a:	e7ea      	b.n	800d102 <__ssvfiscanf_r+0x52>
 800d12c:	2e25      	cmp	r6, #37	@ 0x25
 800d12e:	d162      	bne.n	800d1f6 <__ssvfiscanf_r+0x146>
 800d130:	9345      	str	r3, [sp, #276]	@ 0x114
 800d132:	9343      	str	r3, [sp, #268]	@ 0x10c
 800d134:	7853      	ldrb	r3, [r2, #1]
 800d136:	2b2a      	cmp	r3, #42	@ 0x2a
 800d138:	d102      	bne.n	800d140 <__ssvfiscanf_r+0x90>
 800d13a:	3b1a      	subs	r3, #26
 800d13c:	9343      	str	r3, [sp, #268]	@ 0x10c
 800d13e:	1c97      	adds	r7, r2, #2
 800d140:	003d      	movs	r5, r7
 800d142:	220a      	movs	r2, #10
 800d144:	7829      	ldrb	r1, [r5, #0]
 800d146:	1c6f      	adds	r7, r5, #1
 800d148:	000b      	movs	r3, r1
 800d14a:	3b30      	subs	r3, #48	@ 0x30
 800d14c:	2b09      	cmp	r3, #9
 800d14e:	d91f      	bls.n	800d190 <__ssvfiscanf_r+0xe0>
 800d150:	4b87      	ldr	r3, [pc, #540]	@ (800d370 <__ssvfiscanf_r+0x2c0>)
 800d152:	2203      	movs	r2, #3
 800d154:	0018      	movs	r0, r3
 800d156:	9301      	str	r3, [sp, #4]
 800d158:	f7ff ff02 	bl	800cf60 <memchr>
 800d15c:	2800      	cmp	r0, #0
 800d15e:	d007      	beq.n	800d170 <__ssvfiscanf_r+0xc0>
 800d160:	9b01      	ldr	r3, [sp, #4]
 800d162:	003d      	movs	r5, r7
 800d164:	1ac0      	subs	r0, r0, r3
 800d166:	2301      	movs	r3, #1
 800d168:	4083      	lsls	r3, r0
 800d16a:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 800d16c:	4313      	orrs	r3, r2
 800d16e:	9343      	str	r3, [sp, #268]	@ 0x10c
 800d170:	782b      	ldrb	r3, [r5, #0]
 800d172:	1c6f      	adds	r7, r5, #1
 800d174:	2b78      	cmp	r3, #120	@ 0x78
 800d176:	d806      	bhi.n	800d186 <__ssvfiscanf_r+0xd6>
 800d178:	2b57      	cmp	r3, #87	@ 0x57
 800d17a:	d810      	bhi.n	800d19e <__ssvfiscanf_r+0xee>
 800d17c:	2b25      	cmp	r3, #37	@ 0x25
 800d17e:	d03a      	beq.n	800d1f6 <__ssvfiscanf_r+0x146>
 800d180:	d834      	bhi.n	800d1ec <__ssvfiscanf_r+0x13c>
 800d182:	2b00      	cmp	r3, #0
 800d184:	d055      	beq.n	800d232 <__ssvfiscanf_r+0x182>
 800d186:	2303      	movs	r3, #3
 800d188:	9349      	str	r3, [sp, #292]	@ 0x124
 800d18a:	3307      	adds	r3, #7
 800d18c:	9344      	str	r3, [sp, #272]	@ 0x110
 800d18e:	e069      	b.n	800d264 <__ssvfiscanf_r+0x1b4>
 800d190:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800d192:	003d      	movs	r5, r7
 800d194:	4353      	muls	r3, r2
 800d196:	3b30      	subs	r3, #48	@ 0x30
 800d198:	185b      	adds	r3, r3, r1
 800d19a:	9345      	str	r3, [sp, #276]	@ 0x114
 800d19c:	e7d2      	b.n	800d144 <__ssvfiscanf_r+0x94>
 800d19e:	0018      	movs	r0, r3
 800d1a0:	3858      	subs	r0, #88	@ 0x58
 800d1a2:	2820      	cmp	r0, #32
 800d1a4:	d8ef      	bhi.n	800d186 <__ssvfiscanf_r+0xd6>
 800d1a6:	f7f2 ffc1 	bl	800012c <__gnu_thumb1_case_shi>
 800d1aa:	004b      	.short	0x004b
 800d1ac:	ffeeffee 	.word	0xffeeffee
 800d1b0:	ffee007d 	.word	0xffee007d
 800d1b4:	ffeeffee 	.word	0xffeeffee
 800d1b8:	ffeeffee 	.word	0xffeeffee
 800d1bc:	ffeeffee 	.word	0xffeeffee
 800d1c0:	007b0088 	.word	0x007b0088
 800d1c4:	00240024 	.word	0x00240024
 800d1c8:	ffee0024 	.word	0xffee0024
 800d1cc:	ffee0055 	.word	0xffee0055
 800d1d0:	ffeeffee 	.word	0xffeeffee
 800d1d4:	0090ffee 	.word	0x0090ffee
 800d1d8:	00470059 	.word	0x00470059
 800d1dc:	ffeeffee 	.word	0xffeeffee
 800d1e0:	ffee008e 	.word	0xffee008e
 800d1e4:	ffee007b 	.word	0xffee007b
 800d1e8:	004bffee 	.word	0x004bffee
 800d1ec:	3b45      	subs	r3, #69	@ 0x45
 800d1ee:	2b02      	cmp	r3, #2
 800d1f0:	d8c9      	bhi.n	800d186 <__ssvfiscanf_r+0xd6>
 800d1f2:	2305      	movs	r3, #5
 800d1f4:	e035      	b.n	800d262 <__ssvfiscanf_r+0x1b2>
 800d1f6:	6863      	ldr	r3, [r4, #4]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	dd0d      	ble.n	800d218 <__ssvfiscanf_r+0x168>
 800d1fc:	6823      	ldr	r3, [r4, #0]
 800d1fe:	781a      	ldrb	r2, [r3, #0]
 800d200:	42b2      	cmp	r2, r6
 800d202:	d000      	beq.n	800d206 <__ssvfiscanf_r+0x156>
 800d204:	e0a9      	b.n	800d35a <__ssvfiscanf_r+0x2aa>
 800d206:	3301      	adds	r3, #1
 800d208:	6862      	ldr	r2, [r4, #4]
 800d20a:	6023      	str	r3, [r4, #0]
 800d20c:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800d20e:	3a01      	subs	r2, #1
 800d210:	3301      	adds	r3, #1
 800d212:	6062      	str	r2, [r4, #4]
 800d214:	9347      	str	r3, [sp, #284]	@ 0x11c
 800d216:	e774      	b.n	800d102 <__ssvfiscanf_r+0x52>
 800d218:	23c0      	movs	r3, #192	@ 0xc0
 800d21a:	aa43      	add	r2, sp, #268	@ 0x10c
 800d21c:	005b      	lsls	r3, r3, #1
 800d21e:	0021      	movs	r1, r4
 800d220:	58d3      	ldr	r3, [r2, r3]
 800d222:	9800      	ldr	r0, [sp, #0]
 800d224:	4798      	blx	r3
 800d226:	2800      	cmp	r0, #0
 800d228:	d0e8      	beq.n	800d1fc <__ssvfiscanf_r+0x14c>
 800d22a:	9846      	ldr	r0, [sp, #280]	@ 0x118
 800d22c:	2800      	cmp	r0, #0
 800d22e:	d000      	beq.n	800d232 <__ssvfiscanf_r+0x182>
 800d230:	e08b      	b.n	800d34a <__ssvfiscanf_r+0x29a>
 800d232:	2001      	movs	r0, #1
 800d234:	4240      	negs	r0, r0
 800d236:	e08c      	b.n	800d352 <__ssvfiscanf_r+0x2a2>
 800d238:	2220      	movs	r2, #32
 800d23a:	9943      	ldr	r1, [sp, #268]	@ 0x10c
 800d23c:	430a      	orrs	r2, r1
 800d23e:	9243      	str	r2, [sp, #268]	@ 0x10c
 800d240:	2280      	movs	r2, #128	@ 0x80
 800d242:	9943      	ldr	r1, [sp, #268]	@ 0x10c
 800d244:	0092      	lsls	r2, r2, #2
 800d246:	430a      	orrs	r2, r1
 800d248:	9243      	str	r2, [sp, #268]	@ 0x10c
 800d24a:	2210      	movs	r2, #16
 800d24c:	9244      	str	r2, [sp, #272]	@ 0x110
 800d24e:	2b6e      	cmp	r3, #110	@ 0x6e
 800d250:	d902      	bls.n	800d258 <__ssvfiscanf_r+0x1a8>
 800d252:	e005      	b.n	800d260 <__ssvfiscanf_r+0x1b0>
 800d254:	2300      	movs	r3, #0
 800d256:	9344      	str	r3, [sp, #272]	@ 0x110
 800d258:	2303      	movs	r3, #3
 800d25a:	e002      	b.n	800d262 <__ssvfiscanf_r+0x1b2>
 800d25c:	2308      	movs	r3, #8
 800d25e:	9344      	str	r3, [sp, #272]	@ 0x110
 800d260:	2304      	movs	r3, #4
 800d262:	9349      	str	r3, [sp, #292]	@ 0x124
 800d264:	6863      	ldr	r3, [r4, #4]
 800d266:	2b00      	cmp	r3, #0
 800d268:	dd3e      	ble.n	800d2e8 <__ssvfiscanf_r+0x238>
 800d26a:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800d26c:	065b      	lsls	r3, r3, #25
 800d26e:	d408      	bmi.n	800d282 <__ssvfiscanf_r+0x1d2>
 800d270:	26c0      	movs	r6, #192	@ 0xc0
 800d272:	2508      	movs	r5, #8
 800d274:	0076      	lsls	r6, r6, #1
 800d276:	6823      	ldr	r3, [r4, #0]
 800d278:	493c      	ldr	r1, [pc, #240]	@ (800d36c <__ssvfiscanf_r+0x2bc>)
 800d27a:	781a      	ldrb	r2, [r3, #0]
 800d27c:	5c8a      	ldrb	r2, [r1, r2]
 800d27e:	422a      	tst	r2, r5
 800d280:	d13c      	bne.n	800d2fc <__ssvfiscanf_r+0x24c>
 800d282:	9b49      	ldr	r3, [sp, #292]	@ 0x124
 800d284:	2b02      	cmp	r3, #2
 800d286:	dc4c      	bgt.n	800d322 <__ssvfiscanf_r+0x272>
 800d288:	0022      	movs	r2, r4
 800d28a:	9800      	ldr	r0, [sp, #0]
 800d28c:	ab02      	add	r3, sp, #8
 800d28e:	a943      	add	r1, sp, #268	@ 0x10c
 800d290:	f000 f872 	bl	800d378 <_scanf_chars>
 800d294:	2801      	cmp	r0, #1
 800d296:	d060      	beq.n	800d35a <__ssvfiscanf_r+0x2aa>
 800d298:	2802      	cmp	r0, #2
 800d29a:	d000      	beq.n	800d29e <__ssvfiscanf_r+0x1ee>
 800d29c:	e731      	b.n	800d102 <__ssvfiscanf_r+0x52>
 800d29e:	e7c4      	b.n	800d22a <__ssvfiscanf_r+0x17a>
 800d2a0:	220a      	movs	r2, #10
 800d2a2:	e7d3      	b.n	800d24c <__ssvfiscanf_r+0x19c>
 800d2a4:	0039      	movs	r1, r7
 800d2a6:	a803      	add	r0, sp, #12
 800d2a8:	f000 f9c6 	bl	800d638 <__sccl>
 800d2ac:	2340      	movs	r3, #64	@ 0x40
 800d2ae:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 800d2b0:	0007      	movs	r7, r0
 800d2b2:	4313      	orrs	r3, r2
 800d2b4:	9343      	str	r3, [sp, #268]	@ 0x10c
 800d2b6:	2301      	movs	r3, #1
 800d2b8:	e7d3      	b.n	800d262 <__ssvfiscanf_r+0x1b2>
 800d2ba:	2340      	movs	r3, #64	@ 0x40
 800d2bc:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 800d2be:	4313      	orrs	r3, r2
 800d2c0:	9343      	str	r3, [sp, #268]	@ 0x10c
 800d2c2:	2300      	movs	r3, #0
 800d2c4:	e7cd      	b.n	800d262 <__ssvfiscanf_r+0x1b2>
 800d2c6:	2302      	movs	r3, #2
 800d2c8:	e7cb      	b.n	800d262 <__ssvfiscanf_r+0x1b2>
 800d2ca:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 800d2cc:	06d3      	lsls	r3, r2, #27
 800d2ce:	d500      	bpl.n	800d2d2 <__ssvfiscanf_r+0x222>
 800d2d0:	e717      	b.n	800d102 <__ssvfiscanf_r+0x52>
 800d2d2:	9b02      	ldr	r3, [sp, #8]
 800d2d4:	9947      	ldr	r1, [sp, #284]	@ 0x11c
 800d2d6:	1d18      	adds	r0, r3, #4
 800d2d8:	9002      	str	r0, [sp, #8]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	07d5      	lsls	r5, r2, #31
 800d2de:	d501      	bpl.n	800d2e4 <__ssvfiscanf_r+0x234>
 800d2e0:	8019      	strh	r1, [r3, #0]
 800d2e2:	e70e      	b.n	800d102 <__ssvfiscanf_r+0x52>
 800d2e4:	6019      	str	r1, [r3, #0]
 800d2e6:	e70c      	b.n	800d102 <__ssvfiscanf_r+0x52>
 800d2e8:	23c0      	movs	r3, #192	@ 0xc0
 800d2ea:	aa43      	add	r2, sp, #268	@ 0x10c
 800d2ec:	005b      	lsls	r3, r3, #1
 800d2ee:	0021      	movs	r1, r4
 800d2f0:	58d3      	ldr	r3, [r2, r3]
 800d2f2:	9800      	ldr	r0, [sp, #0]
 800d2f4:	4798      	blx	r3
 800d2f6:	2800      	cmp	r0, #0
 800d2f8:	d0b7      	beq.n	800d26a <__ssvfiscanf_r+0x1ba>
 800d2fa:	e796      	b.n	800d22a <__ssvfiscanf_r+0x17a>
 800d2fc:	9a47      	ldr	r2, [sp, #284]	@ 0x11c
 800d2fe:	3201      	adds	r2, #1
 800d300:	9247      	str	r2, [sp, #284]	@ 0x11c
 800d302:	6862      	ldr	r2, [r4, #4]
 800d304:	3a01      	subs	r2, #1
 800d306:	6062      	str	r2, [r4, #4]
 800d308:	2a00      	cmp	r2, #0
 800d30a:	dd02      	ble.n	800d312 <__ssvfiscanf_r+0x262>
 800d30c:	3301      	adds	r3, #1
 800d30e:	6023      	str	r3, [r4, #0]
 800d310:	e7b1      	b.n	800d276 <__ssvfiscanf_r+0x1c6>
 800d312:	ab43      	add	r3, sp, #268	@ 0x10c
 800d314:	0021      	movs	r1, r4
 800d316:	599b      	ldr	r3, [r3, r6]
 800d318:	9800      	ldr	r0, [sp, #0]
 800d31a:	4798      	blx	r3
 800d31c:	2800      	cmp	r0, #0
 800d31e:	d0aa      	beq.n	800d276 <__ssvfiscanf_r+0x1c6>
 800d320:	e783      	b.n	800d22a <__ssvfiscanf_r+0x17a>
 800d322:	2b04      	cmp	r3, #4
 800d324:	dc06      	bgt.n	800d334 <__ssvfiscanf_r+0x284>
 800d326:	0022      	movs	r2, r4
 800d328:	9800      	ldr	r0, [sp, #0]
 800d32a:	ab02      	add	r3, sp, #8
 800d32c:	a943      	add	r1, sp, #268	@ 0x10c
 800d32e:	f000 f883 	bl	800d438 <_scanf_i>
 800d332:	e7af      	b.n	800d294 <__ssvfiscanf_r+0x1e4>
 800d334:	4b0f      	ldr	r3, [pc, #60]	@ (800d374 <__ssvfiscanf_r+0x2c4>)
 800d336:	2b00      	cmp	r3, #0
 800d338:	d100      	bne.n	800d33c <__ssvfiscanf_r+0x28c>
 800d33a:	e6e2      	b.n	800d102 <__ssvfiscanf_r+0x52>
 800d33c:	0022      	movs	r2, r4
 800d33e:	9800      	ldr	r0, [sp, #0]
 800d340:	ab02      	add	r3, sp, #8
 800d342:	a943      	add	r1, sp, #268	@ 0x10c
 800d344:	e000      	b.n	800d348 <__ssvfiscanf_r+0x298>
 800d346:	bf00      	nop
 800d348:	e7a4      	b.n	800d294 <__ssvfiscanf_r+0x1e4>
 800d34a:	89a3      	ldrh	r3, [r4, #12]
 800d34c:	065b      	lsls	r3, r3, #25
 800d34e:	d500      	bpl.n	800d352 <__ssvfiscanf_r+0x2a2>
 800d350:	e76f      	b.n	800d232 <__ssvfiscanf_r+0x182>
 800d352:	23a5      	movs	r3, #165	@ 0xa5
 800d354:	009b      	lsls	r3, r3, #2
 800d356:	449d      	add	sp, r3
 800d358:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d35a:	9846      	ldr	r0, [sp, #280]	@ 0x118
 800d35c:	e7f9      	b.n	800d352 <__ssvfiscanf_r+0x2a2>
 800d35e:	46c0      	nop			@ (mov r8, r8)
 800d360:	fffffd6c 	.word	0xfffffd6c
 800d364:	0800cff9 	.word	0x0800cff9
 800d368:	0800d071 	.word	0x0800d071
 800d36c:	0800e359 	.word	0x0800e359
 800d370:	0800e310 	.word	0x0800e310
 800d374:	00000000 	.word	0x00000000

0800d378 <_scanf_chars>:
 800d378:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d37a:	0015      	movs	r5, r2
 800d37c:	688a      	ldr	r2, [r1, #8]
 800d37e:	000c      	movs	r4, r1
 800d380:	9001      	str	r0, [sp, #4]
 800d382:	2a00      	cmp	r2, #0
 800d384:	d104      	bne.n	800d390 <_scanf_chars+0x18>
 800d386:	698a      	ldr	r2, [r1, #24]
 800d388:	2a00      	cmp	r2, #0
 800d38a:	d117      	bne.n	800d3bc <_scanf_chars+0x44>
 800d38c:	3201      	adds	r2, #1
 800d38e:	60a2      	str	r2, [r4, #8]
 800d390:	6822      	ldr	r2, [r4, #0]
 800d392:	06d2      	lsls	r2, r2, #27
 800d394:	d403      	bmi.n	800d39e <_scanf_chars+0x26>
 800d396:	681a      	ldr	r2, [r3, #0]
 800d398:	1d11      	adds	r1, r2, #4
 800d39a:	6019      	str	r1, [r3, #0]
 800d39c:	6817      	ldr	r7, [r2, #0]
 800d39e:	2600      	movs	r6, #0
 800d3a0:	69a0      	ldr	r0, [r4, #24]
 800d3a2:	2800      	cmp	r0, #0
 800d3a4:	d016      	beq.n	800d3d4 <_scanf_chars+0x5c>
 800d3a6:	2801      	cmp	r0, #1
 800d3a8:	d10b      	bne.n	800d3c2 <_scanf_chars+0x4a>
 800d3aa:	682b      	ldr	r3, [r5, #0]
 800d3ac:	6962      	ldr	r2, [r4, #20]
 800d3ae:	781b      	ldrb	r3, [r3, #0]
 800d3b0:	5cd3      	ldrb	r3, [r2, r3]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d10e      	bne.n	800d3d4 <_scanf_chars+0x5c>
 800d3b6:	2e00      	cmp	r6, #0
 800d3b8:	d03b      	beq.n	800d432 <_scanf_chars+0xba>
 800d3ba:	e029      	b.n	800d410 <_scanf_chars+0x98>
 800d3bc:	2201      	movs	r2, #1
 800d3be:	4252      	negs	r2, r2
 800d3c0:	e7e5      	b.n	800d38e <_scanf_chars+0x16>
 800d3c2:	2802      	cmp	r0, #2
 800d3c4:	d124      	bne.n	800d410 <_scanf_chars+0x98>
 800d3c6:	682b      	ldr	r3, [r5, #0]
 800d3c8:	4a1a      	ldr	r2, [pc, #104]	@ (800d434 <_scanf_chars+0xbc>)
 800d3ca:	781b      	ldrb	r3, [r3, #0]
 800d3cc:	5cd3      	ldrb	r3, [r2, r3]
 800d3ce:	2208      	movs	r2, #8
 800d3d0:	4213      	tst	r3, r2
 800d3d2:	d11d      	bne.n	800d410 <_scanf_chars+0x98>
 800d3d4:	2210      	movs	r2, #16
 800d3d6:	6823      	ldr	r3, [r4, #0]
 800d3d8:	3601      	adds	r6, #1
 800d3da:	4213      	tst	r3, r2
 800d3dc:	d103      	bne.n	800d3e6 <_scanf_chars+0x6e>
 800d3de:	682b      	ldr	r3, [r5, #0]
 800d3e0:	781b      	ldrb	r3, [r3, #0]
 800d3e2:	703b      	strb	r3, [r7, #0]
 800d3e4:	3701      	adds	r7, #1
 800d3e6:	682a      	ldr	r2, [r5, #0]
 800d3e8:	686b      	ldr	r3, [r5, #4]
 800d3ea:	3201      	adds	r2, #1
 800d3ec:	602a      	str	r2, [r5, #0]
 800d3ee:	68a2      	ldr	r2, [r4, #8]
 800d3f0:	3b01      	subs	r3, #1
 800d3f2:	3a01      	subs	r2, #1
 800d3f4:	606b      	str	r3, [r5, #4]
 800d3f6:	60a2      	str	r2, [r4, #8]
 800d3f8:	2a00      	cmp	r2, #0
 800d3fa:	d009      	beq.n	800d410 <_scanf_chars+0x98>
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	dccf      	bgt.n	800d3a0 <_scanf_chars+0x28>
 800d400:	23c0      	movs	r3, #192	@ 0xc0
 800d402:	005b      	lsls	r3, r3, #1
 800d404:	0029      	movs	r1, r5
 800d406:	58e3      	ldr	r3, [r4, r3]
 800d408:	9801      	ldr	r0, [sp, #4]
 800d40a:	4798      	blx	r3
 800d40c:	2800      	cmp	r0, #0
 800d40e:	d0c7      	beq.n	800d3a0 <_scanf_chars+0x28>
 800d410:	6822      	ldr	r2, [r4, #0]
 800d412:	2310      	movs	r3, #16
 800d414:	0011      	movs	r1, r2
 800d416:	4019      	ands	r1, r3
 800d418:	421a      	tst	r2, r3
 800d41a:	d106      	bne.n	800d42a <_scanf_chars+0xb2>
 800d41c:	68e3      	ldr	r3, [r4, #12]
 800d41e:	3301      	adds	r3, #1
 800d420:	60e3      	str	r3, [r4, #12]
 800d422:	69a3      	ldr	r3, [r4, #24]
 800d424:	2b00      	cmp	r3, #0
 800d426:	d000      	beq.n	800d42a <_scanf_chars+0xb2>
 800d428:	7039      	strb	r1, [r7, #0]
 800d42a:	2000      	movs	r0, #0
 800d42c:	6923      	ldr	r3, [r4, #16]
 800d42e:	199b      	adds	r3, r3, r6
 800d430:	6123      	str	r3, [r4, #16]
 800d432:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d434:	0800e359 	.word	0x0800e359

0800d438 <_scanf_i>:
 800d438:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d43a:	b08b      	sub	sp, #44	@ 0x2c
 800d43c:	9301      	str	r3, [sp, #4]
 800d43e:	4b78      	ldr	r3, [pc, #480]	@ (800d620 <_scanf_i+0x1e8>)
 800d440:	0016      	movs	r6, r2
 800d442:	9004      	str	r0, [sp, #16]
 800d444:	aa07      	add	r2, sp, #28
 800d446:	cba1      	ldmia	r3!, {r0, r5, r7}
 800d448:	c2a1      	stmia	r2!, {r0, r5, r7}
 800d44a:	4a76      	ldr	r2, [pc, #472]	@ (800d624 <_scanf_i+0x1ec>)
 800d44c:	698b      	ldr	r3, [r1, #24]
 800d44e:	000c      	movs	r4, r1
 800d450:	9205      	str	r2, [sp, #20]
 800d452:	2b03      	cmp	r3, #3
 800d454:	d101      	bne.n	800d45a <_scanf_i+0x22>
 800d456:	4b74      	ldr	r3, [pc, #464]	@ (800d628 <_scanf_i+0x1f0>)
 800d458:	9305      	str	r3, [sp, #20]
 800d45a:	22ae      	movs	r2, #174	@ 0xae
 800d45c:	2000      	movs	r0, #0
 800d45e:	68a3      	ldr	r3, [r4, #8]
 800d460:	0052      	lsls	r2, r2, #1
 800d462:	1e59      	subs	r1, r3, #1
 800d464:	9003      	str	r0, [sp, #12]
 800d466:	4291      	cmp	r1, r2
 800d468:	d905      	bls.n	800d476 <_scanf_i+0x3e>
 800d46a:	3b5e      	subs	r3, #94	@ 0x5e
 800d46c:	3bff      	subs	r3, #255	@ 0xff
 800d46e:	9303      	str	r3, [sp, #12]
 800d470:	235e      	movs	r3, #94	@ 0x5e
 800d472:	33ff      	adds	r3, #255	@ 0xff
 800d474:	60a3      	str	r3, [r4, #8]
 800d476:	0023      	movs	r3, r4
 800d478:	331c      	adds	r3, #28
 800d47a:	9300      	str	r3, [sp, #0]
 800d47c:	23d0      	movs	r3, #208	@ 0xd0
 800d47e:	2700      	movs	r7, #0
 800d480:	6822      	ldr	r2, [r4, #0]
 800d482:	011b      	lsls	r3, r3, #4
 800d484:	4313      	orrs	r3, r2
 800d486:	6023      	str	r3, [r4, #0]
 800d488:	9b00      	ldr	r3, [sp, #0]
 800d48a:	9302      	str	r3, [sp, #8]
 800d48c:	6833      	ldr	r3, [r6, #0]
 800d48e:	a807      	add	r0, sp, #28
 800d490:	7819      	ldrb	r1, [r3, #0]
 800d492:	00bb      	lsls	r3, r7, #2
 800d494:	2202      	movs	r2, #2
 800d496:	5818      	ldr	r0, [r3, r0]
 800d498:	f7ff fd62 	bl	800cf60 <memchr>
 800d49c:	2800      	cmp	r0, #0
 800d49e:	d029      	beq.n	800d4f4 <_scanf_i+0xbc>
 800d4a0:	2f01      	cmp	r7, #1
 800d4a2:	d15e      	bne.n	800d562 <_scanf_i+0x12a>
 800d4a4:	6863      	ldr	r3, [r4, #4]
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d106      	bne.n	800d4b8 <_scanf_i+0x80>
 800d4aa:	3308      	adds	r3, #8
 800d4ac:	6822      	ldr	r2, [r4, #0]
 800d4ae:	6063      	str	r3, [r4, #4]
 800d4b0:	33f9      	adds	r3, #249	@ 0xf9
 800d4b2:	33ff      	adds	r3, #255	@ 0xff
 800d4b4:	4313      	orrs	r3, r2
 800d4b6:	6023      	str	r3, [r4, #0]
 800d4b8:	6823      	ldr	r3, [r4, #0]
 800d4ba:	4a5c      	ldr	r2, [pc, #368]	@ (800d62c <_scanf_i+0x1f4>)
 800d4bc:	4013      	ands	r3, r2
 800d4be:	6023      	str	r3, [r4, #0]
 800d4c0:	68a3      	ldr	r3, [r4, #8]
 800d4c2:	1e5a      	subs	r2, r3, #1
 800d4c4:	60a2      	str	r2, [r4, #8]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d014      	beq.n	800d4f4 <_scanf_i+0xbc>
 800d4ca:	6833      	ldr	r3, [r6, #0]
 800d4cc:	1c5a      	adds	r2, r3, #1
 800d4ce:	6032      	str	r2, [r6, #0]
 800d4d0:	781b      	ldrb	r3, [r3, #0]
 800d4d2:	9a02      	ldr	r2, [sp, #8]
 800d4d4:	7013      	strb	r3, [r2, #0]
 800d4d6:	6873      	ldr	r3, [r6, #4]
 800d4d8:	1c55      	adds	r5, r2, #1
 800d4da:	3b01      	subs	r3, #1
 800d4dc:	6073      	str	r3, [r6, #4]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	dc07      	bgt.n	800d4f2 <_scanf_i+0xba>
 800d4e2:	23c0      	movs	r3, #192	@ 0xc0
 800d4e4:	005b      	lsls	r3, r3, #1
 800d4e6:	0031      	movs	r1, r6
 800d4e8:	58e3      	ldr	r3, [r4, r3]
 800d4ea:	9804      	ldr	r0, [sp, #16]
 800d4ec:	4798      	blx	r3
 800d4ee:	2800      	cmp	r0, #0
 800d4f0:	d17e      	bne.n	800d5f0 <_scanf_i+0x1b8>
 800d4f2:	9502      	str	r5, [sp, #8]
 800d4f4:	3701      	adds	r7, #1
 800d4f6:	2f03      	cmp	r7, #3
 800d4f8:	d1c8      	bne.n	800d48c <_scanf_i+0x54>
 800d4fa:	6863      	ldr	r3, [r4, #4]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d101      	bne.n	800d504 <_scanf_i+0xcc>
 800d500:	330a      	adds	r3, #10
 800d502:	6063      	str	r3, [r4, #4]
 800d504:	2700      	movs	r7, #0
 800d506:	6863      	ldr	r3, [r4, #4]
 800d508:	4949      	ldr	r1, [pc, #292]	@ (800d630 <_scanf_i+0x1f8>)
 800d50a:	6960      	ldr	r0, [r4, #20]
 800d50c:	1ac9      	subs	r1, r1, r3
 800d50e:	f000 f893 	bl	800d638 <__sccl>
 800d512:	9d02      	ldr	r5, [sp, #8]
 800d514:	68a3      	ldr	r3, [r4, #8]
 800d516:	6820      	ldr	r0, [r4, #0]
 800d518:	9302      	str	r3, [sp, #8]
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d03f      	beq.n	800d59e <_scanf_i+0x166>
 800d51e:	6831      	ldr	r1, [r6, #0]
 800d520:	6963      	ldr	r3, [r4, #20]
 800d522:	780a      	ldrb	r2, [r1, #0]
 800d524:	5c9b      	ldrb	r3, [r3, r2]
 800d526:	2b00      	cmp	r3, #0
 800d528:	d039      	beq.n	800d59e <_scanf_i+0x166>
 800d52a:	2a30      	cmp	r2, #48	@ 0x30
 800d52c:	d128      	bne.n	800d580 <_scanf_i+0x148>
 800d52e:	2380      	movs	r3, #128	@ 0x80
 800d530:	011b      	lsls	r3, r3, #4
 800d532:	4218      	tst	r0, r3
 800d534:	d024      	beq.n	800d580 <_scanf_i+0x148>
 800d536:	9b03      	ldr	r3, [sp, #12]
 800d538:	3701      	adds	r7, #1
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d005      	beq.n	800d54a <_scanf_i+0x112>
 800d53e:	001a      	movs	r2, r3
 800d540:	9b02      	ldr	r3, [sp, #8]
 800d542:	3a01      	subs	r2, #1
 800d544:	3301      	adds	r3, #1
 800d546:	9203      	str	r2, [sp, #12]
 800d548:	60a3      	str	r3, [r4, #8]
 800d54a:	6873      	ldr	r3, [r6, #4]
 800d54c:	3b01      	subs	r3, #1
 800d54e:	6073      	str	r3, [r6, #4]
 800d550:	2b00      	cmp	r3, #0
 800d552:	dd1c      	ble.n	800d58e <_scanf_i+0x156>
 800d554:	6833      	ldr	r3, [r6, #0]
 800d556:	3301      	adds	r3, #1
 800d558:	6033      	str	r3, [r6, #0]
 800d55a:	68a3      	ldr	r3, [r4, #8]
 800d55c:	3b01      	subs	r3, #1
 800d55e:	60a3      	str	r3, [r4, #8]
 800d560:	e7d8      	b.n	800d514 <_scanf_i+0xdc>
 800d562:	2f02      	cmp	r7, #2
 800d564:	d1ac      	bne.n	800d4c0 <_scanf_i+0x88>
 800d566:	23c0      	movs	r3, #192	@ 0xc0
 800d568:	2180      	movs	r1, #128	@ 0x80
 800d56a:	6822      	ldr	r2, [r4, #0]
 800d56c:	00db      	lsls	r3, r3, #3
 800d56e:	4013      	ands	r3, r2
 800d570:	0089      	lsls	r1, r1, #2
 800d572:	428b      	cmp	r3, r1
 800d574:	d1c1      	bne.n	800d4fa <_scanf_i+0xc2>
 800d576:	2310      	movs	r3, #16
 800d578:	6063      	str	r3, [r4, #4]
 800d57a:	33f0      	adds	r3, #240	@ 0xf0
 800d57c:	4313      	orrs	r3, r2
 800d57e:	e79e      	b.n	800d4be <_scanf_i+0x86>
 800d580:	4b2c      	ldr	r3, [pc, #176]	@ (800d634 <_scanf_i+0x1fc>)
 800d582:	4003      	ands	r3, r0
 800d584:	6023      	str	r3, [r4, #0]
 800d586:	780b      	ldrb	r3, [r1, #0]
 800d588:	702b      	strb	r3, [r5, #0]
 800d58a:	3501      	adds	r5, #1
 800d58c:	e7dd      	b.n	800d54a <_scanf_i+0x112>
 800d58e:	23c0      	movs	r3, #192	@ 0xc0
 800d590:	005b      	lsls	r3, r3, #1
 800d592:	0031      	movs	r1, r6
 800d594:	58e3      	ldr	r3, [r4, r3]
 800d596:	9804      	ldr	r0, [sp, #16]
 800d598:	4798      	blx	r3
 800d59a:	2800      	cmp	r0, #0
 800d59c:	d0dd      	beq.n	800d55a <_scanf_i+0x122>
 800d59e:	6823      	ldr	r3, [r4, #0]
 800d5a0:	05db      	lsls	r3, r3, #23
 800d5a2:	d50e      	bpl.n	800d5c2 <_scanf_i+0x18a>
 800d5a4:	9b00      	ldr	r3, [sp, #0]
 800d5a6:	429d      	cmp	r5, r3
 800d5a8:	d907      	bls.n	800d5ba <_scanf_i+0x182>
 800d5aa:	23be      	movs	r3, #190	@ 0xbe
 800d5ac:	3d01      	subs	r5, #1
 800d5ae:	005b      	lsls	r3, r3, #1
 800d5b0:	0032      	movs	r2, r6
 800d5b2:	7829      	ldrb	r1, [r5, #0]
 800d5b4:	58e3      	ldr	r3, [r4, r3]
 800d5b6:	9804      	ldr	r0, [sp, #16]
 800d5b8:	4798      	blx	r3
 800d5ba:	9b00      	ldr	r3, [sp, #0]
 800d5bc:	2001      	movs	r0, #1
 800d5be:	429d      	cmp	r5, r3
 800d5c0:	d029      	beq.n	800d616 <_scanf_i+0x1de>
 800d5c2:	6821      	ldr	r1, [r4, #0]
 800d5c4:	2310      	movs	r3, #16
 800d5c6:	000a      	movs	r2, r1
 800d5c8:	401a      	ands	r2, r3
 800d5ca:	4219      	tst	r1, r3
 800d5cc:	d11c      	bne.n	800d608 <_scanf_i+0x1d0>
 800d5ce:	702a      	strb	r2, [r5, #0]
 800d5d0:	6863      	ldr	r3, [r4, #4]
 800d5d2:	9900      	ldr	r1, [sp, #0]
 800d5d4:	9804      	ldr	r0, [sp, #16]
 800d5d6:	9e05      	ldr	r6, [sp, #20]
 800d5d8:	47b0      	blx	r6
 800d5da:	9b01      	ldr	r3, [sp, #4]
 800d5dc:	6822      	ldr	r2, [r4, #0]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	0691      	lsls	r1, r2, #26
 800d5e2:	d507      	bpl.n	800d5f4 <_scanf_i+0x1bc>
 800d5e4:	9901      	ldr	r1, [sp, #4]
 800d5e6:	1d1a      	adds	r2, r3, #4
 800d5e8:	600a      	str	r2, [r1, #0]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	6018      	str	r0, [r3, #0]
 800d5ee:	e008      	b.n	800d602 <_scanf_i+0x1ca>
 800d5f0:	2700      	movs	r7, #0
 800d5f2:	e7d4      	b.n	800d59e <_scanf_i+0x166>
 800d5f4:	1d19      	adds	r1, r3, #4
 800d5f6:	07d6      	lsls	r6, r2, #31
 800d5f8:	d50f      	bpl.n	800d61a <_scanf_i+0x1e2>
 800d5fa:	9a01      	ldr	r2, [sp, #4]
 800d5fc:	6011      	str	r1, [r2, #0]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	8018      	strh	r0, [r3, #0]
 800d602:	68e3      	ldr	r3, [r4, #12]
 800d604:	3301      	adds	r3, #1
 800d606:	60e3      	str	r3, [r4, #12]
 800d608:	2000      	movs	r0, #0
 800d60a:	9b00      	ldr	r3, [sp, #0]
 800d60c:	1aed      	subs	r5, r5, r3
 800d60e:	6923      	ldr	r3, [r4, #16]
 800d610:	19ed      	adds	r5, r5, r7
 800d612:	195b      	adds	r3, r3, r5
 800d614:	6123      	str	r3, [r4, #16]
 800d616:	b00b      	add	sp, #44	@ 0x2c
 800d618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d61a:	9a01      	ldr	r2, [sp, #4]
 800d61c:	6011      	str	r1, [r2, #0]
 800d61e:	e7e4      	b.n	800d5ea <_scanf_i+0x1b2>
 800d620:	0800e08c 	.word	0x0800e08c
 800d624:	0800c4a9 	.word	0x0800c4a9
 800d628:	0800d83d 	.word	0x0800d83d
 800d62c:	fffffaff 	.word	0xfffffaff
 800d630:	0800e34d 	.word	0x0800e34d
 800d634:	fffff6ff 	.word	0xfffff6ff

0800d638 <__sccl>:
 800d638:	b570      	push	{r4, r5, r6, lr}
 800d63a:	780b      	ldrb	r3, [r1, #0]
 800d63c:	0004      	movs	r4, r0
 800d63e:	2b5e      	cmp	r3, #94	@ 0x5e
 800d640:	d019      	beq.n	800d676 <__sccl+0x3e>
 800d642:	1c4d      	adds	r5, r1, #1
 800d644:	2100      	movs	r1, #0
 800d646:	0022      	movs	r2, r4
 800d648:	1c60      	adds	r0, r4, #1
 800d64a:	30ff      	adds	r0, #255	@ 0xff
 800d64c:	7011      	strb	r1, [r2, #0]
 800d64e:	3201      	adds	r2, #1
 800d650:	4282      	cmp	r2, r0
 800d652:	d1fb      	bne.n	800d64c <__sccl+0x14>
 800d654:	1e68      	subs	r0, r5, #1
 800d656:	2b00      	cmp	r3, #0
 800d658:	d026      	beq.n	800d6a8 <__sccl+0x70>
 800d65a:	2601      	movs	r6, #1
 800d65c:	404e      	eors	r6, r1
 800d65e:	0028      	movs	r0, r5
 800d660:	54e6      	strb	r6, [r4, r3]
 800d662:	7801      	ldrb	r1, [r0, #0]
 800d664:	1c45      	adds	r5, r0, #1
 800d666:	292d      	cmp	r1, #45	@ 0x2d
 800d668:	d009      	beq.n	800d67e <__sccl+0x46>
 800d66a:	295d      	cmp	r1, #93	@ 0x5d
 800d66c:	d01b      	beq.n	800d6a6 <__sccl+0x6e>
 800d66e:	2900      	cmp	r1, #0
 800d670:	d01a      	beq.n	800d6a8 <__sccl+0x70>
 800d672:	000b      	movs	r3, r1
 800d674:	e7f3      	b.n	800d65e <__sccl+0x26>
 800d676:	784b      	ldrb	r3, [r1, #1]
 800d678:	1c8d      	adds	r5, r1, #2
 800d67a:	2101      	movs	r1, #1
 800d67c:	e7e3      	b.n	800d646 <__sccl+0xe>
 800d67e:	7842      	ldrb	r2, [r0, #1]
 800d680:	2a5d      	cmp	r2, #93	@ 0x5d
 800d682:	d0f6      	beq.n	800d672 <__sccl+0x3a>
 800d684:	4293      	cmp	r3, r2
 800d686:	dcf4      	bgt.n	800d672 <__sccl+0x3a>
 800d688:	0019      	movs	r1, r3
 800d68a:	3002      	adds	r0, #2
 800d68c:	3101      	adds	r1, #1
 800d68e:	5466      	strb	r6, [r4, r1]
 800d690:	428a      	cmp	r2, r1
 800d692:	dcfb      	bgt.n	800d68c <__sccl+0x54>
 800d694:	1c59      	adds	r1, r3, #1
 800d696:	4293      	cmp	r3, r2
 800d698:	db02      	blt.n	800d6a0 <__sccl+0x68>
 800d69a:	2200      	movs	r2, #0
 800d69c:	188b      	adds	r3, r1, r2
 800d69e:	e7e0      	b.n	800d662 <__sccl+0x2a>
 800d6a0:	1ad2      	subs	r2, r2, r3
 800d6a2:	3a01      	subs	r2, #1
 800d6a4:	e7fa      	b.n	800d69c <__sccl+0x64>
 800d6a6:	0028      	movs	r0, r5
 800d6a8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d6ac <__submore>:
 800d6ac:	000b      	movs	r3, r1
 800d6ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d6b0:	6b4d      	ldr	r5, [r1, #52]	@ 0x34
 800d6b2:	3344      	adds	r3, #68	@ 0x44
 800d6b4:	000c      	movs	r4, r1
 800d6b6:	429d      	cmp	r5, r3
 800d6b8:	d11c      	bne.n	800d6f4 <__submore+0x48>
 800d6ba:	2680      	movs	r6, #128	@ 0x80
 800d6bc:	00f6      	lsls	r6, r6, #3
 800d6be:	0031      	movs	r1, r6
 800d6c0:	f7fd fbb0 	bl	800ae24 <_malloc_r>
 800d6c4:	2800      	cmp	r0, #0
 800d6c6:	d102      	bne.n	800d6ce <__submore+0x22>
 800d6c8:	2001      	movs	r0, #1
 800d6ca:	4240      	negs	r0, r0
 800d6cc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d6ce:	0023      	movs	r3, r4
 800d6d0:	6360      	str	r0, [r4, #52]	@ 0x34
 800d6d2:	63a6      	str	r6, [r4, #56]	@ 0x38
 800d6d4:	3346      	adds	r3, #70	@ 0x46
 800d6d6:	781a      	ldrb	r2, [r3, #0]
 800d6d8:	4b10      	ldr	r3, [pc, #64]	@ (800d71c <__submore+0x70>)
 800d6da:	54c2      	strb	r2, [r0, r3]
 800d6dc:	0023      	movs	r3, r4
 800d6de:	3345      	adds	r3, #69	@ 0x45
 800d6e0:	781a      	ldrb	r2, [r3, #0]
 800d6e2:	4b0f      	ldr	r3, [pc, #60]	@ (800d720 <__submore+0x74>)
 800d6e4:	54c2      	strb	r2, [r0, r3]
 800d6e6:	782a      	ldrb	r2, [r5, #0]
 800d6e8:	4b0e      	ldr	r3, [pc, #56]	@ (800d724 <__submore+0x78>)
 800d6ea:	54c2      	strb	r2, [r0, r3]
 800d6ec:	18c0      	adds	r0, r0, r3
 800d6ee:	6020      	str	r0, [r4, #0]
 800d6f0:	2000      	movs	r0, #0
 800d6f2:	e7eb      	b.n	800d6cc <__submore+0x20>
 800d6f4:	6b8e      	ldr	r6, [r1, #56]	@ 0x38
 800d6f6:	0029      	movs	r1, r5
 800d6f8:	0073      	lsls	r3, r6, #1
 800d6fa:	001a      	movs	r2, r3
 800d6fc:	9301      	str	r3, [sp, #4]
 800d6fe:	f7ff fc4b 	bl	800cf98 <_realloc_r>
 800d702:	1e05      	subs	r5, r0, #0
 800d704:	d0e0      	beq.n	800d6c8 <__submore+0x1c>
 800d706:	1987      	adds	r7, r0, r6
 800d708:	0001      	movs	r1, r0
 800d70a:	0032      	movs	r2, r6
 800d70c:	0038      	movs	r0, r7
 800d70e:	f7fe fda6 	bl	800c25e <memcpy>
 800d712:	9b01      	ldr	r3, [sp, #4]
 800d714:	6027      	str	r7, [r4, #0]
 800d716:	6365      	str	r5, [r4, #52]	@ 0x34
 800d718:	63a3      	str	r3, [r4, #56]	@ 0x38
 800d71a:	e7e9      	b.n	800d6f0 <__submore+0x44>
 800d71c:	000003ff 	.word	0x000003ff
 800d720:	000003fe 	.word	0x000003fe
 800d724:	000003fd 	.word	0x000003fd

0800d728 <_strtol_l.isra.0>:
 800d728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d72a:	b085      	sub	sp, #20
 800d72c:	0017      	movs	r7, r2
 800d72e:	001e      	movs	r6, r3
 800d730:	9003      	str	r0, [sp, #12]
 800d732:	9101      	str	r1, [sp, #4]
 800d734:	2b24      	cmp	r3, #36	@ 0x24
 800d736:	d823      	bhi.n	800d780 <_strtol_l.isra.0+0x58>
 800d738:	000c      	movs	r4, r1
 800d73a:	2b01      	cmp	r3, #1
 800d73c:	d020      	beq.n	800d780 <_strtol_l.isra.0+0x58>
 800d73e:	4b3d      	ldr	r3, [pc, #244]	@ (800d834 <_strtol_l.isra.0+0x10c>)
 800d740:	2208      	movs	r2, #8
 800d742:	469c      	mov	ip, r3
 800d744:	0023      	movs	r3, r4
 800d746:	4661      	mov	r1, ip
 800d748:	781d      	ldrb	r5, [r3, #0]
 800d74a:	3401      	adds	r4, #1
 800d74c:	5d48      	ldrb	r0, [r1, r5]
 800d74e:	0001      	movs	r1, r0
 800d750:	4011      	ands	r1, r2
 800d752:	4210      	tst	r0, r2
 800d754:	d1f6      	bne.n	800d744 <_strtol_l.isra.0+0x1c>
 800d756:	2d2d      	cmp	r5, #45	@ 0x2d
 800d758:	d119      	bne.n	800d78e <_strtol_l.isra.0+0x66>
 800d75a:	7825      	ldrb	r5, [r4, #0]
 800d75c:	1c9c      	adds	r4, r3, #2
 800d75e:	2301      	movs	r3, #1
 800d760:	9300      	str	r3, [sp, #0]
 800d762:	2210      	movs	r2, #16
 800d764:	0033      	movs	r3, r6
 800d766:	4393      	bics	r3, r2
 800d768:	d11d      	bne.n	800d7a6 <_strtol_l.isra.0+0x7e>
 800d76a:	2d30      	cmp	r5, #48	@ 0x30
 800d76c:	d115      	bne.n	800d79a <_strtol_l.isra.0+0x72>
 800d76e:	2120      	movs	r1, #32
 800d770:	7823      	ldrb	r3, [r4, #0]
 800d772:	438b      	bics	r3, r1
 800d774:	2b58      	cmp	r3, #88	@ 0x58
 800d776:	d110      	bne.n	800d79a <_strtol_l.isra.0+0x72>
 800d778:	7865      	ldrb	r5, [r4, #1]
 800d77a:	3402      	adds	r4, #2
 800d77c:	2610      	movs	r6, #16
 800d77e:	e012      	b.n	800d7a6 <_strtol_l.isra.0+0x7e>
 800d780:	f7fe fd36 	bl	800c1f0 <__errno>
 800d784:	2316      	movs	r3, #22
 800d786:	6003      	str	r3, [r0, #0]
 800d788:	2000      	movs	r0, #0
 800d78a:	b005      	add	sp, #20
 800d78c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d78e:	9100      	str	r1, [sp, #0]
 800d790:	2d2b      	cmp	r5, #43	@ 0x2b
 800d792:	d1e6      	bne.n	800d762 <_strtol_l.isra.0+0x3a>
 800d794:	7825      	ldrb	r5, [r4, #0]
 800d796:	1c9c      	adds	r4, r3, #2
 800d798:	e7e3      	b.n	800d762 <_strtol_l.isra.0+0x3a>
 800d79a:	2e00      	cmp	r6, #0
 800d79c:	d1ee      	bne.n	800d77c <_strtol_l.isra.0+0x54>
 800d79e:	360a      	adds	r6, #10
 800d7a0:	2d30      	cmp	r5, #48	@ 0x30
 800d7a2:	d100      	bne.n	800d7a6 <_strtol_l.isra.0+0x7e>
 800d7a4:	3e02      	subs	r6, #2
 800d7a6:	4a24      	ldr	r2, [pc, #144]	@ (800d838 <_strtol_l.isra.0+0x110>)
 800d7a8:	9b00      	ldr	r3, [sp, #0]
 800d7aa:	4694      	mov	ip, r2
 800d7ac:	4463      	add	r3, ip
 800d7ae:	0031      	movs	r1, r6
 800d7b0:	0018      	movs	r0, r3
 800d7b2:	9302      	str	r3, [sp, #8]
 800d7b4:	f7f2 fd4a 	bl	800024c <__aeabi_uidivmod>
 800d7b8:	2200      	movs	r2, #0
 800d7ba:	4684      	mov	ip, r0
 800d7bc:	0010      	movs	r0, r2
 800d7be:	002b      	movs	r3, r5
 800d7c0:	3b30      	subs	r3, #48	@ 0x30
 800d7c2:	2b09      	cmp	r3, #9
 800d7c4:	d811      	bhi.n	800d7ea <_strtol_l.isra.0+0xc2>
 800d7c6:	001d      	movs	r5, r3
 800d7c8:	42ae      	cmp	r6, r5
 800d7ca:	dd1d      	ble.n	800d808 <_strtol_l.isra.0+0xe0>
 800d7cc:	1c53      	adds	r3, r2, #1
 800d7ce:	d009      	beq.n	800d7e4 <_strtol_l.isra.0+0xbc>
 800d7d0:	2201      	movs	r2, #1
 800d7d2:	4252      	negs	r2, r2
 800d7d4:	4584      	cmp	ip, r0
 800d7d6:	d305      	bcc.n	800d7e4 <_strtol_l.isra.0+0xbc>
 800d7d8:	d101      	bne.n	800d7de <_strtol_l.isra.0+0xb6>
 800d7da:	42a9      	cmp	r1, r5
 800d7dc:	db11      	blt.n	800d802 <_strtol_l.isra.0+0xda>
 800d7de:	2201      	movs	r2, #1
 800d7e0:	4370      	muls	r0, r6
 800d7e2:	1828      	adds	r0, r5, r0
 800d7e4:	7825      	ldrb	r5, [r4, #0]
 800d7e6:	3401      	adds	r4, #1
 800d7e8:	e7e9      	b.n	800d7be <_strtol_l.isra.0+0x96>
 800d7ea:	002b      	movs	r3, r5
 800d7ec:	3b41      	subs	r3, #65	@ 0x41
 800d7ee:	2b19      	cmp	r3, #25
 800d7f0:	d801      	bhi.n	800d7f6 <_strtol_l.isra.0+0xce>
 800d7f2:	3d37      	subs	r5, #55	@ 0x37
 800d7f4:	e7e8      	b.n	800d7c8 <_strtol_l.isra.0+0xa0>
 800d7f6:	002b      	movs	r3, r5
 800d7f8:	3b61      	subs	r3, #97	@ 0x61
 800d7fa:	2b19      	cmp	r3, #25
 800d7fc:	d804      	bhi.n	800d808 <_strtol_l.isra.0+0xe0>
 800d7fe:	3d57      	subs	r5, #87	@ 0x57
 800d800:	e7e2      	b.n	800d7c8 <_strtol_l.isra.0+0xa0>
 800d802:	2201      	movs	r2, #1
 800d804:	4252      	negs	r2, r2
 800d806:	e7ed      	b.n	800d7e4 <_strtol_l.isra.0+0xbc>
 800d808:	1c53      	adds	r3, r2, #1
 800d80a:	d108      	bne.n	800d81e <_strtol_l.isra.0+0xf6>
 800d80c:	2322      	movs	r3, #34	@ 0x22
 800d80e:	9a03      	ldr	r2, [sp, #12]
 800d810:	9802      	ldr	r0, [sp, #8]
 800d812:	6013      	str	r3, [r2, #0]
 800d814:	2f00      	cmp	r7, #0
 800d816:	d0b8      	beq.n	800d78a <_strtol_l.isra.0+0x62>
 800d818:	1e63      	subs	r3, r4, #1
 800d81a:	9301      	str	r3, [sp, #4]
 800d81c:	e007      	b.n	800d82e <_strtol_l.isra.0+0x106>
 800d81e:	9b00      	ldr	r3, [sp, #0]
 800d820:	2b00      	cmp	r3, #0
 800d822:	d000      	beq.n	800d826 <_strtol_l.isra.0+0xfe>
 800d824:	4240      	negs	r0, r0
 800d826:	2f00      	cmp	r7, #0
 800d828:	d0af      	beq.n	800d78a <_strtol_l.isra.0+0x62>
 800d82a:	2a00      	cmp	r2, #0
 800d82c:	d1f4      	bne.n	800d818 <_strtol_l.isra.0+0xf0>
 800d82e:	9b01      	ldr	r3, [sp, #4]
 800d830:	603b      	str	r3, [r7, #0]
 800d832:	e7aa      	b.n	800d78a <_strtol_l.isra.0+0x62>
 800d834:	0800e359 	.word	0x0800e359
 800d838:	7fffffff 	.word	0x7fffffff

0800d83c <_strtol_r>:
 800d83c:	b510      	push	{r4, lr}
 800d83e:	f7ff ff73 	bl	800d728 <_strtol_l.isra.0>
 800d842:	bd10      	pop	{r4, pc}

0800d844 <_init>:
 800d844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d846:	46c0      	nop			@ (mov r8, r8)
 800d848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d84a:	bc08      	pop	{r3}
 800d84c:	469e      	mov	lr, r3
 800d84e:	4770      	bx	lr

0800d850 <_fini>:
 800d850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d852:	46c0      	nop			@ (mov r8, r8)
 800d854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d856:	bc08      	pop	{r3}
 800d858:	469e      	mov	lr, r3
 800d85a:	4770      	bx	lr
